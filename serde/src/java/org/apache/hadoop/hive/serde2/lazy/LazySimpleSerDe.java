begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * LazySimpleSerDe can be used to read the same data format as   * MetadataTypedColumnsetSerDe and TCTLSeparatedProtocol.  *   * However, LazySimpleSerDe creates Objects in a lazy way, to   * provide better performance.  *   * Also LazySimpleSerDe outputs typed columns instead of treating  * all columns as String like MetadataTypedColumnsetSerDe.  */
end_comment

begin_class
specifier|public
class|class
name|LazySimpleSerDe
implements|implements
name|SerDe
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
specifier|public
specifier|static
name|byte
name|DefaultSeparator
init|=
literal|1
decl_stmt|;
specifier|private
name|byte
name|separator
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|columnTypes
decl_stmt|;
specifier|private
name|ObjectInspector
name|cachedObjectInspector
decl_stmt|;
specifier|private
name|String
name|nullString
decl_stmt|;
specifier|private
name|boolean
name|lastColumnTakesRest
decl_stmt|;
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"["
operator|+
name|separator
operator|+
literal|":"
operator|+
name|columnNames
operator|+
literal|":"
operator|+
name|columnTypes
operator|+
literal|"]"
return|;
block|}
specifier|public
name|LazySimpleSerDe
parameter_list|()
throws|throws
name|SerDeException
block|{
name|separator
operator|=
name|DefaultSeparator
expr_stmt|;
block|}
specifier|private
name|byte
name|getByte
parameter_list|(
name|String
name|altValue
parameter_list|,
name|byte
name|defaultVal
parameter_list|)
block|{
if|if
condition|(
name|altValue
operator|!=
literal|null
operator|&&
name|altValue
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|altValue
argument_list|)
operator|.
name|byteValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
operator|(
name|byte
operator|)
name|altValue
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
return|return
name|defaultVal
return|;
block|}
comment|/**    * Initialize the SerDe given the parameters.    * serialization.format: separator char or byte code (only supports byte-value up to 127)    * columns:  ,-separated column naems     * columns.types:  :-separated column types     */
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// Read the separator
name|String
name|alt_sep
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|)
decl_stmt|;
name|separator
operator|=
name|getByte
argument_list|(
name|alt_sep
argument_list|,
name|DefaultSeparator
argument_list|)
expr_stmt|;
comment|// Read the configuration parameters
name|String
name|columnNameProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
literal|"columns"
argument_list|)
decl_stmt|;
name|String
name|columnTypeProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
literal|"columns.types"
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnNameProperty
operator|==
literal|null
operator|||
name|columnTypeProperty
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": columns or columns.types property not set!"
argument_list|)
throw|;
block|}
name|nullString
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_NULL_FORMAT
argument_list|)
expr_stmt|;
if|if
condition|(
name|nullString
operator|==
literal|null
condition|)
block|{
name|nullString
operator|=
literal|"\\N"
expr_stmt|;
block|}
name|String
name|lastColumnTakesRestString
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_LAST_COLUMN_TAKES_REST
argument_list|)
decl_stmt|;
name|lastColumnTakesRest
operator|=
operator|(
name|lastColumnTakesRestString
operator|!=
literal|null
operator|&&
name|lastColumnTakesRestString
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|)
expr_stmt|;
comment|// Parse the configuration parameters
name|columnNames
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|columnNameProperty
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
name|columnTypes
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|columnTypeProperty
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|columnNames
operator|.
name|size
argument_list|()
operator|!=
name|columnTypes
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": columns has "
operator|+
name|columnNames
operator|.
name|size
argument_list|()
operator|+
literal|" elements while columns.types has "
operator|+
name|columnTypes
operator|.
name|size
argument_list|()
operator|+
literal|" elements!"
argument_list|)
throw|;
block|}
comment|// Create the LazyObject for storing the rows
name|LazyObject
index|[]
name|lazyPrimitives
init|=
operator|new
name|LazyObject
index|[
name|columnNames
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
comment|// Create the ObjectInspectors for the fields
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|columnObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|columnNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnTypes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|primitiveClass
init|=
name|ObjectInspectorUtils
operator|.
name|typeNameToClass
operator|.
name|get
argument_list|(
name|columnTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": type "
operator|+
name|columnTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|+
literal|" not supported!"
argument_list|)
throw|;
block|}
name|columnObjectInspectors
operator|.
name|add
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|primitiveClass
argument_list|)
argument_list|)
expr_stmt|;
name|lazyPrimitives
index|[
name|i
index|]
operator|=
name|LazyUtils
operator|.
name|createLazyPrimitiveClass
argument_list|(
name|primitiveClass
argument_list|)
expr_stmt|;
block|}
name|cachedObjectInspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getLazySimpleStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|columnObjectInspectors
argument_list|)
expr_stmt|;
name|cachedLazyStruct
operator|=
operator|new
name|LazyStruct
argument_list|(
name|lazyPrimitives
argument_list|,
name|separator
argument_list|,
operator|new
name|Text
argument_list|(
name|nullString
argument_list|)
argument_list|,
name|lastColumnTakesRest
argument_list|)
expr_stmt|;
block|}
comment|// The object for storing row data
name|LazyStruct
name|cachedLazyStruct
decl_stmt|;
comment|/**    * Deserialize a row from the Writable to a LazyObject.    */
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|field
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|field
operator|instanceof
name|BytesWritable
condition|)
block|{
name|BytesWritable
name|b
init|=
operator|(
name|BytesWritable
operator|)
name|field
decl_stmt|;
comment|// For backward-compatibility with hadoop 0.17
name|cachedLazyStruct
operator|.
name|setAll
argument_list|(
name|b
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|field
operator|instanceof
name|Text
condition|)
block|{
name|Text
name|t
init|=
operator|(
name|Text
operator|)
name|field
decl_stmt|;
name|cachedLazyStruct
operator|.
name|setAll
argument_list|(
name|t
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": expects either BytesWritable or Text object!"
argument_list|)
throw|;
block|}
return|return
name|cachedLazyStruct
return|;
block|}
comment|/**    * Returns the ObjectInspector for the row.    */
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|cachedObjectInspector
return|;
block|}
comment|/**    * Returns the Writable Class after serialization.    */
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|Text
operator|.
name|class
return|;
block|}
name|Text
name|serializeCache
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
comment|/**    * Serialize a row of data.    */
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// TODO: We can switch the serialization to be directly based on
if|if
condition|(
name|objInspector
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|STRUCT
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" can only serialize struct types, but we got: "
operator|+
name|objInspector
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|separator
argument_list|)
expr_stmt|;
block|}
name|StructField
name|field
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|fieldData
init|=
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|obj
argument_list|,
name|field
argument_list|)
decl_stmt|;
if|if
condition|(
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
comment|// For primitive object, serialize to plain string
name|sb
operator|.
name|append
argument_list|(
name|fieldData
operator|==
literal|null
condition|?
name|nullString
else|:
name|fieldData
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// For complex object, serialize to JSON format
name|sb
operator|.
name|append
argument_list|(
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|fieldData
argument_list|,
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|serializeCache
operator|.
name|set
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|serializeCache
return|;
block|}
block|}
end_class

end_unit

