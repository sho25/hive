begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveBaseChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveBaseCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_class
specifier|public
class|class
name|BaseCharUtils
block|{
specifier|public
specifier|static
name|void
name|validateVarcharParameter
parameter_list|(
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|>
name|HiveVarchar
operator|.
name|MAX_VARCHAR_LENGTH
operator|||
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Varchar length "
operator|+
name|length
operator|+
literal|" out of allowed range [1, "
operator|+
name|HiveVarchar
operator|.
name|MAX_VARCHAR_LENGTH
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|validateCharParameter
parameter_list|(
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|>
name|HiveChar
operator|.
name|MAX_CHAR_LENGTH
operator|||
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Char length "
operator|+
name|length
operator|+
literal|" out of allowed range [1, "
operator|+
name|HiveChar
operator|.
name|MAX_CHAR_LENGTH
operator|+
literal|"]"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|doesWritableMatchTypeParams
parameter_list|(
name|HiveBaseCharWritable
name|writable
parameter_list|,
name|BaseCharTypeInfo
name|typeInfo
parameter_list|)
block|{
return|return
name|typeInfo
operator|.
name|getLength
argument_list|()
operator|>=
name|writable
operator|.
name|getCharacterLength
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|doesPrimitiveMatchTypeParams
parameter_list|(
name|HiveBaseChar
name|value
parameter_list|,
name|BaseCharTypeInfo
name|typeInfo
parameter_list|)
block|{
return|return
name|typeInfo
operator|.
name|getLength
argument_list|()
operator|==
name|value
operator|.
name|getCharacterLength
argument_list|()
return|;
block|}
block|}
end_class

end_unit

