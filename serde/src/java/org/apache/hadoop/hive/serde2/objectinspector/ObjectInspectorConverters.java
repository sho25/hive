begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableBooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableDoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableFloatObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableLongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|SettableShortObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableStringObjectInspector
import|;
end_import

begin_class
specifier|public
class|class
name|ObjectInspectorConverters
block|{
comment|/**    * A converter which will convert objects with one ObjectInspector to another.    */
specifier|public
specifier|static
interface|interface
name|Converter
block|{
specifier|public
name|Object
name|convert
parameter_list|(
name|Object
name|o
parameter_list|)
function_decl|;
block|}
comment|/**    * Returns a converter that converts objects from one OI to another OI.    * The returned (converted) object belongs to this converter, so that it can be reused    * across different calls.    */
specifier|public
specifier|static
name|Converter
name|getConverter
parameter_list|(
name|ObjectInspector
name|inputOI
parameter_list|,
name|ObjectInspector
name|outputOI
parameter_list|)
block|{
switch|switch
condition|(
name|outputOI
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
switch|switch
condition|(
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|outputOI
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
return|return
operator|new
name|PrimitiveObjectInspectorConverter
operator|.
name|BooleanConverter
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inputOI
argument_list|,
operator|(
name|SettableBooleanObjectInspector
operator|)
name|outputOI
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
operator|new
name|PrimitiveObjectInspectorConverter
operator|.
name|ByteConverter
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inputOI
argument_list|,
operator|(
name|SettableByteObjectInspector
operator|)
name|outputOI
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
operator|new
name|PrimitiveObjectInspectorConverter
operator|.
name|ShortConverter
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inputOI
argument_list|,
operator|(
name|SettableShortObjectInspector
operator|)
name|outputOI
argument_list|)
return|;
case|case
name|INT
case|:
return|return
operator|new
name|PrimitiveObjectInspectorConverter
operator|.
name|IntConverter
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inputOI
argument_list|,
operator|(
name|SettableIntObjectInspector
operator|)
name|outputOI
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
operator|new
name|PrimitiveObjectInspectorConverter
operator|.
name|LongConverter
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inputOI
argument_list|,
operator|(
name|SettableLongObjectInspector
operator|)
name|outputOI
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
operator|new
name|PrimitiveObjectInspectorConverter
operator|.
name|FloatConverter
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inputOI
argument_list|,
operator|(
name|SettableFloatObjectInspector
operator|)
name|outputOI
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
operator|new
name|PrimitiveObjectInspectorConverter
operator|.
name|DoubleConverter
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inputOI
argument_list|,
operator|(
name|SettableDoubleObjectInspector
operator|)
name|outputOI
argument_list|)
return|;
case|case
name|STRING
case|:
if|if
condition|(
name|outputOI
operator|instanceof
name|WritableStringObjectInspector
condition|)
block|{
return|return
operator|new
name|PrimitiveObjectInspectorConverter
operator|.
name|TextConverter
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inputOI
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|outputOI
operator|instanceof
name|WritableStringObjectInspector
condition|)
block|{
return|return
operator|new
name|PrimitiveObjectInspectorConverter
operator|.
name|TextConverter
argument_list|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|inputOI
argument_list|)
return|;
block|}
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive internal error: conversion of "
operator|+
name|inputOI
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" to "
operator|+
name|outputOI
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" not supported yet."
argument_list|)
throw|;
block|}
case|case
name|STRUCT
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive internal error: conversion of "
operator|+
name|inputOI
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" to "
operator|+
name|outputOI
operator|.
name|getTypeName
argument_list|()
operator|+
literal|" not supported yet."
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

