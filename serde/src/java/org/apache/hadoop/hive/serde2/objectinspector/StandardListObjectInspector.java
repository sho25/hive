begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * DefaultListObjectInspector works on list data that is stored as a Java List  * or Java Array object.  *   * Always use the ObjectInspectorFactory to create new ObjectInspector objects,  * instead of directly creating an instance of this class.  */
end_comment

begin_class
specifier|public
class|class
name|StandardListObjectInspector
implements|implements
name|SettableListObjectInspector
block|{
name|ObjectInspector
name|listElementObjectInspector
decl_stmt|;
comment|/**    * Call ObjectInspectorFactory.getStandardListObjectInspector instead.    */
specifier|protected
name|StandardListObjectInspector
parameter_list|(
name|ObjectInspector
name|listElementObjectInspector
parameter_list|)
block|{
name|this
operator|.
name|listElementObjectInspector
operator|=
name|listElementObjectInspector
expr_stmt|;
block|}
specifier|public
specifier|final
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|LIST
return|;
block|}
comment|// without data
specifier|public
name|ObjectInspector
name|getListElementObjectInspector
parameter_list|()
block|{
return|return
name|listElementObjectInspector
return|;
block|}
comment|// with data
specifier|public
name|Object
name|getListElement
parameter_list|(
name|Object
name|data
parameter_list|,
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// We support both List<Object> and Object[]
comment|// so we have to do differently.
name|boolean
name|isArray
init|=
operator|!
operator|(
name|data
operator|instanceof
name|List
operator|)
decl_stmt|;
if|if
condition|(
name|isArray
condition|)
block|{
name|Object
index|[]
name|list
init|=
operator|(
name|Object
index|[]
operator|)
name|data
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|list
operator|.
name|length
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|list
index|[
name|index
index|]
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|data
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|list
operator|.
name|get
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
specifier|public
name|int
name|getListLength
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
comment|// We support both List<Object> and Object[]
comment|// so we have to do differently.
name|boolean
name|isArray
init|=
operator|!
operator|(
name|data
operator|instanceof
name|List
operator|)
decl_stmt|;
if|if
condition|(
name|isArray
condition|)
block|{
name|Object
index|[]
name|list
init|=
operator|(
name|Object
index|[]
operator|)
name|data
decl_stmt|;
return|return
name|list
operator|.
name|length
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|data
decl_stmt|;
return|return
name|list
operator|.
name|size
argument_list|()
return|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|?
argument_list|>
name|getList
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// We support both List<Object> and Object[]
comment|// so we have to do differently.
if|if
condition|(
operator|!
operator|(
name|data
operator|instanceof
name|List
operator|)
condition|)
block|{
name|data
operator|=
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
argument_list|(
operator|(
name|Object
index|[]
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|?
argument_list|>
name|list
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|data
decl_stmt|;
return|return
name|list
return|;
block|}
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
operator|.
name|LIST_TYPE_NAME
operator|+
literal|"<"
operator|+
name|listElementObjectInspector
operator|.
name|getTypeName
argument_list|()
operator|+
literal|">"
return|;
block|}
comment|// /////////////////////////////
comment|// SettableListObjectInspector
annotation|@
name|Override
specifier|public
name|Object
name|create
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|a
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|size
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|resize
parameter_list|(
name|Object
name|list
parameter_list|,
name|int
name|newSize
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|a
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|list
decl_stmt|;
while|while
condition|(
name|a
operator|.
name|size
argument_list|()
operator|<
name|newSize
condition|)
block|{
name|a
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|a
operator|.
name|size
argument_list|()
operator|>
name|newSize
condition|)
block|{
name|a
operator|.
name|remove
argument_list|(
name|a
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|set
parameter_list|(
name|Object
name|list
parameter_list|,
name|int
name|index
parameter_list|,
name|Object
name|element
parameter_list|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|a
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|list
decl_stmt|;
name|a
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|element
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
block|}
end_class

end_unit

