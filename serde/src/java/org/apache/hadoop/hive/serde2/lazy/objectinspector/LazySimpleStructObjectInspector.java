begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|BaseStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|StructObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroLazyObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyObjectInspectorParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyObjectInspectorParametersImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * LazySimpleStructObjectInspector works on struct data that is stored in  * LazyStruct.  *  * The names of the struct fields and the internal structure of the struct  * fields are specified in the ctor of the LazySimpleStructObjectInspector.  *  * Always use the ObjectInspectorFactory to create new ObjectInspector objects,  * instead of directly creating an instance of this class.  */
end_comment

begin_class
specifier|public
class|class
name|LazySimpleStructObjectInspector
extends|extends
name|BaseStructObjectInspector
block|{
specifier|private
name|byte
name|separator
decl_stmt|;
specifier|private
name|LazyObjectInspectorParameters
name|lazyParams
decl_stmt|;
specifier|protected
name|LazySimpleStructObjectInspector
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * Call ObjectInspectorFactory.getLazySimpleStructObjectInspector instead.    */
annotation|@
name|Deprecated
specifier|protected
name|LazySimpleStructObjectInspector
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|structFieldNames
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|structFieldObjectInspectors
parameter_list|,
name|byte
name|separator
parameter_list|,
name|Text
name|nullSequence
parameter_list|,
name|boolean
name|lastColumnTakesRest
parameter_list|,
name|boolean
name|escaped
parameter_list|,
name|byte
name|escapeChar
parameter_list|)
block|{
name|init
argument_list|(
name|structFieldNames
argument_list|,
name|structFieldObjectInspectors
argument_list|,
literal|null
argument_list|,
name|separator
argument_list|,
name|nullSequence
argument_list|,
name|lastColumnTakesRest
argument_list|,
name|escaped
argument_list|,
name|escapeChar
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
specifier|public
name|LazySimpleStructObjectInspector
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|structFieldNames
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|structFieldObjectInspectors
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|structFieldComments
parameter_list|,
name|byte
name|separator
parameter_list|,
name|Text
name|nullSequence
parameter_list|,
name|boolean
name|lastColumnTakesRest
parameter_list|,
name|boolean
name|escaped
parameter_list|,
name|byte
name|escapeChar
parameter_list|)
block|{
name|init
argument_list|(
name|structFieldNames
argument_list|,
name|structFieldObjectInspectors
argument_list|,
name|structFieldComments
argument_list|,
name|separator
argument_list|,
name|nullSequence
argument_list|,
name|lastColumnTakesRest
argument_list|,
name|escaped
argument_list|,
name|escapeChar
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LazySimpleStructObjectInspector
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|structFieldNames
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|structFieldObjectInspectors
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|structFieldComments
parameter_list|,
name|byte
name|separator
parameter_list|,
name|LazyObjectInspectorParameters
name|lazyParams
parameter_list|)
block|{
name|init
argument_list|(
name|structFieldNames
argument_list|,
name|structFieldObjectInspectors
argument_list|,
name|structFieldComments
argument_list|,
name|separator
argument_list|,
name|lazyParams
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|structFieldNames
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|structFieldObjectInspectors
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|structFieldComments
parameter_list|,
name|byte
name|separator
parameter_list|,
name|Text
name|nullSequence
parameter_list|,
name|boolean
name|lastColumnTakesRest
parameter_list|,
name|boolean
name|escaped
parameter_list|,
name|byte
name|escapeChar
parameter_list|)
block|{
name|LazyObjectInspectorParameters
name|lazyParams
init|=
operator|new
name|LazyObjectInspectorParametersImpl
argument_list|(
name|escaped
argument_list|,
name|escapeChar
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|nullSequence
argument_list|,
name|lastColumnTakesRest
argument_list|)
decl_stmt|;
name|init
argument_list|(
name|structFieldNames
argument_list|,
name|structFieldObjectInspectors
argument_list|,
name|structFieldComments
argument_list|,
name|separator
argument_list|,
name|lazyParams
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|structFieldNames
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|structFieldObjectInspectors
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|structFieldComments
parameter_list|,
name|byte
name|separator
parameter_list|,
name|LazyObjectInspectorParameters
name|lazyParams
parameter_list|)
block|{
name|init
argument_list|(
name|structFieldNames
argument_list|,
name|structFieldObjectInspectors
argument_list|,
name|structFieldComments
argument_list|)
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
name|this
operator|.
name|lazyParams
operator|=
name|lazyParams
expr_stmt|;
block|}
comment|// With Data
annotation|@
name|Override
specifier|public
name|Object
name|getStructFieldData
parameter_list|(
name|Object
name|data
parameter_list|,
name|StructField
name|fieldRef
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|StructObject
name|struct
init|=
operator|(
name|StructObject
operator|)
name|data
decl_stmt|;
name|MyField
name|f
init|=
operator|(
name|MyField
operator|)
name|fieldRef
decl_stmt|;
name|int
name|fieldID
init|=
name|f
operator|.
name|getFieldID
argument_list|()
decl_stmt|;
assert|assert
operator|(
name|fieldID
operator|>=
literal|0
operator|&&
name|fieldID
operator|<
name|fields
operator|.
name|size
argument_list|()
operator|)
assert|;
name|ObjectInspector
name|oi
init|=
name|f
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|oi
operator|instanceof
name|AvroLazyObjectInspector
condition|)
block|{
return|return
operator|(
operator|(
name|AvroLazyObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getStructFieldData
argument_list|(
name|data
argument_list|,
name|fieldRef
argument_list|)
return|;
block|}
if|if
condition|(
name|oi
operator|instanceof
name|MapObjectInspector
condition|)
block|{
name|ObjectInspector
name|valueOI
init|=
operator|(
operator|(
name|MapObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|valueOI
operator|instanceof
name|AvroLazyObjectInspector
condition|)
block|{
return|return
operator|(
operator|(
name|AvroLazyObjectInspector
operator|)
name|valueOI
operator|)
operator|.
name|getStructFieldData
argument_list|(
name|data
argument_list|,
name|fieldRef
argument_list|)
return|;
block|}
block|}
return|return
name|struct
operator|.
name|getField
argument_list|(
name|fieldID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getStructFieldsDataAsList
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Iterate over all the fields picking up the nested structs within them
name|List
argument_list|<
name|Object
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MyField
name|myField
range|:
name|fields
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|getStructFieldData
argument_list|(
name|data
argument_list|,
name|myField
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|// For LazyStruct
specifier|public
name|byte
name|getSeparator
parameter_list|()
block|{
return|return
name|separator
return|;
block|}
specifier|public
name|Text
name|getNullSequence
parameter_list|()
block|{
return|return
name|lazyParams
operator|.
name|getNullSequence
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|getLastColumnTakesRest
parameter_list|()
block|{
return|return
name|lazyParams
operator|.
name|isLastColumnTakesRest
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEscaped
parameter_list|()
block|{
return|return
name|lazyParams
operator|.
name|isEscaped
argument_list|()
return|;
block|}
specifier|public
name|byte
name|getEscapeChar
parameter_list|()
block|{
return|return
name|lazyParams
operator|.
name|getEscapeChar
argument_list|()
return|;
block|}
specifier|public
name|LazyObjectInspectorParameters
name|getLazyParams
parameter_list|()
block|{
return|return
name|lazyParams
return|;
block|}
block|}
end_class

end_unit

