begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|ImmutablePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|TimestampTZ
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|BaseCharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TimestampLocalTZTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|TimestampParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|JsonNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|ObjectMapper
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|JsonNodeType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|databind
operator|.
name|node
operator|.
name|TextNode
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/**  * This class converts JSON strings into Java or Hive Primitive objects.  *  * Support types are:<br/>  *<br/>  *<table border="1">  *<tr>  *<th>JSON Type</th>  *<th>Java Type</th>  *<th>Notes</th>  *</tr>  *<tr>  *<td>Object</td>  *<td>java.util.List</td>  *<td>Each element may be different type  *</tr>  *<tr>  *<td>Array</td>  *<td>java.util.List</td>  *<td>Each element is same type</td>  *</tr>  *<tr>  *<td>Map</td>  *<td>java.util.Map</td>  *<td>Keys must be same primitive type; every value is the same type</td>  *</tr>  *</table>  */
end_comment

begin_class
specifier|public
class|class
name|HiveJsonReader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveJsonReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|Pair
argument_list|<
name|StructObjectInspector
argument_list|,
name|String
argument_list|>
argument_list|,
name|StructField
argument_list|>
name|discoveredFields
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|Pair
argument_list|<
name|StructObjectInspector
argument_list|,
name|String
argument_list|>
argument_list|>
name|discoveredUnknownFields
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|EnumSet
argument_list|<
name|Feature
argument_list|>
name|features
init|=
name|EnumSet
operator|.
name|noneOf
argument_list|(
name|Feature
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ObjectMapper
name|objectMapper
decl_stmt|;
specifier|private
specifier|final
name|TimestampParser
name|tsParser
decl_stmt|;
specifier|private
name|BinaryEncoding
name|binaryEncoding
decl_stmt|;
specifier|private
specifier|final
name|ObjectInspector
name|oi
decl_stmt|;
comment|/**    * Enumeration that defines all on/off features for this reader.    *<ul>    *<li>{@link #COL_INDEX_PARSING}</li>    *<li>{@link #PRIMITIVE_TO_WRITABLE}</li>    *<li>{@link #IGNORE_UKNOWN_FIELDS}</li>    *</ul>    */
specifier|public
enum|enum
name|Feature
block|{
comment|/**      * Enables an optimization to look up each JSON field based on its index in      * the Hive schema.      */
name|COL_INDEX_PARSING
block|,
comment|/**      * If this feature is enabled, when a JSON node is parsed, its value will be      * returned as a Hadoop Writable object. Otherwise, the Java native value is      * returned.      */
name|PRIMITIVE_TO_WRITABLE
block|,
comment|/**      * If the JSON object being parsed includes a field that is not included in      * the Hive schema, enabling this feature will cause the JSON reader to      * produce a log warnings. If this feature is disabled, an Exception will be      * thrown and parsing will stop.      */
name|IGNORE_UKNOWN_FIELDS
block|}
comment|/**    * Constructor with default the Hive default timestamp parser.    *    * @param oi ObjectInspector for all the fields in the JSON object    */
specifier|public
name|HiveJsonReader
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
name|this
argument_list|(
name|oi
argument_list|,
operator|new
name|TimestampParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Constructor with default the Hive default timestamp parser.    *    * @param oi ObjectInspector info for all the fields in the JSON object    * @param tsParser Custom timestamp parser    */
specifier|public
name|HiveJsonReader
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|TimestampParser
name|tsParser
parameter_list|)
block|{
name|this
operator|.
name|binaryEncoding
operator|=
name|BinaryEncoding
operator|.
name|BASE64
expr_stmt|;
name|this
operator|.
name|tsParser
operator|=
name|tsParser
expr_stmt|;
name|this
operator|.
name|oi
operator|=
name|oi
expr_stmt|;
name|this
operator|.
name|objectMapper
operator|=
operator|new
name|ObjectMapper
argument_list|()
expr_stmt|;
block|}
comment|/**    * Parse text containing a complete JSON object.    *    * @param text The text to parse    * @return A List of Objects, one for each field in the JSON object    * @throws IOException Unable to parse the JSON text    * @throws SerDeException The SerDe is not configured correctly    */
specifier|public
name|Object
name|parseStruct
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|text
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|oi
operator|!=
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|JsonNode
name|rootNode
init|=
name|this
operator|.
name|objectMapper
operator|.
name|reader
argument_list|()
operator|.
name|readTree
argument_list|(
name|text
argument_list|)
decl_stmt|;
return|return
name|visitNode
argument_list|(
name|rootNode
argument_list|,
name|this
operator|.
name|oi
argument_list|)
return|;
block|}
comment|/**    * Parse text containing a complete JSON object.    *    * @param in The InputStream to read the text from    * @return A List of Objects, one for each field in the JSON object    * @throws IOException Unable to parse the JSON text    * @throws SerDeException The SerDe is not configured correctly    */
specifier|public
name|Object
name|parseStruct
parameter_list|(
specifier|final
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
name|Preconditions
operator|.
name|checkNotNull
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|this
operator|.
name|oi
operator|!=
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|JsonNode
name|rootNode
init|=
name|this
operator|.
name|objectMapper
operator|.
name|reader
argument_list|()
operator|.
name|readTree
argument_list|(
name|in
argument_list|)
decl_stmt|;
return|return
name|visitNode
argument_list|(
name|rootNode
argument_list|,
name|this
operator|.
name|oi
argument_list|)
return|;
block|}
comment|/**    * Visit a node and parse it based on the provided ObjectInspector.    *    * @param rootNode The root node to process    * @param oi The ObjectInspector to use    * @return The value in this node. Return value may be null, primitive, and    *         may be a complex type if nested.    * @throws SerDeException The SerDe is not configured correctly    */
specifier|private
name|Object
name|visitNode
parameter_list|(
specifier|final
name|JsonNode
name|rootNode
parameter_list|,
specifier|final
name|ObjectInspector
name|oi
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
operator|!
name|rootNode
operator|.
name|isNull
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
specifier|final
name|Object
name|value
init|=
name|visitLeafNode
argument_list|(
name|rootNode
argument_list|,
name|oi
argument_list|)
decl_stmt|;
return|return
name|optionallyWrapWritable
argument_list|(
name|value
argument_list|,
name|oi
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
name|visitArrayNode
argument_list|(
name|rootNode
argument_list|,
name|oi
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
name|visitStructNode
argument_list|(
name|rootNode
argument_list|,
name|oi
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
name|visitMapNode
argument_list|(
name|rootNode
argument_list|,
name|oi
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Parsing of: "
operator|+
name|oi
operator|.
name|getCategory
argument_list|()
operator|+
literal|" is not supported"
argument_list|)
throw|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * The typical usage of this SerDe requires that it return Hadoop Writable    * objects. However, some uses of this SerDe want the return values to be Java    * primitive objects. This SerDe works explicitly in Java primitive objects    * and will wrap the objects in Writable containers if required.    *    * @param value The Java primitive object to wrap    * @param oi The ObjectInspector provides the type to wrap into    * @return A Hadoop Writable if required; otherwise the object itself    */
specifier|private
name|Object
name|optionallyWrapWritable
parameter_list|(
specifier|final
name|Object
name|value
parameter_list|,
specifier|final
name|ObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isEnabled
argument_list|(
name|Feature
operator|.
name|PRIMITIVE_TO_WRITABLE
argument_list|)
condition|)
block|{
return|return
name|value
return|;
block|}
specifier|final
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
specifier|final
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|poi
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|typeInfo
argument_list|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|value
argument_list|)
return|;
block|}
comment|/**    * Visit a node if it is expected to be a Map (a.k.a. JSON Object)    *    * @param rootNode The node pointing at the JSON object    * @param oi The ObjectInspector to parse the Map (must be a    *          MapObjectInspector)    * @return A Java Map containing the contents of the JSON map    * @throws SerDeException The SerDe is not configured correctly    */
specifier|private
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|visitMapNode
parameter_list|(
specifier|final
name|JsonNode
name|rootNode
parameter_list|,
specifier|final
name|ObjectInspector
name|oi
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|JsonNodeType
operator|.
name|OBJECT
operator|==
name|rootNode
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|ret
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ObjectInspector
name|mapKeyInspector
init|=
operator|(
operator|(
name|MapObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
specifier|final
name|ObjectInspector
name|mapValueInspector
init|=
operator|(
operator|(
name|MapObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|mapKeyInspector
operator|instanceof
name|PrimitiveObjectInspector
operator|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Map key must be a primitive type"
argument_list|)
throw|;
block|}
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|it
init|=
name|rootNode
operator|.
name|fields
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|field
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|key
init|=
name|visitNode
argument_list|(
operator|new
name|TextNode
argument_list|(
name|field
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|mapKeyInspector
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|val
init|=
name|visitNode
argument_list|(
name|field
operator|.
name|getValue
argument_list|()
argument_list|,
name|mapValueInspector
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Visit a node if it is expected to be a Struct data type (a.k.a. JSON    * Object)    *    * @param rootNode The node pointing at the JSON object    * @param oi The ObjectInspector to parse the Map (must be a    *          StructObjectInspector)    * @return A primitive array of Objects, each element is an element of the    *         struct    * @throws SerDeException The SerDe is not configured correctly    */
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|visitStructNode
parameter_list|(
specifier|final
name|JsonNode
name|rootNode
parameter_list|,
specifier|final
name|ObjectInspector
name|oi
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|JsonNodeType
operator|.
name|OBJECT
operator|==
name|rootNode
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|StructObjectInspector
name|structInspector
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|structInspector
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|ret
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[
name|fieldCount
index|]
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
argument_list|>
name|it
init|=
name|rootNode
operator|.
name|fields
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonNode
argument_list|>
name|field
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|String
name|fieldName
init|=
name|field
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|JsonNode
name|childNode
init|=
name|field
operator|.
name|getValue
argument_list|()
decl_stmt|;
specifier|final
name|StructField
name|structField
init|=
name|getStructField
argument_list|(
name|structInspector
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
comment|// If the struct field is null it is because there is a field defined in
comment|// the JSON object that was not defined in the table definition. Ignore.
if|if
condition|(
name|structField
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Object
name|childValue
init|=
name|visitNode
argument_list|(
name|childNode
argument_list|,
name|structField
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|set
argument_list|(
name|structField
operator|.
name|getFieldID
argument_list|()
argument_list|,
name|childValue
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Visit a node if it is expected to be a JSON Array data type (a.k.a. Hive    * Array type)    *    * @param rootNode The node pointing at the JSON object    * @param oi The ObjectInspector to parse the List (must be a    *          ListObjectInspector)    * @return A Java List of Objects, each element is an element of the array    * @throws SerDeException The SerDe is not configured correctly    */
specifier|private
name|List
argument_list|<
name|Object
argument_list|>
name|visitArrayNode
parameter_list|(
specifier|final
name|JsonNode
name|rootNode
parameter_list|,
specifier|final
name|ObjectInspector
name|oi
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|JsonNodeType
operator|.
name|ARRAY
operator|==
name|rootNode
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ObjectInspector
name|loi
init|=
operator|(
operator|(
name|ListObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Object
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|rootNode
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|JsonNode
argument_list|>
name|it
init|=
name|rootNode
operator|.
name|elements
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|JsonNode
name|element
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|ret
operator|.
name|add
argument_list|(
name|visitNode
argument_list|(
name|element
argument_list|,
name|loi
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Visit a node if it is expected to be a primitive value (JSON leaf node).    *    * @param leafNode The node pointing at the JSON object    * @param oi The ObjectInspector to parse the value (must be a    *          PrimitiveObjectInspector)    * @return A Java primitive Object    * @throws SerDeException The SerDe is not configured correctly    */
specifier|private
name|Object
name|visitLeafNode
parameter_list|(
specifier|final
name|JsonNode
name|leafNode
parameter_list|,
specifier|final
name|ObjectInspector
name|oi
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|leafNode
operator|.
name|getNodeType
argument_list|()
operator|!=
name|JsonNodeType
operator|.
name|OBJECT
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkArgument
argument_list|(
name|leafNode
operator|.
name|getNodeType
argument_list|()
operator|!=
name|JsonNodeType
operator|.
name|ARRAY
argument_list|)
expr_stmt|;
specifier|final
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
specifier|final
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|poi
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|typeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|INT
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|leafNode
operator|.
name|asInt
argument_list|()
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|leafNode
operator|.
name|asInt
argument_list|()
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
name|leafNode
operator|.
name|asInt
argument_list|()
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|leafNode
operator|.
name|asLong
argument_list|()
argument_list|)
return|;
case|case
name|BOOLEAN
case|:
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|leafNode
operator|.
name|asBoolean
argument_list|()
argument_list|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Float
operator|.
name|valueOf
argument_list|(
operator|(
name|float
operator|)
name|leafNode
operator|.
name|asDouble
argument_list|()
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|leafNode
operator|.
name|asDouble
argument_list|()
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
name|leafNode
operator|.
name|asText
argument_list|()
return|;
case|case
name|BINARY
case|:
return|return
name|getByteValue
argument_list|(
name|leafNode
argument_list|)
return|;
case|case
name|DATE
case|:
return|return
name|Date
operator|.
name|valueOf
argument_list|(
name|leafNode
operator|.
name|asText
argument_list|()
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|tsParser
operator|.
name|parseTimestamp
argument_list|(
name|leafNode
operator|.
name|asText
argument_list|()
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
name|HiveDecimal
operator|.
name|create
argument_list|(
name|leafNode
operator|.
name|asText
argument_list|()
argument_list|)
return|;
case|case
name|TIMESTAMPLOCALTZ
case|:
specifier|final
name|Timestamp
name|ts
init|=
name|tsParser
operator|.
name|parseTimestamp
argument_list|(
name|leafNode
operator|.
name|asText
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ZoneId
name|zid
init|=
operator|(
operator|(
name|TimestampLocalTZTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|timeZone
argument_list|()
decl_stmt|;
specifier|final
name|TimestampTZ
name|tstz
init|=
operator|new
name|TimestampTZ
argument_list|()
decl_stmt|;
name|tstz
operator|.
name|set
argument_list|(
name|ts
operator|.
name|toEpochSecond
argument_list|()
argument_list|,
name|ts
operator|.
name|getNanos
argument_list|()
argument_list|,
name|zid
argument_list|)
expr_stmt|;
return|return
name|tstz
return|;
case|case
name|VARCHAR
case|:
return|return
operator|new
name|HiveVarchar
argument_list|(
name|leafNode
operator|.
name|asText
argument_list|()
argument_list|,
operator|(
operator|(
name|BaseCharTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
operator|new
name|HiveChar
argument_list|(
name|leafNode
operator|.
name|asText
argument_list|()
argument_list|,
operator|(
operator|(
name|BaseCharTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Could not convert from string to type: "
operator|+
name|typeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * A user may configure the encoding for binary data represented as text    * within a JSON object. This method applies that encoding to the text.    *    * @param binaryNode JSON Node containing the binary data    * @return A byte array with the binary data    * @throws SerDeException The SerDe is not configured correctly    */
specifier|private
name|byte
index|[]
name|getByteValue
parameter_list|(
specifier|final
name|JsonNode
name|binaryNode
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
switch|switch
condition|(
name|this
operator|.
name|binaryEncoding
condition|)
block|{
case|case
name|RAWSTRING
case|:
specifier|final
name|String
name|byteText
init|=
name|binaryNode
operator|.
name|textValue
argument_list|()
decl_stmt|;
return|return
name|byteText
operator|.
name|getBytes
argument_list|(
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
return|;
case|case
name|BASE64
case|:
return|return
name|binaryNode
operator|.
name|binaryValue
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"No such binary encoding: "
operator|+
name|this
operator|.
name|binaryEncoding
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Error generating JSON binary type from record."
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Matches the JSON object's field name with the Hive data type.    *    * @param oi The ObjectInsepctor to lookup the matching in    * @param fieldName The name of the field parsed from the JSON text    * @return The meta data of regarding this field    * @throws SerDeException The SerDe is not configured correctly    */
specifier|private
name|StructField
name|getStructField
parameter_list|(
specifier|final
name|StructObjectInspector
name|oi
parameter_list|,
specifier|final
name|String
name|fieldName
parameter_list|)
throws|throws
name|SerDeException
block|{
specifier|final
name|Pair
argument_list|<
name|StructObjectInspector
argument_list|,
name|String
argument_list|>
name|pair
init|=
name|ImmutablePair
operator|.
name|of
argument_list|(
name|oi
argument_list|,
name|fieldName
argument_list|)
decl_stmt|;
comment|// Ignore the field if it has been ignored before
if|if
condition|(
name|this
operator|.
name|discoveredUnknownFields
operator|.
name|contains
argument_list|(
name|pair
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Return from cache if the field has already been discovered
name|StructField
name|structField
init|=
name|this
operator|.
name|discoveredFields
operator|.
name|get
argument_list|(
name|pair
argument_list|)
decl_stmt|;
if|if
condition|(
name|structField
operator|!=
literal|null
condition|)
block|{
return|return
name|structField
return|;
block|}
comment|// Otherwise attempt to discover the field
if|if
condition|(
name|isEnabled
argument_list|(
name|Feature
operator|.
name|COL_INDEX_PARSING
argument_list|)
condition|)
block|{
name|int
name|colIndex
init|=
name|getColIndex
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|colIndex
operator|>=
literal|0
condition|)
block|{
name|structField
operator|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
name|colIndex
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|structField
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|structField
operator|=
name|oi
operator|.
name|getStructFieldRef
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// No such field
block|}
block|}
if|if
condition|(
name|structField
operator|!=
literal|null
condition|)
block|{
comment|// cache it for next time
name|this
operator|.
name|discoveredFields
operator|.
name|put
argument_list|(
name|pair
argument_list|,
name|structField
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Tried everything and did not discover this field
if|if
condition|(
name|isEnabled
argument_list|(
name|Feature
operator|.
name|IGNORE_UKNOWN_FIELDS
argument_list|)
operator|&&
name|this
operator|.
name|discoveredUnknownFields
operator|.
name|add
argument_list|(
name|pair
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Discovered unknown field: {}. Ignoring."
argument_list|,
name|fieldName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Field found in JSON does not match table definition: "
operator|+
name|fieldName
argument_list|)
throw|;
block|}
block|}
return|return
name|structField
return|;
block|}
specifier|private
specifier|final
name|Pattern
name|internalPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^_col([0-9]+)$"
argument_list|)
decl_stmt|;
comment|/**    * Look up a column based on its index.    *    * @param internalName The name of the column    * @return The index of the field or -1 if the field name does not contain its    *         index number too    */
specifier|private
name|int
name|getColIndex
parameter_list|(
specifier|final
name|String
name|internalName
parameter_list|)
block|{
comment|// The above line should have been all the implementation that
comment|// we need, but due to a bug in that impl which recognizes
comment|// only single-digit columns, we need another impl here.
specifier|final
name|Matcher
name|m
init|=
name|internalPattern
operator|.
name|matcher
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
return|return
name|m
operator|.
name|matches
argument_list|()
condition|?
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
else|:
operator|-
literal|1
return|;
block|}
specifier|public
name|void
name|enable
parameter_list|(
name|Feature
name|feature
parameter_list|)
block|{
name|this
operator|.
name|features
operator|.
name|add
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|disable
parameter_list|(
name|Feature
name|feature
parameter_list|)
block|{
name|this
operator|.
name|features
operator|.
name|remove
argument_list|(
name|feature
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Set
argument_list|<
name|Feature
argument_list|>
name|getFeatures
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|unmodifiableSet
argument_list|(
name|this
operator|.
name|features
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isEnabled
parameter_list|(
name|Feature
name|feature
parameter_list|)
block|{
return|return
name|this
operator|.
name|features
operator|.
name|contains
argument_list|(
name|feature
argument_list|)
return|;
block|}
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|oi
return|;
block|}
specifier|public
name|BinaryEncoding
name|getBinaryEncodingType
parameter_list|()
block|{
return|return
name|binaryEncoding
return|;
block|}
specifier|public
name|void
name|setBinaryEncoding
parameter_list|(
name|BinaryEncoding
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|binaryEncoding
operator|=
name|encoding
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"HiveJsonReader [features="
operator|+
name|features
operator|+
literal|", tsParser="
operator|+
name|tsParser
operator|+
literal|", binaryEncoding="
operator|+
name|binaryEncoding
operator|+
literal|"]"
return|;
block|}
block|}
end_class

end_unit

