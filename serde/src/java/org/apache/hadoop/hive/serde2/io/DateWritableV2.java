begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * DateWritableV2  * Writable equivalent of java.sql.Date.  *  * Dates are of the format  *    YYYY-MM-DD  *  */
end_comment

begin_class
specifier|public
class|class
name|DateWritableV2
implements|implements
name|WritableComparable
argument_list|<
name|DateWritableV2
argument_list|>
block|{
specifier|private
name|Date
name|date
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
comment|/* Constructors */
specifier|public
name|DateWritableV2
parameter_list|()
block|{   }
specifier|public
name|DateWritableV2
parameter_list|(
name|DateWritableV2
name|d
parameter_list|)
block|{
name|set
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DateWritableV2
parameter_list|(
name|Date
name|d
parameter_list|)
block|{
name|set
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DateWritableV2
parameter_list|(
name|int
name|d
parameter_list|)
block|{
name|set
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the DateWritableV2 based on the days since epoch date.    * @param d integer value representing days since epoch date    */
specifier|public
name|void
name|set
parameter_list|(
name|int
name|d
parameter_list|)
block|{
name|date
operator|=
name|Date
operator|.
name|ofEpochDay
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the DateWritableV2 based on the year/month/day of the date in the local timezone.    * @param d Date value    */
specifier|public
name|void
name|set
parameter_list|(
name|Date
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
name|date
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
return|return;
block|}
name|set
argument_list|(
name|d
operator|.
name|toEpochDay
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|DateWritableV2
name|d
parameter_list|)
block|{
name|set
argument_list|(
name|d
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return Date value corresponding to the date in the local time zone    */
specifier|public
name|Date
name|get
parameter_list|()
block|{
return|return
name|date
return|;
block|}
specifier|public
name|int
name|getDays
parameter_list|()
block|{
return|return
name|date
operator|.
name|toEpochDay
argument_list|()
return|;
block|}
comment|/**    *    * @return time in seconds corresponding to this DateWritableV2    */
specifier|public
name|long
name|getTimeInSeconds
parameter_list|()
block|{
return|return
name|date
operator|.
name|toEpochSecond
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Date
name|timeToDate
parameter_list|(
name|long
name|seconds
parameter_list|)
block|{
return|return
name|Date
operator|.
name|ofEpochMilli
argument_list|(
name|seconds
operator|*
literal|1000
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|long
name|daysToMillis
parameter_list|(
name|int
name|days
parameter_list|)
block|{
return|return
name|Date
operator|.
name|ofEpochDay
argument_list|(
name|days
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|millisToDays
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
return|return
name|Date
operator|.
name|ofEpochMilli
argument_list|(
name|millis
argument_list|)
operator|.
name|toEpochDay
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|int
name|dateToDays
parameter_list|(
name|Date
name|d
parameter_list|)
block|{
return|return
name|d
operator|.
name|toEpochDay
argument_list|()
return|;
block|}
annotation|@
name|Deprecated
specifier|public
specifier|static
name|int
name|dateToDays
parameter_list|(
name|java
operator|.
name|sql
operator|.
name|Date
name|d
parameter_list|)
block|{
return|return
name|Date
operator|.
name|ofEpochMilli
argument_list|(
name|d
operator|.
name|getTime
argument_list|()
argument_list|)
operator|.
name|toEpochDay
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|date
operator|.
name|setTimeInDays
argument_list|(
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
operator|(
name|int
operator|)
name|date
operator|.
name|toEpochDay
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|DateWritableV2
name|d
parameter_list|)
block|{
return|return
name|date
operator|.
name|compareTo
argument_list|(
name|d
operator|.
name|date
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|o
operator|instanceof
name|DateWritableV2
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|compareTo
argument_list|(
operator|(
name|DateWritableV2
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|date
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|date
operator|.
name|toEpochDay
argument_list|()
return|;
block|}
block|}
end_class

end_unit

