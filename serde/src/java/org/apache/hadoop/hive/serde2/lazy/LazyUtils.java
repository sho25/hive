begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|LazyUtils
block|{
comment|/**    * Returns the digit represented by character b.    * @param b  The ascii code of the character    * @param radix  The radix    * @return  -1 if it's invalid    */
specifier|public
specifier|static
name|int
name|digit
parameter_list|(
name|int
name|b
parameter_list|,
name|int
name|radix
parameter_list|)
block|{
name|int
name|r
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|b
operator|>=
literal|'0'
operator|&&
name|b
operator|<=
literal|'9'
condition|)
block|{
name|r
operator|=
name|b
operator|-
literal|'0'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|>=
literal|'A'
operator|&&
name|b
operator|<=
literal|'Z'
condition|)
block|{
name|r
operator|=
name|b
operator|-
literal|'A'
operator|+
literal|10
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|>=
literal|'a'
operator|&&
name|b
operator|<=
literal|'z'
condition|)
block|{
name|r
operator|=
name|b
operator|-
literal|'a'
operator|+
literal|10
expr_stmt|;
block|}
if|if
condition|(
name|r
operator|>=
name|radix
condition|)
name|r
operator|=
operator|-
literal|1
expr_stmt|;
return|return
name|r
return|;
block|}
comment|/**    * Returns -1 if the first byte sequence is lexicographically less than the second;    * returns +1 if the second byte sequence is lexicographically less than the first;    * otherwise return 0.    */
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|byte
index|[]
name|b1
parameter_list|,
name|int
name|start1
parameter_list|,
name|int
name|length1
parameter_list|,
name|byte
index|[]
name|b2
parameter_list|,
name|int
name|start2
parameter_list|,
name|int
name|length2
parameter_list|)
block|{
name|int
name|min
init|=
name|Math
operator|.
name|min
argument_list|(
name|length1
argument_list|,
name|length2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|min
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|b1
index|[
name|start1
operator|+
name|i
index|]
operator|==
name|b2
index|[
name|start2
operator|+
name|i
index|]
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|b1
index|[
name|start1
operator|+
name|i
index|]
operator|<
name|b2
index|[
name|start2
operator|+
name|i
index|]
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
literal|1
return|;
block|}
block|}
if|if
condition|(
name|length1
operator|<
name|length2
condition|)
return|return
operator|-
literal|1
return|;
if|if
condition|(
name|length1
operator|>
name|length2
condition|)
return|return
literal|1
return|;
return|return
literal|0
return|;
block|}
comment|/**    * Convert a UTF-8 byte array to String.    * @param bytes  The byte[] containing the UTF-8 String.    * @param start  The start position inside the bytes.    * @param length The length of the data, starting from "start"    * @return The unicode String    */
specifier|public
specifier|static
name|String
name|convertToString
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
try|try
block|{
return|return
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

