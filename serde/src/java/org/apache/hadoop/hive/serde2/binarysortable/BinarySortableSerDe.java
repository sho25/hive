begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardUnionObjectInspector
operator|.
name|StandardUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|FloatObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ShortObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * BinarySortableSerDe can be used to write data in a way that the data can be  * compared byte-by-byte with the same order.  *   * The data format: NULL: a single byte \0 NON-NULL Primitives: ALWAYS prepend a  * single byte \1, and then: Boolean: FALSE = \1, TRUE = \2 Byte: flip the  * sign-bit to make sure negative comes before positive Short: flip the sign-bit  * to make sure negative comes before positive Int: flip the sign-bit to make  * sure negative comes before positive Long: flip the sign-bit to make sure  * negative comes before positive Double: flip the sign-bit for positive double,  * and all bits for negative double values String: NULL-terminated UTF-8 string,  * with NULL escaped to \1 \1, and \1 escaped to \1 \2 NON-NULL Complex Types:  * ALWAYS prepend a single byte \1, and then: Struct: one field by one field.  * List: \1 followed by each element, and \0 to terminate Map: \1 followed by  * each key and then each value, and \0 to terminate  *   * This SerDe takes an additional parameter SERIALIZATION_SORT_ORDER which is a  * string containing only "+" and "-". The length of the string should equal to  * the number of fields in the top-level struct for serialization. "+" means the  * field should be sorted ascendingly, and "-" means descendingly. The sub  * fields in the same top-level field will have the same sort order.  *   */
end_comment

begin_class
specifier|public
class|class
name|BinarySortableSerDe
implements|implements
name|SerDe
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BinarySortableSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
decl_stmt|;
name|TypeInfo
name|rowTypeInfo
decl_stmt|;
name|StructObjectInspector
name|rowObjectInspector
decl_stmt|;
name|boolean
index|[]
name|columnSortOrderIsDesc
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// Get column names and sort order
name|String
name|columnNameProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
name|String
name|columnTypeProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|columnNameProperty
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|columnNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnNames
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|columnNameProperty
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|columnTypeProperty
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|columnTypes
operator|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|columnTypes
operator|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|columnTypeProperty
argument_list|)
expr_stmt|;
block|}
assert|assert
operator|(
name|columnNames
operator|.
name|size
argument_list|()
operator|==
name|columnTypes
operator|.
name|size
argument_list|()
operator|)
assert|;
comment|// Create row related objects
name|rowTypeInfo
operator|=
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
name|rowObjectInspector
operator|=
operator|(
name|StructObjectInspector
operator|)
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|rowTypeInfo
argument_list|)
expr_stmt|;
name|row
operator|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|columnNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|row
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Get the sort order
name|String
name|columnSortOrder
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_SORT_ORDER
argument_list|)
decl_stmt|;
name|columnSortOrderIsDesc
operator|=
operator|new
name|boolean
index|[
name|columnNames
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnSortOrderIsDesc
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|columnSortOrderIsDesc
index|[
name|i
index|]
operator|=
operator|(
name|columnSortOrder
operator|!=
literal|null
operator|&&
name|columnSortOrder
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'-'
operator|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|BytesWritable
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|rowObjectInspector
return|;
block|}
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
decl_stmt|;
name|InputByteBuffer
name|inputByteBuffer
init|=
operator|new
name|InputByteBuffer
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
name|BytesWritable
name|data
init|=
operator|(
name|BytesWritable
operator|)
name|blob
decl_stmt|;
name|inputByteBuffer
operator|.
name|reset
argument_list|(
name|data
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|row
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|deserialize
argument_list|(
name|inputByteBuffer
argument_list|,
name|columnTypes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|columnSortOrderIsDesc
index|[
name|i
index|]
argument_list|,
name|row
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|row
return|;
block|}
specifier|static
name|Object
name|deserialize
parameter_list|(
name|InputByteBuffer
name|buffer
parameter_list|,
name|TypeInfo
name|type
parameter_list|,
name|boolean
name|invert
parameter_list|,
name|Object
name|reuse
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Is this field a null?
name|byte
name|isNull
init|=
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNull
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
assert|assert
operator|(
name|isNull
operator|==
literal|1
operator|)
assert|;
switch|switch
condition|(
name|type
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveTypeInfo
name|ptype
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|type
decl_stmt|;
switch|switch
condition|(
name|ptype
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
block|{
return|return
literal|null
return|;
block|}
case|case
name|BOOLEAN
case|:
block|{
name|BooleanWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|BooleanWritable
argument_list|()
else|:
operator|(
name|BooleanWritable
operator|)
name|reuse
decl_stmt|;
name|byte
name|b
init|=
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|b
operator|==
literal|1
operator|||
name|b
operator|==
literal|2
operator|)
assert|;
name|r
operator|.
name|set
argument_list|(
name|b
operator|==
literal|2
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|BYTE
case|:
block|{
name|ByteWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|ByteWritable
argument_list|()
else|:
operator|(
name|ByteWritable
operator|)
name|reuse
decl_stmt|;
name|r
operator|.
name|set
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|^
literal|0x80
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|SHORT
case|:
block|{
name|ShortWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|ShortWritable
argument_list|()
else|:
operator|(
name|ShortWritable
operator|)
name|reuse
decl_stmt|;
name|int
name|v
init|=
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|^
literal|0x80
decl_stmt|;
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|r
operator|.
name|set
argument_list|(
operator|(
name|short
operator|)
name|v
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|INT
case|:
block|{
name|IntWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|IntWritable
argument_list|()
else|:
operator|(
name|IntWritable
operator|)
name|reuse
decl_stmt|;
name|int
name|v
init|=
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|^
literal|0x80
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
name|r
operator|.
name|set
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|LONG
case|:
block|{
name|LongWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|LongWritable
argument_list|()
else|:
operator|(
name|LongWritable
operator|)
name|reuse
decl_stmt|;
name|long
name|v
init|=
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|^
literal|0x80
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
name|r
operator|.
name|set
argument_list|(
name|v
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|FLOAT
case|:
block|{
name|FloatWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|FloatWritable
argument_list|()
else|:
operator|(
name|FloatWritable
operator|)
name|reuse
decl_stmt|;
name|int
name|v
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|v
operator|&
operator|(
literal|1
operator|<<
literal|31
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
comment|// negative number, flip all bits
name|v
operator|=
operator|~
name|v
expr_stmt|;
block|}
else|else
block|{
comment|// positive number, flip the first bit
name|v
operator|=
name|v
operator|^
operator|(
literal|1
operator|<<
literal|31
operator|)
expr_stmt|;
block|}
name|r
operator|.
name|set
argument_list|(
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|DOUBLE
case|:
block|{
name|DoubleWritable
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|DoubleWritable
argument_list|()
else|:
operator|(
name|DoubleWritable
operator|)
name|reuse
decl_stmt|;
name|long
name|v
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|v
operator|&
operator|(
literal|1L
operator|<<
literal|63
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
comment|// negative number, flip all bits
name|v
operator|=
operator|~
name|v
expr_stmt|;
block|}
else|else
block|{
comment|// positive number, flip the first bit
name|v
operator|=
name|v
operator|^
operator|(
literal|1L
operator|<<
literal|63
operator|)
expr_stmt|;
block|}
name|r
operator|.
name|set
argument_list|(
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
case|case
name|STRING
case|:
block|{
name|Text
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|Text
argument_list|()
else|:
operator|(
name|Text
operator|)
name|reuse
decl_stmt|;
comment|// Get the actual length first
name|int
name|start
init|=
name|buffer
operator|.
name|tell
argument_list|()
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
do|do
block|{
name|byte
name|b
init|=
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
comment|// end of string
break|break;
block|}
if|if
condition|(
name|b
operator|==
literal|1
condition|)
block|{
comment|// the last char is an escape char. read the actual char
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
expr_stmt|;
block|}
name|length
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
if|if
condition|(
name|length
operator|==
name|buffer
operator|.
name|tell
argument_list|()
operator|-
name|start
condition|)
block|{
comment|// No escaping happened, so we are already done.
name|r
operator|.
name|set
argument_list|(
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Escaping happened, we need to copy byte-by-byte.
comment|// 1. Set the length first.
name|r
operator|.
name|set
argument_list|(
name|buffer
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// 2. Reset the pointer.
name|buffer
operator|.
name|seek
argument_list|(
name|start
argument_list|)
expr_stmt|;
comment|// 3. Copy the data.
name|byte
index|[]
name|rdata
init|=
name|r
operator|.
name|getBytes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|1
condition|)
block|{
comment|// The last char is an escape char, read the actual char.
comment|// The serialization format escape \0 to \1, and \1 to \2,
comment|// to make sure the string is null-terminated.
name|b
operator|=
call|(
name|byte
call|)
argument_list|(
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|rdata
index|[
name|i
index|]
operator|=
name|b
expr_stmt|;
block|}
comment|// 4. Read the null terminator.
name|byte
name|b
init|=
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
decl_stmt|;
assert|assert
operator|(
name|b
operator|==
literal|0
operator|)
assert|;
block|}
return|return
name|r
return|;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unrecognized type: "
operator|+
name|ptype
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
case|case
name|LIST
case|:
block|{
name|ListTypeInfo
name|ltype
init|=
operator|(
name|ListTypeInfo
operator|)
name|type
decl_stmt|;
name|TypeInfo
name|etype
init|=
name|ltype
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
comment|// Create the list if needed
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
else|:
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|reuse
decl_stmt|;
comment|// Read the list
name|int
name|size
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|more
init|=
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
decl_stmt|;
if|if
condition|(
name|more
operator|==
literal|0
condition|)
block|{
comment|// \0 to terminate
break|break;
block|}
comment|// \1 followed by each element
assert|assert
operator|(
name|more
operator|==
literal|1
operator|)
assert|;
if|if
condition|(
name|size
operator|==
name|r
operator|.
name|size
argument_list|()
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|set
argument_list|(
name|size
argument_list|,
name|deserialize
argument_list|(
name|buffer
argument_list|,
name|etype
argument_list|,
name|invert
argument_list|,
name|r
operator|.
name|get
argument_list|(
name|size
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|size
operator|++
expr_stmt|;
block|}
comment|// Remove additional elements if the list is reused
while|while
condition|(
name|r
operator|.
name|size
argument_list|()
operator|>
name|size
condition|)
block|{
name|r
operator|.
name|remove
argument_list|(
name|r
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
case|case
name|MAP
case|:
block|{
name|MapTypeInfo
name|mtype
init|=
operator|(
name|MapTypeInfo
operator|)
name|type
decl_stmt|;
name|TypeInfo
name|ktype
init|=
name|mtype
operator|.
name|getMapKeyTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|vtype
init|=
name|mtype
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
comment|// Create the map if needed
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|r
decl_stmt|;
if|if
condition|(
name|reuse
operator|==
literal|null
condition|)
block|{
name|r
operator|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|r
operator|=
operator|(
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|reuse
expr_stmt|;
name|r
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|more
init|=
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
decl_stmt|;
if|if
condition|(
name|more
operator|==
literal|0
condition|)
block|{
comment|// \0 to terminate
break|break;
block|}
comment|// \1 followed by each key and then each value
assert|assert
operator|(
name|more
operator|==
literal|1
operator|)
assert|;
name|Object
name|k
init|=
name|deserialize
argument_list|(
name|buffer
argument_list|,
name|ktype
argument_list|,
name|invert
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Object
name|v
init|=
name|deserialize
argument_list|(
name|buffer
argument_list|,
name|vtype
argument_list|,
name|invert
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|r
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
case|case
name|STRUCT
case|:
block|{
name|StructTypeInfo
name|stype
init|=
operator|(
name|StructTypeInfo
operator|)
name|type
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypes
init|=
name|stype
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|fieldTypes
operator|.
name|size
argument_list|()
decl_stmt|;
comment|// Create the struct if needed
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|size
argument_list|)
else|:
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|reuse
decl_stmt|;
assert|assert
operator|(
name|r
operator|.
name|size
argument_list|()
operator|<=
name|size
operator|)
assert|;
comment|// Set the size of the struct
while|while
condition|(
name|r
operator|.
name|size
argument_list|()
operator|<
name|size
condition|)
block|{
name|r
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// Read one field by one field
for|for
control|(
name|int
name|eid
init|=
literal|0
init|;
name|eid
operator|<
name|size
condition|;
name|eid
operator|++
control|)
block|{
name|r
operator|.
name|set
argument_list|(
name|eid
argument_list|,
name|deserialize
argument_list|(
name|buffer
argument_list|,
name|fieldTypes
operator|.
name|get
argument_list|(
name|eid
argument_list|)
argument_list|,
name|invert
argument_list|,
name|r
operator|.
name|get
argument_list|(
name|eid
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
case|case
name|UNION
case|:
block|{
name|UnionTypeInfo
name|utype
init|=
operator|(
name|UnionTypeInfo
operator|)
name|type
decl_stmt|;
name|StandardUnion
name|r
init|=
name|reuse
operator|==
literal|null
condition|?
operator|new
name|StandardUnion
argument_list|()
else|:
operator|(
name|StandardUnion
operator|)
name|reuse
decl_stmt|;
comment|// Read the tag
name|byte
name|tag
init|=
name|buffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
decl_stmt|;
name|r
operator|.
name|setTag
argument_list|(
name|tag
argument_list|)
expr_stmt|;
name|r
operator|.
name|setObject
argument_list|(
name|deserialize
argument_list|(
name|buffer
argument_list|,
name|utype
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|invert
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unrecognized type: "
operator|+
name|type
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|BytesWritable
name|serializeBytesWritable
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|OutputByteBuffer
name|outputByteBuffer
init|=
operator|new
name|OutputByteBuffer
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
name|outputByteBuffer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columnNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|serialize
argument_list|(
name|outputByteBuffer
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|obj
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|columnSortOrderIsDesc
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|serializeBytesWritable
operator|.
name|set
argument_list|(
name|outputByteBuffer
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|outputByteBuffer
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|serializeBytesWritable
return|;
block|}
specifier|static
name|void
name|serialize
parameter_list|(
name|OutputByteBuffer
name|buffer
parameter_list|,
name|Object
name|o
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|,
name|boolean
name|invert
parameter_list|)
block|{
comment|// Is this field a null?
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|invert
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// This field is not a null.
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|invert
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
switch|switch
condition|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
block|{
return|return;
block|}
case|case
name|BOOLEAN
case|:
block|{
name|boolean
name|v
init|=
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
condition|?
literal|2
else|:
literal|1
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|BYTE
case|:
block|{
name|ByteObjectInspector
name|boi
init|=
operator|(
name|ByteObjectInspector
operator|)
name|poi
decl_stmt|;
name|byte
name|v
init|=
name|boi
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|^
literal|0x80
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|SHORT
case|:
block|{
name|ShortObjectInspector
name|spoi
init|=
operator|(
name|ShortObjectInspector
operator|)
name|poi
decl_stmt|;
name|short
name|v
init|=
name|spoi
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|v
operator|>>
literal|8
operator|)
operator|^
literal|0x80
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|v
argument_list|,
name|invert
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|INT
case|:
block|{
name|IntObjectInspector
name|ioi
init|=
operator|(
name|IntObjectInspector
operator|)
name|poi
decl_stmt|;
name|int
name|v
init|=
name|ioi
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|v
operator|>>
literal|24
operator|)
operator|^
literal|0x80
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|16
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|8
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|v
argument_list|,
name|invert
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|LONG
case|:
block|{
name|LongObjectInspector
name|loi
init|=
operator|(
name|LongObjectInspector
operator|)
name|poi
decl_stmt|;
name|long
name|v
init|=
name|loi
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
operator|(
name|v
operator|>>
literal|56
operator|)
operator|^
literal|0x80
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|48
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|40
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|32
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|24
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|16
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|8
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|v
argument_list|,
name|invert
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|FLOAT
case|:
block|{
name|FloatObjectInspector
name|foi
init|=
operator|(
name|FloatObjectInspector
operator|)
name|poi
decl_stmt|;
name|int
name|v
init|=
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|foi
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|v
operator|&
operator|(
literal|1
operator|<<
literal|31
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// negative number, flip all bits
name|v
operator|=
operator|~
name|v
expr_stmt|;
block|}
else|else
block|{
comment|// positive number, flip the first bit
name|v
operator|=
name|v
operator|^
operator|(
literal|1
operator|<<
literal|31
operator|)
expr_stmt|;
block|}
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|24
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|16
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|8
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|v
argument_list|,
name|invert
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|DOUBLE
case|:
block|{
name|DoubleObjectInspector
name|doi
init|=
operator|(
name|DoubleObjectInspector
operator|)
name|poi
decl_stmt|;
name|long
name|v
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|doi
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|v
operator|&
operator|(
literal|1L
operator|<<
literal|63
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// negative number, flip all bits
name|v
operator|=
operator|~
name|v
expr_stmt|;
block|}
else|else
block|{
comment|// positive number, flip the first bit
name|v
operator|=
name|v
operator|^
operator|(
literal|1L
operator|<<
literal|63
operator|)
expr_stmt|;
block|}
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|56
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|48
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|40
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|32
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|24
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|16
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|8
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
name|v
argument_list|,
name|invert
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|STRING
case|:
block|{
name|StringObjectInspector
name|soi
init|=
operator|(
name|StringObjectInspector
operator|)
name|poi
decl_stmt|;
name|Text
name|t
init|=
name|soi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|t
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|t
operator|.
name|getLength
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|data
index|[
name|i
index|]
operator|==
literal|0
operator|||
name|data
index|[
name|i
index|]
operator|==
literal|1
condition|)
block|{
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
call|(
name|byte
call|)
argument_list|(
name|data
index|[
name|i
index|]
operator|+
literal|1
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|write
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|invert
argument_list|)
expr_stmt|;
block|}
block|}
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|invert
argument_list|)
expr_stmt|;
return|return;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unrecognized type: "
operator|+
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
case|case
name|LIST
case|:
block|{
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|ObjectInspector
name|eoi
init|=
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
comment|// \1 followed by each element
name|int
name|size
init|=
name|loi
operator|.
name|getListLength
argument_list|(
name|o
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|eid
init|=
literal|0
init|;
name|eid
operator|<
name|size
condition|;
name|eid
operator|++
control|)
block|{
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|serialize
argument_list|(
name|buffer
argument_list|,
name|loi
operator|.
name|getListElement
argument_list|(
name|o
argument_list|,
name|eid
argument_list|)
argument_list|,
name|eoi
argument_list|,
name|invert
argument_list|)
expr_stmt|;
block|}
comment|// and \0 to terminate
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|invert
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|MAP
case|:
block|{
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|ObjectInspector
name|koi
init|=
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|voi
init|=
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
comment|// \1 followed by each key and then each value
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|moi
operator|.
name|getMap
argument_list|(
name|o
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|serialize
argument_list|(
name|buffer
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|koi
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|serialize
argument_list|(
name|buffer
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|voi
argument_list|,
name|invert
argument_list|)
expr_stmt|;
block|}
comment|// and \0 to terminate
name|buffer
operator|.
name|write
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
name|invert
argument_list|)
expr_stmt|;
return|return;
block|}
case|case
name|STRUCT
case|:
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|serialize
argument_list|(
name|buffer
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|o
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|invert
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
case|case
name|UNION
case|:
block|{
name|UnionObjectInspector
name|uoi
init|=
operator|(
name|UnionObjectInspector
operator|)
name|oi
decl_stmt|;
name|byte
name|tag
init|=
name|uoi
operator|.
name|getTag
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|tag
argument_list|,
name|invert
argument_list|)
expr_stmt|;
name|serialize
argument_list|(
name|buffer
argument_list|,
name|uoi
operator|.
name|getField
argument_list|(
name|o
argument_list|)
argument_list|,
name|uoi
operator|.
name|getObjectInspectors
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|invert
argument_list|)
expr_stmt|;
return|return;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unrecognized type: "
operator|+
name|oi
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

