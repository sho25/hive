begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyHiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyHiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyHiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyTimestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyObjectInspectorParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DateObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|HiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|TimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|SerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|/*  * Directly serialize, field-by-field, the LazyBinary format. *  * This is an alternative way to serialize than what is provided by LazyBinarySerDe.   */
end_comment

begin_class
specifier|public
class|class
name|LazySimpleSerializeWrite
implements|implements
name|SerializeWrite
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LazySimpleSerializeWrite
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|LazySerDeParameters
name|lazyParams
decl_stmt|;
specifier|private
name|byte
name|separator
decl_stmt|;
specifier|private
name|boolean
index|[]
name|needsEscape
decl_stmt|;
specifier|private
name|boolean
name|isEscaped
decl_stmt|;
specifier|private
name|byte
name|escapeChar
decl_stmt|;
specifier|private
name|byte
index|[]
name|nullSequenceBytes
decl_stmt|;
specifier|private
name|Output
name|output
decl_stmt|;
specifier|private
name|int
name|fieldCount
decl_stmt|;
specifier|private
name|int
name|index
decl_stmt|;
comment|// For thread safety, we allocate private writable objects for our use only.
specifier|private
name|DateWritable
name|dateWritable
decl_stmt|;
specifier|private
name|TimestampWritable
name|timestampWritable
decl_stmt|;
specifier|private
name|HiveIntervalYearMonthWritable
name|hiveIntervalYearMonthWritable
decl_stmt|;
specifier|private
name|HiveIntervalDayTimeWritable
name|hiveIntervalDayTimeWritable
decl_stmt|;
specifier|private
name|HiveIntervalDayTime
name|hiveIntervalDayTime
decl_stmt|;
specifier|public
name|LazySimpleSerializeWrite
parameter_list|(
name|int
name|fieldCount
parameter_list|,
name|byte
name|separator
parameter_list|,
name|LazySerDeParameters
name|lazyParams
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|fieldCount
operator|=
name|fieldCount
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
name|this
operator|.
name|lazyParams
operator|=
name|lazyParams
expr_stmt|;
name|isEscaped
operator|=
name|lazyParams
operator|.
name|isEscaped
argument_list|()
expr_stmt|;
name|escapeChar
operator|=
name|lazyParams
operator|.
name|getEscapeChar
argument_list|()
expr_stmt|;
name|needsEscape
operator|=
name|lazyParams
operator|.
name|getNeedsEscape
argument_list|()
expr_stmt|;
name|nullSequenceBytes
operator|=
name|lazyParams
operator|.
name|getNullSequence
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
comment|// Not public since we must have the field count and other information.
specifier|private
name|LazySimpleSerializeWrite
parameter_list|()
block|{   }
comment|/*    * Set the buffer that will receive the serialized data.  The output buffer will be reset.    */
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|Output
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
block|}
comment|/*    * Set the buffer that will receive the serialized data.  The output buffer will NOT be reset.    */
annotation|@
name|Override
specifier|public
name|void
name|setAppend
parameter_list|(
name|Output
name|output
parameter_list|)
block|{
name|this
operator|.
name|output
operator|=
name|output
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
block|}
comment|/*    * Reset the previously supplied buffer that will receive the serialized data.    */
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|output
operator|.
name|reset
argument_list|()
expr_stmt|;
name|index
operator|=
literal|0
expr_stmt|;
block|}
comment|/*    * General Pattern:    *    *  if (index> 0) {    *    output.write(separator);    *  }    *    *  WHEN NOT NULL: Write value.    *  OTHERWISE NULL: Write nullSequenceBytes.    *    *  Increment index    *    */
comment|/*    * Write a NULL field.    */
annotation|@
name|Override
specifier|public
name|void
name|writeNull
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|output
operator|.
name|write
argument_list|(
name|nullSequenceBytes
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * BOOLEAN.    */
annotation|@
name|Override
specifier|public
name|void
name|writeBoolean
parameter_list|(
name|boolean
name|v
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|v
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|LazyUtils
operator|.
name|trueBytes
argument_list|,
literal|0
argument_list|,
name|LazyUtils
operator|.
name|trueBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|output
operator|.
name|write
argument_list|(
name|LazyUtils
operator|.
name|falseBytes
argument_list|,
literal|0
argument_list|,
name|LazyUtils
operator|.
name|falseBytes
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * BYTE.    */
annotation|@
name|Override
specifier|public
name|void
name|writeByte
parameter_list|(
name|byte
name|v
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|LazyInteger
operator|.
name|writeUTF8
argument_list|(
name|output
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * SHORT.    */
annotation|@
name|Override
specifier|public
name|void
name|writeShort
parameter_list|(
name|short
name|v
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|LazyInteger
operator|.
name|writeUTF8
argument_list|(
name|output
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * INT.    */
annotation|@
name|Override
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|LazyInteger
operator|.
name|writeUTF8
argument_list|(
name|output
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * LONG.    */
annotation|@
name|Override
specifier|public
name|void
name|writeLong
parameter_list|(
name|long
name|v
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|LazyLong
operator|.
name|writeUTF8
argument_list|(
name|output
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * FLOAT.    */
annotation|@
name|Override
specifier|public
name|void
name|writeFloat
parameter_list|(
name|float
name|vf
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|b
init|=
name|Text
operator|.
name|encode
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|vf
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|b
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * DOUBLE.    */
annotation|@
name|Override
specifier|public
name|void
name|writeDouble
parameter_list|(
name|double
name|v
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|b
init|=
name|Text
operator|.
name|encode
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|b
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|limit
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * STRING.    *     * Can be used to write CHAR and VARCHAR when the caller takes responsibility for    * truncation/padding issues.    */
annotation|@
name|Override
specifier|public
name|void
name|writeString
parameter_list|(
name|byte
index|[]
name|v
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|LazyUtils
operator|.
name|writeEscaped
argument_list|(
name|output
argument_list|,
name|v
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|,
name|isEscaped
argument_list|,
name|escapeChar
argument_list|,
name|needsEscape
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeString
parameter_list|(
name|byte
index|[]
name|v
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|LazyUtils
operator|.
name|writeEscaped
argument_list|(
name|output
argument_list|,
name|v
argument_list|,
name|start
argument_list|,
name|length
argument_list|,
name|isEscaped
argument_list|,
name|escapeChar
argument_list|,
name|needsEscape
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * CHAR.    */
annotation|@
name|Override
specifier|public
name|void
name|writeHiveChar
parameter_list|(
name|HiveChar
name|hiveChar
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|b
init|=
name|Text
operator|.
name|encode
argument_list|(
name|hiveChar
operator|.
name|getPaddedValue
argument_list|()
argument_list|)
decl_stmt|;
name|LazyUtils
operator|.
name|writeEscaped
argument_list|(
name|output
argument_list|,
name|b
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|limit
argument_list|()
argument_list|,
name|isEscaped
argument_list|,
name|escapeChar
argument_list|,
name|needsEscape
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * VARCHAR.    */
annotation|@
name|Override
specifier|public
name|void
name|writeHiveVarchar
parameter_list|(
name|HiveVarchar
name|hiveVarchar
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|ByteBuffer
name|b
init|=
name|Text
operator|.
name|encode
argument_list|(
name|hiveVarchar
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|LazyUtils
operator|.
name|writeEscaped
argument_list|(
name|output
argument_list|,
name|b
operator|.
name|array
argument_list|()
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|limit
argument_list|()
argument_list|,
name|isEscaped
argument_list|,
name|escapeChar
argument_list|,
name|needsEscape
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * BINARY.    */
annotation|@
name|Override
specifier|public
name|void
name|writeBinary
parameter_list|(
name|byte
index|[]
name|v
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|toEncode
init|=
operator|new
name|byte
index|[
name|v
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|v
argument_list|,
literal|0
argument_list|,
name|toEncode
argument_list|,
literal|0
argument_list|,
name|v
operator|.
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|toWrite
init|=
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|toEncode
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|toWrite
argument_list|,
literal|0
argument_list|,
name|toWrite
operator|.
name|length
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeBinary
parameter_list|(
name|byte
index|[]
name|v
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|toEncode
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|v
argument_list|,
name|start
argument_list|,
name|toEncode
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|byte
index|[]
name|toWrite
init|=
name|Base64
operator|.
name|encodeBase64
argument_list|(
name|toEncode
argument_list|)
decl_stmt|;
name|output
operator|.
name|write
argument_list|(
name|toWrite
argument_list|,
literal|0
argument_list|,
name|toWrite
operator|.
name|length
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * DATE.    */
annotation|@
name|Override
specifier|public
name|void
name|writeDate
parameter_list|(
name|Date
name|date
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dateWritable
operator|==
literal|null
condition|)
block|{
name|dateWritable
operator|=
operator|new
name|DateWritable
argument_list|()
expr_stmt|;
block|}
name|dateWritable
operator|.
name|set
argument_list|(
name|date
argument_list|)
expr_stmt|;
name|LazyDate
operator|.
name|writeUTF8
argument_list|(
name|output
argument_list|,
name|dateWritable
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|// We provide a faster way to write a date without a Date object.
annotation|@
name|Override
specifier|public
name|void
name|writeDate
parameter_list|(
name|int
name|dateAsDays
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dateWritable
operator|==
literal|null
condition|)
block|{
name|dateWritable
operator|=
operator|new
name|DateWritable
argument_list|()
expr_stmt|;
block|}
name|dateWritable
operator|.
name|set
argument_list|(
name|dateAsDays
argument_list|)
expr_stmt|;
name|LazyDate
operator|.
name|writeUTF8
argument_list|(
name|output
argument_list|,
name|dateWritable
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * TIMESTAMP.    */
annotation|@
name|Override
specifier|public
name|void
name|writeTimestamp
parameter_list|(
name|Timestamp
name|v
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|timestampWritable
operator|==
literal|null
condition|)
block|{
name|timestampWritable
operator|=
operator|new
name|TimestampWritable
argument_list|()
expr_stmt|;
block|}
name|timestampWritable
operator|.
name|set
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|LazyTimestamp
operator|.
name|writeUTF8
argument_list|(
name|output
argument_list|,
name|timestampWritable
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * INTERVAL_YEAR_MONTH.    */
annotation|@
name|Override
specifier|public
name|void
name|writeHiveIntervalYearMonth
parameter_list|(
name|HiveIntervalYearMonth
name|viyt
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hiveIntervalYearMonthWritable
operator|==
literal|null
condition|)
block|{
name|hiveIntervalYearMonthWritable
operator|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|()
expr_stmt|;
block|}
name|hiveIntervalYearMonthWritable
operator|.
name|set
argument_list|(
name|viyt
argument_list|)
expr_stmt|;
name|LazyHiveIntervalYearMonth
operator|.
name|writeUTF8
argument_list|(
name|output
argument_list|,
name|hiveIntervalYearMonthWritable
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeHiveIntervalYearMonth
parameter_list|(
name|int
name|totalMonths
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hiveIntervalYearMonthWritable
operator|==
literal|null
condition|)
block|{
name|hiveIntervalYearMonthWritable
operator|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|()
expr_stmt|;
block|}
name|hiveIntervalYearMonthWritable
operator|.
name|set
argument_list|(
name|totalMonths
argument_list|)
expr_stmt|;
name|LazyHiveIntervalYearMonth
operator|.
name|writeUTF8
argument_list|(
name|output
argument_list|,
name|hiveIntervalYearMonthWritable
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * INTERVAL_DAY_TIME.    */
annotation|@
name|Override
specifier|public
name|void
name|writeHiveIntervalDayTime
parameter_list|(
name|HiveIntervalDayTime
name|vidt
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hiveIntervalDayTimeWritable
operator|==
literal|null
condition|)
block|{
name|hiveIntervalDayTimeWritable
operator|=
operator|new
name|HiveIntervalDayTimeWritable
argument_list|()
expr_stmt|;
block|}
name|hiveIntervalDayTimeWritable
operator|.
name|set
argument_list|(
name|vidt
argument_list|)
expr_stmt|;
name|LazyHiveIntervalDayTime
operator|.
name|writeUTF8
argument_list|(
name|output
argument_list|,
name|hiveIntervalDayTimeWritable
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeHiveIntervalDayTime
parameter_list|(
name|long
name|totalNanos
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hiveIntervalDayTime
operator|==
literal|null
condition|)
block|{
name|hiveIntervalDayTime
operator|=
operator|new
name|HiveIntervalDayTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hiveIntervalDayTimeWritable
operator|==
literal|null
condition|)
block|{
name|hiveIntervalDayTimeWritable
operator|=
operator|new
name|HiveIntervalDayTimeWritable
argument_list|()
expr_stmt|;
block|}
name|DateUtils
operator|.
name|setIntervalDayTimeTotalNanos
argument_list|(
name|hiveIntervalDayTime
argument_list|,
name|totalNanos
argument_list|)
expr_stmt|;
name|hiveIntervalDayTimeWritable
operator|.
name|set
argument_list|(
name|hiveIntervalDayTime
argument_list|)
expr_stmt|;
name|LazyHiveIntervalDayTime
operator|.
name|writeUTF8
argument_list|(
name|output
argument_list|,
name|hiveIntervalDayTimeWritable
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
comment|/*    * DECIMAL.    */
annotation|@
name|Override
specifier|public
name|void
name|writeHiveDecimal
parameter_list|(
name|HiveDecimal
name|v
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|output
operator|.
name|write
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|LazyHiveDecimal
operator|.
name|writeUTF8
argument_list|(
name|output
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
block|}
block|}
end_class

end_unit

