begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
operator|.
name|RecordInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
operator|.
name|VInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|objectinspector
operator|.
name|LazyBinaryMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_comment
comment|/**  * LazyBinaryMap is serialized as follows: start A b c b c b c end bytes[] -&gt;  * |--------|---|---|---|---| ... |---|---|  *   * Section A is the null-bytes. Suppose the map has N key-value pairs, then  * there are (N*2+7)/8 bytes used as null-bytes. Each bit corresponds to a key  * or a value and it indicates whether that key or value is null (0) or not null  * (1).  *   * After A, all the bytes are actual serialized data of the map, which are  * key-value pairs. b represent the keys and c represent the values. Each of  * them is again a LazyBinaryObject.  *   */
end_comment

begin_class
specifier|public
class|class
name|LazyBinaryMap
extends|extends
name|LazyBinaryNonPrimitive
argument_list|<
name|LazyBinaryMapObjectInspector
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LazyBinaryMap
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Whether the data is already parsed or not.    */
name|boolean
name|parsed
decl_stmt|;
comment|/**    * The size of the map. Only valid when the data is parsed. -1 when the map is    * NULL.    */
name|int
name|mapSize
init|=
literal|0
decl_stmt|;
comment|/**    * The beginning position and length of key[i] and value[i]. Only valid when    * the data is parsed.    */
name|int
index|[]
name|keyStart
decl_stmt|;
name|int
index|[]
name|keyLength
decl_stmt|;
name|int
index|[]
name|valueStart
decl_stmt|;
name|int
index|[]
name|valueLength
decl_stmt|;
comment|/**    * Whether valueObjects[i]/keyObjects[i] is initialized or not.    */
name|boolean
index|[]
name|keyInited
decl_stmt|;
name|boolean
index|[]
name|valueInited
decl_stmt|;
comment|/**    * Whether valueObjects[i]/keyObjects[i] is null or not This could not be    * inferred from the length of the object. In particular, a 0-length string is    * not null.    */
name|boolean
index|[]
name|keyIsNull
decl_stmt|;
name|boolean
index|[]
name|valueIsNull
decl_stmt|;
comment|/**    * The keys are stored in an array of LazyPrimitives.    */
name|LazyBinaryPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|keyObjects
decl_stmt|;
comment|/**    * The values are stored in an array of LazyObjects. value[index] will start    * from KeyEnd[index] + 1, and ends before KeyStart[index+1] - 1.    */
name|LazyBinaryObject
index|[]
name|valueObjects
decl_stmt|;
specifier|protected
name|LazyBinaryMap
parameter_list|(
name|LazyBinaryMapObjectInspector
name|oi
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the row data for this LazyBinaryMap.    *     * @see LazyBinaryObject#init(ByteArrayRef, int, int)    */
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ByteArrayRef
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|parsed
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Adjust the size of arrays: keyStart, keyLength valueStart, valueLength    * keyInited, keyIsNull valueInited, valueIsNull.    */
specifier|protected
name|void
name|adjustArraySize
parameter_list|(
name|int
name|newSize
parameter_list|)
block|{
if|if
condition|(
name|keyStart
operator|==
literal|null
operator|||
name|keyStart
operator|.
name|length
operator|<
name|newSize
condition|)
block|{
name|keyStart
operator|=
operator|new
name|int
index|[
name|newSize
index|]
expr_stmt|;
name|keyLength
operator|=
operator|new
name|int
index|[
name|newSize
index|]
expr_stmt|;
name|valueStart
operator|=
operator|new
name|int
index|[
name|newSize
index|]
expr_stmt|;
name|valueLength
operator|=
operator|new
name|int
index|[
name|newSize
index|]
expr_stmt|;
name|keyInited
operator|=
operator|new
name|boolean
index|[
name|newSize
index|]
expr_stmt|;
name|keyIsNull
operator|=
operator|new
name|boolean
index|[
name|newSize
index|]
expr_stmt|;
name|valueInited
operator|=
operator|new
name|boolean
index|[
name|newSize
index|]
expr_stmt|;
name|valueIsNull
operator|=
operator|new
name|boolean
index|[
name|newSize
index|]
expr_stmt|;
name|keyObjects
operator|=
operator|new
name|LazyBinaryPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
name|newSize
index|]
expr_stmt|;
name|valueObjects
operator|=
operator|new
name|LazyBinaryObject
index|[
name|newSize
index|]
expr_stmt|;
block|}
block|}
name|boolean
name|nullMapKey
init|=
literal|false
decl_stmt|;
name|VInt
name|vInt
init|=
operator|new
name|LazyBinaryUtils
operator|.
name|VInt
argument_list|()
decl_stmt|;
name|RecordInfo
name|recordInfo
init|=
operator|new
name|LazyBinaryUtils
operator|.
name|RecordInfo
argument_list|()
decl_stmt|;
comment|/**    * Parse the byte[] and fill keyStart, keyLength, keyIsNull valueStart,    * valueLength and valueIsNull.    */
specifier|private
name|void
name|parse
parameter_list|()
block|{
name|byte
index|[]
name|bytes
init|=
name|this
operator|.
name|bytes
operator|.
name|getData
argument_list|()
decl_stmt|;
comment|// get the VInt that represents the map size
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|vInt
argument_list|)
expr_stmt|;
name|mapSize
operator|=
name|vInt
operator|.
name|value
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|mapSize
condition|)
block|{
name|parsed
operator|=
literal|true
expr_stmt|;
return|return;
block|}
comment|// adjust arrays
name|adjustArraySize
argument_list|(
name|mapSize
argument_list|)
expr_stmt|;
comment|// find out the null-bytes
name|int
name|mapByteStart
init|=
name|start
operator|+
name|vInt
operator|.
name|length
decl_stmt|;
name|int
name|nullByteCur
init|=
name|mapByteStart
decl_stmt|;
name|int
name|nullByteEnd
init|=
name|mapByteStart
operator|+
operator|(
name|mapSize
operator|*
literal|2
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|int
name|lastElementByteEnd
init|=
name|nullByteEnd
decl_stmt|;
comment|// parsing the keys and values one by one
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
comment|// parse a key
name|keyIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
name|bytes
index|[
name|nullByteCur
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
operator|(
name|i
operator|*
literal|2
operator|)
operator|%
literal|8
operator|)
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|keyIsNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|LazyBinaryUtils
operator|.
name|checkObjectByteInfo
argument_list|(
operator|(
operator|(
name|MapObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|lastElementByteEnd
argument_list|,
name|recordInfo
argument_list|,
name|vInt
argument_list|)
expr_stmt|;
name|keyStart
index|[
name|i
index|]
operator|=
name|lastElementByteEnd
operator|+
name|recordInfo
operator|.
name|elementOffset
expr_stmt|;
name|keyLength
index|[
name|i
index|]
operator|=
name|recordInfo
operator|.
name|elementSize
expr_stmt|;
name|lastElementByteEnd
operator|=
name|keyStart
index|[
name|i
index|]
operator|+
name|keyLength
index|[
name|i
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|nullMapKey
condition|)
block|{
name|nullMapKey
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Null map key encountered! Ignoring similar problems."
argument_list|)
expr_stmt|;
block|}
comment|// parse a value
name|valueIsNull
index|[
name|i
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
name|bytes
index|[
name|nullByteCur
index|]
operator|&
operator|(
literal|1
operator|<<
operator|(
operator|(
name|i
operator|*
literal|2
operator|+
literal|1
operator|)
operator|%
literal|8
operator|)
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|valueIsNull
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|LazyBinaryUtils
operator|.
name|checkObjectByteInfo
argument_list|(
operator|(
operator|(
name|MapObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|,
name|bytes
argument_list|,
name|lastElementByteEnd
argument_list|,
name|recordInfo
argument_list|,
name|vInt
argument_list|)
expr_stmt|;
name|valueStart
index|[
name|i
index|]
operator|=
name|lastElementByteEnd
operator|+
name|recordInfo
operator|.
name|elementOffset
expr_stmt|;
name|valueLength
index|[
name|i
index|]
operator|=
name|recordInfo
operator|.
name|elementSize
expr_stmt|;
name|lastElementByteEnd
operator|=
name|valueStart
index|[
name|i
index|]
operator|+
name|valueLength
index|[
name|i
index|]
expr_stmt|;
block|}
comment|// move onto the next null byte
if|if
condition|(
literal|3
operator|==
operator|(
name|i
operator|%
literal|4
operator|)
condition|)
block|{
name|nullByteCur
operator|++
expr_stmt|;
block|}
block|}
name|Arrays
operator|.
name|fill
argument_list|(
name|keyInited
argument_list|,
literal|0
argument_list|,
name|mapSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|valueInited
argument_list|,
literal|0
argument_list|,
name|mapSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|parsed
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Get the value object with the index without checking parsed.    *     * @param index    *          The index into the array starting from 0    */
specifier|private
name|LazyBinaryObject
name|uncheckedGetValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|valueIsNull
index|[
name|index
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|valueInited
index|[
name|index
index|]
condition|)
block|{
name|valueInited
index|[
name|index
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|valueObjects
index|[
name|index
index|]
operator|==
literal|null
condition|)
block|{
name|valueObjects
index|[
name|index
index|]
operator|=
name|LazyBinaryFactory
operator|.
name|createLazyBinaryObject
argument_list|(
operator|(
operator|(
name|MapObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|valueObjects
index|[
name|index
index|]
operator|.
name|init
argument_list|(
name|bytes
argument_list|,
name|valueStart
index|[
name|index
index|]
argument_list|,
name|valueLength
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|valueObjects
index|[
name|index
index|]
return|;
block|}
comment|/**    * Get the value in the map for the key.    *     * If there are multiple matches (which is possible in the serialized format),    * only the first one is returned.    *     * The most efficient way to get the value for the key is to serialize the key    * and then try to find it in the array. We do linear search because in most    * cases, user only wants to get one or two values out of the map, and the    * cost of building up a HashMap is substantially higher.    *     * @param key    *          The key object that we are looking for.    * @return The corresponding value object, or NULL if not found    */
specifier|public
name|Object
name|getMapValueElement
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parsed
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
block|}
comment|// search for the key
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
name|LazyBinaryPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|lazyKeyI
init|=
name|uncheckedGetKey
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|lazyKeyI
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// getWritableObject() will convert LazyPrimitive to actual primitive
comment|// writable objects.
name|Object
name|keyI
init|=
name|lazyKeyI
operator|.
name|getWritableObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyI
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|keyI
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// Got a match, return the value
name|LazyBinaryObject
name|v
init|=
name|uncheckedGetValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|v
operator|==
literal|null
condition|?
name|v
else|:
name|v
operator|.
name|getObject
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the key object with the index without checking parsed.    *     * @param index    *          The index into the array starting from 0    */
specifier|private
name|LazyBinaryPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|uncheckedGetKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|keyIsNull
index|[
name|index
index|]
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|keyInited
index|[
name|index
index|]
condition|)
block|{
name|keyInited
index|[
name|index
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|keyObjects
index|[
name|index
index|]
operator|==
literal|null
condition|)
block|{
comment|// Keys are always primitive
name|keyObjects
index|[
name|index
index|]
operator|=
name|LazyBinaryFactory
operator|.
name|createLazyBinaryPrimitiveClass
argument_list|(
call|(
name|PrimitiveObjectInspector
call|)
argument_list|(
operator|(
name|MapObjectInspector
operator|)
name|oi
argument_list|)
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keyObjects
index|[
name|index
index|]
operator|.
name|init
argument_list|(
name|bytes
argument_list|,
name|keyStart
index|[
name|index
index|]
argument_list|,
name|keyLength
index|[
name|index
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|keyObjects
index|[
name|index
index|]
return|;
block|}
comment|/**    * cachedMap is reused for different calls to getMap(). But each LazyBinaryMap    * has a separate cachedMap so we won't overwrite the data by accident.    */
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cachedMap
decl_stmt|;
comment|/**    * Return the map object representing this LazyBinaryMap. Note that the    * keyObjects will be Writable primitive objects.    *     * @return the map object    */
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|getMap
parameter_list|()
block|{
if|if
condition|(
operator|!
name|parsed
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cachedMap
operator|==
literal|null
condition|)
block|{
comment|// Use LinkedHashMap to provide deterministic order
name|cachedMap
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cachedMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// go through each element of the map
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
name|LazyBinaryPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|lazyKey
init|=
name|uncheckedGetKey
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|lazyKey
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Object
name|key
init|=
name|lazyKey
operator|.
name|getObject
argument_list|()
decl_stmt|;
comment|// do not overwrite if there are duplicate keys
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
operator|!
name|cachedMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|LazyBinaryObject
name|lazyValue
init|=
name|uncheckedGetValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
operator|(
name|lazyValue
operator|==
literal|null
condition|?
literal|null
else|:
name|lazyValue
operator|.
name|getObject
argument_list|()
operator|)
decl_stmt|;
name|cachedMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cachedMap
return|;
block|}
comment|/**    * Get the size of the map represented by this LazyBinaryMap.    *     * @return The size of the map    */
specifier|public
name|int
name|getMapSize
parameter_list|()
block|{
if|if
condition|(
operator|!
name|parsed
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
block|}
return|return
name|mapSize
return|;
block|}
block|}
end_class

end_unit

