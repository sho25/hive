begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
operator|.
name|VInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * TimestampWritable  * Writable equivalent of java.sq.Timestamp  *  * Timestamps are of the format  *    YYYY-MM-DD HH:MM:SS.[fff...]  *  * We encode Unix timestamp in seconds in 4 bytes, using the MSB to signify  * whether the timestamp has a fractional portion.  *  * The fractional portion is reversed, and encoded as a VInt  * so timestamps with less precision use fewer bytes.  *  *      0.1    -> 1  *      0.01   -> 10  *      0.001  -> 100  *  */
end_comment

begin_class
specifier|public
class|class
name|TimestampWritable
implements|implements
name|WritableComparable
argument_list|<
name|TimestampWritable
argument_list|>
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TimestampWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
specifier|public
name|byte
index|[]
name|nullBytes
init|=
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NO_DECIMAL_MASK
init|=
literal|0x7FFFFFFF
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|HAS_DECIMAL_MASK
init|=
literal|0x80000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|DateFormat
name|dateFormat
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd HH:mm:ss"
argument_list|)
decl_stmt|;
specifier|private
name|Timestamp
name|timestamp
init|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**    * true if data is stored in timestamp field rather than byte arrays.    *      allows for lazy conversion to bytes when necessary    * false otherwise    */
specifier|private
name|boolean
name|bytesEmpty
decl_stmt|;
specifier|private
name|boolean
name|timestampEmpty
decl_stmt|;
comment|/* Allow use of external byte[] for efficiency */
specifier|private
name|byte
index|[]
name|currentBytes
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|internalBytes
init|=
operator|new
name|byte
index|[
literal|9
index|]
decl_stmt|;
specifier|private
name|byte
index|[]
name|externalBytes
decl_stmt|;
specifier|private
name|int
name|offset
decl_stmt|;
comment|/* Reused to read VInts */
specifier|static
specifier|private
specifier|final
name|VInt
name|vInt
init|=
operator|new
name|VInt
argument_list|()
decl_stmt|;
comment|/* Constructors */
specifier|public
name|TimestampWritable
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|internalBytes
argument_list|,
operator|(
name|byte
operator|)
literal|0x0
argument_list|)
expr_stmt|;
name|bytesEmpty
operator|=
literal|false
expr_stmt|;
name|currentBytes
operator|=
name|internalBytes
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|clearTimestamp
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TimestampWritable
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|set
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimestampWritable
parameter_list|(
name|TimestampWritable
name|t
parameter_list|)
block|{
name|this
argument_list|(
name|t
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimestampWritable
parameter_list|(
name|Timestamp
name|t
parameter_list|)
block|{
name|set
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|externalBytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|bytesEmpty
operator|=
literal|false
expr_stmt|;
name|currentBytes
operator|=
name|externalBytes
expr_stmt|;
name|clearTimestamp
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|Timestamp
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|timestamp
operator|.
name|setTime
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|timestamp
operator|.
name|setNanos
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|this
operator|.
name|timestamp
operator|=
name|t
expr_stmt|;
name|bytesEmpty
operator|=
literal|true
expr_stmt|;
name|timestampEmpty
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|TimestampWritable
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|bytesEmpty
condition|)
block|{
name|set
argument_list|(
name|t
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|t
operator|.
name|currentBytes
operator|==
name|t
operator|.
name|externalBytes
condition|)
block|{
name|set
argument_list|(
name|t
operator|.
name|currentBytes
argument_list|,
name|t
operator|.
name|offset
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
argument_list|(
name|t
operator|.
name|currentBytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|clearTimestamp
parameter_list|()
block|{
name|timestampEmpty
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|writeToByteStream
parameter_list|(
name|Output
name|byteStream
parameter_list|)
block|{
name|checkBytes
argument_list|()
expr_stmt|;
name|byteStream
operator|.
name|write
argument_list|(
name|currentBytes
argument_list|,
name|offset
argument_list|,
name|getTotalLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @return seconds corresponding to this TimestampWritable    */
specifier|public
name|int
name|getSeconds
parameter_list|()
block|{
if|if
condition|(
name|bytesEmpty
condition|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|timestamp
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
argument_list|)
return|;
block|}
return|return
name|TimestampWritable
operator|.
name|getSeconds
argument_list|(
name|currentBytes
argument_list|,
name|offset
argument_list|)
return|;
block|}
comment|/**    *    * @return nanoseconds in this TimestampWritable    */
specifier|public
name|int
name|getNanos
parameter_list|()
block|{
if|if
condition|(
operator|!
name|timestampEmpty
condition|)
block|{
return|return
name|timestamp
operator|.
name|getNanos
argument_list|()
return|;
block|}
return|return
name|hasDecimal
argument_list|()
condition|?
name|TimestampWritable
operator|.
name|getNanos
argument_list|(
name|currentBytes
argument_list|,
name|offset
operator|+
literal|4
argument_list|)
else|:
literal|0
return|;
block|}
comment|/**    *    * @return length of serialized TimestampWritable data    */
specifier|private
name|int
name|getTotalLength
parameter_list|()
block|{
return|return
literal|4
operator|+
name|getDecimalLength
argument_list|()
return|;
block|}
comment|/**    *    * @return number of bytes the variable length decimal takes up    */
specifier|private
name|int
name|getDecimalLength
parameter_list|()
block|{
name|checkBytes
argument_list|()
expr_stmt|;
return|return
name|hasDecimal
argument_list|()
condition|?
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|currentBytes
index|[
name|offset
operator|+
literal|4
index|]
argument_list|)
else|:
literal|0
return|;
block|}
specifier|public
name|Timestamp
name|getTimestamp
parameter_list|()
block|{
if|if
condition|(
name|timestampEmpty
condition|)
block|{
name|populateTimestamp
argument_list|()
expr_stmt|;
block|}
return|return
name|timestamp
return|;
block|}
comment|/**    * Used to create copies of objects    * @return a copy of the internal TimestampWritable byte[]    */
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
name|checkBytes
argument_list|()
expr_stmt|;
name|int
name|len
init|=
name|getTotalLength
argument_list|()
decl_stmt|;
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|currentBytes
argument_list|,
name|offset
argument_list|,
name|b
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * @return byte[] representation of TimestampWritable that is binary    * sortable (4 byte seconds, 4 bytes for nanoseconds)    */
specifier|public
name|byte
index|[]
name|getBinarySortable
parameter_list|()
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|int
name|nanos
init|=
name|getNanos
argument_list|()
decl_stmt|;
name|int
name|seconds
init|=
name|HAS_DECIMAL_MASK
operator||
name|getSeconds
argument_list|()
decl_stmt|;
name|intToBytes
argument_list|(
name|seconds
argument_list|,
name|b
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|intToBytes
argument_list|(
name|nanos
argument_list|,
name|b
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
comment|/**    * Given a byte[] that has binary sortable data, initialize the internal    * structures to hold that data    * @param bytes    * @param offset    */
specifier|public
name|void
name|setBinarySortable
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|seconds
init|=
name|bytesToInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|nanos
init|=
name|bytesToInt
argument_list|(
name|bytes
argument_list|,
name|offset
operator|+
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|nanos
operator|==
literal|0
condition|)
block|{
name|seconds
operator|&=
name|NO_DECIMAL_MASK
expr_stmt|;
block|}
else|else
block|{
name|seconds
operator||=
name|HAS_DECIMAL_MASK
expr_stmt|;
block|}
name|intToBytes
argument_list|(
name|seconds
argument_list|,
name|internalBytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|setNanosBytes
argument_list|(
name|nanos
argument_list|,
name|internalBytes
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|currentBytes
operator|=
name|internalBytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
block|}
comment|/**    * The data of TimestampWritable can be stored either in a byte[]    * or in a Timestamp object. Calling this method ensures that the byte[]    * is populated from the Timestamp object if previously empty.    */
specifier|private
name|void
name|checkBytes
parameter_list|()
block|{
if|if
condition|(
name|bytesEmpty
condition|)
block|{
comment|// Populate byte[] from Timestamp
name|convertTimestampToBytes
argument_list|(
name|timestamp
argument_list|,
name|internalBytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|offset
operator|=
literal|0
expr_stmt|;
name|currentBytes
operator|=
name|internalBytes
expr_stmt|;
name|bytesEmpty
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**    *    * @return double representation of the timestamp, accurate to nanoseconds    */
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
name|double
name|seconds
decl_stmt|,
name|nanos
decl_stmt|;
if|if
condition|(
name|bytesEmpty
condition|)
block|{
name|seconds
operator|=
name|timestamp
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
expr_stmt|;
name|nanos
operator|=
name|timestamp
operator|.
name|getNanos
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|seconds
operator|=
name|getSeconds
argument_list|()
expr_stmt|;
name|nanos
operator|=
name|getNanos
argument_list|()
expr_stmt|;
block|}
return|return
name|seconds
operator|+
operator|(
operator|(
name|double
operator|)
name|nanos
operator|)
operator|/
literal|1000000000
return|;
block|}
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|in
operator|.
name|readFully
argument_list|(
name|internalBytes
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|TimestampWritable
operator|.
name|hasDecimal
argument_list|(
name|internalBytes
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|in
operator|.
name|readFully
argument_list|(
name|internalBytes
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|len
init|=
operator|(
name|byte
operator|)
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|internalBytes
index|[
literal|4
index|]
argument_list|)
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|internalBytes
argument_list|,
literal|5
argument_list|,
name|len
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|currentBytes
operator|=
name|internalBytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|checkBytes
argument_list|()
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|currentBytes
argument_list|,
name|offset
argument_list|,
name|getTotalLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|write
argument_list|(
operator|(
name|OutputStream
operator|)
name|out
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|TimestampWritable
name|t
parameter_list|)
block|{
name|checkBytes
argument_list|()
expr_stmt|;
name|int
name|s1
init|=
name|this
operator|.
name|getSeconds
argument_list|()
decl_stmt|;
name|int
name|s2
init|=
name|t
operator|.
name|getSeconds
argument_list|()
decl_stmt|;
if|if
condition|(
name|s1
operator|==
name|s2
condition|)
block|{
name|int
name|n1
init|=
name|this
operator|.
name|getNanos
argument_list|()
decl_stmt|;
name|int
name|n2
init|=
name|t
operator|.
name|getNanos
argument_list|()
decl_stmt|;
if|if
condition|(
name|n1
operator|==
name|n2
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|n1
operator|-
name|n2
return|;
block|}
else|else
block|{
return|return
name|s1
operator|-
name|s2
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|TimestampWritable
operator|)
name|o
argument_list|)
operator|==
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|timestampEmpty
condition|)
block|{
name|populateTimestamp
argument_list|()
expr_stmt|;
block|}
name|String
name|timestampString
init|=
name|timestamp
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|timestampString
operator|.
name|length
argument_list|()
operator|>
literal|19
condition|)
block|{
if|if
condition|(
name|timestampString
operator|.
name|length
argument_list|()
operator|==
literal|21
condition|)
block|{
if|if
condition|(
name|timestampString
operator|.
name|substring
argument_list|(
literal|19
argument_list|)
operator|.
name|compareTo
argument_list|(
literal|".0"
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|dateFormat
operator|.
name|format
argument_list|(
name|timestamp
argument_list|)
return|;
block|}
block|}
return|return
name|dateFormat
operator|.
name|format
argument_list|(
name|timestamp
argument_list|)
operator|+
name|timestampString
operator|.
name|substring
argument_list|(
literal|19
argument_list|)
return|;
block|}
return|return
name|dateFormat
operator|.
name|format
argument_list|(
name|timestamp
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|long
name|seconds
init|=
name|getSeconds
argument_list|()
decl_stmt|;
name|seconds
operator|<<=
literal|32
expr_stmt|;
name|seconds
operator||=
name|getNanos
argument_list|()
expr_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
operator|(
name|seconds
operator|>>>
literal|32
operator|)
operator|^
name|seconds
argument_list|)
return|;
block|}
specifier|private
name|void
name|populateTimestamp
parameter_list|()
block|{
name|long
name|seconds
init|=
name|getSeconds
argument_list|()
decl_stmt|;
name|int
name|nanos
init|=
name|getNanos
argument_list|()
decl_stmt|;
name|timestamp
operator|.
name|setTime
argument_list|(
name|seconds
operator|*
literal|1000
argument_list|)
expr_stmt|;
name|timestamp
operator|.
name|setNanos
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
block|}
comment|/** Static methods **/
comment|/**    * Gets seconds stored as integer at bytes[offset]    * @param bytes    * @param offset    * @return the number of seconds    */
specifier|public
specifier|static
name|int
name|getSeconds
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|NO_DECIMAL_MASK
operator|&
name|bytesToInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|getNanos
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|vInt
argument_list|)
expr_stmt|;
name|int
name|val
init|=
name|vInt
operator|.
name|value
decl_stmt|;
name|int
name|len
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|floor
argument_list|(
name|Math
operator|.
name|log10
argument_list|(
name|val
argument_list|)
argument_list|)
operator|+
literal|1
decl_stmt|;
comment|// Reverse the value
name|int
name|tmp
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|val
operator|!=
literal|0
condition|)
block|{
name|tmp
operator|*=
literal|10
expr_stmt|;
name|tmp
operator|+=
name|val
operator|%
literal|10
expr_stmt|;
name|val
operator|/=
literal|10
expr_stmt|;
block|}
name|val
operator|=
name|tmp
expr_stmt|;
if|if
condition|(
name|len
operator|<
literal|9
condition|)
block|{
name|val
operator|*=
name|Math
operator|.
name|pow
argument_list|(
literal|10
argument_list|,
literal|9
operator|-
name|len
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
comment|/**    * Writes a Timestamp's serialized value to byte array b at    * @param t    * @param b    */
specifier|public
specifier|static
name|void
name|convertTimestampToBytes
parameter_list|(
name|Timestamp
name|t
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
if|if
condition|(
name|b
operator|.
name|length
operator|<
literal|9
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"byte array too short"
argument_list|)
expr_stmt|;
block|}
name|long
name|millis
init|=
name|t
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|int
name|nanos
init|=
name|t
operator|.
name|getNanos
argument_list|()
decl_stmt|;
name|boolean
name|hasDecimal
init|=
name|nanos
operator|!=
literal|0
operator|&&
name|setNanosBytes
argument_list|(
name|nanos
argument_list|,
name|b
argument_list|,
name|offset
operator|+
literal|4
argument_list|)
decl_stmt|;
name|setSecondsBytes
argument_list|(
name|millis
argument_list|,
name|b
argument_list|,
name|offset
argument_list|,
name|hasDecimal
argument_list|)
expr_stmt|;
block|}
comment|/**    * Given an integer representing seconds, write its serialized    * value to the byte array b at offset    * @param millis    * @param b    * @param offset    * @param hasDecimal    */
specifier|private
specifier|static
name|void
name|setSecondsBytes
parameter_list|(
name|long
name|millis
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|,
name|boolean
name|hasDecimal
parameter_list|)
block|{
name|int
name|seconds
init|=
call|(
name|int
call|)
argument_list|(
name|millis
operator|/
literal|1000
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasDecimal
condition|)
block|{
name|seconds
operator|&=
name|NO_DECIMAL_MASK
expr_stmt|;
block|}
else|else
block|{
name|seconds
operator||=
name|HAS_DECIMAL_MASK
expr_stmt|;
block|}
name|intToBytes
argument_list|(
name|seconds
argument_list|,
name|b
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
comment|/**    * Given an integer representing nanoseconds, write its serialized    * value to the byte array b at offset    *    * @param nanos    * @param b    * @param offset    * @return    */
specifier|private
specifier|static
name|boolean
name|setNanosBytes
parameter_list|(
name|int
name|nanos
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|int
name|decimal
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|nanos
operator|!=
literal|0
condition|)
block|{
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|counter
operator|<
literal|9
condition|)
block|{
name|decimal
operator|*=
literal|10
expr_stmt|;
name|decimal
operator|+=
name|nanos
operator|%
literal|10
expr_stmt|;
name|nanos
operator|/=
literal|10
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
block|}
name|LazyBinaryUtils
operator|.
name|writeVLongToByteArray
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|decimal
argument_list|)
expr_stmt|;
return|return
name|decimal
operator|!=
literal|0
return|;
block|}
comment|/**    * Interprets a float as a unix timestamp and returns a Timestamp object    * @param f    * @return the equivalent Timestamp object    */
specifier|public
specifier|static
name|Timestamp
name|floatToTimestamp
parameter_list|(
name|float
name|f
parameter_list|)
block|{
return|return
name|doubleToTimestamp
argument_list|(
operator|(
name|double
operator|)
name|f
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|decimalToTimestamp
parameter_list|(
name|BigDecimal
name|d
parameter_list|)
block|{
name|BigDecimal
name|seconds
init|=
operator|new
name|BigDecimal
argument_list|(
name|d
operator|.
name|longValue
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|millis
init|=
name|d
operator|.
name|multiply
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1000
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|int
name|nanos
init|=
name|d
operator|.
name|subtract
argument_list|(
name|seconds
argument_list|)
operator|.
name|multiply
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1000000000
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|Timestamp
name|t
init|=
operator|new
name|Timestamp
argument_list|(
name|millis
argument_list|)
decl_stmt|;
name|t
operator|.
name|setNanos
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|doubleToTimestamp
parameter_list|(
name|double
name|f
parameter_list|)
block|{
name|long
name|seconds
init|=
operator|(
name|long
operator|)
name|f
decl_stmt|;
comment|// We must ensure the exactness of the double's fractional portion.
comment|// 0.6 as the fraction part will be converted to 0.59999... and
comment|// significantly reduce the savings from binary serializtion
name|BigDecimal
name|bd
init|=
operator|new
name|BigDecimal
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
name|bd
operator|=
name|bd
operator|.
name|subtract
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|seconds
argument_list|)
argument_list|)
operator|.
name|multiply
argument_list|(
operator|new
name|BigDecimal
argument_list|(
literal|1000000000
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nanos
init|=
name|bd
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|// Convert to millis
name|long
name|millis
init|=
name|seconds
operator|*
literal|1000
decl_stmt|;
name|Timestamp
name|t
init|=
operator|new
name|Timestamp
argument_list|(
name|millis
argument_list|)
decl_stmt|;
comment|// Set remaining fractional portion to nanos
name|t
operator|.
name|setNanos
argument_list|(
name|nanos
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|public
specifier|static
name|void
name|setTimestamp
parameter_list|(
name|Timestamp
name|t
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|boolean
name|hasDecimal
init|=
name|hasDecimal
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
decl_stmt|;
name|t
operator|.
name|setTime
argument_list|(
operator|(
operator|(
name|long
operator|)
name|TimestampWritable
operator|.
name|getSeconds
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
operator|)
operator|*
literal|1000
argument_list|)
expr_stmt|;
if|if
condition|(
name|hasDecimal
condition|)
block|{
name|t
operator|.
name|setNanos
argument_list|(
name|TimestampWritable
operator|.
name|getNanos
argument_list|(
name|bytes
argument_list|,
name|offset
operator|+
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|Timestamp
name|createTimestamp
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|Timestamp
name|t
init|=
operator|new
name|Timestamp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|TimestampWritable
operator|.
name|setTimestamp
argument_list|(
name|t
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|public
name|boolean
name|hasDecimal
parameter_list|()
block|{
return|return
name|hasDecimal
argument_list|(
name|currentBytes
index|[
name|offset
index|]
argument_list|)
return|;
block|}
comment|/**    *    * @param b first byte in an encoded TimestampWritable    * @return true if it has a decimal portion, false otherwise    */
specifier|public
specifier|static
name|boolean
name|hasDecimal
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
return|return
operator|(
name|b
operator|>>
literal|7
operator|)
operator|!=
literal|0
return|;
block|}
comment|/**    * Writes<code>value</code> into<code>dest</code> at<code>offset</code>    * @param value    * @param dest    * @param offset    */
specifier|private
specifier|static
name|void
name|intToBytes
parameter_list|(
name|int
name|value
parameter_list|,
name|byte
index|[]
name|dest
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|dest
index|[
name|offset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|value
operator|>>
literal|24
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|dest
index|[
name|offset
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|value
operator|>>
literal|16
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|dest
index|[
name|offset
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
operator|(
name|value
operator|>>
literal|8
operator|)
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
name|dest
index|[
name|offset
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|value
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
comment|/**    *    * @param bytes    * @param offset    * @return integer represented by the four bytes in<code>bytes</code>    *  beginning at<code>offset</code>    */
specifier|private
specifier|static
name|int
name|bytesToInt
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
operator|(
operator|(
literal|0xFF
operator|&
name|bytes
index|[
name|offset
index|]
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
literal|0xFF
operator|&
name|bytes
index|[
name|offset
operator|+
literal|1
index|]
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
literal|0xFF
operator|&
name|bytes
index|[
name|offset
operator|+
literal|2
index|]
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
literal|0xFF
operator|&
name|bytes
index|[
name|offset
operator|+
literal|3
index|]
operator|)
return|;
block|}
block|}
end_class

end_unit

