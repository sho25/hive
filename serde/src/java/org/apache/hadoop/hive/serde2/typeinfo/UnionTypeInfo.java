begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_comment
comment|/**  * UnionTypeInfo represents the TypeInfo of an union. A union holds only one  * field of the specified fields at any point of time. The fields, a Union can  * hold, can have the same or different TypeInfo.  *  * Always use the TypeInfoFactory to create new TypeInfo objects, instead of  * directly creating an instance of this class.  */
end_comment

begin_class
specifier|public
class|class
name|UnionTypeInfo
extends|extends
name|TypeInfo
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|allUnionObjectTypeInfos
decl_stmt|;
comment|/**    * For java serialization use only.    */
specifier|public
name|UnionTypeInfo
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|UNION_TYPE_NAME
operator|+
literal|"<"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allUnionObjectTypeInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|allUnionObjectTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * For java serialization use only.    */
specifier|public
name|void
name|setAllUnionObjectTypeInfos
parameter_list|(
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|allUnionObjectTypeInfos
parameter_list|)
block|{
name|this
operator|.
name|allUnionObjectTypeInfos
operator|=
name|allUnionObjectTypeInfos
expr_stmt|;
block|}
comment|/**    * For TypeInfoFactory use only.    */
name|UnionTypeInfo
parameter_list|(
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
parameter_list|)
block|{
name|allUnionObjectTypeInfos
operator|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
expr_stmt|;
name|allUnionObjectTypeInfos
operator|.
name|addAll
argument_list|(
name|typeInfos
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|UNION
return|;
block|}
specifier|public
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|getAllUnionObjectTypeInfos
parameter_list|()
block|{
return|return
name|allUnionObjectTypeInfos
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|UnionTypeInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|UnionTypeInfo
name|o
init|=
operator|(
name|UnionTypeInfo
operator|)
name|other
decl_stmt|;
comment|// Compare the field types
return|return
name|o
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
operator|.
name|equals
argument_list|(
name|getAllUnionObjectTypeInfos
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|allUnionObjectTypeInfos
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

