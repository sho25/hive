begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyObjectInspectorParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyObjectInspectorParametersImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * LazyUnionObjectInspector works on union data that is stored in LazyUnion.  *  * Always use the {@link LazyObjectInspectorFactory} to create new  * ObjectInspector objects, instead of directly creating an instance of this  * class.  */
end_comment

begin_class
specifier|public
class|class
name|LazyUnionObjectInspector
implements|implements
name|UnionObjectInspector
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LazyUnionObjectInspector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
decl_stmt|;
specifier|private
name|byte
name|separator
decl_stmt|;
specifier|private
name|LazyObjectInspectorParameters
name|lazyParams
decl_stmt|;
specifier|protected
name|LazyUnionObjectInspector
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|LazyUnionObjectInspector
parameter_list|(
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
parameter_list|,
name|byte
name|separator
parameter_list|,
name|LazyObjectInspectorParameters
name|lazyParams
parameter_list|)
block|{
name|init
argument_list|(
name|ois
argument_list|,
name|separator
argument_list|,
name|lazyParams
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|ObjectInspectorUtils
operator|.
name|getStandardUnionTypeName
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|protected
name|void
name|init
parameter_list|(
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
parameter_list|,
name|byte
name|separator
parameter_list|,
name|LazyObjectInspectorParameters
name|lazyParams
parameter_list|)
block|{
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
name|this
operator|.
name|lazyParams
operator|=
name|lazyParams
expr_stmt|;
name|this
operator|.
name|ois
operator|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|ois
operator|.
name|addAll
argument_list|(
name|ois
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|UNION
return|;
block|}
specifier|public
name|byte
name|getSeparator
parameter_list|()
block|{
return|return
name|separator
return|;
block|}
specifier|public
name|Text
name|getNullSequence
parameter_list|()
block|{
return|return
name|lazyParams
operator|.
name|getNullSequence
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isEscaped
parameter_list|()
block|{
return|return
name|lazyParams
operator|.
name|isEscaped
argument_list|()
return|;
block|}
specifier|public
name|byte
name|getEscapeChar
parameter_list|()
block|{
return|return
name|lazyParams
operator|.
name|getEscapeChar
argument_list|()
return|;
block|}
specifier|public
name|LazyObjectInspectorParameters
name|getLazyParams
parameter_list|()
block|{
return|return
name|lazyParams
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getField
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|(
operator|(
name|LazyUnion
operator|)
name|data
operator|)
operator|.
name|getField
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|getObjectInspectors
parameter_list|()
block|{
return|return
name|ois
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|getTag
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|(
operator|(
name|LazyUnion
operator|)
name|data
operator|)
operator|.
name|getTag
argument_list|()
return|;
block|}
block|}
end_class

end_unit

