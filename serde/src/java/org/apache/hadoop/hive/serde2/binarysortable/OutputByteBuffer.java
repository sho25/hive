begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * This class is much more efficient than ByteArrayOutputStream  * because none of the methods are synchronized.  */
end_comment

begin_class
specifier|public
class|class
name|OutputByteBuffer
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|128
index|]
decl_stmt|;
name|int
name|length
decl_stmt|;
comment|/**    * Reset the byte buffer.    */
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|length
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|write
parameter_list|(
name|byte
name|b
parameter_list|)
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Write one byte to the byte buffer.    * Final method to help inlining.    * @param invert whether we want to invert all the bits.     */
specifier|public
specifier|final
name|void
name|write
parameter_list|(
name|byte
name|b
parameter_list|,
name|boolean
name|invert
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
name|data
operator|.
name|length
condition|)
block|{
name|data
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|data
argument_list|,
name|data
operator|.
name|length
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|invert
condition|)
block|{
name|data
index|[
name|length
operator|++
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
literal|0xff
operator|^
name|b
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
index|[
name|length
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
block|}
comment|/**    * Returns the underlying byte array.    */
specifier|public
specifier|final
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
comment|/**    * Returns the current length.    */
specifier|public
specifier|final
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
comment|/**    * Return the bytes in hex format.    */
specifier|public
name|String
name|dumpHex
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
name|data
index|[
name|i
index|]
decl_stmt|;
name|int
name|v
init|=
operator|(
name|b
operator|<
literal|0
condition|?
literal|256
operator|+
name|b
else|:
name|b
operator|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"x%02x"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

