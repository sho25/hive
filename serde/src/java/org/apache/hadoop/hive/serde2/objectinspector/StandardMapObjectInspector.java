begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * StandardMapObjectInspector works on map data that is stored as a Java Map object.  * Note: the key object of the map must support equals and hashCode by itself.  *   * We also plan to have a GeneralMapObjectInspector which can work on map with   * key objects that does not support equals and hashCode.  That will require us to   * store InspectableObject as the key, which will have overridden equals and hashCode   * methods.  *   * Always use the ObjectInspectorFactory to create new ObjectInspector objects, instead  * of directly creating an instance of this class.   */
end_comment

begin_class
class|class
name|StandardMapObjectInspector
implements|implements
name|MapObjectInspector
block|{
name|ObjectInspector
name|mapKeyObjectInspector
decl_stmt|;
name|ObjectInspector
name|mapValueObjectInspector
decl_stmt|;
comment|/** Call ObjectInspectorFactory.getStandardMapObjectInspector instead.    */
specifier|protected
name|StandardMapObjectInspector
parameter_list|(
name|ObjectInspector
name|mapKeyObjectInspector
parameter_list|,
name|ObjectInspector
name|mapValueObjectInspector
parameter_list|)
block|{
name|this
operator|.
name|mapKeyObjectInspector
operator|=
name|mapKeyObjectInspector
expr_stmt|;
name|this
operator|.
name|mapValueObjectInspector
operator|=
name|mapValueObjectInspector
expr_stmt|;
block|}
comment|// without data
specifier|public
name|ObjectInspector
name|getMapKeyObjectInspector
parameter_list|()
block|{
return|return
name|mapKeyObjectInspector
return|;
block|}
specifier|public
name|ObjectInspector
name|getMapValueObjectInspector
parameter_list|()
block|{
return|return
name|mapValueObjectInspector
return|;
block|}
comment|// with data
comment|// TODO: Now we assume the key Object supports hashCode and equals functions.
specifier|public
name|Object
name|getMapValueElement
parameter_list|(
name|Object
name|data
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
operator|||
name|key
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|data
decl_stmt|;
return|return
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
name|int
name|getMapSize
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return
operator|-
literal|1
return|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|data
decl_stmt|;
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|getMap
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|data
decl_stmt|;
return|return
name|map
return|;
block|}
specifier|public
specifier|final
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|MAP
return|;
block|}
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
literal|"map<"
operator|+
name|mapKeyObjectInspector
operator|.
name|getTypeName
argument_list|()
operator|+
literal|","
operator|+
name|mapValueObjectInspector
operator|.
name|getTypeName
argument_list|()
operator|+
literal|">"
return|;
block|}
block|}
end_class

end_unit

