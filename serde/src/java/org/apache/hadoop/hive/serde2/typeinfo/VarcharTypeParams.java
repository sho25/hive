begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_class
specifier|public
class|class
name|VarcharTypeParams
extends|extends
name|BaseTypeParams
implements|implements
name|Serializable
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|public
name|int
name|length
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|validateParams
parameter_list|()
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|length
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"VARCHAR length must be positive"
argument_list|)
throw|;
block|}
if|if
condition|(
name|length
operator|>
name|HiveVarchar
operator|.
name|MAX_VARCHAR_LENGTH
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Length "
operator|+
name|length
operator|+
literal|" exceeds max varchar length of "
operator|+
name|HiveVarchar
operator|.
name|MAX_VARCHAR_LENGTH
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|populateParams
parameter_list|(
name|String
index|[]
name|params
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|params
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Invalid number of parameters for VARCHAR"
argument_list|)
throw|;
block|}
try|try
block|{
name|length
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Error setting VARCHAR length: "
operator|+
name|err
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|length
operator|=
name|WritableUtils
operator|.
name|readVInt
argument_list|(
name|in
argument_list|)
expr_stmt|;
try|try
block|{
name|validateParams
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|err
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|err
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeVInt
argument_list|(
name|out
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|void
name|setLength
parameter_list|(
name|int
name|len
parameter_list|)
block|{
name|length
operator|=
name|len
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasCharacterMaximumLength
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCharacterMaximumLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
block|}
end_class

end_unit

