begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_class
specifier|public
class|class
name|JavaTimestampObjectInspector
extends|extends
name|AbstractPrimitiveJavaObjectInspector
implements|implements
name|SettableTimestampObjectInspector
block|{
specifier|protected
name|JavaTimestampObjectInspector
parameter_list|()
block|{
name|super
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|timestampTypeEntry
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TimestampWritable
name|getPrimitiveWritableObject
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|TimestampWritable
argument_list|(
operator|(
name|Timestamp
operator|)
name|o
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Timestamp
name|getPrimitiveJavaObject
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
name|o
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|Timestamp
operator|)
name|o
return|;
block|}
specifier|public
name|Timestamp
name|get
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
return|return
operator|(
name|Timestamp
operator|)
name|o
return|;
block|}
specifier|public
name|Object
name|set
parameter_list|(
name|Object
name|o
parameter_list|,
name|Timestamp
name|value
parameter_list|)
block|{
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
operator|(
operator|(
name|Timestamp
operator|)
name|o
operator|)
operator|.
name|setTime
argument_list|(
name|value
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
specifier|public
name|Object
name|set
parameter_list|(
name|Object
name|o
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
name|TimestampWritable
operator|.
name|setTimestamp
argument_list|(
operator|(
name|Timestamp
operator|)
name|o
argument_list|,
name|bytes
argument_list|,
name|offset
argument_list|)
expr_stmt|;
return|return
name|o
return|;
block|}
specifier|public
name|Object
name|set
parameter_list|(
name|Object
name|o
parameter_list|,
name|TimestampWritable
name|tw
parameter_list|)
block|{
if|if
condition|(
name|tw
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Timestamp
name|t
init|=
operator|(
name|Timestamp
operator|)
name|o
decl_stmt|;
name|t
operator|.
name|setTime
argument_list|(
name|tw
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|setNanos
argument_list|(
name|tw
operator|.
name|getTimestamp
argument_list|()
operator|.
name|getNanos
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|public
name|Object
name|create
parameter_list|(
name|Timestamp
name|value
parameter_list|)
block|{
return|return
operator|new
name|Timestamp
argument_list|(
name|value
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|Object
name|create
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|)
block|{
return|return
name|TimestampWritable
operator|.
name|createTimestamp
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
return|;
block|}
block|}
end_class

end_unit

