begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Abstract class for implementing SerDe. The abstract class has been created, so that  * new methods can be added in the underlying interface, SerDe, and only implementations  * that need those methods overwrite it.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractSerDe
implements|implements
name|SerDe
block|{
specifier|protected
name|String
name|configErrors
decl_stmt|;
comment|/**    * Initialize the SerDe. By default, this will use one set of properties, either the    * table properties or the partition properties. If a SerDe needs access to both sets,    * it should override this method.    *    * Eventually, once all SerDes have implemented this method,    * we should convert it to an abstract method.    *    * @param configuration        Hadoop configuration    * @param tableProperties      Table properties    * @param partitionProperties  Partition properties    * @throws SerDeException    */
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|configuration
parameter_list|,
name|Properties
name|tableProperties
parameter_list|,
name|Properties
name|partitionProperties
parameter_list|)
throws|throws
name|SerDeException
block|{
name|initialize
argument_list|(
name|configuration
argument_list|,
name|SerDeUtils
operator|.
name|createOverlayedProperties
argument_list|(
name|tableProperties
argument_list|,
name|partitionProperties
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize the HiveSerializer.    *    * @param conf    *          System properties. Can be null in compile time    * @param tbl    *          table properties    * @throws SerDeException    */
annotation|@
name|Deprecated
specifier|public
specifier|abstract
name|void
name|initialize
parameter_list|(
annotation|@
name|Nullable
name|Configuration
name|conf
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
function_decl|;
comment|/**    * Returns the Writable class that would be returned by the serialize method.    * This is used to initialize SequenceFile header.    */
specifier|public
specifier|abstract
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
function_decl|;
comment|/**    * Serialize an object by navigating inside the Object with the    * ObjectInspector. In most cases, the return value of this function will be    * constant since the function will reuse the Writable object. If the client    * wants to keep a copy of the Writable, the client needs to clone the    * returned value.    */
specifier|public
specifier|abstract
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
function_decl|;
comment|/**    * Returns statistics collected when serializing    */
specifier|public
specifier|abstract
name|SerDeStats
name|getSerDeStats
parameter_list|()
function_decl|;
comment|/**    * Deserialize an object out of a Writable blob. In most cases, the return    * value of this function will be constant since the function will reuse the    * returned object. If the client wants to keep a copy of the object, the    * client needs to clone the returned value by calling    * ObjectInspectorUtils.getStandardObject().    *    * @param blob    *          The Writable object containing a serialized object    * @return A Java object representing the contents in the blob.    */
specifier|public
specifier|abstract
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
function_decl|;
comment|/**    * Get the object inspector that can be used to navigate through the internal    * structure of the Object returned from deserialize(...).    */
specifier|public
specifier|abstract
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
function_decl|;
comment|/**    * Get the error messages during the Serde configuration    *    * @return The error messages in the configuration which are empty if no error occurred    */
specifier|public
name|String
name|getConfigurationErrors
parameter_list|()
block|{
if|if
condition|(
name|configErrors
operator|==
literal|null
operator|||
name|configErrors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|""
return|;
block|}
else|else
block|{
return|return
name|configErrors
return|;
block|}
block|}
block|}
end_class

end_unit

