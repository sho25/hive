begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_comment
comment|/**  * ObjectInspectorFactory is the primary way to create new ObjectInspector instances.  *   * SerDe classes should call the static functions in this library to create an ObjectInspector  * to return to the caller of SerDe2.getObjectInspector().   */
end_comment

begin_class
specifier|public
class|class
name|ObjectInspectorUtils
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ObjectInspectorUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/** This function defines the list of PrimitiveClasses that we support.     *  A PrimitiveClass should support java serialization/deserialization.    */
specifier|public
specifier|static
name|boolean
name|isPrimitiveClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|c
operator|==
name|String
operator|.
name|class
operator|)
operator|||
operator|(
name|c
operator|==
name|Boolean
operator|.
name|class
operator|)
operator|||
operator|(
name|c
operator|==
name|Character
operator|.
name|class
operator|)
operator|||
operator|(
name|c
operator|==
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
operator|)
operator|||
name|java
operator|.
name|lang
operator|.
name|Number
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
operator|||
operator|(
name|c
operator|==
name|Void
operator|.
name|class
operator|)
operator|||
name|c
operator|.
name|isPrimitive
argument_list|()
operator|)
return|;
block|}
comment|/**    * Generalize the Java primitive types to the corresponding     * Java Classes.      */
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|generalizePrimitive
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|primitiveClass
parameter_list|)
block|{
if|if
condition|(
name|primitiveClass
operator|==
name|Boolean
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Boolean
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Byte
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Byte
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Character
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Character
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Short
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Short
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Integer
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Integer
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Long
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Long
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Float
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Float
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Double
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Double
operator|.
name|class
expr_stmt|;
if|if
condition|(
name|primitiveClass
operator|==
name|Void
operator|.
name|TYPE
condition|)
name|primitiveClass
operator|=
name|Void
operator|.
name|class
expr_stmt|;
return|return
name|primitiveClass
return|;
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
name|classToTypeName
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|classToTypeName
operator|.
name|put
argument_list|(
name|Boolean
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
expr_stmt|;
name|classToTypeName
operator|.
name|put
argument_list|(
name|Byte
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|TINYINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|classToTypeName
operator|.
name|put
argument_list|(
name|Short
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|classToTypeName
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|)
expr_stmt|;
name|classToTypeName
operator|.
name|put
argument_list|(
name|Long
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
expr_stmt|;
name|classToTypeName
operator|.
name|put
argument_list|(
name|Float
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
expr_stmt|;
name|classToTypeName
operator|.
name|put
argument_list|(
name|Double
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
expr_stmt|;
name|classToTypeName
operator|.
name|put
argument_list|(
name|String
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|)
expr_stmt|;
name|classToTypeName
operator|.
name|put
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|DATE_TYPE_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get the short name for the types    */
specifier|public
specifier|static
name|String
name|getClassShortName
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|classObject
parameter_list|)
block|{
name|String
name|result
init|=
name|classToTypeName
operator|.
name|get
argument_list|(
name|classObject
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|classObject
operator|.
name|getName
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"unsupported class: "
operator|+
name|result
argument_list|)
expr_stmt|;
comment|// Remove prefix
name|String
name|prefix
init|=
literal|"java.lang."
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|result
operator|=
name|result
operator|.
name|substring
argument_list|(
name|prefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|static
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
name|integerArrayCache
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Returns an array of Integer strings, starting from "0".    * This function caches the arrays to provide a better performance.     */
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getIntegerArray
parameter_list|(
name|int
name|size
parameter_list|)
block|{
while|while
condition|(
name|integerArrayCache
operator|.
name|size
argument_list|()
operator|<=
name|size
condition|)
block|{
name|integerArrayCache
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
name|integerArrayCache
operator|.
name|get
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|integerArrayCache
operator|.
name|set
argument_list|(
name|size
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|static
name|ArrayList
argument_list|<
name|String
argument_list|>
name|integerCSVCache
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|String
name|getIntegerCSV
parameter_list|(
name|int
name|size
parameter_list|)
block|{
while|while
condition|(
name|integerCSVCache
operator|.
name|size
argument_list|()
operator|<=
name|size
condition|)
block|{
name|integerCSVCache
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|String
name|result
init|=
name|integerCSVCache
operator|.
name|get
argument_list|(
name|size
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|""
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|sb
operator|.
name|toString
argument_list|()
expr_stmt|;
name|integerCSVCache
operator|.
name|set
argument_list|(
name|size
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the standard ObjectInspector for an ObjectInspector.    *     * The returned ObjectInspector can be used to inspect the standard object.    */
specifier|public
specifier|static
name|ObjectInspector
name|getStandardObjectInspector
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
name|ObjectInspector
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|poi
expr_stmt|;
break|break;
block|}
case|case
name|LIST
case|:
block|{
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MAP
case|:
block|{
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|,
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRUCT
case|:
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StructField
name|f
range|:
name|fields
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|f
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|f
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldObjectInspectors
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown ObjectInspector category!"
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|// TODO: should return o if the ObjectInspector is a standard ObjectInspector hierarchy
comment|// (all internal ObjectInspector needs to be standard ObjectInspectors)
specifier|public
specifier|static
name|Object
name|getStandardObject
parameter_list|(
name|Object
name|o
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|result
operator|=
name|o
expr_stmt|;
break|break;
block|}
case|case
name|LIST
case|:
block|{
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|int
name|length
init|=
name|loi
operator|.
name|getListLength
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|getStandardObject
argument_list|(
name|loi
operator|.
name|getListElement
argument_list|(
name|o
argument_list|,
name|i
argument_list|)
argument_list|,
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|list
expr_stmt|;
break|break;
block|}
case|case
name|MAP
case|:
block|{
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|omap
init|=
name|moi
operator|.
name|getMap
argument_list|(
name|o
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|entry
range|:
name|omap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|getStandardObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|)
argument_list|,
name|getStandardObject
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|map
expr_stmt|;
break|break;
block|}
case|case
name|STRUCT
case|:
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|struct
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StructField
name|f
range|:
name|fields
control|)
block|{
name|struct
operator|.
name|add
argument_list|(
name|getStandardObject
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|o
argument_list|,
name|f
argument_list|)
argument_list|,
name|f
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|struct
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown ObjectInspector category!"
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|String
name|getStandardStructTypeName
parameter_list|(
name|StructObjectInspector
name|soi
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"struct{"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|StructField
name|getStandardStructFieldRef
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
parameter_list|)
block|{
name|fieldName
operator|=
name|fieldName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
comment|// For backward compatibility: fieldNames can also be integer Strings.
try|try
block|{
name|int
name|i
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot find field "
operator|+
name|fieldName
operator|+
literal|" from "
operator|+
name|fields
argument_list|)
throw|;
comment|// return null;
block|}
block|}
end_class

end_unit

