begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Modifier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ConstantObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|AbstractPrimitiveWritableObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|BooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|DoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|FloatObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|IntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|ShortObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|TimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_comment
comment|/**  * ObjectInspectorFactory is the primary way to create new ObjectInspector  * instances.  *  * SerDe classes should call the static functions in this library to create an  * ObjectInspector to return to the caller of SerDe2.getObjectInspector().  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ObjectInspectorUtils
block|{
specifier|protected
specifier|final
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|ObjectInspectorUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * This enum controls how we copy primitive objects.    *    * DEFAULT means choosing the most efficient way between JAVA and WRITABLE.    * JAVA means converting all primitive objects to java primitive objects.    * WRITABLE means converting all primitive objects to writable objects.    *    */
specifier|public
enum|enum
name|ObjectInspectorCopyOption
block|{
name|DEFAULT
block|,
name|JAVA
block|,
name|WRITABLE
block|}
comment|/**    * Ensures that an ObjectInspector is Writable.    */
specifier|public
specifier|static
name|ObjectInspector
name|getWritableObjectInspector
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
comment|// All non-primitive OIs are writable so we need only check this case.
if|if
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|poi
operator|instanceof
name|AbstractPrimitiveWritableObjectInspector
operator|)
condition|)
block|{
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
return|;
block|}
block|}
return|return
name|oi
return|;
block|}
comment|/**    * Get the corresponding standard ObjectInspector for an ObjectInspector.    *    * The returned ObjectInspector can be used to inspect the standard object.    */
specifier|public
specifier|static
name|ObjectInspector
name|getStandardObjectInspector
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
return|return
name|getStandardObjectInspector
argument_list|(
name|oi
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|ObjectInspector
name|getStandardObjectInspector
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|ObjectInspectorCopyOption
name|objectInspectorOption
parameter_list|)
block|{
name|ObjectInspector
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
switch|switch
condition|(
name|objectInspectorOption
condition|)
block|{
case|case
name|DEFAULT
case|:
block|{
if|if
condition|(
name|poi
operator|.
name|preferWritable
argument_list|()
condition|)
block|{
name|result
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|JAVA
case|:
block|{
name|result
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|WRITABLE
case|:
block|{
name|result
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
break|break;
block|}
case|case
name|LIST
case|:
block|{
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|getStandardObjectInspector
argument_list|(
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|,
name|objectInspectorOption
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MAP
case|:
block|{
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|getStandardObjectInspector
argument_list|(
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|,
name|objectInspectorOption
argument_list|)
argument_list|,
name|getStandardObjectInspector
argument_list|(
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|,
name|objectInspectorOption
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRUCT
case|:
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StructField
name|f
range|:
name|fields
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|f
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|getStandardObjectInspector
argument_list|(
name|f
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|objectInspectorOption
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldObjectInspectors
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|UNION
case|:
block|{
name|UnionObjectInspector
name|uoi
init|=
operator|(
name|UnionObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectInspector
name|eoi
range|:
name|uoi
operator|.
name|getObjectInspectors
argument_list|()
control|)
block|{
name|ois
operator|.
name|add
argument_list|(
name|getStandardObjectInspector
argument_list|(
name|eoi
argument_list|,
name|objectInspectorOption
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardUnionObjectInspector
argument_list|(
name|ois
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown ObjectInspector category!"
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Copy specified fields in the input row to the output array of standard objects.    * @param result output list of standard objects.    * @param row input row.    * @param startCol starting column number from the input row.    * @param numCols number of columns to copy.    * @param soi Object inspector for the to-be-copied columns.    */
specifier|public
specifier|static
name|void
name|partialCopyToStandardObject
parameter_list|(
name|List
argument_list|<
name|Object
argument_list|>
name|result
parameter_list|,
name|Object
name|row
parameter_list|,
name|int
name|startCol
parameter_list|,
name|int
name|numCols
parameter_list|,
name|StructObjectInspector
name|soi
parameter_list|,
name|ObjectInspectorCopyOption
name|objectInspectorOption
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|,
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StructField
name|f
range|:
name|fields
control|)
block|{
if|if
condition|(
name|i
operator|++
operator|>=
name|startCol
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|copyToStandardObject
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|f
argument_list|)
argument_list|,
name|f
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|objectInspectorOption
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|==
name|numCols
condition|)
block|{
break|break;
block|}
block|}
block|}
block|}
comment|/**    * Returns a deep copy of the Object o that can be scanned by a    * StandardObjectInspector returned by getStandardObjectInspector(oi).    */
specifier|public
specifier|static
name|Object
name|copyToStandardObject
parameter_list|(
name|Object
name|o
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
block|{
return|return
name|copyToStandardObject
argument_list|(
name|o
argument_list|,
name|oi
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|DEFAULT
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Object
name|copyToStandardObject
parameter_list|(
name|Object
name|o
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|,
name|ObjectInspectorCopyOption
name|objectInspectorOption
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Object
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveObjectInspector
name|loi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
switch|switch
condition|(
name|objectInspectorOption
condition|)
block|{
case|case
name|DEFAULT
case|:
block|{
if|if
condition|(
name|loi
operator|.
name|preferWritable
argument_list|()
condition|)
block|{
name|result
operator|=
name|loi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|loi
operator|.
name|copyObject
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|loi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|JAVA
case|:
block|{
name|result
operator|=
name|loi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|WRITABLE
case|:
block|{
name|result
operator|=
name|loi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|loi
operator|.
name|copyObject
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
break|break;
block|}
case|case
name|LIST
case|:
block|{
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|int
name|length
init|=
name|loi
operator|.
name|getListLength
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|copyToStandardObject
argument_list|(
name|loi
operator|.
name|getListElement
argument_list|(
name|o
argument_list|,
name|i
argument_list|)
argument_list|,
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|,
name|objectInspectorOption
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|list
expr_stmt|;
break|break;
block|}
case|case
name|MAP
case|:
block|{
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|omap
init|=
name|moi
operator|.
name|getMap
argument_list|(
name|o
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
extends|extends
name|Object
argument_list|,
name|?
extends|extends
name|Object
argument_list|>
name|entry
range|:
name|omap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|copyToStandardObject
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|,
name|objectInspectorOption
argument_list|)
argument_list|,
name|copyToStandardObject
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|,
name|objectInspectorOption
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|map
expr_stmt|;
break|break;
block|}
case|case
name|STRUCT
case|:
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|struct
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StructField
name|f
range|:
name|fields
control|)
block|{
name|struct
operator|.
name|add
argument_list|(
name|copyToStandardObject
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|o
argument_list|,
name|f
argument_list|)
argument_list|,
name|f
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|objectInspectorOption
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|struct
expr_stmt|;
break|break;
block|}
case|case
name|UNION
case|:
block|{
name|UnionObjectInspector
name|uoi
init|=
operator|(
name|UnionObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|objectInspectors
init|=
name|uoi
operator|.
name|getObjectInspectors
argument_list|()
decl_stmt|;
name|Object
name|object
init|=
name|copyToStandardObject
argument_list|(
name|uoi
operator|.
name|getField
argument_list|(
name|o
argument_list|)
argument_list|,
name|objectInspectors
operator|.
name|get
argument_list|(
name|uoi
operator|.
name|getTag
argument_list|(
name|o
argument_list|)
argument_list|)
argument_list|,
name|objectInspectorOption
argument_list|)
decl_stmt|;
name|result
operator|=
name|object
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown ObjectInspector category!"
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|String
name|getStandardStructTypeName
parameter_list|(
name|StructObjectInspector
name|soi
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"struct<"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getStandardUnionTypeName
parameter_list|(
name|UnionObjectInspector
name|uoi
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|UNION_TYPE_NAME
operator|+
literal|"<"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
init|=
name|uoi
operator|.
name|getObjectInspectors
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ois
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|ois
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|StructField
name|getStandardStructFieldRef
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
parameter_list|)
block|{
name|fieldName
operator|=
name|fieldName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
operator|.
name|equals
argument_list|(
name|fieldName
argument_list|)
condition|)
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
comment|// For backward compatibility: fieldNames can also be integer Strings.
try|try
block|{
name|int
name|i
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"cannot find field "
operator|+
name|fieldName
operator|+
literal|" from "
operator|+
name|fields
argument_list|)
throw|;
comment|// return null;
block|}
comment|/**    * Get all the declared non-static fields of Class c.    */
specifier|public
specifier|static
name|Field
index|[]
name|getDeclaredNonStaticFields
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
block|{
name|Field
index|[]
name|f
init|=
name|c
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Field
argument_list|>
name|af
init|=
operator|new
name|ArrayList
argument_list|<
name|Field
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|f
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|Modifier
operator|.
name|isStatic
argument_list|(
name|f
index|[
name|i
index|]
operator|.
name|getModifiers
argument_list|()
argument_list|)
condition|)
block|{
name|af
operator|.
name|add
argument_list|(
name|f
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|Field
index|[]
name|r
init|=
operator|new
name|Field
index|[
name|af
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|af
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|r
index|[
name|i
index|]
operator|=
name|af
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
comment|/**    * Get the class names of the ObjectInspector hierarchy. Mainly used for    * debugging.    */
specifier|public
specifier|static
name|String
name|getObjectInspectorName
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
return|return
name|oi
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
return|;
block|}
case|case
name|LIST
case|:
block|{
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
return|return
name|oi
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"<"
operator|+
name|getObjectInspectorName
argument_list|(
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
operator|+
literal|">"
return|;
block|}
case|case
name|MAP
case|:
block|{
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
return|return
name|oi
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"<"
operator|+
name|getObjectInspectorName
argument_list|(
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|)
operator|+
literal|","
operator|+
name|getObjectInspectorName
argument_list|(
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|)
operator|+
literal|">"
return|;
block|}
case|case
name|STRUCT
case|:
block|{
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|oi
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"<"
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|getObjectInspectorName
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|fields
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
case|case
name|UNION
case|:
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
name|oi
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|"<"
argument_list|)
expr_stmt|;
name|UnionObjectInspector
name|uoi
init|=
operator|(
name|UnionObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
init|=
name|uoi
operator|.
name|getObjectInspectors
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ois
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
name|getObjectInspectorName
argument_list|(
name|ois
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown ObjectInspector category!"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|int
name|hashCode
parameter_list|(
name|Object
name|o
parameter_list|,
name|ObjectInspector
name|objIns
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
switch|switch
condition|(
name|objIns
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|objIns
operator|)
decl_stmt|;
switch|switch
condition|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
return|return
literal|0
return|;
case|case
name|BOOLEAN
case|:
return|return
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
condition|?
literal|1
else|:
literal|0
return|;
case|case
name|BYTE
case|:
return|return
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
return|;
case|case
name|INT
case|:
return|return
operator|(
operator|(
name|IntObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
return|;
case|case
name|LONG
case|:
block|{
name|long
name|a
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
operator|(
name|a
operator|>>>
literal|32
operator|)
operator|^
name|a
argument_list|)
return|;
block|}
case|case
name|FLOAT
case|:
return|return
name|Float
operator|.
name|floatToIntBits
argument_list|(
operator|(
operator|(
name|FloatObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
return|;
case|case
name|DOUBLE
case|:
block|{
comment|// This hash function returns the same result as Double.hashCode()
comment|// while DoubleWritable.hashCode returns a different result.
name|long
name|a
init|=
name|Double
operator|.
name|doubleToLongBits
argument_list|(
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|poi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
decl_stmt|;
return|return
call|(
name|int
call|)
argument_list|(
operator|(
name|a
operator|>>>
literal|32
operator|)
operator|^
name|a
argument_list|)
return|;
block|}
case|case
name|STRING
case|:
block|{
comment|// This hash function returns the same result as String.hashCode() when
comment|// all characters are ASCII, while Text.hashCode() always returns a
comment|// different result.
name|Text
name|t
init|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|int
name|r
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|t
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|r
operator|=
name|r
operator|*
literal|31
operator|+
name|t
operator|.
name|getBytes
argument_list|()
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
case|case
name|BINARY
case|:
return|return
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|hashCode
argument_list|()
return|;
case|case
name|TIMESTAMP
case|:
name|TimestampWritable
name|t
init|=
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|poi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
return|return
name|t
operator|.
name|hashCode
argument_list|()
return|;
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type: "
operator|+
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
case|case
name|LIST
case|:
block|{
name|int
name|r
init|=
literal|0
decl_stmt|;
name|ListObjectInspector
name|listOI
init|=
operator|(
name|ListObjectInspector
operator|)
name|objIns
decl_stmt|;
name|ObjectInspector
name|elemOI
init|=
name|listOI
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|listOI
operator|.
name|getListLength
argument_list|(
name|o
argument_list|)
condition|;
operator|++
name|ii
control|)
block|{
name|r
operator|=
literal|31
operator|*
name|r
operator|+
name|hashCode
argument_list|(
name|listOI
operator|.
name|getListElement
argument_list|(
name|o
argument_list|,
name|ii
argument_list|)
argument_list|,
name|elemOI
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
case|case
name|MAP
case|:
block|{
name|int
name|r
init|=
literal|0
decl_stmt|;
name|MapObjectInspector
name|mapOI
init|=
operator|(
name|MapObjectInspector
operator|)
name|objIns
decl_stmt|;
name|ObjectInspector
name|keyOI
init|=
name|mapOI
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valueOI
init|=
name|mapOI
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|map
init|=
name|mapOI
operator|.
name|getMap
argument_list|(
name|o
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|r
operator|+=
name|hashCode
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|keyOI
argument_list|)
operator|^
name|hashCode
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|valueOI
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hash code on complex types not supported yet."
argument_list|)
throw|;
block|}
block|}
comment|/**    * Compare two arrays of objects with their respective arrays of    * ObjectInspectors.    */
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|Object
index|[]
name|o1
parameter_list|,
name|ObjectInspector
index|[]
name|oi1
parameter_list|,
name|Object
index|[]
name|o2
parameter_list|,
name|ObjectInspector
index|[]
name|oi2
parameter_list|)
block|{
assert|assert
operator|(
name|o1
operator|.
name|length
operator|==
name|oi1
operator|.
name|length
operator|)
assert|;
assert|assert
operator|(
name|o2
operator|.
name|length
operator|==
name|oi2
operator|.
name|length
operator|)
assert|;
assert|assert
operator|(
name|o1
operator|.
name|length
operator|==
name|o2
operator|.
name|length
operator|)
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|o1
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|int
name|r
init|=
name|compare
argument_list|(
name|o1
index|[
name|i
index|]
argument_list|,
name|oi1
index|[
name|i
index|]
argument_list|,
name|o2
index|[
name|i
index|]
argument_list|,
name|oi2
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
return|return
name|r
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Whether comparison is supported for this type.    * Currently all types that references any map are not comparable.    */
specifier|public
specifier|static
name|boolean
name|compareSupported
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
return|return
literal|true
return|;
case|case
name|LIST
case|:
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
return|return
name|compareSupported
argument_list|(
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
return|;
case|case
name|STRUCT
case|:
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|f
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|compareSupported
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|f
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
case|case
name|MAP
case|:
return|return
literal|false
return|;
case|case
name|UNION
case|:
name|UnionObjectInspector
name|uoi
init|=
operator|(
name|UnionObjectInspector
operator|)
name|oi
decl_stmt|;
for|for
control|(
name|ObjectInspector
name|eoi
range|:
name|uoi
operator|.
name|getObjectInspectors
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|compareSupported
argument_list|(
name|eoi
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Compare two objects with their respective ObjectInspectors.    */
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|ObjectInspector
name|oi1
parameter_list|,
name|Object
name|o2
parameter_list|,
name|ObjectInspector
name|oi2
parameter_list|)
block|{
return|return
name|compare
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|o2
argument_list|,
name|oi2
argument_list|,
operator|new
name|FullMapEqualComparer
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Compare two objects with their respective ObjectInspectors.    */
specifier|public
specifier|static
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|ObjectInspector
name|oi1
parameter_list|,
name|Object
name|o2
parameter_list|,
name|ObjectInspector
name|oi2
parameter_list|,
name|MapEqualComparer
name|mapEqualComparer
parameter_list|)
block|{
if|if
condition|(
name|oi1
operator|.
name|getCategory
argument_list|()
operator|!=
name|oi2
operator|.
name|getCategory
argument_list|()
condition|)
block|{
return|return
name|oi1
operator|.
name|getCategory
argument_list|()
operator|.
name|compareTo
argument_list|(
name|oi2
operator|.
name|getCategory
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|o1
operator|==
literal|null
condition|)
block|{
return|return
name|o2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|1
return|;
block|}
switch|switch
condition|(
name|oi1
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveObjectInspector
name|poi1
init|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi1
operator|)
decl_stmt|;
name|PrimitiveObjectInspector
name|poi2
init|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi2
operator|)
decl_stmt|;
if|if
condition|(
name|poi1
operator|.
name|getPrimitiveCategory
argument_list|()
operator|!=
name|poi2
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
return|return
name|poi1
operator|.
name|getPrimitiveCategory
argument_list|()
operator|.
name|compareTo
argument_list|(
name|poi2
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
return|;
block|}
switch|switch
condition|(
name|poi1
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
return|return
literal|0
return|;
case|case
name|BOOLEAN
case|:
block|{
name|int
name|v1
init|=
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|poi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
name|int
name|v2
init|=
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|poi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
condition|?
literal|1
else|:
literal|0
decl_stmt|;
return|return
name|v1
operator|-
name|v2
return|;
block|}
case|case
name|BYTE
case|:
block|{
name|int
name|v1
init|=
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|poi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|int
name|v2
init|=
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|poi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
decl_stmt|;
return|return
name|v1
operator|-
name|v2
return|;
block|}
case|case
name|SHORT
case|:
block|{
name|int
name|v1
init|=
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|poi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|int
name|v2
init|=
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|poi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
decl_stmt|;
return|return
name|v1
operator|-
name|v2
return|;
block|}
case|case
name|INT
case|:
block|{
name|int
name|v1
init|=
operator|(
operator|(
name|IntObjectInspector
operator|)
name|poi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|int
name|v2
init|=
operator|(
operator|(
name|IntObjectInspector
operator|)
name|poi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
decl_stmt|;
return|return
name|v1
operator|>
name|v2
condition|?
literal|1
else|:
operator|(
name|v1
operator|<
name|v2
condition|?
operator|-
literal|1
else|:
literal|0
operator|)
return|;
block|}
case|case
name|LONG
case|:
block|{
name|long
name|v1
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|poi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|long
name|v2
init|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|poi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
decl_stmt|;
return|return
name|v1
operator|>
name|v2
condition|?
literal|1
else|:
operator|(
name|v1
operator|<
name|v2
condition|?
operator|-
literal|1
else|:
literal|0
operator|)
return|;
block|}
case|case
name|FLOAT
case|:
block|{
name|float
name|v1
init|=
operator|(
operator|(
name|FloatObjectInspector
operator|)
name|poi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|float
name|v2
init|=
operator|(
operator|(
name|FloatObjectInspector
operator|)
name|poi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
decl_stmt|;
return|return
name|Float
operator|.
name|compare
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
return|;
block|}
case|case
name|DOUBLE
case|:
block|{
name|double
name|v1
init|=
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|poi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|double
name|v2
init|=
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|poi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
decl_stmt|;
return|return
name|Double
operator|.
name|compare
argument_list|(
name|v1
argument_list|,
name|v2
argument_list|)
return|;
block|}
case|case
name|STRING
case|:
block|{
if|if
condition|(
name|poi1
operator|.
name|preferWritable
argument_list|()
operator|||
name|poi2
operator|.
name|preferWritable
argument_list|()
condition|)
block|{
name|Text
name|t1
init|=
operator|(
name|Text
operator|)
name|poi1
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|Text
name|t2
init|=
operator|(
name|Text
operator|)
name|poi2
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o2
argument_list|)
decl_stmt|;
return|return
name|t1
operator|==
literal|null
condition|?
operator|(
name|t2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
else|:
operator|(
name|t2
operator|==
literal|null
condition|?
literal|1
else|:
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|compareText
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
operator|)
return|;
block|}
else|else
block|{
name|String
name|s1
init|=
operator|(
name|String
operator|)
name|poi1
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|String
name|s2
init|=
operator|(
name|String
operator|)
name|poi2
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o2
argument_list|)
decl_stmt|;
return|return
name|s1
operator|==
literal|null
condition|?
operator|(
name|s2
operator|==
literal|null
condition|?
literal|0
else|:
operator|-
literal|1
operator|)
else|:
operator|(
name|s2
operator|==
literal|null
condition|?
literal|1
else|:
name|s1
operator|.
name|compareTo
argument_list|(
name|s2
argument_list|)
operator|)
return|;
block|}
block|}
case|case
name|BINARY
case|:
block|{
name|BytesWritable
name|bw1
init|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|poi1
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|BytesWritable
name|bw2
init|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|poi2
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o2
argument_list|)
decl_stmt|;
return|return
name|bw1
operator|.
name|compareTo
argument_list|(
name|bw2
argument_list|)
return|;
block|}
case|case
name|TIMESTAMP
case|:
block|{
name|TimestampWritable
name|t1
init|=
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|poi1
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|TimestampWritable
name|t2
init|=
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|poi2
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o2
argument_list|)
decl_stmt|;
return|return
name|t1
operator|.
name|compareTo
argument_list|(
name|t2
argument_list|)
return|;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type: "
operator|+
name|poi1
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
case|case
name|STRUCT
case|:
block|{
name|StructObjectInspector
name|soi1
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi1
decl_stmt|;
name|StructObjectInspector
name|soi2
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi2
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields1
init|=
name|soi1
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields2
init|=
name|soi2
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|int
name|minimum
init|=
name|Math
operator|.
name|min
argument_list|(
name|fields1
operator|.
name|size
argument_list|()
argument_list|,
name|fields2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minimum
condition|;
name|i
operator|++
control|)
block|{
name|int
name|r
init|=
name|compare
argument_list|(
name|soi1
operator|.
name|getStructFieldData
argument_list|(
name|o1
argument_list|,
name|fields1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|fields1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|soi2
operator|.
name|getStructFieldData
argument_list|(
name|o2
argument_list|,
name|fields2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|fields2
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|mapEqualComparer
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
return|return
name|r
return|;
block|}
block|}
return|return
name|fields1
operator|.
name|size
argument_list|()
operator|-
name|fields2
operator|.
name|size
argument_list|()
return|;
block|}
case|case
name|LIST
case|:
block|{
name|ListObjectInspector
name|loi1
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi1
decl_stmt|;
name|ListObjectInspector
name|loi2
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi2
decl_stmt|;
name|int
name|minimum
init|=
name|Math
operator|.
name|min
argument_list|(
name|loi1
operator|.
name|getListLength
argument_list|(
name|o1
argument_list|)
argument_list|,
name|loi2
operator|.
name|getListLength
argument_list|(
name|o2
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minimum
condition|;
name|i
operator|++
control|)
block|{
name|int
name|r
init|=
name|compare
argument_list|(
name|loi1
operator|.
name|getListElement
argument_list|(
name|o1
argument_list|,
name|i
argument_list|)
argument_list|,
name|loi1
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|,
name|loi2
operator|.
name|getListElement
argument_list|(
name|o2
argument_list|,
name|i
argument_list|)
argument_list|,
name|loi2
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|,
name|mapEqualComparer
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|0
condition|)
block|{
return|return
name|r
return|;
block|}
block|}
return|return
name|loi1
operator|.
name|getListLength
argument_list|(
name|o1
argument_list|)
operator|-
name|loi2
operator|.
name|getListLength
argument_list|(
name|o2
argument_list|)
return|;
block|}
case|case
name|MAP
case|:
block|{
if|if
condition|(
name|mapEqualComparer
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Compare on map type not supported!"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|mapEqualComparer
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
operator|(
name|MapObjectInspector
operator|)
name|oi1
argument_list|,
name|o2
argument_list|,
operator|(
name|MapObjectInspector
operator|)
name|oi2
argument_list|)
return|;
block|}
block|}
case|case
name|UNION
case|:
block|{
name|UnionObjectInspector
name|uoi1
init|=
operator|(
name|UnionObjectInspector
operator|)
name|oi1
decl_stmt|;
name|UnionObjectInspector
name|uoi2
init|=
operator|(
name|UnionObjectInspector
operator|)
name|oi2
decl_stmt|;
name|byte
name|tag1
init|=
name|uoi1
operator|.
name|getTag
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|byte
name|tag2
init|=
name|uoi2
operator|.
name|getTag
argument_list|(
name|o2
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag1
operator|!=
name|tag2
condition|)
block|{
return|return
name|tag1
operator|-
name|tag2
return|;
block|}
return|return
name|compare
argument_list|(
name|uoi1
operator|.
name|getField
argument_list|(
name|o1
argument_list|)
argument_list|,
name|uoi1
operator|.
name|getObjectInspectors
argument_list|()
operator|.
name|get
argument_list|(
name|tag1
argument_list|)
argument_list|,
name|uoi2
operator|.
name|getField
argument_list|(
name|o2
argument_list|)
argument_list|,
name|uoi2
operator|.
name|getObjectInspectors
argument_list|()
operator|.
name|get
argument_list|(
name|tag2
argument_list|)
argument_list|,
name|mapEqualComparer
argument_list|)
return|;
block|}
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Compare on unknown type: "
operator|+
name|oi1
operator|.
name|getCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Get the list of field names as csv from a StructObjectInspector.    */
specifier|public
specifier|static
name|String
name|getFieldNames
parameter_list|(
name|StructObjectInspector
name|soi
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the list of field type as csv from a StructObjectInspector.    */
specifier|public
specifier|static
name|String
name|getFieldTypes
parameter_list|(
name|StructObjectInspector
name|soi
parameter_list|)
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Get the type name of the Java class.    */
specifier|public
specifier|static
name|String
name|getTypeNameFromJavaClass
parameter_list|(
name|Type
name|t
parameter_list|)
block|{
try|try
block|{
name|ObjectInspector
name|oi
init|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|t
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
return|return
name|oi
operator|.
name|getTypeName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|"unknown"
return|;
block|}
block|}
comment|/**    * Compares two types identified by the given object inspectors. This method    * compares the types as follows:    *<ol>    *<li>If the given inspectors do not belong to same category, the result is    * negative.</li>    *<li>If the given inspectors are for<code>PRIMITIVE</code> type, the result    * is the comparison of their type names.</li>    *<li>If the given inspectors are for<code>LIST</code> type, then the result    * is recursive call to compare the type of list elements.</li>    *<li>If the given inspectors are<code>MAP</code> type, then the result is a    * recursive call to compare the map key and value types.</li>    *<li>If the given inspectors are<code>STRUCT</code> type, then the result    * is negative if they do not have the same number of fields. If they do have    * the same number of fields, the result is a recursive call to compare each    * of the field types.</li>    *<li>If none of the above, the result is negative.</li>    *</ol>    * @param o1    * @param o2    * @return true if the given object inspectors represent the same types.    */
specifier|public
specifier|static
name|boolean
name|compareTypes
parameter_list|(
name|ObjectInspector
name|o1
parameter_list|,
name|ObjectInspector
name|o2
parameter_list|)
block|{
name|Category
name|c1
init|=
name|o1
operator|.
name|getCategory
argument_list|()
decl_stmt|;
name|Category
name|c2
init|=
name|o2
operator|.
name|getCategory
argument_list|()
decl_stmt|;
comment|// Return false if categories are not equal
if|if
condition|(
operator|!
name|c1
operator|.
name|equals
argument_list|(
name|c2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// If both categories are primitive return the comparison of type names.
if|if
condition|(
name|c1
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|)
condition|)
block|{
return|return
name|o1
operator|.
name|getTypeName
argument_list|()
operator|.
name|equals
argument_list|(
name|o2
operator|.
name|getTypeName
argument_list|()
argument_list|)
return|;
block|}
comment|// If lists, recursively compare the list element types
if|if
condition|(
name|c1
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|)
condition|)
block|{
name|ObjectInspector
name|child1
init|=
operator|(
operator|(
name|ListObjectInspector
operator|)
name|o1
operator|)
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|child2
init|=
operator|(
operator|(
name|ListObjectInspector
operator|)
name|o2
operator|)
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
return|return
name|compareTypes
argument_list|(
name|child1
argument_list|,
name|child2
argument_list|)
return|;
block|}
comment|// If maps, recursively compare the key and value types
if|if
condition|(
name|c1
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|MAP
argument_list|)
condition|)
block|{
name|MapObjectInspector
name|mapOI1
init|=
operator|(
name|MapObjectInspector
operator|)
name|o1
decl_stmt|;
name|MapObjectInspector
name|mapOI2
init|=
operator|(
name|MapObjectInspector
operator|)
name|o2
decl_stmt|;
name|ObjectInspector
name|childKey1
init|=
name|mapOI1
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|childKey2
init|=
name|mapOI2
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareTypes
argument_list|(
name|childKey1
argument_list|,
name|childKey2
argument_list|)
condition|)
block|{
name|ObjectInspector
name|childVal1
init|=
name|mapOI1
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|childVal2
init|=
name|mapOI2
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareTypes
argument_list|(
name|childVal1
argument_list|,
name|childVal2
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|// If structs, recursively compare the fields
if|if
condition|(
name|c1
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|STRUCT
argument_list|)
condition|)
block|{
name|StructObjectInspector
name|structOI1
init|=
operator|(
name|StructObjectInspector
operator|)
name|o1
decl_stmt|;
name|StructObjectInspector
name|structOI2
init|=
operator|(
name|StructObjectInspector
operator|)
name|o2
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|childFieldsList1
init|=
name|structOI1
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|childFieldsList2
init|=
name|structOI2
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|childFieldsList1
operator|==
literal|null
operator|&&
name|childFieldsList2
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|childFieldsList1
operator|.
name|size
argument_list|()
operator|!=
name|childFieldsList2
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterator
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|it1
init|=
name|childFieldsList1
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|it2
init|=
name|childFieldsList2
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|StructField
name|field1
init|=
name|it1
operator|.
name|next
argument_list|()
decl_stmt|;
name|StructField
name|field2
init|=
name|it2
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|compareTypes
argument_list|(
name|field1
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|field2
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|c1
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|UNION
argument_list|)
condition|)
block|{
name|UnionObjectInspector
name|uoi1
init|=
operator|(
name|UnionObjectInspector
operator|)
name|o1
decl_stmt|;
name|UnionObjectInspector
name|uoi2
init|=
operator|(
name|UnionObjectInspector
operator|)
name|o2
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois1
init|=
name|uoi1
operator|.
name|getObjectInspectors
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois2
init|=
name|uoi2
operator|.
name|getObjectInspectors
argument_list|()
decl_stmt|;
if|if
condition|(
name|ois1
operator|==
literal|null
operator|&&
name|ois2
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|ois1
operator|==
literal|null
operator|||
name|ois2
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|ois1
operator|.
name|size
argument_list|()
operator|!=
name|ois2
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Iterator
argument_list|<
name|?
extends|extends
name|ObjectInspector
argument_list|>
name|it1
init|=
name|ois1
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|?
extends|extends
name|ObjectInspector
argument_list|>
name|it2
init|=
name|ois2
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it1
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|compareTypes
argument_list|(
name|it1
operator|.
name|next
argument_list|()
argument_list|,
name|it2
operator|.
name|next
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|// Unknown category
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown category encountered: "
operator|+
name|c1
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|ConstantObjectInspector
name|getConstantObjectInspector
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|ObjectInspector
name|writableOI
init|=
name|getStandardObjectInspector
argument_list|(
name|oi
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
decl_stmt|;
name|Object
name|writableValue
init|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|oi
argument_list|,
name|writableOI
argument_list|)
operator|.
name|convert
argument_list|(
name|value
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|writableOI
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
return|return
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableConstantObjectInspector
argument_list|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|,
name|writableValue
argument_list|)
return|;
case|case
name|LIST
case|:
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardConstantListObjectInspector
argument_list|(
name|getStandardObjectInspector
argument_list|(
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
argument_list|,
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|writableValue
argument_list|)
return|;
case|case
name|MAP
case|:
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
return|return
name|ObjectInspectorFactory
operator|.
name|getStandardConstantMapObjectInspector
argument_list|(
name|getStandardObjectInspector
argument_list|(
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
argument_list|,
name|getStandardObjectInspector
argument_list|(
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|,
name|ObjectInspectorCopyOption
operator|.
name|WRITABLE
argument_list|)
argument_list|,
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|writableValue
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|writableOI
operator|.
name|getCategory
argument_list|()
operator|+
literal|" not yet supported for constant OI"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|supportsConstantObjectInspector
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
case|case
name|LIST
case|:
case|case
name|MAP
case|:
return|return
literal|true
return|;
default|default:
return|return
literal|false
return|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|isConstantObjectInspector
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
return|return
operator|(
name|oi
operator|instanceof
name|ConstantObjectInspector
operator|)
return|;
block|}
specifier|private
name|ObjectInspectorUtils
parameter_list|()
block|{
comment|// prevent instantiation
block|}
block|}
end_class

end_unit

