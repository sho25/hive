begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_class
specifier|public
class|class
name|TypeInfoUtils
block|{
comment|/**    * Parse a recursive TypeInfo list String.    * For example, the following inputs are valid inputs:     *  "int,string,map<string,int>,list<map<int,list<string>>>,list<struct<a:int,b:string>>"    * The separators between TypeInfos can be ",", ":", or ";".    *     * In order to use this class:    * TypeInfoParser parser = new TypeInfoParser("int,string");    * ArrayList<TypeInfo> typeInfos = parser.parseTypeInfos();    */
specifier|private
specifier|static
class|class
name|TypeInfoParser
block|{
specifier|static
specifier|final
name|String
name|STRUCT_TYPE_NAME
init|=
literal|"struct"
decl_stmt|;
specifier|private
specifier|static
class|class
name|Token
block|{
specifier|public
name|int
name|position
decl_stmt|;
specifier|public
name|String
name|text
decl_stmt|;
specifier|public
name|boolean
name|isAlphaDigit
decl_stmt|;
block|}
empty_stmt|;
comment|/**      * Tokenize the typeInfoString.      * The rule is simple: all consecutive alphadigits are in one token, and all       * other characters are one character per token.      *       * tokenize("map<int,string>") should return ["map","<","int",",","string",">"]      */
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Token
argument_list|>
name|tokenize
parameter_list|(
name|String
name|typeInfoString
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|begin
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|end
operator|<=
name|typeInfoString
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// last character ends a token?
if|if
condition|(
name|end
operator|==
name|typeInfoString
operator|.
name|length
argument_list|()
operator|||
operator|!
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|typeInfoString
operator|.
name|charAt
argument_list|(
name|end
operator|-
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|typeInfoString
operator|.
name|charAt
argument_list|(
name|end
argument_list|)
argument_list|)
condition|)
block|{
name|Token
name|t
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
name|t
operator|.
name|position
operator|=
name|begin
expr_stmt|;
name|t
operator|.
name|text
operator|=
name|typeInfoString
operator|.
name|substring
argument_list|(
name|begin
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|t
operator|.
name|isAlphaDigit
operator|=
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|typeInfoString
operator|.
name|charAt
argument_list|(
name|begin
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|begin
operator|=
name|end
expr_stmt|;
block|}
name|end
operator|++
expr_stmt|;
block|}
return|return
name|tokens
return|;
block|}
specifier|public
name|TypeInfoParser
parameter_list|(
name|String
name|typeInfoString
parameter_list|)
block|{
name|this
operator|.
name|typeInfoString
operator|=
name|typeInfoString
expr_stmt|;
name|this
operator|.
name|typeInfoTokens
operator|=
name|tokenize
argument_list|(
name|typeInfoString
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|typeInfoString
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|Token
argument_list|>
name|typeInfoTokens
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
decl_stmt|;
specifier|private
name|int
name|iToken
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|parseTypeInfos
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
name|typeInfos
operator|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iToken
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|iToken
operator|<
name|typeInfoTokens
operator|.
name|size
argument_list|()
condition|)
block|{
name|typeInfos
operator|.
name|add
argument_list|(
name|parseType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iToken
operator|<
name|typeInfoTokens
operator|.
name|size
argument_list|()
condition|)
block|{
name|Token
name|separator
init|=
name|typeInfoTokens
operator|.
name|get
argument_list|(
name|iToken
argument_list|)
decl_stmt|;
if|if
condition|(
literal|","
operator|.
name|equals
argument_list|(
name|separator
operator|.
name|text
argument_list|)
operator|||
literal|";"
operator|.
name|equals
argument_list|(
name|separator
operator|.
name|text
argument_list|)
operator|||
literal|":"
operator|.
name|equals
argument_list|(
name|separator
operator|.
name|text
argument_list|)
condition|)
block|{
name|iToken
operator|++
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: ',', ':', or ';' expected at position "
operator|+
name|separator
operator|.
name|position
operator|+
literal|" from '"
operator|+
name|typeInfoString
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|typeInfos
return|;
block|}
specifier|private
name|Token
name|expect
parameter_list|(
name|String
name|item
parameter_list|)
block|{
return|return
name|expect
argument_list|(
name|item
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Token
name|expect
parameter_list|(
name|String
name|item
parameter_list|,
name|String
name|alternative
parameter_list|)
block|{
if|if
condition|(
name|iToken
operator|>=
name|typeInfoTokens
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: "
operator|+
name|item
operator|+
literal|" expected at the end of '"
operator|+
name|typeInfoString
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|Token
name|t
init|=
name|typeInfoTokens
operator|.
name|get
argument_list|(
name|iToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|Constants
operator|.
name|LIST_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
operator|&&
operator|!
name|Constants
operator|.
name|MAP_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
operator|&&
operator|!
name|STRUCT_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
operator|&&
literal|null
operator|==
name|ObjectInspectorUtils
operator|.
name|typeNameToClass
operator|.
name|get
argument_list|(
name|t
operator|.
name|text
argument_list|)
operator|&&
operator|!
name|t
operator|.
name|text
operator|.
name|equals
argument_list|(
name|alternative
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: "
operator|+
name|item
operator|+
literal|" expected at the position "
operator|+
name|t
operator|.
name|position
operator|+
literal|" of '"
operator|+
name|typeInfoString
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|equals
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|t
operator|.
name|isAlphaDigit
operator|&&
operator|!
name|t
operator|.
name|text
operator|.
name|equals
argument_list|(
name|alternative
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: "
operator|+
name|item
operator|+
literal|" expected at the position "
operator|+
name|t
operator|.
name|position
operator|+
literal|" of '"
operator|+
name|typeInfoString
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
operator|&&
operator|!
name|t
operator|.
name|text
operator|.
name|equals
argument_list|(
name|alternative
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: "
operator|+
name|item
operator|+
literal|" expected at the position "
operator|+
name|t
operator|.
name|position
operator|+
literal|" of '"
operator|+
name|typeInfoString
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
name|iToken
operator|++
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|private
name|TypeInfo
name|parseType
parameter_list|()
block|{
name|Token
name|t
init|=
name|expect
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
comment|// Is this a primitive type?
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
init|=
name|ObjectInspectorUtils
operator|.
name|typeNameToClass
operator|.
name|get
argument_list|(
name|t
operator|.
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|!=
literal|null
condition|)
block|{
return|return
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|// Is this a list type?
if|if
condition|(
name|Constants
operator|.
name|LIST_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
condition|)
block|{
name|expect
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|TypeInfo
name|listElementType
init|=
name|parseType
argument_list|()
decl_stmt|;
name|expect
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|TypeInfoFactory
operator|.
name|getListTypeInfo
argument_list|(
name|listElementType
argument_list|)
return|;
block|}
comment|// Is this a map type?
if|if
condition|(
name|Constants
operator|.
name|MAP_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
condition|)
block|{
name|expect
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|TypeInfo
name|mapKeyType
init|=
name|parseType
argument_list|()
decl_stmt|;
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|TypeInfo
name|mapValueType
init|=
name|parseType
argument_list|()
decl_stmt|;
name|expect
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|TypeInfoFactory
operator|.
name|getMapTypeInfo
argument_list|(
name|mapKeyType
argument_list|,
name|mapValueType
argument_list|)
return|;
block|}
comment|// Is this a struct type?
if|if
condition|(
name|STRUCT_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
do|do
block|{
if|if
condition|(
name|first
condition|)
block|{
name|expect
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|Token
name|separator
init|=
name|expect
argument_list|(
literal|">"
argument_list|,
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|separator
operator|.
name|text
operator|.
name|equals
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
comment|// end of struct
break|break;
block|}
block|}
name|Token
name|name
init|=
name|expect
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
name|name
operator|.
name|text
argument_list|)
expr_stmt|;
name|expect
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|fieldTypeInfos
operator|.
name|add
argument_list|(
name|parseType
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
return|return
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypeInfos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Internal error parsing position "
operator|+
name|t
operator|.
name|position
operator|+
literal|" of '"
operator|+
name|typeInfoString
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
specifier|static
name|HashMap
argument_list|<
name|TypeInfo
argument_list|,
name|ObjectInspector
argument_list|>
name|cachedStandardObjectInspector
init|=
operator|new
name|HashMap
argument_list|<
name|TypeInfo
argument_list|,
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Returns the standard object inspector that can be used to translate an object of that typeInfo    * to a standard object type.      */
specifier|public
specifier|static
name|ObjectInspector
name|getStandardObjectInspectorFromTypeInfo
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|ObjectInspector
name|result
init|=
name|cachedStandardObjectInspector
operator|.
name|get
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|typeInfo
operator|.
name|getPrimitiveClass
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LIST
case|:
block|{
name|ObjectInspector
name|elementObjectInspector
init|=
name|getStandardObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|elementObjectInspector
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MAP
case|:
block|{
name|ObjectInspector
name|keyObjectInspector
init|=
name|getStandardObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueObjectInspector
init|=
name|getStandardObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|keyObjectInspector
argument_list|,
name|valueObjectInspector
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRUCT
case|:
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|typeInfo
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|typeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|fieldTypeInfos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldTypeInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|getStandardObjectInspectorFromTypeInfo
argument_list|(
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldObjectInspectors
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|cachedStandardObjectInspector
operator|.
name|put
argument_list|(
name|typeInfo
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the TypeInfo object from the ObjectInspector object by recursively going into the    * ObjectInspector structure.    */
specifier|public
specifier|static
name|TypeInfo
name|getTypeInfoFromObjectInspector
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
comment|//    OPTIMIZATION for later.
comment|//    if (oi instanceof TypeInfoBasedObjectInspector) {
comment|//      TypeInfoBasedObjectInspector typeInfoBasedObjectInspector = (ObjectInspector)oi;
comment|//      return typeInfoBasedObjectInspector.getTypeInfo();
comment|//    }
comment|// Recursively going into ObjectInspector structure
name|TypeInfo
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|poi
operator|.
name|getPrimitiveClass
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LIST
case|:
block|{
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|TypeInfoFactory
operator|.
name|getListTypeInfo
argument_list|(
name|getTypeInfoFromObjectInspector
argument_list|(
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MAP
case|:
block|{
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|TypeInfoFactory
operator|.
name|getMapTypeInfo
argument_list|(
name|getTypeInfoFromObjectInspector
argument_list|(
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|)
argument_list|,
name|getTypeInfoFromObjectInspector
argument_list|(
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRUCT
case|:
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StructField
name|f
range|:
name|fields
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|f
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|fieldTypeInfos
operator|.
name|add
argument_list|(
name|getTypeInfoFromObjectInspector
argument_list|(
name|f
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypeInfos
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown ObjectInspector category!"
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Return the     */
specifier|public
specifier|static
name|String
name|getTypeStringFromTypeInfo
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
return|return
name|ObjectInspectorUtils
operator|.
name|getClassShortName
argument_list|(
name|typeInfo
operator|.
name|getPrimitiveClass
argument_list|()
argument_list|)
return|;
block|}
case|case
name|LIST
case|:
block|{
name|String
name|elementType
init|=
name|getTypeStringFromTypeInfo
argument_list|(
name|typeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|LIST_TYPE_NAME
operator|+
literal|"<"
operator|+
name|elementType
operator|+
literal|">"
return|;
block|}
case|case
name|MAP
case|:
block|{
name|String
name|keyType
init|=
name|getTypeStringFromTypeInfo
argument_list|(
name|typeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|valueType
init|=
name|getTypeStringFromTypeInfo
argument_list|(
name|typeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|MAP_TYPE_NAME
operator|+
literal|"<"
operator|+
name|keyType
operator|+
literal|","
operator|+
name|valueType
operator|+
literal|">"
return|;
block|}
case|case
name|STRUCT
case|:
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"struct<"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|typeInfo
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|typeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldNames
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getTypeStringFromTypeInfo
argument_list|(
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type!"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|getTypeInfosFromTypeString
parameter_list|(
name|String
name|typeString
parameter_list|)
block|{
name|TypeInfoParser
name|parser
init|=
operator|new
name|TypeInfoParser
argument_list|(
name|typeString
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parseTypeInfos
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TypeInfo
name|getTypeInfoFromTypeString
parameter_list|(
name|String
name|typeString
parameter_list|)
block|{
name|TypeInfoParser
name|parser
init|=
operator|new
name|TypeInfoParser
argument_list|(
name|typeString
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parseTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

