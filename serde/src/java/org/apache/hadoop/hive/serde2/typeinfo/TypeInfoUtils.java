begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|GenericArrayType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveTypeEntry
import|;
end_import

begin_comment
comment|/**  * TypeInfoUtils.  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TypeInfoUtils
block|{
specifier|private
name|TypeInfoUtils
parameter_list|()
block|{
comment|// prevent instantiation
block|}
comment|/**    * Return the extended TypeInfo from a Java type. By extended TypeInfo, we    * allow unknownType for java.lang.Object.    *    * @param t    *          The Java type.    * @param m    *          The method, only used for generating error messages.    */
specifier|private
specifier|static
name|TypeInfo
name|getExtendedTypeInfoFromJavaType
parameter_list|(
name|Type
name|t
parameter_list|,
name|Method
name|m
parameter_list|)
block|{
if|if
condition|(
name|t
operator|==
name|Object
operator|.
name|class
condition|)
block|{
return|return
name|TypeInfoFactory
operator|.
name|unknownTypeInfo
return|;
block|}
if|if
condition|(
name|t
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|ParameterizedType
name|pt
init|=
operator|(
name|ParameterizedType
operator|)
name|t
decl_stmt|;
comment|// List?
if|if
condition|(
name|List
operator|.
name|class
operator|==
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|pt
operator|.
name|getRawType
argument_list|()
operator|||
name|ArrayList
operator|.
name|class
operator|==
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|pt
operator|.
name|getRawType
argument_list|()
condition|)
block|{
return|return
name|TypeInfoFactory
operator|.
name|getListTypeInfo
argument_list|(
name|getExtendedTypeInfoFromJavaType
argument_list|(
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|m
argument_list|)
argument_list|)
return|;
block|}
comment|// Map?
if|if
condition|(
name|Map
operator|.
name|class
operator|==
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|pt
operator|.
name|getRawType
argument_list|()
operator|||
name|HashMap
operator|.
name|class
operator|==
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|pt
operator|.
name|getRawType
argument_list|()
condition|)
block|{
return|return
name|TypeInfoFactory
operator|.
name|getMapTypeInfo
argument_list|(
name|getExtendedTypeInfoFromJavaType
argument_list|(
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|m
argument_list|)
argument_list|,
name|getExtendedTypeInfoFromJavaType
argument_list|(
name|pt
operator|.
name|getActualTypeArguments
argument_list|()
index|[
literal|1
index|]
argument_list|,
name|m
argument_list|)
argument_list|)
return|;
block|}
comment|// Otherwise convert t to RawType so we will fall into the following if
comment|// block.
name|t
operator|=
name|pt
operator|.
name|getRawType
argument_list|()
expr_stmt|;
block|}
comment|// Must be a class.
if|if
condition|(
operator|!
operator|(
name|t
operator|instanceof
name|Class
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive does not understand type "
operator|+
name|t
operator|+
literal|" from "
operator|+
name|m
argument_list|)
throw|;
block|}
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|t
decl_stmt|;
comment|// Java Primitive Type?
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|isPrimitiveJavaType
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveJavaType
argument_list|(
name|c
argument_list|)
operator|.
name|primitiveCategory
argument_list|)
argument_list|)
return|;
block|}
comment|// Java Primitive Class?
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|isPrimitiveJavaClass
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveJavaClass
argument_list|(
name|c
argument_list|)
operator|.
name|primitiveCategory
argument_list|)
argument_list|)
return|;
block|}
comment|// Primitive Writable class?
if|if
condition|(
name|PrimitiveObjectInspectorUtils
operator|.
name|isPrimitiveWritableClass
argument_list|(
name|c
argument_list|)
condition|)
block|{
return|return
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveWritableClass
argument_list|(
name|c
argument_list|)
operator|.
name|primitiveCategory
argument_list|)
argument_list|)
return|;
block|}
comment|// Must be a struct
name|Field
index|[]
name|fields
init|=
name|ObjectInspectorUtils
operator|.
name|getDeclaredNonStaticFields
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|fields
operator|.
name|length
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|(
name|fields
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|field
range|:
name|fields
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fieldTypeInfos
operator|.
name|add
argument_list|(
name|getExtendedTypeInfoFromJavaType
argument_list|(
name|field
operator|.
name|getGenericType
argument_list|()
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypeInfos
argument_list|)
return|;
block|}
comment|/**    * Returns the array element type, if the Type is an array (Object[]), or    * GenericArrayType (Map<String,String>[]). Otherwise return null.    */
specifier|public
specifier|static
name|Type
name|getArrayElementType
parameter_list|(
name|Type
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|instanceof
name|Class
operator|&&
operator|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|t
operator|)
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|arrayClass
init|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|t
decl_stmt|;
return|return
name|arrayClass
operator|.
name|getComponentType
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|t
operator|instanceof
name|GenericArrayType
condition|)
block|{
name|GenericArrayType
name|arrayType
init|=
operator|(
name|GenericArrayType
operator|)
name|t
decl_stmt|;
return|return
name|arrayType
operator|.
name|getGenericComponentType
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the parameter TypeInfo for a method.    *    * @param size    *          In case the last parameter of Method is an array, we will try to    *          return a List<TypeInfo> with the specified size by repeating the    *          element of the array at the end. In case the size is smaller than    *          the minimum possible number of arguments for the method, null will    *          be returned.    */
specifier|public
specifier|static
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|getParameterTypeInfos
parameter_list|(
name|Method
name|m
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Type
index|[]
name|methodParameterTypes
init|=
name|m
operator|.
name|getGenericParameterTypes
argument_list|()
decl_stmt|;
comment|// Whether the method takes variable-length arguments
comment|// Whether the method takes an array like Object[],
comment|// or String[] etc in the last argument.
name|Type
name|lastParaElementType
init|=
name|TypeInfoUtils
operator|.
name|getArrayElementType
argument_list|(
name|methodParameterTypes
operator|.
name|length
operator|==
literal|0
condition|?
literal|null
else|:
name|methodParameterTypes
index|[
name|methodParameterTypes
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
name|boolean
name|isVariableLengthArgument
init|=
operator|(
name|lastParaElementType
operator|!=
literal|null
operator|)
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isVariableLengthArgument
condition|)
block|{
comment|// Normal case, no variable-length arguments
if|if
condition|(
name|size
operator|!=
name|methodParameterTypes
operator|.
name|length
condition|)
block|{
return|return
literal|null
return|;
block|}
name|typeInfos
operator|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|(
name|methodParameterTypes
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|Type
name|methodParameterType
range|:
name|methodParameterTypes
control|)
block|{
name|typeInfos
operator|.
name|add
argument_list|(
name|getExtendedTypeInfoFromJavaType
argument_list|(
name|methodParameterType
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Variable-length arguments
if|if
condition|(
name|size
operator|<
name|methodParameterTypes
operator|.
name|length
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|typeInfos
operator|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|(
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|methodParameterTypes
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|typeInfos
operator|.
name|add
argument_list|(
name|getExtendedTypeInfoFromJavaType
argument_list|(
name|methodParameterTypes
index|[
name|i
index|]
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
name|methodParameterTypes
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|typeInfos
operator|.
name|add
argument_list|(
name|getExtendedTypeInfoFromJavaType
argument_list|(
name|lastParaElementType
argument_list|,
name|m
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|typeInfos
return|;
block|}
specifier|public
specifier|static
name|boolean
name|hasParameters
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|int
name|idx
init|=
name|typeName
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|getBaseName
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|int
name|idx
init|=
name|typeName
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|typeName
return|;
block|}
else|else
block|{
return|return
name|typeName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
return|;
block|}
block|}
comment|/**    * returns true if both TypeInfos are of primitive type, and the primitive category matches.    * @param ti1    * @param ti2    * @return    */
specifier|public
specifier|static
name|boolean
name|doPrimitiveCategoriesMatch
parameter_list|(
name|TypeInfo
name|ti1
parameter_list|,
name|TypeInfo
name|ti2
parameter_list|)
block|{
if|if
condition|(
name|ti1
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
operator|&&
name|ti2
operator|.
name|getCategory
argument_list|()
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|ti1
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
operator|==
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|ti2
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Parse a recursive TypeInfo list String. For example, the following inputs    * are valid inputs:    * "int,string,map<string,int>,list<map<int,list<string>>>,list<struct<a:int,b:string>>"    * The separators between TypeInfos can be ",", ":", or ";".    *    * In order to use this class: TypeInfoParser parser = new    * TypeInfoParser("int,string"); ArrayList<TypeInfo> typeInfos =    * parser.parseTypeInfos();    */
specifier|private
specifier|static
class|class
name|TypeInfoParser
block|{
specifier|private
specifier|static
class|class
name|Token
block|{
specifier|public
name|int
name|position
decl_stmt|;
specifier|public
name|String
name|text
decl_stmt|;
specifier|public
name|boolean
name|isType
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|position
operator|+
literal|":"
operator|+
name|text
return|;
block|}
block|}
empty_stmt|;
specifier|private
specifier|static
name|boolean
name|isTypeChar
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|c
argument_list|)
operator|||
name|c
operator|==
literal|'_'
operator|||
name|c
operator|==
literal|'.'
return|;
block|}
comment|/**      * Tokenize the typeInfoString. The rule is simple: all consecutive      * alphadigits and '_', '.' are in one token, and all other characters are      * one character per token.      *      * tokenize("map<int,string>") should return      * ["map","<","int",",","string",">"]      */
specifier|private
specifier|static
name|ArrayList
argument_list|<
name|Token
argument_list|>
name|tokenize
parameter_list|(
name|String
name|typeInfoString
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Token
argument_list|>
name|tokens
init|=
operator|new
name|ArrayList
argument_list|<
name|Token
argument_list|>
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|begin
init|=
literal|0
decl_stmt|;
name|int
name|end
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|end
operator|<=
name|typeInfoString
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// last character ends a token?
if|if
condition|(
name|end
operator|==
name|typeInfoString
operator|.
name|length
argument_list|()
operator|||
operator|!
name|isTypeChar
argument_list|(
name|typeInfoString
operator|.
name|charAt
argument_list|(
name|end
operator|-
literal|1
argument_list|)
argument_list|)
operator|||
operator|!
name|isTypeChar
argument_list|(
name|typeInfoString
operator|.
name|charAt
argument_list|(
name|end
argument_list|)
argument_list|)
condition|)
block|{
name|Token
name|t
init|=
operator|new
name|Token
argument_list|()
decl_stmt|;
name|t
operator|.
name|position
operator|=
name|begin
expr_stmt|;
name|t
operator|.
name|text
operator|=
name|typeInfoString
operator|.
name|substring
argument_list|(
name|begin
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|t
operator|.
name|isType
operator|=
name|isTypeChar
argument_list|(
name|typeInfoString
operator|.
name|charAt
argument_list|(
name|begin
argument_list|)
argument_list|)
expr_stmt|;
name|tokens
operator|.
name|add
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|begin
operator|=
name|end
expr_stmt|;
block|}
name|end
operator|++
expr_stmt|;
block|}
return|return
name|tokens
return|;
block|}
specifier|public
name|TypeInfoParser
parameter_list|(
name|String
name|typeInfoString
parameter_list|)
block|{
name|this
operator|.
name|typeInfoString
operator|=
name|typeInfoString
expr_stmt|;
name|typeInfoTokens
operator|=
name|tokenize
argument_list|(
name|typeInfoString
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|String
name|typeInfoString
decl_stmt|;
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|Token
argument_list|>
name|typeInfoTokens
decl_stmt|;
specifier|private
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
decl_stmt|;
specifier|private
name|int
name|iToken
decl_stmt|;
specifier|public
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|parseTypeInfos
parameter_list|()
block|{
name|typeInfos
operator|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
expr_stmt|;
name|iToken
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|iToken
operator|<
name|typeInfoTokens
operator|.
name|size
argument_list|()
condition|)
block|{
name|typeInfos
operator|.
name|add
argument_list|(
name|parseType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|iToken
operator|<
name|typeInfoTokens
operator|.
name|size
argument_list|()
condition|)
block|{
name|Token
name|separator
init|=
name|typeInfoTokens
operator|.
name|get
argument_list|(
name|iToken
argument_list|)
decl_stmt|;
if|if
condition|(
literal|","
operator|.
name|equals
argument_list|(
name|separator
operator|.
name|text
argument_list|)
operator|||
literal|";"
operator|.
name|equals
argument_list|(
name|separator
operator|.
name|text
argument_list|)
operator|||
literal|":"
operator|.
name|equals
argument_list|(
name|separator
operator|.
name|text
argument_list|)
condition|)
block|{
name|iToken
operator|++
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: ',', ':', or ';' expected at position "
operator|+
name|separator
operator|.
name|position
operator|+
literal|" from '"
operator|+
name|typeInfoString
operator|+
literal|"' "
operator|+
name|typeInfoTokens
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|typeInfos
return|;
block|}
specifier|private
name|Token
name|peek
parameter_list|()
block|{
if|if
condition|(
name|iToken
operator|<
name|typeInfoTokens
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|typeInfoTokens
operator|.
name|get
argument_list|(
name|iToken
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
name|Token
name|expect
parameter_list|(
name|String
name|item
parameter_list|)
block|{
return|return
name|expect
argument_list|(
name|item
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Token
name|expect
parameter_list|(
name|String
name|item
parameter_list|,
name|String
name|alternative
parameter_list|)
block|{
if|if
condition|(
name|iToken
operator|>=
name|typeInfoTokens
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: "
operator|+
name|item
operator|+
literal|" expected at the end of '"
operator|+
name|typeInfoString
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|Token
name|t
init|=
name|typeInfoTokens
operator|.
name|get
argument_list|(
name|iToken
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|equals
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|serdeConstants
operator|.
name|LIST_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
operator|&&
operator|!
name|serdeConstants
operator|.
name|MAP_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
operator|&&
operator|!
name|serdeConstants
operator|.
name|STRUCT_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
operator|&&
operator|!
name|serdeConstants
operator|.
name|UNION_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
operator|&&
literal|null
operator|==
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromTypeName
argument_list|(
name|t
operator|.
name|text
argument_list|)
operator|&&
operator|!
name|t
operator|.
name|text
operator|.
name|equals
argument_list|(
name|alternative
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: "
operator|+
name|item
operator|+
literal|" expected at the position "
operator|+
name|t
operator|.
name|position
operator|+
literal|" of '"
operator|+
name|typeInfoString
operator|+
literal|"' but '"
operator|+
name|t
operator|.
name|text
operator|+
literal|"' is found."
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|equals
argument_list|(
literal|"name"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|t
operator|.
name|isType
operator|&&
operator|!
name|t
operator|.
name|text
operator|.
name|equals
argument_list|(
name|alternative
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: "
operator|+
name|item
operator|+
literal|" expected at the position "
operator|+
name|t
operator|.
name|position
operator|+
literal|" of '"
operator|+
name|typeInfoString
operator|+
literal|"' but '"
operator|+
name|t
operator|.
name|text
operator|+
literal|"' is found."
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|item
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
operator|&&
operator|!
name|t
operator|.
name|text
operator|.
name|equals
argument_list|(
name|alternative
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Error: "
operator|+
name|item
operator|+
literal|" expected at the position "
operator|+
name|t
operator|.
name|position
operator|+
literal|" of '"
operator|+
name|typeInfoString
operator|+
literal|"' but '"
operator|+
name|t
operator|.
name|text
operator|+
literal|"' is found."
argument_list|)
throw|;
block|}
block|}
name|iToken
operator|++
expr_stmt|;
return|return
name|t
return|;
block|}
specifier|private
name|String
index|[]
name|parseParams
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|params
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Token
name|t
init|=
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|!=
literal|null
operator|&&
name|t
operator|.
name|text
operator|.
name|equals
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
name|expect
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
comment|// checking for null in the for-loop condition prevents null-ptr exception
comment|// and allows us to fail more gracefully with a parsing error.
for|for
control|(
name|t
operator|=
name|peek
argument_list|()
init|;
operator|(
name|t
operator|==
literal|null
operator|)
operator|||
operator|!
name|t
operator|.
name|text
operator|.
name|equals
argument_list|(
literal|")"
argument_list|)
condition|;
name|t
operator|=
name|expect
argument_list|(
literal|","
argument_list|,
literal|")"
argument_list|)
control|)
block|{
name|params
operator|.
name|add
argument_list|(
name|expect
argument_list|(
literal|"name"
argument_list|)
operator|.
name|text
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"type parameters expected for type string "
operator|+
name|typeInfoString
argument_list|)
throw|;
block|}
block|}
return|return
name|params
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|params
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|private
name|TypeInfo
name|parseType
parameter_list|()
block|{
name|Token
name|t
init|=
name|expect
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
comment|// Is this a primitive type?
name|PrimitiveTypeEntry
name|typeEntry
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromTypeName
argument_list|(
name|t
operator|.
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeEntry
operator|!=
literal|null
operator|&&
name|typeEntry
operator|.
name|primitiveCategory
operator|!=
name|PrimitiveCategory
operator|.
name|UNKNOWN
condition|)
block|{
name|String
name|qualifiedTypeName
init|=
name|typeEntry
operator|.
name|typeName
decl_stmt|;
name|String
index|[]
name|params
init|=
name|parseParams
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|typeEntry
operator|.
name|primitiveCategory
condition|)
block|{
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
if|if
condition|(
name|params
operator|==
literal|null
operator|||
name|params
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|typeEntry
operator|.
name|typeName
operator|+
literal|" type is specified without length: "
operator|+
name|typeInfoString
argument_list|)
throw|;
block|}
if|if
condition|(
name|params
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|int
name|length
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeEntry
operator|.
name|primitiveCategory
operator|==
name|PrimitiveCategory
operator|.
name|VARCHAR
condition|)
block|{
name|BaseCharUtils
operator|.
name|validateVarcharParameter
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|BaseCharUtils
operator|.
name|validateCharParameter
argument_list|(
name|length
argument_list|)
expr_stmt|;
block|}
name|qualifiedTypeName
operator|=
name|BaseCharTypeInfo
operator|.
name|getQualifiedName
argument_list|(
name|typeEntry
operator|.
name|typeName
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Type "
operator|+
name|typeEntry
operator|.
name|typeName
operator|+
literal|" only takes one parameter, but "
operator|+
name|params
operator|.
name|length
operator|+
literal|" is seen"
argument_list|)
throw|;
block|}
break|break;
case|case
name|DECIMAL
case|:
if|if
condition|(
name|params
operator|==
literal|null
operator|||
name|params
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Decimal type is specified without length: "
operator|+
name|typeInfoString
argument_list|)
throw|;
block|}
if|if
condition|(
name|params
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|int
name|precision
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|int
name|scale
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|params
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|HiveDecimalUtils
operator|.
name|validateParameter
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|qualifiedTypeName
operator|=
name|DecimalTypeInfo
operator|.
name|getQualifiedName
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|params
operator|.
name|length
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Type varchar only takes one parameter, but "
operator|+
name|params
operator|.
name|length
operator|+
literal|" is seen"
argument_list|)
throw|;
block|}
break|break;
block|}
return|return
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|qualifiedTypeName
argument_list|)
return|;
block|}
comment|// Is this a list type?
if|if
condition|(
name|serdeConstants
operator|.
name|LIST_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
condition|)
block|{
name|expect
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|TypeInfo
name|listElementType
init|=
name|parseType
argument_list|()
decl_stmt|;
name|expect
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|TypeInfoFactory
operator|.
name|getListTypeInfo
argument_list|(
name|listElementType
argument_list|)
return|;
block|}
comment|// Is this a map type?
if|if
condition|(
name|serdeConstants
operator|.
name|MAP_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
condition|)
block|{
name|expect
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|TypeInfo
name|mapKeyType
init|=
name|parseType
argument_list|()
decl_stmt|;
name|expect
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|TypeInfo
name|mapValueType
init|=
name|parseType
argument_list|()
decl_stmt|;
name|expect
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
return|return
name|TypeInfoFactory
operator|.
name|getMapTypeInfo
argument_list|(
name|mapKeyType
argument_list|,
name|mapValueType
argument_list|)
return|;
block|}
comment|// Is this a struct type?
if|if
condition|(
name|serdeConstants
operator|.
name|STRUCT_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
do|do
block|{
if|if
condition|(
name|first
condition|)
block|{
name|expect
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|Token
name|separator
init|=
name|expect
argument_list|(
literal|">"
argument_list|,
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|separator
operator|.
name|text
operator|.
name|equals
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
comment|// end of struct
break|break;
block|}
block|}
name|Token
name|name
init|=
name|expect
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
name|name
operator|.
name|text
argument_list|)
expr_stmt|;
name|expect
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|fieldTypeInfos
operator|.
name|add
argument_list|(
name|parseType
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
return|return
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypeInfos
argument_list|)
return|;
block|}
comment|// Is this a union type?
if|if
condition|(
name|serdeConstants
operator|.
name|UNION_TYPE_NAME
operator|.
name|equals
argument_list|(
name|t
operator|.
name|text
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|objectTypeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
do|do
block|{
if|if
condition|(
name|first
condition|)
block|{
name|expect
argument_list|(
literal|"<"
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|Token
name|separator
init|=
name|expect
argument_list|(
literal|">"
argument_list|,
literal|","
argument_list|)
decl_stmt|;
if|if
condition|(
name|separator
operator|.
name|text
operator|.
name|equals
argument_list|(
literal|">"
argument_list|)
condition|)
block|{
comment|// end of union
break|break;
block|}
block|}
name|objectTypeInfos
operator|.
name|add
argument_list|(
name|parseType
argument_list|()
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
return|return
name|TypeInfoFactory
operator|.
name|getUnionTypeInfo
argument_list|(
name|objectTypeInfos
argument_list|)
return|;
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Internal error parsing position "
operator|+
name|t
operator|.
name|position
operator|+
literal|" of '"
operator|+
name|typeInfoString
operator|+
literal|"'"
argument_list|)
throw|;
block|}
specifier|public
name|PrimitiveParts
name|parsePrimitiveParts
parameter_list|()
block|{
name|PrimitiveParts
name|parts
init|=
operator|new
name|PrimitiveParts
argument_list|()
decl_stmt|;
name|Token
name|t
init|=
name|expect
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|parts
operator|.
name|typeName
operator|=
name|t
operator|.
name|text
expr_stmt|;
name|parts
operator|.
name|typeParams
operator|=
name|parseParams
argument_list|()
expr_stmt|;
return|return
name|parts
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|PrimitiveParts
block|{
specifier|public
name|String
name|typeName
decl_stmt|;
specifier|public
name|String
index|[]
name|typeParams
decl_stmt|;
block|}
comment|/**    * Make some of the TypeInfo parsing available as a utility.    */
specifier|public
specifier|static
name|PrimitiveParts
name|parsePrimitiveParts
parameter_list|(
name|String
name|typeInfoString
parameter_list|)
block|{
name|TypeInfoParser
name|parser
init|=
operator|new
name|TypeInfoParser
argument_list|(
name|typeInfoString
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parsePrimitiveParts
argument_list|()
return|;
block|}
specifier|static
name|Map
argument_list|<
name|TypeInfo
argument_list|,
name|ObjectInspector
argument_list|>
name|cachedStandardObjectInspector
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|TypeInfo
argument_list|,
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Returns the standard object inspector that can be used to translate an    * object of that typeInfo to a standard object type.    */
specifier|public
specifier|static
name|ObjectInspector
name|getStandardWritableObjectInspectorFromTypeInfo
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|ObjectInspector
name|result
init|=
name|cachedStandardObjectInspector
operator|.
name|get
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|result
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LIST
case|:
block|{
name|ObjectInspector
name|elementObjectInspector
init|=
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
operator|(
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|elementObjectInspector
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MAP
case|:
block|{
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
decl_stmt|;
name|ObjectInspector
name|keyObjectInspector
init|=
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|mapTypeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueObjectInspector
init|=
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|mapTypeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|keyObjectInspector
argument_list|,
name|valueObjectInspector
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRUCT
case|:
block|{
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|fieldTypeInfos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldTypeInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldObjectInspectors
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|UNION
case|:
block|{
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|objectTypeInfos
init|=
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|objectTypeInfos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectTypeInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|objectTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardUnionObjectInspector
argument_list|(
name|fieldObjectInspectors
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|cachedStandardObjectInspector
operator|.
name|put
argument_list|(
name|typeInfo
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|static
name|Map
argument_list|<
name|TypeInfo
argument_list|,
name|ObjectInspector
argument_list|>
name|cachedStandardJavaObjectInspector
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|TypeInfo
argument_list|,
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Returns the standard object inspector that can be used to translate an    * object of that typeInfo to a standard object type.    */
specifier|public
specifier|static
name|ObjectInspector
name|getStandardJavaObjectInspectorFromTypeInfo
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|ObjectInspector
name|result
init|=
name|cachedStandardJavaObjectInspector
operator|.
name|get
argument_list|(
name|typeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
comment|// NOTE: we use JavaPrimitiveObjectInspector instead of
comment|// StandardPrimitiveObjectInspector
name|result
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LIST
case|:
block|{
name|ObjectInspector
name|elementObjectInspector
init|=
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
operator|(
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|elementObjectInspector
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MAP
case|:
block|{
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
decl_stmt|;
name|ObjectInspector
name|keyObjectInspector
init|=
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|mapTypeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|ObjectInspector
name|valueObjectInspector
init|=
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|mapTypeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|keyObjectInspector
argument_list|,
name|valueObjectInspector
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRUCT
case|:
block|{
name|StructTypeInfo
name|strucTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|strucTypeInfo
operator|.
name|getAllStructFieldNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|strucTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|fieldTypeInfos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fieldTypeInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldObjectInspectors
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|UNION
case|:
block|{
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|objectTypeInfos
init|=
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|objectTypeInfos
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|objectTypeInfos
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|objectTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardUnionObjectInspector
argument_list|(
name|fieldObjectInspectors
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
block|}
name|cachedStandardJavaObjectInspector
operator|.
name|put
argument_list|(
name|typeInfo
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the TypeInfo object from the ObjectInspector object by recursively    * going into the ObjectInspector structure.    */
specifier|public
specifier|static
name|TypeInfo
name|getTypeInfoFromObjectInspector
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
comment|// OPTIMIZATION for later.
comment|// if (oi instanceof TypeInfoBasedObjectInspector) {
comment|// TypeInfoBasedObjectInspector typeInfoBasedObjectInspector =
comment|// (ObjectInspector)oi;
comment|// return typeInfoBasedObjectInspector.getTypeInfo();
comment|// }
if|if
condition|(
name|oi
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Recursively going into ObjectInspector structure
name|TypeInfo
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
block|{
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|poi
operator|.
name|getTypeInfo
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LIST
case|:
block|{
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|TypeInfoFactory
operator|.
name|getListTypeInfo
argument_list|(
name|getTypeInfoFromObjectInspector
argument_list|(
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MAP
case|:
block|{
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|TypeInfoFactory
operator|.
name|getMapTypeInfo
argument_list|(
name|getTypeInfoFromObjectInspector
argument_list|(
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|)
argument_list|,
name|getTypeInfoFromObjectInspector
argument_list|(
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRUCT
case|:
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|StructField
name|f
range|:
name|fields
control|)
block|{
name|fieldNames
operator|.
name|add
argument_list|(
name|f
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|fieldTypeInfos
operator|.
name|add
argument_list|(
name|getTypeInfoFromObjectInspector
argument_list|(
name|f
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypeInfos
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|UNION
case|:
block|{
name|UnionObjectInspector
name|uoi
init|=
operator|(
name|UnionObjectInspector
operator|)
name|oi
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|objectTypeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ObjectInspector
name|eoi
range|:
name|uoi
operator|.
name|getObjectInspectors
argument_list|()
control|)
block|{
name|objectTypeInfos
operator|.
name|add
argument_list|(
name|getTypeInfoFromObjectInspector
argument_list|(
name|eoi
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|TypeInfoFactory
operator|.
name|getUnionTypeInfo
argument_list|(
name|objectTypeInfos
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown ObjectInspector category!"
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|getTypeInfosFromTypeString
parameter_list|(
name|String
name|typeString
parameter_list|)
block|{
name|TypeInfoParser
name|parser
init|=
operator|new
name|TypeInfoParser
argument_list|(
name|typeString
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parseTypeInfos
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|TypeInfo
name|getTypeInfoFromTypeString
parameter_list|(
name|String
name|typeString
parameter_list|)
block|{
name|TypeInfoParser
name|parser
init|=
operator|new
name|TypeInfoParser
argument_list|(
name|typeString
argument_list|)
decl_stmt|;
return|return
name|parser
operator|.
name|parseTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**    * Given two types, determine whether conversion needs to occur to compare the two types.    * This is needed for cases like varchar, where the TypeInfo for varchar(10) != varchar(5),    * but there would be no need to have to convert to compare these values.    * @param typeA    * @param typeB    * @return    */
specifier|public
specifier|static
name|boolean
name|isConversionRequiredForComparison
parameter_list|(
name|TypeInfo
name|typeA
parameter_list|,
name|TypeInfo
name|typeB
parameter_list|)
block|{
if|if
condition|(
name|typeA
operator|==
name|typeB
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|TypeInfoUtils
operator|.
name|doPrimitiveCategoriesMatch
argument_list|(
name|typeA
argument_list|,
name|typeB
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Return the character length of the type    * @param typeInfo    * @return    */
specifier|public
specifier|static
name|int
name|getCharacterLengthForType
parameter_list|(
name|PrimitiveTypeInfo
name|typeInfo
parameter_list|)
block|{
switch|switch
condition|(
name|typeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|STRING
case|:
return|return
name|HiveVarchar
operator|.
name|MAX_VARCHAR_LENGTH
return|;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|BaseCharTypeInfo
name|baseCharTypeInfo
init|=
operator|(
name|BaseCharTypeInfo
operator|)
name|typeInfo
decl_stmt|;
return|return
name|baseCharTypeInfo
operator|.
name|getLength
argument_list|()
return|;
default|default:
return|return
literal|0
return|;
block|}
block|}
block|}
end_class

end_unit

