begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_comment
comment|/**  * ObjectInspectorFactory is the primary way to create new ObjectInspector  * instances.  *  * SerDe classes should call the static functions in this library to create an  * ObjectInspector to return to the caller of SerDe2.getObjectInspector().  *  * The reason of having caches here is that ObjectInspectors do not have an  * internal state - so ObjectInspectors with the same construction parameters  * should result in exactly the same ObjectInspector.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LazyBinaryObjectInspectorFactory
block|{
specifier|static
name|ConcurrentHashMap
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|LazyBinaryStructObjectInspector
argument_list|>
name|cachedLazyBinaryStructObjectInspector
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|LazyBinaryStructObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
name|ConcurrentHashMap
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|LazyBinaryUnionObjectInspector
argument_list|>
name|cachedLazyBinaryUnionObjectInspector
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|LazyBinaryUnionObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|LazyBinaryStructObjectInspector
name|getLazyBinaryStructObjectInspector
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|structFieldNames
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|structFieldObjectInspectors
parameter_list|)
block|{
return|return
name|getLazyBinaryStructObjectInspector
argument_list|(
name|structFieldNames
argument_list|,
name|structFieldObjectInspectors
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|LazyBinaryStructObjectInspector
name|getLazyBinaryStructObjectInspector
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|structFieldNames
parameter_list|,
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|structFieldObjectInspectors
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|structFieldComments
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|signature
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|signature
operator|.
name|add
argument_list|(
name|structFieldNames
argument_list|)
expr_stmt|;
name|signature
operator|.
name|add
argument_list|(
name|structFieldObjectInspectors
argument_list|)
expr_stmt|;
if|if
condition|(
name|structFieldComments
operator|!=
literal|null
condition|)
block|{
name|signature
operator|.
name|add
argument_list|(
name|structFieldComments
argument_list|)
expr_stmt|;
block|}
name|LazyBinaryStructObjectInspector
name|result
init|=
name|cachedLazyBinaryStructObjectInspector
operator|.
name|get
argument_list|(
name|signature
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LazyBinaryStructObjectInspector
argument_list|(
name|structFieldNames
argument_list|,
name|structFieldObjectInspectors
argument_list|,
name|structFieldComments
argument_list|)
expr_stmt|;
name|LazyBinaryStructObjectInspector
name|prev
init|=
name|cachedLazyBinaryStructObjectInspector
operator|.
name|putIfAbsent
argument_list|(
name|signature
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|prev
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|LazyBinaryUnionObjectInspector
name|getLazyBinaryUnionObjectInspector
parameter_list|(
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|unionFieldObjectInspectors
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|signature
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|signature
operator|.
name|add
argument_list|(
name|unionFieldObjectInspectors
argument_list|)
expr_stmt|;
name|LazyBinaryUnionObjectInspector
name|result
init|=
name|cachedLazyBinaryUnionObjectInspector
operator|.
name|get
argument_list|(
name|signature
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LazyBinaryUnionObjectInspector
argument_list|(
name|unionFieldObjectInspectors
argument_list|)
expr_stmt|;
name|LazyBinaryUnionObjectInspector
name|prev
init|=
name|cachedLazyBinaryUnionObjectInspector
operator|.
name|putIfAbsent
argument_list|(
name|signature
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|prev
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|static
name|ConcurrentHashMap
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|LazyBinaryListObjectInspector
argument_list|>
name|cachedLazyBinaryListObjectInspector
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|LazyBinaryListObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|LazyBinaryListObjectInspector
name|getLazyBinaryListObjectInspector
parameter_list|(
name|ObjectInspector
name|listElementObjectInspector
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|signature
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|signature
operator|.
name|add
argument_list|(
name|listElementObjectInspector
argument_list|)
expr_stmt|;
name|LazyBinaryListObjectInspector
name|result
init|=
name|cachedLazyBinaryListObjectInspector
operator|.
name|get
argument_list|(
name|signature
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LazyBinaryListObjectInspector
argument_list|(
name|listElementObjectInspector
argument_list|)
expr_stmt|;
name|LazyBinaryListObjectInspector
name|prev
init|=
name|cachedLazyBinaryListObjectInspector
operator|.
name|putIfAbsent
argument_list|(
name|signature
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|prev
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|static
name|ConcurrentHashMap
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|LazyBinaryMapObjectInspector
argument_list|>
name|cachedLazyBinaryMapObjectInspector
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|,
name|LazyBinaryMapObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|LazyBinaryMapObjectInspector
name|getLazyBinaryMapObjectInspector
parameter_list|(
name|ObjectInspector
name|mapKeyObjectInspector
parameter_list|,
name|ObjectInspector
name|mapValueObjectInspector
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|signature
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|signature
operator|.
name|add
argument_list|(
name|mapKeyObjectInspector
argument_list|)
expr_stmt|;
name|signature
operator|.
name|add
argument_list|(
name|mapValueObjectInspector
argument_list|)
expr_stmt|;
name|LazyBinaryMapObjectInspector
name|result
init|=
name|cachedLazyBinaryMapObjectInspector
operator|.
name|get
argument_list|(
name|signature
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LazyBinaryMapObjectInspector
argument_list|(
name|mapKeyObjectInspector
argument_list|,
name|mapValueObjectInspector
argument_list|)
expr_stmt|;
name|LazyBinaryMapObjectInspector
name|prev
init|=
name|cachedLazyBinaryMapObjectInspector
operator|.
name|putIfAbsent
argument_list|(
name|signature
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|prev
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|LazyBinaryObjectInspectorFactory
parameter_list|()
block|{
comment|// prevent instantiation
block|}
block|}
end_class

end_unit

