begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Generated By:JJTree&JavaCC: Do not edit this line. thrift_grammar.java */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|dynamic_type
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|thrift_grammar
comment|/* @bgen(jjtree) */
implements|implements
name|thrift_grammarTreeConstants
implements|,
name|thrift_grammarConstants
block|{
comment|/* @bgen(jjtree) */
specifier|protected
name|JJTthrift_grammarState
name|jjtree
init|=
operator|new
name|JJTthrift_grammarState
argument_list|()
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|include_path
init|=
literal|null
decl_stmt|;
comment|// for computing the autogenerated field ids in thrift
specifier|private
name|int
name|field_val
decl_stmt|;
comment|// store types and tables
comment|// separately because one cannot use a table (ie service.method) as a Struct
comment|// like type.
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|DynamicSerDeSimpleNode
argument_list|>
name|types
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|DynamicSerDeSimpleNode
argument_list|>
name|tables
decl_stmt|;
comment|// system include path
specifier|final
specifier|private
specifier|static
name|String
name|default_include_path
index|[]
init|=
block|{
literal|"/usr/local/include"
block|,
literal|"/usr/include"
block|,
literal|"/usr/local/include/thrift/if"
block|,
literal|"/usr/local/include/fb303/if"
block|}
decl_stmt|;
comment|// need three params to differentiate between this and 2 param method auto
comment|// generated since
comment|// some calls in the autogenerated code use null param for 2nd param and thus
comment|// ambiguous.
specifier|protected
name|thrift_grammar
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|include_path
parameter_list|,
name|boolean
name|junk
parameter_list|)
block|{
name|this
argument_list|(
name|is
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|types
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DynamicSerDeSimpleNode
argument_list|>
argument_list|()
expr_stmt|;
name|tables
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DynamicSerDeSimpleNode
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|include_path
operator|=
name|include_path
expr_stmt|;
name|field_val
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// find the file on the include path
specifier|private
specifier|static
name|File
name|findFile
parameter_list|(
name|String
name|fname
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|include_path
parameter_list|)
block|{
for|for
control|(
name|String
name|path
range|:
name|include_path
control|)
block|{
specifier|final
name|String
name|full
init|=
name|path
operator|+
literal|"/"
operator|+
name|fname
decl_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|full
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|f
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|String
name|filename
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|include_path
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|default_include_path
control|)
block|{
name|include_path
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|arg
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--include"
argument_list|)
operator|&&
name|i
operator|+
literal|1
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|include_path
operator|.
name|add
argument_list|(
name|args
index|[
operator|++
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|arg
operator|.
name|equals
argument_list|(
literal|"--file"
argument_list|)
operator|&&
name|i
operator|+
literal|1
operator|<
name|args
operator|.
name|length
condition|)
block|{
name|filename
operator|=
name|args
index|[
operator|++
name|i
index|]
expr_stmt|;
block|}
block|}
name|InputStream
name|is
init|=
name|System
operator|.
name|in
decl_stmt|;
if|if
condition|(
name|filename
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|findFile
argument_list|(
name|filename
argument_list|,
name|include_path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{       }
block|}
name|thrift_grammar
name|t
init|=
operator|new
name|thrift_grammar
argument_list|(
name|is
argument_list|,
name|include_path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|t
operator|.
name|Start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Parse error."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
specifier|public
name|SimpleNode
name|Start
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Start */
name|DynamicSerDeStart
name|jjtn000
init|=
operator|new
name|DynamicSerDeStart
argument_list|(
name|JJTSTART
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|HeaderList
argument_list|()
expr_stmt|;
name|label_1
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|59
case|:
case|case
literal|60
case|:
name|CommaOrSemicolon
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|0
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|Definition
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_const
case|:
case|case
name|tok_senum
case|:
case|case
name|tok_typedef
case|:
case|case
name|tok_struct
case|:
case|case
name|tok_exception
case|:
case|case
name|tok_service
case|:
case|case
name|tok_enum
case|:
case|case
literal|59
case|:
case|case
literal|60
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|1
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_1
break|;
block|}
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|HeaderList
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) HeaderList */
name|DynamicSerDeHeaderList
name|jjtn000
init|=
operator|new
name|DynamicSerDeHeaderList
argument_list|(
name|JJTHEADERLIST
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|label_2
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_namespace
case|:
case|case
name|tok_cpp_namespace
case|:
case|case
name|tok_cpp_include
case|:
case|case
name|tok_java_package
case|:
case|case
name|tok_cocoa_prefix
case|:
case|case
name|tok_csharp_namespace
case|:
case|case
name|tok_php_namespace
case|:
case|case
name|tok_py_module
case|:
case|case
name|tok_perl_package
case|:
case|case
name|tok_ruby_namespace
case|:
case|case
name|tok_smalltalk_category
case|:
case|case
name|tok_smalltalk_prefix
case|:
case|case
name|tok_xsd_namespace
case|:
case|case
name|tok_include
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|2
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_2
break|;
block|}
name|Header
argument_list|()
expr_stmt|;
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|Header
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Header */
name|DynamicSerDeHeader
name|jjtn000
init|=
operator|new
name|DynamicSerDeHeader
argument_list|(
name|JJTHEADER
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_include
case|:
name|Include
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_namespace
case|:
case|case
name|tok_cpp_namespace
case|:
case|case
name|tok_cpp_include
case|:
case|case
name|tok_java_package
case|:
case|case
name|tok_cocoa_prefix
case|:
case|case
name|tok_csharp_namespace
case|:
case|case
name|tok_php_namespace
case|:
case|case
name|tok_py_module
case|:
case|case
name|tok_perl_package
case|:
case|case
name|tok_ruby_namespace
case|:
case|case
name|tok_smalltalk_category
case|:
case|case
name|tok_smalltalk_prefix
case|:
case|case
name|tok_xsd_namespace
case|:
name|Namespace
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|3
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|Namespace
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Namespace */
name|DynamicSerDeNamespace
name|jjtn000
init|=
operator|new
name|DynamicSerDeNamespace
argument_list|(
name|JJTNAMESPACE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_namespace
case|:
name|jj_consume_token
argument_list|(
name|tok_namespace
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_cpp_namespace
case|:
name|jj_consume_token
argument_list|(
name|tok_cpp_namespace
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_cpp_include
case|:
name|jj_consume_token
argument_list|(
name|tok_cpp_include
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|tok_literal
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_php_namespace
case|:
name|jj_consume_token
argument_list|(
name|tok_php_namespace
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_py_module
case|:
name|jj_consume_token
argument_list|(
name|tok_py_module
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_perl_package
case|:
name|jj_consume_token
argument_list|(
name|tok_perl_package
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_ruby_namespace
case|:
name|jj_consume_token
argument_list|(
name|tok_ruby_namespace
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_smalltalk_category
case|:
name|jj_consume_token
argument_list|(
name|tok_smalltalk_category
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|tok_st_identifier
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_smalltalk_prefix
case|:
name|jj_consume_token
argument_list|(
name|tok_smalltalk_prefix
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_java_package
case|:
name|jj_consume_token
argument_list|(
name|tok_java_package
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_cocoa_prefix
case|:
name|jj_consume_token
argument_list|(
name|tok_cocoa_prefix
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_xsd_namespace
case|:
name|jj_consume_token
argument_list|(
name|tok_xsd_namespace
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|tok_literal
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_csharp_namespace
case|:
name|jj_consume_token
argument_list|(
name|tok_csharp_namespace
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|4
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|Include
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Include */
name|DynamicSerDeInclude
name|jjtn000
init|=
operator|new
name|DynamicSerDeInclude
argument_list|(
name|JJTINCLUDE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|String
name|fname
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_include
argument_list|)
expr_stmt|;
name|fname
operator|=
name|jj_consume_token
argument_list|(
name|tok_literal
argument_list|)
operator|.
name|image
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
comment|// bugbug somewhat fragile below substring expression
name|fname
operator|=
name|fname
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|fname
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// try to find the file on the include path
name|File
name|f
init|=
name|thrift_grammar
operator|.
name|findFile
argument_list|(
name|fname
argument_list|,
name|include_path
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|!=
literal|null
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
try|try
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|thrift_grammar
name|t
init|=
operator|new
name|thrift_grammar
argument_list|(
name|fis
argument_list|,
name|include_path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|t
operator|.
name|Start
argument_list|()
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
comment|// add in what we found to our type and table tables.
name|tables
operator|.
name|putAll
argument_list|(
name|t
operator|.
name|tables
argument_list|)
expr_stmt|;
name|types
operator|.
name|putAll
argument_list|(
name|t
operator|.
name|types
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"File: "
operator|+
name|fname
operator|+
literal|" - Oops."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"include file not found: "
operator|+
name|fname
argument_list|)
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|Definition
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Definition */
name|DynamicSerDeDefinition
name|jjtn000
init|=
operator|new
name|DynamicSerDeDefinition
argument_list|(
name|JJTDEFINITION
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_const
case|:
name|Const
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_service
case|:
name|Service
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_senum
case|:
case|case
name|tok_typedef
case|:
case|case
name|tok_struct
case|:
case|case
name|tok_exception
case|:
case|case
name|tok_enum
case|:
name|TypeDefinition
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|5
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|TypeDefinition
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) TypeDefinition */
name|DynamicSerDeTypeDefinition
name|jjtn000
init|=
operator|new
name|DynamicSerDeTypeDefinition
argument_list|(
name|JJTTYPEDEFINITION
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_typedef
case|:
name|Typedef
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_enum
case|:
name|Enum
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_senum
case|:
name|Senum
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_struct
case|:
name|Struct
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_exception
case|:
name|Xception
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|6
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeTypedef
name|Typedef
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Typedef */
name|DynamicSerDeTypedef
name|jjtn000
init|=
operator|new
name|DynamicSerDeTypedef
argument_list|(
name|JJTTYPEDEF
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_typedef
argument_list|)
expr_stmt|;
name|DefinitionType
argument_list|()
expr_stmt|;
name|jjtn000
operator|.
name|name
operator|=
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
operator|.
name|image
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
comment|// store the type for later retrieval
name|types
operator|.
name|put
argument_list|(
name|jjtn000
operator|.
name|name
argument_list|,
name|jjtn000
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|// returning void because we ignore this production.
specifier|final
specifier|public
name|void
name|CommaOrSemicolon
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) CommaOrSemicolon */
name|DynamicSerDeCommaOrSemicolon
name|jjtn000
init|=
operator|new
name|DynamicSerDeCommaOrSemicolon
argument_list|(
name|JJTCOMMAORSEMICOLON
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|59
case|:
name|jj_consume_token
argument_list|(
literal|59
argument_list|)
expr_stmt|;
break|break;
case|case
literal|60
case|:
name|jj_consume_token
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|7
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
specifier|public
name|SimpleNode
name|Enum
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Enum */
name|DynamicSerDeEnum
name|jjtn000
init|=
operator|new
name|DynamicSerDeEnum
argument_list|(
name|JJTENUM
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_enum
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|61
argument_list|)
expr_stmt|;
name|EnumDefList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|62
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|EnumDefList
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) EnumDefList */
name|DynamicSerDeEnumDefList
name|jjtn000
init|=
operator|new
name|DynamicSerDeEnumDefList
argument_list|(
name|JJTENUMDEFLIST
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|label_3
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|EnumDef
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|IDENTIFIER
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|8
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_3
break|;
block|}
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|EnumDef
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) EnumDef */
name|DynamicSerDeEnumDef
name|jjtn000
init|=
operator|new
name|DynamicSerDeEnumDef
argument_list|(
name|JJTENUMDEF
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|63
case|:
name|jj_consume_token
argument_list|(
literal|63
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|tok_int_constant
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|9
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|59
case|:
case|case
literal|60
case|:
name|CommaOrSemicolon
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|10
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|Senum
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Senum */
name|DynamicSerDeSenum
name|jjtn000
init|=
operator|new
name|DynamicSerDeSenum
argument_list|(
name|JJTSENUM
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_senum
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|61
argument_list|)
expr_stmt|;
name|SenumDefList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|62
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|SenumDefList
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) SenumDefList */
name|DynamicSerDeSenumDefList
name|jjtn000
init|=
operator|new
name|DynamicSerDeSenumDefList
argument_list|(
name|JJTSENUMDEFLIST
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|label_4
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|SenumDef
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_literal
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|11
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_4
break|;
block|}
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|SenumDef
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) SenumDef */
name|DynamicSerDeSenumDef
name|jjtn000
init|=
operator|new
name|DynamicSerDeSenumDef
argument_list|(
name|JJTSENUMDEF
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_literal
argument_list|)
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|59
case|:
case|case
literal|60
case|:
name|CommaOrSemicolon
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|12
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|Const
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Const */
name|DynamicSerDeConst
name|jjtn000
init|=
operator|new
name|DynamicSerDeConst
argument_list|(
name|JJTCONST
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_const
argument_list|)
expr_stmt|;
name|FieldType
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|63
argument_list|)
expr_stmt|;
name|ConstValue
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|59
case|:
case|case
literal|60
case|:
name|CommaOrSemicolon
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|13
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|ConstValue
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) ConstValue */
name|DynamicSerDeConstValue
name|jjtn000
init|=
operator|new
name|DynamicSerDeConstValue
argument_list|(
name|JJTCONSTVALUE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_int_constant
case|:
name|jj_consume_token
argument_list|(
name|tok_int_constant
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|tok_double_constant
case|:
name|jj_consume_token
argument_list|(
name|tok_double_constant
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|tok_literal
case|:
name|jj_consume_token
argument_list|(
name|tok_literal
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|IDENTIFIER
case|:
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|64
case|:
name|ConstList
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|61
case|:
name|ConstMap
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|14
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|ConstList
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) ConstList */
name|DynamicSerDeConstList
name|jjtn000
init|=
operator|new
name|DynamicSerDeConstList
argument_list|(
name|JJTCONSTLIST
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
literal|64
argument_list|)
expr_stmt|;
name|ConstListContents
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|65
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|ConstListContents
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) ConstListContents */
name|DynamicSerDeConstListContents
name|jjtn000
init|=
operator|new
name|DynamicSerDeConstListContents
argument_list|(
name|JJTCONSTLISTCONTENTS
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|label_5
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|ConstValue
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|59
case|:
case|case
literal|60
case|:
name|CommaOrSemicolon
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|15
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_int_constant
case|:
case|case
name|tok_double_constant
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|tok_literal
case|:
case|case
literal|61
case|:
case|case
literal|64
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|16
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_5
break|;
block|}
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|ConstMap
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) ConstMap */
name|DynamicSerDeConstMap
name|jjtn000
init|=
operator|new
name|DynamicSerDeConstMap
argument_list|(
name|JJTCONSTMAP
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
literal|61
argument_list|)
expr_stmt|;
name|ConstMapContents
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|62
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|ConstMapContents
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) ConstMapContents */
name|DynamicSerDeConstMapContents
name|jjtn000
init|=
operator|new
name|DynamicSerDeConstMapContents
argument_list|(
name|JJTCONSTMAPCONTENTS
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_int_constant
case|:
case|case
name|tok_double_constant
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|tok_literal
case|:
case|case
literal|61
case|:
case|case
literal|64
case|:
name|label_6
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|ConstValue
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|66
argument_list|)
expr_stmt|;
name|ConstValue
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|59
case|:
case|case
literal|60
case|:
name|CommaOrSemicolon
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|17
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_int_constant
case|:
case|case
name|tok_double_constant
case|:
case|case
name|IDENTIFIER
case|:
case|case
name|tok_literal
case|:
case|case
literal|61
case|:
case|case
literal|64
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|18
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_6
break|;
block|}
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|19
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeStruct
name|Struct
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Struct */
name|DynamicSerDeStruct
name|jjtn000
init|=
operator|new
name|DynamicSerDeStruct
argument_list|(
name|JJTSTRUCT
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_struct
argument_list|)
expr_stmt|;
name|jjtn000
operator|.
name|name
operator|=
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
operator|.
name|image
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|61
argument_list|)
expr_stmt|;
name|FieldList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|62
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
name|types
operator|.
name|put
argument_list|(
name|jjtn000
operator|.
name|name
argument_list|,
name|jjtn000
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|Xception
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Xception */
name|DynamicSerDeXception
name|jjtn000
init|=
operator|new
name|DynamicSerDeXception
argument_list|(
name|JJTXCEPTION
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_exception
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|61
argument_list|)
expr_stmt|;
name|FieldList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|62
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|Service
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Service */
name|DynamicSerDeService
name|jjtn000
init|=
operator|new
name|DynamicSerDeService
argument_list|(
name|JJTSERVICE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_service
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|Extends
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|61
argument_list|)
expr_stmt|;
name|FlagArgs
argument_list|()
expr_stmt|;
name|label_7
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|Function
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_void
case|:
case|case
name|tok_bool
case|:
case|case
name|tok_i16
case|:
case|case
name|tok_i32
case|:
case|case
name|tok_i64
case|:
case|case
name|tok_double
case|:
case|case
name|tok_string
case|:
case|case
name|tok_map
case|:
case|case
name|tok_list
case|:
case|case
name|tok_set
case|:
case|case
name|tok_async
case|:
case|case
name|IDENTIFIER
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|20
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_7
break|;
block|}
block|}
name|UnflagArgs
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|62
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
comment|// at some point, these should be inserted as a "db"
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|FlagArgs
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) FlagArgs */
name|DynamicSerDeFlagArgs
name|jjtn000
init|=
operator|new
name|DynamicSerDeFlagArgs
argument_list|(
name|JJTFLAGARGS
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|UnflagArgs
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) UnflagArgs */
name|DynamicSerDeUnflagArgs
name|jjtn000
init|=
operator|new
name|DynamicSerDeUnflagArgs
argument_list|(
name|JJTUNFLAGARGS
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|Extends
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Extends */
name|DynamicSerDeExtends
name|jjtn000
init|=
operator|new
name|DynamicSerDeExtends
argument_list|(
name|JJTEXTENDS
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_extends
case|:
name|jj_consume_token
argument_list|(
name|tok_extends
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|21
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeFunction
name|Function
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Function */
name|DynamicSerDeFunction
name|jjtn000
init|=
operator|new
name|DynamicSerDeFunction
argument_list|(
name|JJTFUNCTION
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|Async
argument_list|()
expr_stmt|;
name|FunctionType
argument_list|()
expr_stmt|;
comment|// the name of the function/table
name|jjtn000
operator|.
name|name
operator|=
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
operator|.
name|image
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|67
argument_list|)
expr_stmt|;
name|FieldList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|68
argument_list|)
expr_stmt|;
name|Throws
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|59
case|:
case|case
literal|60
case|:
name|CommaOrSemicolon
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|22
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
name|jjtn000
operator|.
name|name
argument_list|,
name|jjtn000
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|void
name|Async
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Async */
name|DynamicSerDeAsync
name|jjtn000
init|=
operator|new
name|DynamicSerDeAsync
argument_list|(
name|JJTASYNC
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_async
case|:
name|jj_consume_token
argument_list|(
name|tok_async
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|23
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
specifier|public
name|void
name|Throws
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Throws */
name|DynamicSerDeThrows
name|jjtn000
init|=
operator|new
name|DynamicSerDeThrows
argument_list|(
name|JJTTHROWS
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_throws
case|:
name|jj_consume_token
argument_list|(
name|tok_throws
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|67
argument_list|)
expr_stmt|;
name|FieldList
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|68
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|24
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// nothing special - just use the DynamicSerDeFieldList's children methods to
comment|// access the fields
specifier|final
specifier|public
name|DynamicSerDeFieldList
name|FieldList
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) FieldList */
name|DynamicSerDeFieldList
name|jjtn000
init|=
operator|new
name|DynamicSerDeFieldList
argument_list|(
name|JJTFIELDLIST
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|field_val
operator|=
operator|-
literal|1
expr_stmt|;
try|try
block|{
name|label_8
label|:
while|while
condition|(
literal|true
condition|)
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_bool
case|:
case|case
name|tok_i16
case|:
case|case
name|tok_i32
case|:
case|case
name|tok_i64
case|:
case|case
name|tok_double
case|:
case|case
name|tok_string
case|:
case|case
name|tok_map
case|:
case|case
name|tok_list
case|:
case|case
name|tok_set
case|:
case|case
name|tok_required
case|:
case|case
name|tok_optional
case|:
case|case
name|tok_skip
case|:
case|case
name|tok_int_constant
case|:
case|case
name|IDENTIFIER
case|:
empty_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|25
index|]
operator|=
name|jj_gen
expr_stmt|;
break|break
name|label_8
break|;
block|}
name|Field
argument_list|()
expr_stmt|;
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeField
name|Field
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Field */
name|DynamicSerDeField
name|jjtn000
init|=
operator|new
name|DynamicSerDeField
argument_list|(
name|JJTFIELD
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|String
name|fidnum
init|=
literal|""
decl_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_int_constant
case|:
name|fidnum
operator|=
name|jj_consume_token
argument_list|(
name|tok_int_constant
argument_list|)
operator|.
name|image
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|66
argument_list|)
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|26
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|FieldRequiredness
argument_list|()
expr_stmt|;
name|FieldType
argument_list|()
expr_stmt|;
comment|// the name of the field - not optional
name|jjtn000
operator|.
name|name
operator|=
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
operator|.
name|image
expr_stmt|;
name|FieldValue
argument_list|()
expr_stmt|;
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|59
case|:
case|case
literal|60
case|:
name|CommaOrSemicolon
argument_list|()
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|27
index|]
operator|=
name|jj_gen
expr_stmt|;
empty_stmt|;
block|}
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|fidnum
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|fidInt
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|fidnum
argument_list|)
decl_stmt|;
name|jjtn000
operator|.
name|fieldid
operator|=
name|fidInt
expr_stmt|;
block|}
else|else
block|{
name|jjtn000
operator|.
name|fieldid
operator|=
name|field_val
operator|--
expr_stmt|;
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeFieldRequiredness
name|FieldRequiredness
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) FieldRequiredness */
name|DynamicSerDeFieldRequiredness
name|jjtn000
init|=
operator|new
name|DynamicSerDeFieldRequiredness
argument_list|(
name|JJTFIELDREQUIREDNESS
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_required
case|:
name|jj_consume_token
argument_list|(
name|tok_required
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
name|jjtn000
operator|.
name|requiredness
operator|=
name|DynamicSerDeFieldRequiredness
operator|.
name|RequirednessTypes
operator|.
name|Required
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_optional
case|:
name|jj_consume_token
argument_list|(
name|tok_optional
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
name|jjtn000
operator|.
name|requiredness
operator|=
name|DynamicSerDeFieldRequiredness
operator|.
name|RequirednessTypes
operator|.
name|Optional
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_skip
case|:
name|jj_consume_token
argument_list|(
name|tok_skip
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
name|jjtn000
operator|.
name|requiredness
operator|=
name|DynamicSerDeFieldRequiredness
operator|.
name|RequirednessTypes
operator|.
name|Skippable
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|28
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|FieldValue
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) FieldValue */
name|DynamicSerDeFieldValue
name|jjtn000
init|=
operator|new
name|DynamicSerDeFieldValue
argument_list|(
name|JJTFIELDVALUE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
literal|63
case|:
name|jj_consume_token
argument_list|(
literal|63
argument_list|)
expr_stmt|;
name|ConstValue
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|29
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|SimpleNode
name|DefinitionType
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) DefinitionType */
name|DynamicSerDeDefinitionType
name|jjtn000
init|=
operator|new
name|DynamicSerDeDefinitionType
argument_list|(
name|JJTDEFINITIONTYPE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_string
case|:
name|TypeString
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_bool
case|:
name|TypeBool
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_i16
case|:
name|Typei16
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_i32
case|:
name|Typei32
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_i64
case|:
name|Typei64
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_double
case|:
name|TypeDouble
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_map
case|:
name|TypeMap
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_set
case|:
name|TypeSet
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_list
case|:
name|TypeList
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|30
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|void
name|FunctionType
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) FunctionType */
name|DynamicSerDeFunctionType
name|jjtn000
init|=
operator|new
name|DynamicSerDeFunctionType
argument_list|(
name|JJTFUNCTIONTYPE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_bool
case|:
case|case
name|tok_i16
case|:
case|case
name|tok_i32
case|:
case|case
name|tok_i64
case|:
case|case
name|tok_double
case|:
case|case
name|tok_string
case|:
case|case
name|tok_map
case|:
case|case
name|tok_list
case|:
case|case
name|tok_set
case|:
case|case
name|IDENTIFIER
case|:
name|FieldType
argument_list|()
expr_stmt|;
break|break;
case|case
name|tok_void
case|:
name|jj_consume_token
argument_list|(
name|tok_void
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
break|break;
default|default:
name|jj_la1
index|[
literal|31
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
specifier|public
name|DynamicSerDeFieldType
name|FieldType
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) FieldType */
name|DynamicSerDeFieldType
name|jjtn000
init|=
operator|new
name|DynamicSerDeFieldType
argument_list|(
name|JJTFIELDTYPE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
switch|switch
condition|(
operator|(
name|jj_ntk
operator|==
operator|-
literal|1
operator|)
condition|?
name|jj_ntk
argument_list|()
else|:
name|jj_ntk
condition|)
block|{
case|case
name|tok_string
case|:
name|TypeString
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_bool
case|:
name|TypeBool
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_i16
case|:
name|Typei16
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_i32
case|:
name|Typei32
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_i64
case|:
name|Typei64
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_double
case|:
name|TypeDouble
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_map
case|:
name|TypeMap
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_set
case|:
name|TypeSet
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|tok_list
case|:
name|TypeList
argument_list|()
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
case|case
name|IDENTIFIER
case|:
name|jjtn000
operator|.
name|name
operator|=
name|jj_consume_token
argument_list|(
name|IDENTIFIER
argument_list|)
operator|.
name|image
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|types
operator|.
name|get
argument_list|(
name|jjtn000
operator|.
name|name
argument_list|)
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR: DDL specifying type "
operator|+
name|jjtn000
operator|.
name|name
operator|+
literal|" which has not been defined"
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"specifying type "
operator|+
name|jjtn000
operator|.
name|name
operator|+
literal|" which has not been defined"
argument_list|)
throw|;
block|}
block|}
block|}
comment|// lookup the specified type and set this nodes type to it. Precludes
comment|// forward and self references for now.
name|jjtn000
operator|.
name|jjtAddChild
argument_list|(
name|types
operator|.
name|get
argument_list|(
name|jjtn000
operator|.
name|name
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
break|break;
default|default:
name|jj_la1
index|[
literal|32
index|]
operator|=
name|jj_gen
expr_stmt|;
name|jj_consume_token
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ParseException
argument_list|()
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeTypeString
name|TypeString
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) TypeString */
name|DynamicSerDeTypeString
name|jjtn000
init|=
operator|new
name|DynamicSerDeTypeString
argument_list|(
name|JJTTYPESTRING
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_string
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeTypeByte
name|TypeByte
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) TypeByte */
name|DynamicSerDeTypeByte
name|jjtn000
init|=
operator|new
name|DynamicSerDeTypeByte
argument_list|(
name|JJTTYPEBYTE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_byte
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeTypei16
name|Typei16
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Typei16 */
name|DynamicSerDeTypei16
name|jjtn000
init|=
operator|new
name|DynamicSerDeTypei16
argument_list|(
name|JJTTYPEI16
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_i16
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeTypei32
name|Typei32
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Typei32 */
name|DynamicSerDeTypei32
name|jjtn000
init|=
operator|new
name|DynamicSerDeTypei32
argument_list|(
name|JJTTYPEI32
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_i32
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeTypei64
name|Typei64
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) Typei64 */
name|DynamicSerDeTypei64
name|jjtn000
init|=
operator|new
name|DynamicSerDeTypei64
argument_list|(
name|JJTTYPEI64
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_i64
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeTypeDouble
name|TypeDouble
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) TypeDouble */
name|DynamicSerDeTypeDouble
name|jjtn000
init|=
operator|new
name|DynamicSerDeTypeDouble
argument_list|(
name|JJTTYPEDOUBLE
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_double
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeTypeBool
name|TypeBool
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) TypeBool */
name|DynamicSerDeTypeBool
name|jjtn000
init|=
operator|new
name|DynamicSerDeTypeBool
argument_list|(
name|JJTTYPEBOOL
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_bool
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeTypeMap
name|TypeMap
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) TypeMap */
name|DynamicSerDeTypeMap
name|jjtn000
init|=
operator|new
name|DynamicSerDeTypeMap
argument_list|(
name|JJTTYPEMAP
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_map
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|69
argument_list|)
expr_stmt|;
name|FieldType
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|59
argument_list|)
expr_stmt|;
name|FieldType
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeTypeSet
name|TypeSet
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) TypeSet */
name|DynamicSerDeTypeSet
name|jjtn000
init|=
operator|new
name|DynamicSerDeTypeSet
argument_list|(
name|JJTTYPESET
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_set
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|69
argument_list|)
expr_stmt|;
name|FieldType
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
specifier|final
specifier|public
name|DynamicSerDeTypeList
name|TypeList
parameter_list|()
throws|throws
name|ParseException
block|{
comment|/* @bgen(jjtree) TypeList */
name|DynamicSerDeTypeList
name|jjtn000
init|=
operator|new
name|DynamicSerDeTypeList
argument_list|(
name|JJTTYPELIST
argument_list|)
decl_stmt|;
name|boolean
name|jjtc000
init|=
literal|true
decl_stmt|;
name|jjtree
operator|.
name|openNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
try|try
block|{
name|jj_consume_token
argument_list|(
name|tok_list
argument_list|)
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|69
argument_list|)
expr_stmt|;
name|FieldType
argument_list|()
expr_stmt|;
name|jj_consume_token
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|{
if|if
condition|(
literal|true
condition|)
block|{
return|return
name|jjtn000
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|jjte000
parameter_list|)
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|clearNodeScope
argument_list|(
name|jjtn000
argument_list|)
expr_stmt|;
name|jjtc000
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|jjtree
operator|.
name|popNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|RuntimeException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|RuntimeException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
if|if
condition|(
name|jjte000
operator|instanceof
name|ParseException
condition|)
block|{
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|ParseException
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
literal|true
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|jjte000
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jjtc000
condition|)
block|{
name|jjtree
operator|.
name|closeNodeScope
argument_list|(
name|jjtn000
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Missing return statement in function"
argument_list|)
throw|;
block|}
comment|/** Generated Token Manager. */
specifier|public
name|thrift_grammarTokenManager
name|token_source
decl_stmt|;
name|SimpleCharStream
name|jj_input_stream
decl_stmt|;
comment|/** Current token. */
specifier|public
name|Token
name|token
decl_stmt|;
comment|/** Next token. */
specifier|public
name|Token
name|jj_nt
decl_stmt|;
specifier|private
name|int
name|jj_ntk
decl_stmt|;
specifier|private
name|int
name|jj_gen
decl_stmt|;
specifier|final
specifier|private
name|int
index|[]
name|jj_la1
init|=
operator|new
name|int
index|[
literal|33
index|]
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_0
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_1
decl_stmt|;
specifier|static
specifier|private
name|int
index|[]
name|jj_la1_2
decl_stmt|;
static|static
block|{
name|jj_la1_init_0
argument_list|()
expr_stmt|;
name|jj_la1_init_1
argument_list|()
expr_stmt|;
name|jj_la1_init_2
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_0
parameter_list|()
block|{
name|jj_la1_0
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x100
block|,
literal|0xa3fee00
block|,
literal|0xa3fee00
block|,
literal|0x23fee00
block|,
literal|0x100
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xb0000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xa0000000
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0xa0000000
block|,
literal|0xb0000000
block|,
literal|0xa0000000
block|, }
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_1
parameter_list|()
block|{
name|jj_la1_1
operator|=
operator|new
name|int
index|[]
block|{
literal|0x18000000
block|,
literal|0x18019c20
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x19c20
block|,
literal|0x11c20
block|,
literal|0x18000000
block|,
literal|0x400000
block|,
literal|0x80000000
block|,
literal|0x18000000
block|,
literal|0x2000000
block|,
literal|0x18000000
block|,
literal|0x18000000
block|,
literal|0x22700000
block|,
literal|0x18000000
block|,
literal|0x22700000
block|,
literal|0x18000000
block|,
literal|0x22700000
block|,
literal|0x22700000
block|,
literal|0x4003cf
block|,
literal|0x2000
block|,
literal|0x18000000
block|,
literal|0x200
block|,
literal|0x4000
block|,
literal|0x5e01cf
block|,
literal|0x100000
block|,
literal|0x18000000
block|,
literal|0xe0000
block|,
literal|0x80000000
block|,
literal|0x1cf
block|,
literal|0x4001cf
block|,
literal|0x4001cf
block|, }
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|jj_la1_init_2
parameter_list|()
block|{
name|jj_la1_2
operator|=
operator|new
name|int
index|[]
block|{
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x1
block|,
literal|0x1
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|,
literal|0x0
block|, }
expr_stmt|;
block|}
comment|/** Constructor with InputStream. */
specifier|public
name|thrift_grammar
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|this
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Constructor with InputStream and supplied encoding */
specifier|public
name|thrift_grammar
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|=
operator|new
name|thrift_grammarTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|33
condition|;
name|i
operator|++
control|)
block|{
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|)
block|{
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|InputStream
name|stream
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
try|try
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
name|encoding
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jjtree
operator|.
name|reset
argument_list|()
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|33
condition|;
name|i
operator|++
control|)
block|{
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|/** Constructor. */
specifier|public
name|thrift_grammar
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|=
operator|new
name|SimpleCharStream
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|=
operator|new
name|thrift_grammarTokenManager
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|33
condition|;
name|i
operator|++
control|)
block|{
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|java
operator|.
name|io
operator|.
name|Reader
name|stream
parameter_list|)
block|{
name|jj_input_stream
operator|.
name|ReInit
argument_list|(
name|stream
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|token_source
operator|.
name|ReInit
argument_list|(
name|jj_input_stream
argument_list|)
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jjtree
operator|.
name|reset
argument_list|()
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|33
condition|;
name|i
operator|++
control|)
block|{
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|/** Constructor with generated Token Manager. */
specifier|public
name|thrift_grammar
parameter_list|(
name|thrift_grammarTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|33
condition|;
name|i
operator|++
control|)
block|{
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
comment|/** Reinitialise. */
specifier|public
name|void
name|ReInit
parameter_list|(
name|thrift_grammarTokenManager
name|tm
parameter_list|)
block|{
name|token_source
operator|=
name|tm
expr_stmt|;
name|token
operator|=
operator|new
name|Token
argument_list|()
expr_stmt|;
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jjtree
operator|.
name|reset
argument_list|()
expr_stmt|;
name|jj_gen
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|33
condition|;
name|i
operator|++
control|)
block|{
name|jj_la1
index|[
name|i
index|]
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
specifier|private
name|Token
name|jj_consume_token
parameter_list|(
name|int
name|kind
parameter_list|)
throws|throws
name|ParseException
block|{
name|Token
name|oldToken
decl_stmt|;
if|if
condition|(
operator|(
name|oldToken
operator|=
name|token
operator|)
operator|.
name|next
operator|!=
literal|null
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|token
operator|.
name|kind
operator|==
name|kind
condition|)
block|{
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
name|token
operator|=
name|oldToken
expr_stmt|;
name|jj_kind
operator|=
name|kind
expr_stmt|;
throw|throw
name|generateParseException
argument_list|()
throw|;
block|}
comment|/** Get the next Token. */
specifier|final
specifier|public
name|Token
name|getNextToken
parameter_list|()
block|{
if|if
condition|(
name|token
operator|.
name|next
operator|!=
literal|null
condition|)
block|{
name|token
operator|=
name|token
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
name|token
operator|=
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
name|jj_ntk
operator|=
operator|-
literal|1
expr_stmt|;
name|jj_gen
operator|++
expr_stmt|;
return|return
name|token
return|;
block|}
comment|/** Get the specific Token. */
specifier|final
specifier|public
name|Token
name|getToken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Token
name|t
init|=
name|token
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|index
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|t
operator|.
name|next
operator|!=
literal|null
condition|)
block|{
name|t
operator|=
name|t
operator|.
name|next
expr_stmt|;
block|}
else|else
block|{
name|t
operator|=
name|t
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|t
return|;
block|}
specifier|private
name|int
name|jj_ntk
parameter_list|()
block|{
if|if
condition|(
operator|(
name|jj_nt
operator|=
name|token
operator|.
name|next
operator|)
operator|==
literal|null
condition|)
block|{
return|return
operator|(
name|jj_ntk
operator|=
operator|(
name|token
operator|.
name|next
operator|=
name|token_source
operator|.
name|getNextToken
argument_list|()
operator|)
operator|.
name|kind
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|jj_ntk
operator|=
name|jj_nt
operator|.
name|kind
operator|)
return|;
block|}
block|}
specifier|private
specifier|final
name|java
operator|.
name|util
operator|.
name|List
name|jj_expentries
init|=
operator|new
name|java
operator|.
name|util
operator|.
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|int
index|[]
name|jj_expentry
decl_stmt|;
specifier|private
name|int
name|jj_kind
init|=
operator|-
literal|1
decl_stmt|;
comment|/** Generate ParseException. */
specifier|public
name|ParseException
name|generateParseException
parameter_list|()
block|{
name|jj_expentries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|boolean
index|[]
name|la1tokens
init|=
operator|new
name|boolean
index|[
literal|71
index|]
decl_stmt|;
if|if
condition|(
name|jj_kind
operator|>=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|jj_kind
index|]
operator|=
literal|true
expr_stmt|;
name|jj_kind
operator|=
operator|-
literal|1
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|33
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|jj_la1
index|[
name|i
index|]
operator|==
name|jj_gen
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|32
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
operator|(
name|jj_la1_0
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_1
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|32
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|jj_la1_2
index|[
name|i
index|]
operator|&
operator|(
literal|1
operator|<<
name|j
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
name|la1tokens
index|[
literal|64
operator|+
name|j
index|]
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|71
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|la1tokens
index|[
name|i
index|]
condition|)
block|{
name|jj_expentry
operator|=
operator|new
name|int
index|[
literal|1
index|]
expr_stmt|;
name|jj_expentry
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
name|jj_expentries
operator|.
name|add
argument_list|(
name|jj_expentry
argument_list|)
expr_stmt|;
block|}
block|}
name|int
index|[]
index|[]
name|exptokseq
init|=
operator|new
name|int
index|[
name|jj_expentries
operator|.
name|size
argument_list|()
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jj_expentries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|exptokseq
index|[
name|i
index|]
operator|=
operator|(
name|int
index|[]
operator|)
name|jj_expentries
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ParseException
argument_list|(
name|token
argument_list|,
name|exptokseq
argument_list|,
name|tokenImage
argument_list|)
return|;
block|}
comment|/** Enable tracing. */
specifier|final
specifier|public
name|void
name|enable_tracing
parameter_list|()
block|{   }
comment|/** Disable tracing. */
specifier|final
specifier|public
name|void
name|disable_tracing
parameter_list|()
block|{   }
block|}
end_class

end_unit

