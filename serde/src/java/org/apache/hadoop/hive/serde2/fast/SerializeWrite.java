begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_comment
comment|/*  * Directly serialize with the caller writing field-by-field a serialization format.  *  * The caller is responsible for calling the write method for the right type of each field  * (or calling writeNull if the field is a NULL).  *  */
end_comment

begin_interface
specifier|public
interface|interface
name|SerializeWrite
block|{
comment|/*    * Set the buffer that will receive the serialized data.  The output buffer will be reset.    */
name|void
name|set
parameter_list|(
name|Output
name|output
parameter_list|)
function_decl|;
comment|/*    * Set the buffer that will receive the serialized data.  The output buffer will NOT be reset.    */
name|void
name|setAppend
parameter_list|(
name|Output
name|output
parameter_list|)
function_decl|;
comment|/*    * Reset the previously supplied buffer that will receive the serialized data.    */
name|void
name|reset
parameter_list|()
function_decl|;
comment|/*    * Write a NULL field.    */
name|void
name|writeNull
parameter_list|()
throws|throws
name|IOException
function_decl|;
comment|/*    * BOOLEAN.    */
name|void
name|writeBoolean
parameter_list|(
name|boolean
name|v
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * BYTE.    */
name|void
name|writeByte
parameter_list|(
name|byte
name|v
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * SHORT.    */
name|void
name|writeShort
parameter_list|(
name|short
name|v
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * INT.    */
name|void
name|writeInt
parameter_list|(
name|int
name|v
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * LONG.    */
name|void
name|writeLong
parameter_list|(
name|long
name|v
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * FLOAT.    */
name|void
name|writeFloat
parameter_list|(
name|float
name|vf
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * DOUBLE.    */
name|void
name|writeDouble
parameter_list|(
name|double
name|vd
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * STRING.    *    * Can be used to write CHAR and VARCHAR when the caller takes responsibility for    * truncation/padding issues.    */
name|void
name|writeString
parameter_list|(
name|byte
index|[]
name|v
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|writeString
parameter_list|(
name|byte
index|[]
name|v
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * CHAR.    */
name|void
name|writeHiveChar
parameter_list|(
name|HiveChar
name|hiveChar
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * VARCHAR.    */
name|void
name|writeHiveVarchar
parameter_list|(
name|HiveVarchar
name|hiveVarchar
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * BINARY.    */
name|void
name|writeBinary
parameter_list|(
name|byte
index|[]
name|v
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|void
name|writeBinary
parameter_list|(
name|byte
index|[]
name|v
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * DATE.    */
name|void
name|writeDate
parameter_list|(
name|Date
name|date
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|// We provide a faster way to write a date without a Date object.
name|void
name|writeDate
parameter_list|(
name|int
name|dateAsDays
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * TIMESTAMP.    */
name|void
name|writeTimestamp
parameter_list|(
name|Timestamp
name|vt
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * INTERVAL_YEAR_MONTH.    */
name|void
name|writeHiveIntervalYearMonth
parameter_list|(
name|HiveIntervalYearMonth
name|viyt
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|// We provide a faster way to write a hive interval year month without a HiveIntervalYearMonth object.
name|void
name|writeHiveIntervalYearMonth
parameter_list|(
name|int
name|totalMonths
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * INTERVAL_DAY_TIME.    */
name|void
name|writeHiveIntervalDayTime
parameter_list|(
name|HiveIntervalDayTime
name|vidt
parameter_list|)
throws|throws
name|IOException
function_decl|;
comment|/*    * DECIMAL.    */
name|void
name|writeHiveDecimal
parameter_list|(
name|HiveDecimal
name|dec
parameter_list|,
name|int
name|scale
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
end_interface

end_unit

