begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|DateTimeException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|ZoneId
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|TimestampTZ
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|TimestampTZUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|util
operator|.
name|TimestampUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampLocalTZWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/**  * ObjectInspectorFactory is the primary way to create new ObjectInspector  * instances.  *  * SerDe classes should call the static functions in this library to create an  * ObjectInspector to return to the caller of SerDe2.getObjectInspector().  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PrimitiveObjectInspectorUtils
block|{
comment|/**    * TypeEntry stores information about a Hive Primitive TypeInfo.    */
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
specifier|public
specifier|static
class|class
name|PrimitiveTypeEntry
implements|implements
name|Writable
implements|,
name|Cloneable
block|{
comment|/**      * The category of the PrimitiveType.      */
specifier|public
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
name|primitiveCategory
decl_stmt|;
comment|/**      * primitiveJavaType refers to java types like int, double, etc.      */
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|primitiveJavaType
decl_stmt|;
comment|/**      * primitiveJavaClass refers to java classes like Integer, Double, String      * etc.      */
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|primitiveJavaClass
decl_stmt|;
comment|/**      * writableClass refers to hadoop Writable classes like IntWritable,      * DoubleWritable, Text etc.      */
specifier|public
name|Class
argument_list|<
name|?
argument_list|>
name|primitiveWritableClass
decl_stmt|;
comment|/**      * typeName is the name of the type as in DDL.      */
specifier|public
name|String
name|typeName
decl_stmt|;
specifier|protected
name|PrimitiveTypeEntry
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
name|PrimitiveTypeEntry
parameter_list|(
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
name|primitiveCategory
parameter_list|,
name|String
name|typeName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|primitiveType
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|javaClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|hiveClass
parameter_list|)
block|{
name|this
operator|.
name|primitiveCategory
operator|=
name|primitiveCategory
expr_stmt|;
name|primitiveJavaType
operator|=
name|primitiveType
expr_stmt|;
name|primitiveJavaClass
operator|=
name|javaClass
expr_stmt|;
name|primitiveWritableClass
operator|=
name|hiveClass
expr_stmt|;
name|this
operator|.
name|typeName
operator|=
name|typeName
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFields
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|primitiveCategory
operator|=
name|WritableUtils
operator|.
name|readEnum
argument_list|(
name|in
argument_list|,
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
operator|.
name|class
argument_list|)
expr_stmt|;
name|typeName
operator|=
name|WritableUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
expr_stmt|;
try|try
block|{
name|primitiveJavaType
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|WritableUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|primitiveJavaClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|WritableUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|primitiveWritableClass
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|WritableUtils
operator|.
name|readString
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataOutput
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|WritableUtils
operator|.
name|writeEnum
argument_list|(
name|out
argument_list|,
name|primitiveCategory
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|primitiveJavaType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|primitiveJavaClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|WritableUtils
operator|.
name|writeString
argument_list|(
name|out
argument_list|,
name|primitiveWritableClass
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|clone
parameter_list|()
block|{
name|PrimitiveTypeEntry
name|result
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|this
operator|.
name|primitiveCategory
argument_list|,
name|this
operator|.
name|typeName
argument_list|,
name|this
operator|.
name|primitiveJavaType
argument_list|,
name|this
operator|.
name|primitiveJavaClass
argument_list|,
name|this
operator|.
name|primitiveWritableClass
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|typeName
return|;
block|}
block|}
specifier|static
specifier|final
name|Map
argument_list|<
name|PrimitiveCategory
argument_list|,
name|PrimitiveTypeEntry
argument_list|>
name|primitiveCategoryToTypeEntry
init|=
operator|new
name|HashMap
argument_list|<
name|PrimitiveCategory
argument_list|,
name|PrimitiveTypeEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|PrimitiveTypeEntry
argument_list|>
name|primitiveJavaTypeToTypeEntry
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|PrimitiveTypeEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|PrimitiveTypeEntry
argument_list|>
name|primitiveJavaClassToTypeEntry
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|PrimitiveTypeEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|PrimitiveTypeEntry
argument_list|>
name|primitiveWritableClassToTypeEntry
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
argument_list|>
argument_list|,
name|PrimitiveTypeEntry
argument_list|>
argument_list|()
decl_stmt|;
comment|// Base type name to PrimitiveTypeEntry map.
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PrimitiveTypeEntry
argument_list|>
name|typeNameToTypeEntry
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PrimitiveTypeEntry
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
name|void
name|addParameterizedType
parameter_list|(
name|PrimitiveTypeEntry
name|t
parameter_list|)
block|{
name|typeNameToTypeEntry
operator|.
name|put
argument_list|(
name|t
operator|.
name|toString
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|registerType
parameter_list|(
name|PrimitiveTypeEntry
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|.
name|primitiveCategory
operator|!=
name|PrimitiveCategory
operator|.
name|UNKNOWN
condition|)
block|{
name|primitiveCategoryToTypeEntry
operator|.
name|put
argument_list|(
name|t
operator|.
name|primitiveCategory
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|.
name|primitiveJavaType
operator|!=
literal|null
condition|)
block|{
name|primitiveJavaTypeToTypeEntry
operator|.
name|put
argument_list|(
name|t
operator|.
name|primitiveJavaType
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|.
name|primitiveJavaClass
operator|!=
literal|null
condition|)
block|{
name|primitiveJavaClassToTypeEntry
operator|.
name|put
argument_list|(
name|t
operator|.
name|primitiveJavaClass
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|.
name|primitiveWritableClass
operator|!=
literal|null
condition|)
block|{
name|primitiveWritableClassToTypeEntry
operator|.
name|put
argument_list|(
name|t
operator|.
name|primitiveWritableClass
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|.
name|typeName
operator|!=
literal|null
condition|)
block|{
name|typeNameToTypeEntry
operator|.
name|put
argument_list|(
name|t
operator|.
name|typeName
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|binaryTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|BINARY
argument_list|,
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
name|BytesWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|stringTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|STRING
argument_list|,
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|null
argument_list|,
name|String
operator|.
name|class
argument_list|,
name|Text
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|booleanTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|BOOLEAN
argument_list|,
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|,
name|Boolean
operator|.
name|TYPE
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
name|BooleanWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|intTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|INT
argument_list|,
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|,
name|Integer
operator|.
name|TYPE
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
name|IntWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|longTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|LONG
argument_list|,
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
name|Long
operator|.
name|TYPE
argument_list|,
name|Long
operator|.
name|class
argument_list|,
name|LongWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|floatTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|FLOAT
argument_list|,
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
argument_list|,
name|Float
operator|.
name|TYPE
argument_list|,
name|Float
operator|.
name|class
argument_list|,
name|FloatWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|voidTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|VOID
argument_list|,
name|serdeConstants
operator|.
name|VOID_TYPE_NAME
argument_list|,
name|Void
operator|.
name|TYPE
argument_list|,
name|Void
operator|.
name|class
argument_list|,
name|NullWritable
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// No corresponding Writable classes for the following 3 in hadoop 0.17.0
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|doubleTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|DOUBLE
argument_list|,
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|,
name|Double
operator|.
name|TYPE
argument_list|,
name|Double
operator|.
name|class
argument_list|,
name|DoubleWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|byteTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|BYTE
argument_list|,
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
argument_list|,
name|Byte
operator|.
name|TYPE
argument_list|,
name|Byte
operator|.
name|class
argument_list|,
name|ByteWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|shortTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|SHORT
argument_list|,
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|,
name|Short
operator|.
name|TYPE
argument_list|,
name|Short
operator|.
name|class
argument_list|,
name|ShortWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|dateTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|DATE
argument_list|,
name|serdeConstants
operator|.
name|DATE_TYPE_NAME
argument_list|,
literal|null
argument_list|,
name|Date
operator|.
name|class
argument_list|,
name|DateWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|timestampTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|TIMESTAMP
argument_list|,
name|serdeConstants
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|,
literal|null
argument_list|,
name|Timestamp
operator|.
name|class
argument_list|,
name|TimestampWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|timestampTZTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|TIMESTAMPLOCALTZ
argument_list|,
name|serdeConstants
operator|.
name|TIMESTAMPLOCALTZ_TYPE_NAME
argument_list|,
literal|null
argument_list|,
name|TimestampTZ
operator|.
name|class
argument_list|,
name|TimestampLocalTZWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|intervalYearMonthTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|INTERVAL_YEAR_MONTH
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_YEAR_MONTH_TYPE_NAME
argument_list|,
literal|null
argument_list|,
name|HiveIntervalYearMonth
operator|.
name|class
argument_list|,
name|HiveIntervalYearMonthWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|intervalDayTimeTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|INTERVAL_DAY_TIME
argument_list|,
name|serdeConstants
operator|.
name|INTERVAL_DAY_TIME_TYPE_NAME
argument_list|,
literal|null
argument_list|,
name|HiveIntervalDayTime
operator|.
name|class
argument_list|,
name|HiveIntervalDayTimeWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|decimalTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|DECIMAL
argument_list|,
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
argument_list|,
literal|null
argument_list|,
name|HiveDecimal
operator|.
name|class
argument_list|,
name|HiveDecimalWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|varcharTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|VARCHAR
argument_list|,
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|,
literal|null
argument_list|,
name|HiveVarchar
operator|.
name|class
argument_list|,
name|HiveVarcharWritable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|charTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|CHAR
argument_list|,
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
argument_list|,
literal|null
argument_list|,
name|HiveChar
operator|.
name|class
argument_list|,
name|HiveCharWritable
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// The following is a complex type for special handling
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeEntry
name|unknownTypeEntry
init|=
operator|new
name|PrimitiveTypeEntry
argument_list|(
name|PrimitiveCategory
operator|.
name|UNKNOWN
argument_list|,
literal|"unknown"
argument_list|,
literal|null
argument_list|,
name|Object
operator|.
name|class
argument_list|,
literal|null
argument_list|)
decl_stmt|;
static|static
block|{
name|registerType
argument_list|(
name|binaryTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|stringTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|charTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|varcharTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|booleanTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|intTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|longTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|floatTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|voidTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|doubleTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|byteTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|shortTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|dateTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|timestampTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|timestampTZTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|intervalYearMonthTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|intervalDayTimeTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|decimalTypeEntry
argument_list|)
expr_stmt|;
name|registerType
argument_list|(
name|unknownTypeEntry
argument_list|)
expr_stmt|;
block|}
comment|/**    * Return Whether the class is a Java Primitive type or a Java Primitive    * class.    */
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|primitiveJavaTypeToClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|PrimitiveTypeEntry
name|t
init|=
name|primitiveJavaTypeToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
return|return
name|t
operator|==
literal|null
condition|?
name|clazz
else|:
name|t
operator|.
name|primitiveJavaClass
return|;
block|}
comment|/**    * Whether the class is a Java Primitive type or a Java Primitive class.    */
specifier|public
specifier|static
name|boolean
name|isPrimitiveJava
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|primitiveJavaTypeToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
operator|!=
literal|null
operator|||
name|primitiveJavaClassToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Whether the class is a Java Primitive type.    */
specifier|public
specifier|static
name|boolean
name|isPrimitiveJavaType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|primitiveJavaTypeToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Whether the class is a Java Primitive class.    */
specifier|public
specifier|static
name|boolean
name|isPrimitiveJavaClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|primitiveJavaClassToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Whether the class is a Hive Primitive Writable class.    */
specifier|public
specifier|static
name|boolean
name|isPrimitiveWritableClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|primitiveWritableClassToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/**    * Get the typeName from a Java Primitive Type or Java PrimitiveClass.    */
specifier|public
specifier|static
name|String
name|getTypeNameFromPrimitiveJava
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|PrimitiveTypeEntry
name|t
init|=
name|primitiveJavaTypeToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|t
operator|=
name|primitiveJavaClassToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|t
operator|==
literal|null
condition|?
literal|null
else|:
name|t
operator|.
name|typeName
return|;
block|}
comment|/**    * Get the typeName from a Primitive Writable Class.    */
specifier|public
specifier|static
name|String
name|getTypeNameFromPrimitiveWritable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|PrimitiveTypeEntry
name|t
init|=
name|primitiveWritableClassToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
return|return
name|t
operator|==
literal|null
condition|?
literal|null
else|:
name|t
operator|.
name|typeName
return|;
block|}
comment|/**    * Get the typeName from a Java Primitive Type or Java PrimitiveClass.    */
specifier|public
specifier|static
name|PrimitiveTypeEntry
name|getTypeEntryFromPrimitiveCategory
parameter_list|(
name|PrimitiveCategory
name|category
parameter_list|)
block|{
return|return
name|primitiveCategoryToTypeEntry
operator|.
name|get
argument_list|(
name|category
argument_list|)
return|;
block|}
comment|/**    * Get the TypeEntry for a Java Primitive Type or Java PrimitiveClass.    */
specifier|public
specifier|static
name|PrimitiveTypeEntry
name|getTypeEntryFromPrimitiveJava
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|PrimitiveTypeEntry
name|t
init|=
name|primitiveJavaTypeToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
name|t
operator|=
name|primitiveJavaClassToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
comment|/**    * Get the TypeEntry for a Java Primitive Type or Java PrimitiveClass.    */
specifier|public
specifier|static
name|PrimitiveTypeEntry
name|getTypeEntryFromPrimitiveJavaType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|primitiveJavaTypeToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|/**    * Get the TypeEntry for a Java Primitive Type or Java PrimitiveClass.    */
specifier|public
specifier|static
name|PrimitiveTypeEntry
name|getTypeEntryFromPrimitiveJavaClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|primitiveJavaClassToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|/**    * Get the TypeEntry for a Primitive Writable Class.    */
specifier|public
specifier|static
name|PrimitiveTypeEntry
name|getTypeEntryFromPrimitiveWritableClass
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|primitiveWritableClassToTypeEntry
operator|.
name|get
argument_list|(
name|clazz
argument_list|)
return|;
block|}
comment|/**    * Get the TypeEntry for the given base type name (int, varchar, etc).    */
specifier|public
specifier|static
name|PrimitiveTypeEntry
name|getTypeEntryFromTypeName
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
return|return
name|typeNameToTypeEntry
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
return|;
block|}
comment|/**    * Compare 2 primitive objects. Conversion not allowed. Note that NULL does    * not equal to NULL according to SQL standard.    */
specifier|public
specifier|static
name|boolean
name|comparePrimitiveObjects
parameter_list|(
name|Object
name|o1
parameter_list|,
name|PrimitiveObjectInspector
name|oi1
parameter_list|,
name|Object
name|o2
parameter_list|,
name|PrimitiveObjectInspector
name|oi2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
operator|||
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|oi1
operator|.
name|getPrimitiveCategory
argument_list|()
operator|!=
name|oi2
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
switch|switch
condition|(
name|oi1
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
return|return
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
operator|==
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
return|;
block|}
case|case
name|BYTE
case|:
block|{
return|return
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
operator|==
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
return|;
block|}
case|case
name|SHORT
case|:
block|{
return|return
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
operator|==
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
return|;
block|}
case|case
name|INT
case|:
block|{
return|return
operator|(
operator|(
name|IntObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
operator|==
operator|(
operator|(
name|IntObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
return|;
block|}
case|case
name|LONG
case|:
block|{
return|return
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
operator|==
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
return|;
block|}
case|case
name|FLOAT
case|:
block|{
return|return
operator|(
operator|(
name|FloatObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
operator|==
operator|(
operator|(
name|FloatObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
return|;
block|}
case|case
name|DOUBLE
case|:
block|{
return|return
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|get
argument_list|(
name|o1
argument_list|)
operator|==
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|get
argument_list|(
name|o2
argument_list|)
return|;
block|}
case|case
name|STRING
case|:
block|{
name|Writable
name|t1
init|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o1
argument_list|)
decl_stmt|;
name|Writable
name|t2
init|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o2
argument_list|)
decl_stmt|;
return|return
name|t1
operator|.
name|equals
argument_list|(
name|t2
argument_list|)
return|;
block|}
case|case
name|CHAR
case|:
block|{
return|return
operator|(
operator|(
name|HiveCharObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o1
argument_list|)
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|HiveCharObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
block|}
case|case
name|VARCHAR
case|:
block|{
return|return
operator|(
operator|(
name|HiveVarcharObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o1
argument_list|)
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|HiveVarcharObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
block|}
case|case
name|DATE
case|:
block|{
return|return
operator|(
operator|(
name|DateObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o1
argument_list|)
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DateObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
block|}
case|case
name|TIMESTAMP
case|:
block|{
return|return
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o1
argument_list|)
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
block|}
case|case
name|TIMESTAMPLOCALTZ
case|:
block|{
return|return
operator|(
operator|(
name|TimestampLocalTZObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o1
argument_list|)
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|TimestampLocalTZObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
block|}
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
return|return
operator|(
operator|(
name|HiveIntervalYearMonthObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o1
argument_list|)
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|HiveIntervalYearMonthObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
block|}
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
return|return
operator|(
operator|(
name|HiveIntervalDayTimeObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o1
argument_list|)
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|HiveIntervalDayTimeObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
block|}
case|case
name|BINARY
case|:
block|{
return|return
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o1
argument_list|)
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o2
argument_list|)
argument_list|)
return|;
block|}
case|case
name|DECIMAL
case|:
block|{
return|return
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|oi1
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o1
argument_list|)
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|oi2
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o2
argument_list|)
argument_list|)
operator|==
literal|0
return|;
block|}
default|default:
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Compare 2 Primitive Objects with their Object Inspector, conversions    * allowed. Note that NULL does not equal to NULL according to SQL standard.    */
specifier|public
specifier|static
name|boolean
name|comparePrimitiveObjectsWithConversion
parameter_list|(
name|Object
name|o1
parameter_list|,
name|PrimitiveObjectInspector
name|oi1
parameter_list|,
name|Object
name|o2
parameter_list|,
name|PrimitiveObjectInspector
name|oi2
parameter_list|)
block|{
if|if
condition|(
name|o1
operator|==
literal|null
operator|||
name|o2
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|oi1
operator|.
name|getPrimitiveCategory
argument_list|()
operator|==
name|oi2
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
return|return
name|comparePrimitiveObjects
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|o2
argument_list|,
name|oi2
argument_list|)
return|;
block|}
comment|// If not equal, convert all to double and compare
try|try
block|{
return|return
name|getDouble
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|)
operator|==
name|getDouble
argument_list|(
name|o2
argument_list|,
name|oi2
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**    * Get the boolean value out of a primitive object. Note that    * NullPointerException will be thrown if o is null. Note that    * NumberFormatException will be thrown if o is not a valid number.    */
specifier|public
specifier|static
name|boolean
name|getBoolean
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
name|boolean
name|result
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
name|result
operator|=
literal|false
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|result
operator|=
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|result
operator|=
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|!=
literal|0
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|result
operator|=
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|!=
literal|0
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|result
operator|=
operator|(
operator|(
name|IntObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|!=
literal|0
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|result
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|LongObjectInspector
operator|)
name|oi
argument_list|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|!=
literal|0
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|result
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|FloatObjectInspector
operator|)
name|oi
argument_list|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|!=
literal|0
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|result
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|DoubleObjectInspector
operator|)
name|oi
argument_list|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|!=
literal|0
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|StringObjectInspector
name|soi
init|=
operator|(
name|StringObjectInspector
operator|)
name|oi
decl_stmt|;
if|if
condition|(
name|soi
operator|.
name|preferWritable
argument_list|()
condition|)
block|{
name|Text
name|t
init|=
name|soi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|result
operator|=
name|t
operator|.
name|getLength
argument_list|()
operator|!=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|String
name|s
init|=
name|soi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|result
operator|=
name|s
operator|.
name|length
argument_list|()
operator|!=
literal|0
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
name|result
operator|=
operator|(
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getSeconds
argument_list|()
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|result
operator|=
name|HiveDecimal
operator|.
name|ZERO
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
argument_list|)
operator|!=
literal|0
expr_stmt|;
break|break;
case|case
name|DATE
case|:
comment|// unsupported conversion
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive 2 Internal error: unsupported conversion from type: "
operator|+
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the byte value out of a primitive object. Note that    * NullPointerException will be thrown if o is null. Note that    * NumberFormatException will be thrown if o is not a valid number.    */
specifier|public
specifier|static
name|byte
name|getByte
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
name|byte
name|result
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|DECIMAL
case|:
block|{
name|HiveDecimal
name|dec
init|=
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dec
operator|.
name|isByte
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
name|result
operator|=
name|dec
operator|.
name|byteValue
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
comment|// For all other data types, use int conversion.  At some point, we should have all
comment|// conversions make sure the value fits.
return|return
operator|(
name|byte
operator|)
name|getInt
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the short value out of a primitive object. Note that    * NullPointerException will be thrown if o is null. Note that    * NumberFormatException will be thrown if o is not a valid number.    */
specifier|public
specifier|static
name|short
name|getShort
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
name|short
name|result
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|DECIMAL
case|:
block|{
name|HiveDecimal
name|dec
init|=
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dec
operator|.
name|isShort
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
name|result
operator|=
name|dec
operator|.
name|shortValue
argument_list|()
expr_stmt|;
block|}
break|break;
default|default:
comment|// For all other data types, use int conversion.  At some point, we should have all
comment|// conversions make sure the value fits.
return|return
operator|(
name|short
operator|)
name|getInt
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
return|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the integer value out of a primitive object. Note that    * NullPointerException will be thrown if o is null. Note that    * NumberFormatException will be thrown if o is not a valid number.    */
specifier|public
specifier|static
name|int
name|getInt
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
block|{
name|result
operator|=
literal|0
expr_stmt|;
break|break;
block|}
case|case
name|BOOLEAN
case|:
block|{
name|result
operator|=
operator|(
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
block|}
case|case
name|BYTE
case|:
block|{
name|result
operator|=
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SHORT
case|:
block|{
name|result
operator|=
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|INT
case|:
block|{
name|result
operator|=
operator|(
operator|(
name|IntObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LONG
case|:
block|{
name|result
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|LongObjectInspector
operator|)
name|oi
argument_list|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FLOAT
case|:
block|{
name|result
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|FloatObjectInspector
operator|)
name|oi
argument_list|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DOUBLE
case|:
block|{
name|result
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
name|DoubleObjectInspector
operator|)
name|oi
argument_list|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRING
case|:
block|{
name|StringObjectInspector
name|soi
init|=
operator|(
name|StringObjectInspector
operator|)
name|oi
decl_stmt|;
if|if
condition|(
name|soi
operator|.
name|preferWritable
argument_list|()
condition|)
block|{
name|Text
name|t
init|=
name|soi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|result
operator|=
name|LazyInteger
operator|.
name|parseInt
argument_list|(
name|t
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|s
init|=
name|soi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|result
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
block|{
name|result
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|getString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|TIMESTAMP
case|:
name|result
operator|=
call|(
name|int
call|)
argument_list|(
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
block|{
name|HiveDecimal
name|dec
init|=
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dec
operator|.
name|isInt
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
name|result
operator|=
name|dec
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|DATE
case|:
comment|// unsupported conversion
default|default:
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive 2 Internal error: unsupported conversion from type: "
operator|+
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the long value out of a primitive object. Note that    * NullPointerException will be thrown if o is null. Note that    * NumberFormatException will be thrown if o is not a valid number.    */
specifier|public
specifier|static
name|long
name|getLong
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
name|result
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|result
operator|=
operator|(
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|result
operator|=
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|result
operator|=
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|result
operator|=
operator|(
operator|(
name|IntObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|result
operator|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|result
operator|=
call|(
name|long
call|)
argument_list|(
operator|(
name|FloatObjectInspector
operator|)
name|oi
argument_list|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|result
operator|=
call|(
name|long
call|)
argument_list|(
operator|(
name|DoubleObjectInspector
operator|)
name|oi
argument_list|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|StringObjectInspector
name|soi
init|=
operator|(
name|StringObjectInspector
operator|)
name|oi
decl_stmt|;
if|if
condition|(
name|soi
operator|.
name|preferWritable
argument_list|()
condition|)
block|{
name|Text
name|t
init|=
name|soi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|result
operator|=
name|LazyLong
operator|.
name|parseLong
argument_list|(
name|t
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|t
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|s
init|=
name|soi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|result
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
block|{
name|result
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|getString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|TIMESTAMP
case|:
name|result
operator|=
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getSeconds
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
block|{
name|HiveDecimal
name|dec
init|=
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dec
operator|.
name|isLong
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NumberFormatException
argument_list|()
throw|;
block|}
name|result
operator|=
name|dec
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|DATE
case|:
comment|// unsupported conversion
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive 2 Internal error: unsupported conversion from type: "
operator|+
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the double value out of a primitive object. Note that    * NullPointerException will be thrown if o is null. Note that    * NumberFormatException will be thrown if o is not a valid number.    */
specifier|public
specifier|static
name|double
name|getDouble
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
name|double
name|result
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
name|result
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|result
operator|=
operator|(
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
condition|?
literal|1
else|:
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|result
operator|=
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|result
operator|=
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|result
operator|=
operator|(
operator|(
name|IntObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|result
operator|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|result
operator|=
operator|(
operator|(
name|FloatObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|result
operator|=
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|StringObjectInspector
name|soi
init|=
operator|(
name|StringObjectInspector
operator|)
name|oi
decl_stmt|;
name|String
name|s
init|=
name|soi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|result
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|s
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|result
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|getString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|result
operator|=
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getDouble
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|result
operator|=
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
operator|.
name|doubleValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|DATE
case|:
comment|// unsupported conversion
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive 2 Internal error: unsupported conversion from type: "
operator|+
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Get the float value out of a primitive object. Note that    * NullPointerException will be thrown if o is null. Note that    * NumberFormatException will be thrown if o is not a valid number.    */
specifier|public
specifier|static
name|float
name|getFloat
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
return|return
operator|(
name|float
operator|)
name|getDouble
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
return|;
block|}
comment|/**    * Get the String value out of a primitive object. Note that    * NullPointerException will be thrown if o is null. Note that    * RuntimeException will be thrown if o is not a valid string.    */
specifier|public
specifier|static
name|String
name|getString
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
name|result
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
try|try
block|{
name|byte
index|[]
name|bytes
init|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|byteLen
init|=
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|result
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|byteLen
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|err
parameter_list|)
block|{
comment|// we tried ..
name|result
operator|=
literal|null
expr_stmt|;
block|}
break|break;
case|case
name|BOOLEAN
case|:
name|result
operator|=
operator|(
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|)
condition|?
literal|"TRUE"
else|:
literal|"FALSE"
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|result
operator|=
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|result
operator|=
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|result
operator|=
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
operator|(
name|IntObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|result
operator|=
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|result
operator|=
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
operator|(
name|FloatObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|result
operator|=
name|String
operator|.
name|valueOf
argument_list|(
operator|(
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
operator|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|StringObjectInspector
name|soi
init|=
operator|(
name|StringObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|soi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
comment|// when converting from char to string/varchar, strip any trailing spaces
name|result
operator|=
operator|(
operator|(
name|HiveCharObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
operator|.
name|getStrippedValue
argument_list|()
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|HiveVarcharObjectInspector
name|hcoi
init|=
operator|(
name|HiveVarcharObjectInspector
operator|)
name|oi
decl_stmt|;
name|result
operator|=
name|hcoi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|result
operator|=
operator|(
operator|(
name|DateObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|result
operator|=
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|TIMESTAMPLOCALTZ
case|:
name|result
operator|=
operator|(
operator|(
name|TimestampLocalTZObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|result
operator|=
operator|(
operator|(
name|HiveIntervalYearMonthObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
name|result
operator|=
operator|(
operator|(
name|HiveIntervalDayTimeObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|result
operator|=
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive 2 Internal error: unknown type: "
operator|+
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|HiveChar
name|getHiveChar
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HiveChar
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|CHAR
case|:
name|result
operator|=
operator|(
operator|(
name|HiveCharObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// No char length available, copy whole string value here.
name|result
operator|=
operator|new
name|HiveChar
argument_list|()
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|getString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|HiveVarchar
name|getHiveVarchar
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HiveVarchar
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VARCHAR
case|:
name|result
operator|=
operator|(
operator|(
name|HiveVarcharObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// Is there a way to provide char length here?
comment|// It might actually be ok as long as there is an object inspector (with char length)
comment|// receiving this value.
name|result
operator|=
operator|new
name|HiveVarchar
argument_list|()
expr_stmt|;
name|result
operator|.
name|setValue
argument_list|(
name|getString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|BytesWritable
name|getBinaryFromText
parameter_list|(
name|Text
name|text
parameter_list|)
block|{
name|BytesWritable
name|bw
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|bw
operator|.
name|set
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|bw
return|;
block|}
specifier|public
specifier|static
name|BytesWritable
name|getBinary
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|o
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
return|return
literal|null
return|;
case|case
name|STRING
case|:
name|Text
name|text
init|=
operator|(
operator|(
name|StringObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
return|return
name|getBinaryFromText
argument_list|(
name|text
argument_list|)
return|;
case|case
name|CHAR
case|:
comment|// char to binary conversion: include trailing spaces?
return|return
name|getBinaryFromText
argument_list|(
operator|(
operator|(
name|HiveCharObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getPaddedValue
argument_list|()
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
name|getBinaryFromText
argument_list|(
operator|(
operator|(
name|HiveVarcharObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getTextValue
argument_list|()
argument_list|)
return|;
case|case
name|BINARY
case|:
return|return
operator|(
operator|(
name|BinaryObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot convert to Binary from: "
operator|+
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|HiveDecimal
name|getHiveDecimal
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HiveDecimal
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
name|result
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|result
operator|=
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
condition|?
name|HiveDecimal
operator|.
name|ONE
else|:
name|HiveDecimal
operator|.
name|ZERO
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|result
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|result
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|result
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|(
operator|(
name|IntObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|result
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|(
operator|(
name|LongObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|Float
name|f
init|=
operator|(
operator|(
name|FloatObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|result
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|f
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|Double
name|d
init|=
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|oi
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|result
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|d
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|result
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
operator|(
operator|(
name|StringObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|result
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|getString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|Double
name|ts
init|=
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getDouble
argument_list|()
decl_stmt|;
name|result
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|ts
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|result
operator|=
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
comment|// unsupported conversion
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive 2 Internal error: unsupported conversion from type: "
operator|+
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Date
name|getDate
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Date
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
name|result
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|StringObjectInspector
name|soi
init|=
operator|(
name|StringObjectInspector
operator|)
name|oi
decl_stmt|;
name|String
name|s
init|=
name|soi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|=
name|Date
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Timestamp
name|ts
init|=
name|getTimestampFromString
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Date
argument_list|(
name|ts
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
block|{
name|String
name|val
init|=
name|getString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|=
name|Date
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|Timestamp
name|ts
init|=
name|getTimestampFromString
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|ts
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|Date
argument_list|(
name|ts
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|DATE
case|:
name|result
operator|=
operator|(
operator|(
name|DateObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|result
operator|=
name|DateWritable
operator|.
name|timeToDate
argument_list|(
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMPLOCALTZ
case|:
name|String
name|tstz
init|=
name|oi
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|divSpace
init|=
name|tstz
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|divSpace
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|result
operator|=
name|Date
operator|.
name|valueOf
argument_list|(
name|tstz
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|divSpace
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot convert to Date from: "
operator|+
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|getTimestamp
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
return|return
name|getTimestamp
argument_list|(
name|o
argument_list|,
name|oi
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|getTimestamp
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|inputOI
parameter_list|,
name|boolean
name|intToTimestampInSeconds
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Timestamp
name|result
init|=
literal|null
decl_stmt|;
name|long
name|longValue
init|=
literal|0
decl_stmt|;
switch|switch
condition|(
name|inputOI
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
name|result
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|BOOLEAN
case|:
name|longValue
operator|=
operator|(
operator|(
name|BooleanObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
condition|?
literal|1
else|:
literal|0
expr_stmt|;
name|result
operator|=
name|TimestampWritable
operator|.
name|longToTimestamp
argument_list|(
name|longValue
argument_list|,
name|intToTimestampInSeconds
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|longValue
operator|=
operator|(
operator|(
name|ByteObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|result
operator|=
name|TimestampWritable
operator|.
name|longToTimestamp
argument_list|(
name|longValue
argument_list|,
name|intToTimestampInSeconds
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|longValue
operator|=
operator|(
operator|(
name|ShortObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|result
operator|=
name|TimestampWritable
operator|.
name|longToTimestamp
argument_list|(
name|longValue
argument_list|,
name|intToTimestampInSeconds
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|longValue
operator|=
operator|(
operator|(
name|IntObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|result
operator|=
name|TimestampWritable
operator|.
name|longToTimestamp
argument_list|(
name|longValue
argument_list|,
name|intToTimestampInSeconds
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|longValue
operator|=
operator|(
operator|(
name|LongObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
expr_stmt|;
name|result
operator|=
name|TimestampWritable
operator|.
name|longToTimestamp
argument_list|(
name|longValue
argument_list|,
name|intToTimestampInSeconds
argument_list|)
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|result
operator|=
name|TimestampUtils
operator|.
name|doubleToTimestamp
argument_list|(
operator|(
operator|(
name|FloatObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|result
operator|=
name|TimestampUtils
operator|.
name|doubleToTimestamp
argument_list|(
operator|(
operator|(
name|DoubleObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|get
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|result
operator|=
name|TimestampUtils
operator|.
name|decimalToTimestamp
argument_list|(
operator|(
operator|(
name|HiveDecimalObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|StringObjectInspector
name|soi
init|=
operator|(
name|StringObjectInspector
operator|)
name|inputOI
decl_stmt|;
name|String
name|s
init|=
name|soi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
decl_stmt|;
name|result
operator|=
name|getTimestampFromString
argument_list|(
name|s
argument_list|)
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
name|result
operator|=
name|getTimestampFromString
argument_list|(
name|getString
argument_list|(
name|o
argument_list|,
name|inputOI
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|result
operator|=
operator|new
name|Timestamp
argument_list|(
operator|(
operator|(
name|DateObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|get
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
name|result
operator|=
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|inputOI
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getTimestamp
argument_list|()
expr_stmt|;
break|break;
case|case
name|TIMESTAMPLOCALTZ
case|:
name|String
name|tstz
init|=
name|inputOI
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|tstz
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|index
operator|=
name|tstz
operator|.
name|indexOf
argument_list|(
literal|" "
argument_list|,
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|result
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|tstz
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Hive 2 Internal error: unknown type: "
operator|+
name|inputOI
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|static
name|Timestamp
name|getTimestampFromString
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|Timestamp
name|result
decl_stmt|;
name|s
operator|=
name|s
operator|.
name|trim
argument_list|()
expr_stmt|;
name|s
operator|=
name|trimNanoTimestamp
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|int
name|firstSpace
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstSpace
operator|<
literal|0
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|concat
argument_list|(
literal|" 00:00:00"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|result
operator|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// Let's try to parse it as timestamp with time zone and transform
try|try
block|{
name|result
operator|=
name|Timestamp
operator|.
name|from
argument_list|(
name|TimestampTZUtil
operator|.
name|parse
argument_list|(
name|s
argument_list|)
operator|.
name|getZonedDateTime
argument_list|()
operator|.
name|toInstant
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DateTimeException
name|e2
parameter_list|)
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|String
name|trimNanoTimestamp
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|firstSpace
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
comment|// Throw away extra if more than 9 decimal places
name|int
name|periodIdx
init|=
name|s
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
if|if
condition|(
name|periodIdx
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|secondSpace
init|=
name|firstSpace
operator|<
literal|0
condition|?
operator|-
literal|1
else|:
name|s
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|,
name|firstSpace
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|maxLength
init|=
name|secondSpace
operator|==
operator|-
literal|1
condition|?
name|s
operator|.
name|length
argument_list|()
else|:
name|secondSpace
decl_stmt|;
if|if
condition|(
name|maxLength
operator|-
name|periodIdx
operator|>
literal|9
condition|)
block|{
name|s
operator|=
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|periodIdx
operator|+
literal|10
argument_list|)
operator|.
name|concat
argument_list|(
name|s
operator|.
name|substring
argument_list|(
name|maxLength
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|s
return|;
block|}
specifier|public
specifier|static
name|TimestampTZ
name|getTimestampLocalTZ
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|,
name|ZoneId
name|timeZone
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
block|{
return|return
literal|null
return|;
block|}
case|case
name|STRING
case|:
block|{
name|StringObjectInspector
name|soi
init|=
operator|(
name|StringObjectInspector
operator|)
name|oi
decl_stmt|;
name|String
name|s
init|=
name|soi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
return|return
name|TimestampTZUtil
operator|.
name|parseOrNull
argument_list|(
name|trimNanoTimestamp
argument_list|(
name|s
argument_list|)
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
block|{
name|String
name|s
init|=
name|getString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
return|return
name|TimestampTZUtil
operator|.
name|parseOrNull
argument_list|(
name|trimNanoTimestamp
argument_list|(
name|s
argument_list|)
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
case|case
name|DATE
case|:
block|{
name|Date
name|date
init|=
operator|(
operator|(
name|DateObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|get
argument_list|()
decl_stmt|;
return|return
name|TimestampTZUtil
operator|.
name|convert
argument_list|(
name|date
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
case|case
name|TIMESTAMP
case|:
block|{
name|Timestamp
name|ts
init|=
operator|(
operator|(
name|TimestampObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
return|return
name|TimestampTZUtil
operator|.
name|convert
argument_list|(
name|ts
argument_list|,
name|timeZone
argument_list|)
return|;
block|}
case|case
name|TIMESTAMPLOCALTZ
case|:
block|{
return|return
operator|(
operator|(
name|TimestampLocalTZObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|o
argument_list|)
operator|.
name|getTimestampTZ
argument_list|()
return|;
block|}
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot convert to "
operator|+
name|serdeConstants
operator|.
name|TIMESTAMPLOCALTZ_TYPE_NAME
operator|+
literal|" from: "
operator|+
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|HiveIntervalYearMonth
name|getHiveIntervalYearMonth
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HiveIntervalYearMonth
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
name|result
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
block|{
try|try
block|{
name|String
name|val
init|=
name|getString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|result
operator|=
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
break|break;
block|}
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|result
operator|=
operator|(
operator|(
name|HiveIntervalYearMonthObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot convert to IntervalYearMonth from: "
operator|+
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|HiveIntervalDayTime
name|getHiveIntervalDayTime
parameter_list|(
name|Object
name|o
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
name|o
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|HiveIntervalDayTime
name|result
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|oi
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|VOID
case|:
name|result
operator|=
literal|null
expr_stmt|;
break|break;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
block|{
try|try
block|{
name|String
name|val
init|=
name|getString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
name|result
operator|=
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
break|break;
block|}
case|case
name|INTERVAL_DAY_TIME
case|:
name|result
operator|=
operator|(
operator|(
name|HiveIntervalDayTimeObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|o
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot convert to IntervalDayTime from: "
operator|+
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
argument_list|>
name|getJavaPrimitiveClassFromObjectInspector
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|)
block|{
if|if
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
return|return
literal|null
return|;
block|}
name|PrimitiveObjectInspector
name|poi
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
decl_stmt|;
name|PrimitiveTypeEntry
name|t
init|=
name|getTypeEntryFromPrimitiveCategory
argument_list|(
name|poi
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|t
operator|==
literal|null
condition|?
literal|null
else|:
name|t
operator|.
name|primitiveJavaClass
return|;
block|}
comment|/**    * Provide a general grouping for each primitive data type.    */
specifier|public
specifier|static
enum|enum
name|PrimitiveGrouping
block|{
name|NUMERIC_GROUP
block|,
name|STRING_GROUP
block|,
name|BOOLEAN_GROUP
block|,
name|DATE_GROUP
block|,
name|INTERVAL_GROUP
block|,
name|BINARY_GROUP
block|,
name|VOID_GROUP
block|,
name|UNKNOWN_GROUP
block|}
empty_stmt|;
comment|/**    * Based on the PrimitiveCategory of a type, return the PrimitiveGrouping    * that the PrimitiveCategory belongs to (numeric, string, date, etc).    * @param primitiveCategory Primitive category of the type    * @return PrimitveGrouping corresponding to the PrimitiveCategory,    *         or UNKNOWN_GROUP if the type does not match to a grouping.    */
specifier|public
specifier|static
name|PrimitiveGrouping
name|getPrimitiveGrouping
parameter_list|(
name|PrimitiveCategory
name|primitiveCategory
parameter_list|)
block|{
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|BYTE
case|:
case|case
name|SHORT
case|:
case|case
name|INT
case|:
case|case
name|LONG
case|:
case|case
name|FLOAT
case|:
case|case
name|DOUBLE
case|:
case|case
name|DECIMAL
case|:
return|return
name|PrimitiveGrouping
operator|.
name|NUMERIC_GROUP
return|;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
return|return
name|PrimitiveGrouping
operator|.
name|STRING_GROUP
return|;
case|case
name|BOOLEAN
case|:
return|return
name|PrimitiveGrouping
operator|.
name|BOOLEAN_GROUP
return|;
case|case
name|TIMESTAMP
case|:
case|case
name|DATE
case|:
case|case
name|TIMESTAMPLOCALTZ
case|:
return|return
name|PrimitiveGrouping
operator|.
name|DATE_GROUP
return|;
case|case
name|INTERVAL_YEAR_MONTH
case|:
case|case
name|INTERVAL_DAY_TIME
case|:
return|return
name|PrimitiveGrouping
operator|.
name|INTERVAL_GROUP
return|;
case|case
name|BINARY
case|:
return|return
name|PrimitiveGrouping
operator|.
name|BINARY_GROUP
return|;
case|case
name|VOID
case|:
return|return
name|PrimitiveGrouping
operator|.
name|VOID_GROUP
return|;
default|default:
return|return
name|PrimitiveGrouping
operator|.
name|UNKNOWN_GROUP
return|;
block|}
block|}
specifier|private
name|PrimitiveObjectInspectorUtils
parameter_list|()
block|{
comment|// prevent instantiation
block|}
block|}
end_class

end_unit

