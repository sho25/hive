begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * LazyPrimitive stores a primitive Object in a LazyObject.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|LazyNonPrimitive
parameter_list|<
name|OI
extends|extends
name|ObjectInspector
parameter_list|>
extends|extends
name|LazyObject
argument_list|<
name|OI
argument_list|>
block|{
specifier|protected
name|ByteArrayRef
name|bytes
decl_stmt|;
specifier|protected
name|int
name|start
decl_stmt|;
specifier|protected
name|int
name|length
decl_stmt|;
comment|/**    * Create a LazyNonPrimitive object with the specified ObjectInspector.    *     * @param oi    *          The ObjectInspector would have to have a hierarchy of    *          LazyObjectInspectors with the leaf nodes being    *          WritableObjectInspectors. It's used both for accessing the type    *          hierarchy of the complex object, as well as getting meta    *          information (separator, nullSequence, etc) when parsing the lazy    *          object.    */
specifier|protected
name|LazyNonPrimitive
parameter_list|(
name|OI
name|oi
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|bytes
operator|=
literal|null
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
name|length
operator|=
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ByteArrayRef
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
assert|assert
name|start
operator|>=
literal|0
assert|;
assert|assert
name|start
operator|+
name|length
operator|<=
name|bytes
operator|.
name|getData
argument_list|()
operator|.
name|length
assert|;
block|}
specifier|protected
specifier|final
name|boolean
name|isNull
parameter_list|(
name|Text
name|nullSequence
parameter_list|,
name|ByteArrayRef
name|ref
parameter_list|,
name|int
name|fieldByteBegin
parameter_list|,
name|int
name|fieldLength
parameter_list|)
block|{
return|return
name|ref
operator|==
literal|null
operator|||
name|isNull
argument_list|(
name|nullSequence
argument_list|,
name|ref
operator|.
name|getData
argument_list|()
argument_list|,
name|fieldByteBegin
argument_list|,
name|fieldLength
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|boolean
name|isNull
parameter_list|(
name|Text
name|nullSequence
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|fieldByteBegin
parameter_list|,
name|int
name|fieldLength
parameter_list|)
block|{
comment|// Test the length first so in most cases we avoid doing a byte[]
comment|// comparison.
return|return
name|fieldLength
operator|<
literal|0
operator|||
operator|(
name|fieldLength
operator|==
name|nullSequence
operator|.
name|getLength
argument_list|()
operator|&&
name|LazyUtils
operator|.
name|compare
argument_list|(
name|bytes
argument_list|,
name|fieldByteBegin
argument_list|,
name|fieldLength
argument_list|,
name|nullSequence
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|nullSequence
operator|.
name|getLength
argument_list|()
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|LazyUtils
operator|.
name|hashBytes
argument_list|(
name|bytes
operator|.
name|getData
argument_list|()
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
end_class

end_unit

