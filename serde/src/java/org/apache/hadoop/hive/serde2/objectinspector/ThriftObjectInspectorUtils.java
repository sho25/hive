begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_class
specifier|public
class|class
name|ThriftObjectInspectorUtils
block|{
comment|/**    * Returns generic type for a field in a Thrift class. The type is the return    * type for the accessor method for the field (e.g.<code>isFieldName()</code>    * for a boolean type or<code>getFieldName</code> for other types). The return    * type works for both structs and unions. Reflecting directly based on    * fields does not work for unions.    *    * @return generic {@link Type} of the thrift field.    */
specifier|public
specifier|static
name|Type
name|getFieldType
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|containingClass
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|String
name|suffix
init|=
comment|// uppercase first letter
name|fieldName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
operator|.
name|toUpperCase
argument_list|()
operator|+
name|fieldName
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|// look for getFieldName() or isFieldName()
for|for
control|(
name|String
name|prefix
range|:
operator|new
name|String
index|[]
block|{
literal|"get"
block|,
literal|"is"
block|}
control|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|containingClass
operator|.
name|getDeclaredMethod
argument_list|(
name|prefix
operator|+
name|suffix
argument_list|)
decl_stmt|;
return|return
name|method
operator|.
name|getGenericReturnType
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{       }
block|}
comment|// look for bean style accessors get_fieldName and is_fieldName
for|for
control|(
name|String
name|prefix
range|:
operator|new
name|String
index|[]
block|{
literal|"get_"
block|,
literal|"is_"
block|}
control|)
block|{
try|try
block|{
name|Method
name|method
init|=
name|containingClass
operator|.
name|getDeclaredMethod
argument_list|(
name|prefix
operator|+
name|fieldName
argument_list|)
decl_stmt|;
return|return
name|method
operator|.
name|getGenericReturnType
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{       }
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find type for "
operator|+
name|fieldName
operator|+
literal|" in "
operator|+
name|containingClass
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

