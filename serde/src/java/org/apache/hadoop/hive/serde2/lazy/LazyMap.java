begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazyMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * LazyMap stores a map of Primitive LazyObjects to LazyObjects. Note that the  * keys of the map cannot contain null.  *   * LazyMap does not deal with the case of a NULL map. That is handled by the  * parent LazyObject.  */
end_comment

begin_class
specifier|public
class|class
name|LazyMap
extends|extends
name|LazyNonPrimitive
argument_list|<
name|LazyMapObjectInspector
argument_list|>
block|{
comment|/**    * Whether the data is already parsed or not.    */
name|boolean
name|parsed
init|=
literal|false
decl_stmt|;
comment|/**    * The size of the map. Only valid when the data is parsed. -1 when the map is    * NULL.    */
name|int
name|mapSize
init|=
literal|0
decl_stmt|;
comment|/**    * The beginning position of key[i]. Only valid when the data is parsed. Note    * that keyStart[mapSize] = begin + length + 1; that makes sure we can use the    * same formula to compute the length of each value in the map.    */
name|int
index|[]
name|keyStart
decl_stmt|;
comment|/**    * The end position of key[i] (the position of the key-value separator). Only    * valid when the data is parsed.    */
name|int
index|[]
name|keyEnd
decl_stmt|;
comment|/**    * The keys are stored in an array of LazyPrimitives.    */
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[]
name|keyObjects
decl_stmt|;
comment|/**    * Whether init() is called on keyObjects[i].    */
name|boolean
index|[]
name|keyInited
decl_stmt|;
comment|/**    * The values are stored in an array of LazyObjects. value[index] will start    * from KeyEnd[index] + 1, and ends before KeyStart[index+1] - 1.    */
name|LazyObject
index|[]
name|valueObjects
decl_stmt|;
comment|/**    * Whether init() is called on valueObjects[i].    */
name|boolean
index|[]
name|valueInited
decl_stmt|;
comment|/**    * Construct a LazyMap object with the ObjectInspector.    */
specifier|protected
name|LazyMap
parameter_list|(
name|LazyMapObjectInspector
name|oi
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the row data for this LazyArray.    *     * @see LazyObject#init(ByteArrayRef, int, int)    */
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|ByteArrayRef
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|bytes
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|parsed
operator|=
literal|false
expr_stmt|;
block|}
comment|/**    * Enlarge the size of arrays storing information for the elements inside the    * array.    */
specifier|protected
name|void
name|enlargeArrays
parameter_list|()
block|{
if|if
condition|(
name|keyStart
operator|==
literal|null
condition|)
block|{
name|int
name|initialSize
init|=
literal|2
decl_stmt|;
name|keyStart
operator|=
operator|new
name|int
index|[
name|initialSize
index|]
expr_stmt|;
name|keyEnd
operator|=
operator|new
name|int
index|[
name|initialSize
index|]
expr_stmt|;
name|keyObjects
operator|=
operator|new
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
index|[
name|initialSize
index|]
expr_stmt|;
name|valueObjects
operator|=
operator|new
name|LazyObject
index|[
name|initialSize
index|]
expr_stmt|;
name|keyInited
operator|=
operator|new
name|boolean
index|[
name|initialSize
index|]
expr_stmt|;
name|valueInited
operator|=
operator|new
name|boolean
index|[
name|initialSize
index|]
expr_stmt|;
block|}
else|else
block|{
name|keyStart
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|keyStart
argument_list|,
name|keyStart
operator|.
name|length
operator|*
literal|2
argument_list|)
expr_stmt|;
name|keyEnd
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|keyEnd
argument_list|,
name|keyEnd
operator|.
name|length
operator|*
literal|2
argument_list|)
expr_stmt|;
name|keyObjects
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|keyObjects
argument_list|,
name|keyObjects
operator|.
name|length
operator|*
literal|2
argument_list|)
expr_stmt|;
name|valueObjects
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|valueObjects
argument_list|,
name|valueObjects
operator|.
name|length
operator|*
literal|2
argument_list|)
expr_stmt|;
name|keyInited
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|keyInited
argument_list|,
name|keyInited
operator|.
name|length
operator|*
literal|2
argument_list|)
expr_stmt|;
name|valueInited
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|valueInited
argument_list|,
name|valueInited
operator|.
name|length
operator|*
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Parse the byte[] and fill keyStart, keyEnd.    */
specifier|private
name|void
name|parse
parameter_list|()
block|{
name|parsed
operator|=
literal|true
expr_stmt|;
name|byte
name|itemSeparator
init|=
name|oi
operator|.
name|getItemSeparator
argument_list|()
decl_stmt|;
name|byte
name|keyValueSeparator
init|=
name|oi
operator|.
name|getKeyValueSeparator
argument_list|()
decl_stmt|;
name|boolean
name|isEscaped
init|=
name|oi
operator|.
name|isEscaped
argument_list|()
decl_stmt|;
name|byte
name|escapeChar
init|=
name|oi
operator|.
name|getEscapeChar
argument_list|()
decl_stmt|;
comment|// empty array?
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
name|mapSize
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|mapSize
operator|=
literal|0
expr_stmt|;
name|int
name|arrayByteEnd
init|=
name|start
operator|+
name|length
decl_stmt|;
name|int
name|elementByteBegin
init|=
name|start
decl_stmt|;
name|int
name|keyValueSeparatorPosition
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|elementByteEnd
init|=
name|start
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|this
operator|.
name|bytes
operator|.
name|getData
argument_list|()
decl_stmt|;
comment|// Go through all bytes in the byte[]
while|while
condition|(
name|elementByteEnd
operator|<=
name|arrayByteEnd
condition|)
block|{
comment|// End of entry reached?
if|if
condition|(
name|elementByteEnd
operator|==
name|arrayByteEnd
operator|||
name|bytes
index|[
name|elementByteEnd
index|]
operator|==
name|itemSeparator
condition|)
block|{
comment|// Array full?
if|if
condition|(
name|keyStart
operator|==
literal|null
operator|||
name|mapSize
operator|+
literal|1
operator|==
name|keyStart
operator|.
name|length
condition|)
block|{
name|enlargeArrays
argument_list|()
expr_stmt|;
block|}
name|keyStart
index|[
name|mapSize
index|]
operator|=
name|elementByteBegin
expr_stmt|;
comment|// If no keyValueSeparator is seen, all bytes belong to key, and
comment|// value will be NULL.
name|keyEnd
index|[
name|mapSize
index|]
operator|=
operator|(
name|keyValueSeparatorPosition
operator|==
operator|-
literal|1
condition|?
name|elementByteEnd
else|:
name|keyValueSeparatorPosition
operator|)
expr_stmt|;
comment|// reset keyValueSeparatorPosition
name|keyValueSeparatorPosition
operator|=
operator|-
literal|1
expr_stmt|;
name|mapSize
operator|++
expr_stmt|;
name|elementByteBegin
operator|=
name|elementByteEnd
operator|+
literal|1
expr_stmt|;
name|elementByteEnd
operator|++
expr_stmt|;
block|}
else|else
block|{
comment|// Is this the first keyValueSeparator in this entry?
if|if
condition|(
name|keyValueSeparatorPosition
operator|==
operator|-
literal|1
operator|&&
name|bytes
index|[
name|elementByteEnd
index|]
operator|==
name|keyValueSeparator
condition|)
block|{
name|keyValueSeparatorPosition
operator|=
name|elementByteEnd
expr_stmt|;
block|}
if|if
condition|(
name|isEscaped
operator|&&
name|bytes
index|[
name|elementByteEnd
index|]
operator|==
name|escapeChar
operator|&&
name|elementByteEnd
operator|+
literal|1
operator|<
name|arrayByteEnd
condition|)
block|{
comment|// ignore the char after escape_char
name|elementByteEnd
operator|+=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|elementByteEnd
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// This makes sure we can use the same formula to compute the
comment|// length of each value in the map.
name|keyStart
index|[
name|mapSize
index|]
operator|=
name|arrayByteEnd
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|mapSize
operator|>
literal|0
condition|)
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|keyInited
argument_list|,
literal|0
argument_list|,
name|mapSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|valueInited
argument_list|,
literal|0
argument_list|,
name|mapSize
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Get the value in the map for the key.    *     * If there are multiple matches (which is possible in the serialized format),    * only the first one is returned.    *     * The most efficient way to get the value for the key is to serialize the key    * and then try to find it in the array. We do linear search because in most    * cases, user only wants to get one or two values out of the map, and the    * cost of building up a HashMap is substantially higher.    *     * @param key    *          The key object that we are looking for.    * @return The corresponding value object, or NULL if not found    */
specifier|public
name|Object
name|getMapValueElement
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|parsed
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
block|}
comment|// search for the key
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|lazyKeyI
init|=
name|uncheckedGetKey
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|lazyKeyI
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// getWritableObject() will convert LazyPrimitive to actual primitive
comment|// writable objects.
name|Object
name|keyI
init|=
name|lazyKeyI
operator|.
name|getWritableObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyI
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|keyI
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
comment|// Got a match, return the value
name|LazyObject
name|v
init|=
name|uncheckedGetValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
return|return
name|v
operator|==
literal|null
condition|?
name|v
else|:
name|v
operator|.
name|getObject
argument_list|()
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**    * Get the value object with the index without checking parsed.    *     * @param index    *          The index into the array starting from 0    */
specifier|private
name|LazyObject
name|uncheckedGetValue
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Text
name|nullSequence
init|=
name|oi
operator|.
name|getNullSequence
argument_list|()
decl_stmt|;
name|int
name|valueIBegin
init|=
name|keyEnd
index|[
name|index
index|]
operator|+
literal|1
decl_stmt|;
name|int
name|valueILength
init|=
name|keyStart
index|[
name|index
operator|+
literal|1
index|]
operator|-
literal|1
operator|-
name|valueIBegin
decl_stmt|;
if|if
condition|(
name|valueILength
operator|<
literal|0
operator|||
operator|(
operator|(
name|valueILength
operator|==
name|nullSequence
operator|.
name|getLength
argument_list|()
operator|)
operator|&&
literal|0
operator|==
name|LazyUtils
operator|.
name|compare
argument_list|(
name|bytes
operator|.
name|getData
argument_list|()
argument_list|,
name|valueIBegin
argument_list|,
name|valueILength
argument_list|,
name|nullSequence
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|nullSequence
operator|.
name|getLength
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|valueInited
index|[
name|index
index|]
condition|)
block|{
name|valueInited
index|[
name|index
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|valueObjects
index|[
name|index
index|]
operator|==
literal|null
condition|)
block|{
name|valueObjects
index|[
name|index
index|]
operator|=
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
operator|(
operator|(
name|MapObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|valueObjects
index|[
name|index
index|]
operator|.
name|init
argument_list|(
name|bytes
argument_list|,
name|valueIBegin
argument_list|,
name|valueILength
argument_list|)
expr_stmt|;
block|}
return|return
name|valueObjects
index|[
name|index
index|]
return|;
block|}
comment|/**    * Get the key object with the index without checking parsed.    *     * @param index    *          The index into the array starting from 0    */
specifier|private
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|uncheckedGetKey
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Text
name|nullSequence
init|=
name|oi
operator|.
name|getNullSequence
argument_list|()
decl_stmt|;
name|int
name|keyIBegin
init|=
name|keyStart
index|[
name|index
index|]
decl_stmt|;
name|int
name|keyILength
init|=
name|keyEnd
index|[
name|index
index|]
operator|-
name|keyStart
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|keyILength
operator|<
literal|0
operator|||
operator|(
operator|(
name|keyILength
operator|==
name|nullSequence
operator|.
name|getLength
argument_list|()
operator|)
operator|&&
literal|0
operator|==
name|LazyUtils
operator|.
name|compare
argument_list|(
name|bytes
operator|.
name|getData
argument_list|()
argument_list|,
name|keyIBegin
argument_list|,
name|keyILength
argument_list|,
name|nullSequence
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|nullSequence
operator|.
name|getLength
argument_list|()
argument_list|)
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|keyInited
index|[
name|index
index|]
condition|)
block|{
name|keyInited
index|[
name|index
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|keyObjects
index|[
name|index
index|]
operator|==
literal|null
condition|)
block|{
comment|// Keys are always primitive
name|keyObjects
index|[
name|index
index|]
operator|=
name|LazyFactory
operator|.
name|createLazyPrimitiveClass
argument_list|(
call|(
name|PrimitiveObjectInspector
call|)
argument_list|(
operator|(
name|MapObjectInspector
operator|)
name|oi
argument_list|)
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|keyObjects
index|[
name|index
index|]
operator|.
name|init
argument_list|(
name|bytes
argument_list|,
name|keyIBegin
argument_list|,
name|keyILength
argument_list|)
expr_stmt|;
block|}
return|return
name|keyObjects
index|[
name|index
index|]
return|;
block|}
comment|/**    * cachedMap is reused for different calls to getMap(). But each LazyMap has a    * separate cachedMap so we won't overwrite the data by accident.    */
specifier|protected
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|cachedMap
decl_stmt|;
comment|/**    * Return the map object representing this LazyMap. Note that the keyObjects    * will be Writable primitive objects.    *     * @return the map object    */
specifier|public
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|getMap
parameter_list|()
block|{
if|if
condition|(
operator|!
name|parsed
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cachedMap
operator|==
literal|null
condition|)
block|{
comment|// Use LinkedHashMap to provide deterministic order
name|cachedMap
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|cachedMap
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// go through each element of the map
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mapSize
condition|;
name|i
operator|++
control|)
block|{
name|LazyPrimitive
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|lazyKey
init|=
name|uncheckedGetKey
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|lazyKey
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|Object
name|key
init|=
name|lazyKey
operator|.
name|getObject
argument_list|()
decl_stmt|;
comment|// do not overwrite if there are duplicate keys
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
operator|!
name|cachedMap
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
name|LazyObject
name|lazyValue
init|=
name|uncheckedGetValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|value
init|=
operator|(
name|lazyValue
operator|==
literal|null
condition|?
literal|null
else|:
name|lazyValue
operator|.
name|getObject
argument_list|()
operator|)
decl_stmt|;
name|cachedMap
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|cachedMap
return|;
block|}
comment|/**    * Get the size of the map represented by this LazyMap.    *     * @return The size of the map, -1 for NULL map.    */
specifier|public
name|int
name|getMapSize
parameter_list|()
block|{
if|if
condition|(
operator|!
name|parsed
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
block|}
return|return
name|mapSize
return|;
block|}
specifier|protected
name|boolean
name|getParsed
parameter_list|()
block|{
return|return
name|parsed
return|;
block|}
specifier|protected
name|void
name|setParsed
parameter_list|(
name|boolean
name|parsed
parameter_list|)
block|{
name|this
operator|.
name|parsed
operator|=
name|parsed
expr_stmt|;
block|}
block|}
end_class

end_unit

