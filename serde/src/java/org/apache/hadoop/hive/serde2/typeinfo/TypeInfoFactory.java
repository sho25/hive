begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
operator|.
name|PrimitiveTypeEntry
import|;
end_import

begin_comment
comment|/**  * TypeInfoFactory can be used to create the TypeInfo object for any types.  *  * TypeInfo objects are all read-only so we can reuse them easily.  * TypeInfoFactory has internal cache to make sure we don't create 2 TypeInfo  * objects that represents the same type.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|TypeInfoFactory
block|{
specifier|private
specifier|static
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TypeInfoFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TypeInfoFactory
parameter_list|()
block|{
comment|// prevent instantiation
block|}
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|voidTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|VOID_TYPE_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|booleanTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|intTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|longTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|stringTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|charTypeInfo
init|=
operator|new
name|CharTypeInfo
argument_list|(
name|HiveChar
operator|.
name|MAX_CHAR_LENGTH
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|varcharTypeInfo
init|=
operator|new
name|VarcharTypeInfo
argument_list|(
name|HiveVarchar
operator|.
name|MAX_VARCHAR_LENGTH
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|floatTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|doubleTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|byteTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|shortTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|dateTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|DATE_TYPE_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|timestampTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|binaryTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|)
decl_stmt|;
comment|/**    * A DecimalTypeInfo instance that has max precision and max scale.    */
specifier|public
specifier|static
specifier|final
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|new
name|DecimalTypeInfo
argument_list|(
name|HiveDecimal
operator|.
name|MAX_PRECISION
argument_list|,
name|HiveDecimal
operator|.
name|MAX_SCALE
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|PrimitiveTypeInfo
name|unknownTypeInfo
init|=
operator|new
name|PrimitiveTypeInfo
argument_list|(
literal|"unknown"
argument_list|)
decl_stmt|;
comment|// Map from type name (such as int or varchar(40) to the corresponding PrimitiveTypeInfo
comment|// instance.
specifier|private
specifier|static
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|PrimitiveTypeInfo
argument_list|>
name|cachedPrimitiveTypeInfo
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|PrimitiveTypeInfo
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|VOID_TYPE_NAME
argument_list|,
name|voidTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|BOOLEAN_TYPE_NAME
argument_list|,
name|booleanTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|INT_TYPE_NAME
argument_list|,
name|intTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|BIGINT_TYPE_NAME
argument_list|,
name|longTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|STRING_TYPE_NAME
argument_list|,
name|stringTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|charTypeInfo
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|charTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|varcharTypeInfo
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|varcharTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|FLOAT_TYPE_NAME
argument_list|,
name|floatTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|DOUBLE_TYPE_NAME
argument_list|,
name|doubleTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|TINYINT_TYPE_NAME
argument_list|,
name|byteTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|SMALLINT_TYPE_NAME
argument_list|,
name|shortTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|DATE_TYPE_NAME
argument_list|,
name|dateTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_TYPE_NAME
argument_list|,
name|timestampTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|serdeConstants
operator|.
name|BINARY_TYPE_NAME
argument_list|,
name|binaryTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|decimalTypeInfo
operator|.
name|getQualifiedName
argument_list|()
argument_list|,
name|decimalTypeInfo
argument_list|)
expr_stmt|;
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
literal|"unknown"
argument_list|,
name|unknownTypeInfo
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get PrimitiveTypeInfo instance for the given type name of a type    * including types with parameters, such as varchar(20).    *    * @param typeName type name possibly with parameters.    * @return aPrimitiveTypeInfo instance    */
specifier|public
specifier|static
name|PrimitiveTypeInfo
name|getPrimitiveTypeInfo
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
name|PrimitiveTypeInfo
name|result
init|=
name|cachedPrimitiveTypeInfo
operator|.
name|get
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
return|return
name|result
return|;
block|}
comment|// Not found in the cache. Must be parameterized types. Create it.
name|result
operator|=
name|createPrimitiveTypeInfo
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Error creating PrimitiveTypeInfo instance for "
operator|+
name|typeName
argument_list|)
throw|;
block|}
name|cachedPrimitiveTypeInfo
operator|.
name|put
argument_list|(
name|typeName
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Create PrimitiveTypeInfo instance for the given full name of the type. The returned    * type is one of the parameterized type info such as VarcharTypeInfo.    *    * @param fullName Fully qualified name of the type    * @return PrimitiveTypeInfo instance    */
specifier|private
specifier|static
name|PrimitiveTypeInfo
name|createPrimitiveTypeInfo
parameter_list|(
name|String
name|fullName
parameter_list|)
block|{
name|String
name|baseName
init|=
name|TypeInfoUtils
operator|.
name|getBaseName
argument_list|(
name|fullName
argument_list|)
decl_stmt|;
name|PrimitiveTypeEntry
name|typeEntry
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromTypeName
argument_list|(
name|baseName
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|typeEntry
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown type "
operator|+
name|fullName
argument_list|)
throw|;
block|}
name|TypeInfoUtils
operator|.
name|PrimitiveParts
name|parts
init|=
name|TypeInfoUtils
operator|.
name|parsePrimitiveParts
argument_list|(
name|fullName
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|typeParams
operator|==
literal|null
operator|||
name|parts
operator|.
name|typeParams
operator|.
name|length
operator|<
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
switch|switch
condition|(
name|typeEntry
operator|.
name|primitiveCategory
condition|)
block|{
case|case
name|CHAR
case|:
if|if
condition|(
name|parts
operator|.
name|typeParams
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|CharTypeInfo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|parts
operator|.
name|typeParams
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
case|case
name|VARCHAR
case|:
if|if
condition|(
name|parts
operator|.
name|typeParams
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|VarcharTypeInfo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|parts
operator|.
name|typeParams
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
case|case
name|DECIMAL
case|:
if|if
condition|(
name|parts
operator|.
name|typeParams
operator|.
name|length
operator|!=
literal|2
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|DecimalTypeInfo
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|parts
operator|.
name|typeParams
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
name|parts
operator|.
name|typeParams
index|[
literal|1
index|]
argument_list|)
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|static
name|CharTypeInfo
name|getCharTypeInfo
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|String
name|fullName
init|=
name|BaseCharTypeInfo
operator|.
name|getQualifiedName
argument_list|(
name|serdeConstants
operator|.
name|CHAR_TYPE_NAME
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
operator|(
name|CharTypeInfo
operator|)
name|getPrimitiveTypeInfo
argument_list|(
name|fullName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|VarcharTypeInfo
name|getVarcharTypeInfo
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|String
name|fullName
init|=
name|BaseCharTypeInfo
operator|.
name|getQualifiedName
argument_list|(
name|serdeConstants
operator|.
name|VARCHAR_TYPE_NAME
argument_list|,
name|length
argument_list|)
decl_stmt|;
return|return
operator|(
name|VarcharTypeInfo
operator|)
name|getPrimitiveTypeInfo
argument_list|(
name|fullName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DecimalTypeInfo
name|getDecimalTypeInfo
parameter_list|(
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|String
name|fullName
init|=
name|DecimalTypeInfo
operator|.
name|getQualifiedName
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
decl_stmt|;
return|return
operator|(
name|DecimalTypeInfo
operator|)
name|getPrimitiveTypeInfo
argument_list|(
name|fullName
argument_list|)
return|;
block|}
empty_stmt|;
specifier|public
specifier|static
name|TypeInfo
name|getPrimitiveTypeInfoFromPrimitiveWritable
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
name|String
name|typeName
init|=
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeNameFromPrimitiveWritable
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|typeName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Internal error: Cannot get typeName for "
operator|+
name|clazz
argument_list|)
throw|;
block|}
return|return
name|getPrimitiveTypeInfo
argument_list|(
name|typeName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TypeInfo
name|getPrimitiveTypeInfoFromJavaPrimitive
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|clazz
parameter_list|)
block|{
return|return
name|getPrimitiveTypeInfo
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeNameFromPrimitiveJava
argument_list|(
name|clazz
argument_list|)
argument_list|)
return|;
block|}
specifier|static
name|ConcurrentHashMap
argument_list|<
name|ArrayList
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|,
name|TypeInfo
argument_list|>
name|cachedStructTypeInfo
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ArrayList
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|,
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|TypeInfo
name|getStructTypeInfo
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|,
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|signature
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|signature
operator|.
name|add
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|signature
operator|.
name|add
argument_list|(
name|typeInfos
argument_list|)
expr_stmt|;
name|TypeInfo
name|result
init|=
name|cachedStructTypeInfo
operator|.
name|get
argument_list|(
name|signature
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|StructTypeInfo
argument_list|(
name|names
argument_list|,
name|typeInfos
argument_list|)
expr_stmt|;
name|cachedStructTypeInfo
operator|.
name|put
argument_list|(
name|signature
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|static
name|ConcurrentHashMap
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|,
name|TypeInfo
argument_list|>
name|cachedUnionTypeInfo
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|List
argument_list|<
name|?
argument_list|>
argument_list|,
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|TypeInfo
name|getUnionTypeInfo
parameter_list|(
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
parameter_list|)
block|{
name|TypeInfo
name|result
init|=
name|cachedUnionTypeInfo
operator|.
name|get
argument_list|(
name|typeInfos
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|UnionTypeInfo
argument_list|(
name|typeInfos
argument_list|)
expr_stmt|;
name|cachedUnionTypeInfo
operator|.
name|put
argument_list|(
name|typeInfos
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|static
name|ConcurrentHashMap
argument_list|<
name|TypeInfo
argument_list|,
name|TypeInfo
argument_list|>
name|cachedListTypeInfo
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|TypeInfo
argument_list|,
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|TypeInfo
name|getListTypeInfo
parameter_list|(
name|TypeInfo
name|elementTypeInfo
parameter_list|)
block|{
name|TypeInfo
name|result
init|=
name|cachedListTypeInfo
operator|.
name|get
argument_list|(
name|elementTypeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|ListTypeInfo
argument_list|(
name|elementTypeInfo
argument_list|)
expr_stmt|;
name|cachedListTypeInfo
operator|.
name|put
argument_list|(
name|elementTypeInfo
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|static
name|ConcurrentHashMap
argument_list|<
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|,
name|TypeInfo
argument_list|>
name|cachedMapTypeInfo
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|,
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|TypeInfo
name|getMapTypeInfo
parameter_list|(
name|TypeInfo
name|keyTypeInfo
parameter_list|,
name|TypeInfo
name|valueTypeInfo
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|signature
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|signature
operator|.
name|add
argument_list|(
name|keyTypeInfo
argument_list|)
expr_stmt|;
name|signature
operator|.
name|add
argument_list|(
name|valueTypeInfo
argument_list|)
expr_stmt|;
name|TypeInfo
name|result
init|=
name|cachedMapTypeInfo
operator|.
name|get
argument_list|(
name|signature
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|MapTypeInfo
argument_list|(
name|keyTypeInfo
argument_list|,
name|valueTypeInfo
argument_list|)
expr_stmt|;
name|cachedMapTypeInfo
operator|.
name|put
argument_list|(
name|signature
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

