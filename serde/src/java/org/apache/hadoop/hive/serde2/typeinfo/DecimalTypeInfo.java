begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_class
specifier|public
class|class
name|DecimalTypeInfo
extends|extends
name|PrimitiveTypeInfo
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|1L
decl_stmt|;
specifier|private
name|int
name|precision
decl_stmt|;
specifier|private
name|int
name|scale
decl_stmt|;
comment|// no-arg constructor to make kyro happy.
specifier|public
name|DecimalTypeInfo
parameter_list|()
block|{
name|super
argument_list|(
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DecimalTypeInfo
parameter_list|(
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|super
argument_list|(
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
argument_list|)
expr_stmt|;
name|HiveDecimalUtils
operator|.
name|validateParameter
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|getQualifiedName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTypeName
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
comment|// No need to set type name, it should always be decimal
return|return;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
operator|!
operator|(
name|other
operator|instanceof
name|DecimalTypeInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DecimalTypeInfo
name|dti
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|other
decl_stmt|;
return|return
name|this
operator|.
name|precision
argument_list|()
operator|==
name|dti
operator|.
name|precision
argument_list|()
operator|&&
name|this
operator|.
name|scale
argument_list|()
operator|==
name|dti
operator|.
name|scale
argument_list|()
return|;
block|}
comment|/**    * Generate the hashCode for this TypeInfo.    */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|31
operator|*
operator|(
literal|17
operator|+
name|precision
operator|)
operator|+
name|scale
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getQualifiedName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQualifiedName
parameter_list|()
block|{
return|return
name|getQualifiedName
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getQualifiedName
parameter_list|(
name|int
name|precision
parameter_list|,
name|int
name|scale
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|serdeConstants
operator|.
name|DECIMAL_TYPE_NAME
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"("
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|precision
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|scale
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|int
name|precision
parameter_list|()
block|{
return|return
name|precision
return|;
block|}
specifier|public
name|int
name|scale
parameter_list|()
block|{
return|return
name|scale
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|accept
parameter_list|(
name|TypeInfo
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
operator|!
operator|(
name|other
operator|instanceof
name|DecimalTypeInfo
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|DecimalTypeInfo
name|dti
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|other
decl_stmt|;
comment|// Make sure "this" has enough integer room to accomodate other's integer digits.
return|return
name|this
operator|.
name|precision
argument_list|()
operator|-
name|this
operator|.
name|scale
argument_list|()
operator|>=
name|dti
operator|.
name|precision
argument_list|()
operator|-
name|dti
operator|.
name|scale
argument_list|()
return|;
block|}
specifier|public
name|int
name|getPrecision
parameter_list|()
block|{
return|return
name|precision
return|;
block|}
specifier|public
name|void
name|setPrecision
parameter_list|(
name|int
name|precision
parameter_list|)
block|{
name|this
operator|.
name|precision
operator|=
name|precision
expr_stmt|;
block|}
specifier|public
name|int
name|getScale
parameter_list|()
block|{
return|return
name|scale
return|;
block|}
specifier|public
name|void
name|setScale
parameter_list|(
name|int
name|scale
parameter_list|)
block|{
name|this
operator|.
name|scale
operator|=
name|scale
expr_stmt|;
block|}
block|}
end_class

end_unit

