begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|json
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|BaseCharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|TimestampParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParseException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonToken
import|;
end_import

begin_class
specifier|public
class|class
name|HiveJsonStructReader
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveJsonStructReader
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ObjectInspector
name|oi
decl_stmt|;
specifier|private
name|JsonFactory
name|factory
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|reportedUnknownFieldNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|ignoreUnknownFields
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|hiveColIndexParsing
decl_stmt|;
specifier|private
name|boolean
name|writeablePrimitives
decl_stmt|;
specifier|private
name|TimestampParser
name|tsParser
decl_stmt|;
specifier|public
name|HiveJsonStructReader
parameter_list|(
name|TypeInfo
name|t
parameter_list|)
block|{
name|this
argument_list|(
name|t
argument_list|,
operator|new
name|TimestampParser
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveJsonStructReader
parameter_list|(
name|TypeInfo
name|t
parameter_list|,
name|TimestampParser
name|tsParser
parameter_list|)
block|{
name|this
operator|.
name|tsParser
operator|=
name|tsParser
expr_stmt|;
name|oi
operator|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|factory
operator|=
operator|new
name|JsonFactory
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Object
name|parseStruct
parameter_list|(
name|String
name|text
parameter_list|)
throws|throws
name|JsonParseException
throws|,
name|IOException
throws|,
name|SerDeException
block|{
name|JsonParser
name|parser
init|=
name|factory
operator|.
name|createParser
argument_list|(
name|text
argument_list|)
decl_stmt|;
return|return
name|parseInternal
argument_list|(
name|parser
argument_list|)
return|;
block|}
specifier|public
name|Object
name|parseStruct
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|JsonParseException
throws|,
name|IOException
throws|,
name|SerDeException
block|{
name|JsonParser
name|parser
init|=
name|factory
operator|.
name|createParser
argument_list|(
name|is
argument_list|)
decl_stmt|;
return|return
name|parseInternal
argument_list|(
name|parser
argument_list|)
return|;
block|}
specifier|private
name|Object
name|parseInternal
parameter_list|(
name|JsonParser
name|parser
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|Object
name|res
init|=
name|parseDispatcher
argument_list|(
name|parser
argument_list|,
name|oi
argument_list|)
decl_stmt|;
return|return
name|res
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|locationStr
init|=
name|parser
operator|.
name|getCurrentLocation
argument_list|()
operator|.
name|getLineNr
argument_list|()
operator|+
literal|","
operator|+
name|parser
operator|.
name|getCurrentLocation
argument_list|()
operator|.
name|getColumnNr
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"at["
operator|+
name|locationStr
operator|+
literal|"]: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Object
name|parseDispatcher
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|ObjectInspector
name|oi
parameter_list|)
throws|throws
name|JsonParseException
throws|,
name|IOException
throws|,
name|SerDeException
block|{
switch|switch
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
condition|)
block|{
case|case
name|PRIMITIVE
case|:
return|return
name|parsePrimitive
argument_list|(
name|parser
argument_list|,
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
argument_list|)
return|;
case|case
name|LIST
case|:
return|return
name|parseList
argument_list|(
name|parser
argument_list|,
operator|(
name|ListObjectInspector
operator|)
name|oi
argument_list|)
return|;
case|case
name|STRUCT
case|:
return|return
name|parseStruct
argument_list|(
name|parser
argument_list|,
operator|(
name|StructObjectInspector
operator|)
name|oi
argument_list|)
return|;
case|case
name|MAP
case|:
return|return
name|parseMap
argument_list|(
name|parser
argument_list|,
operator|(
name|MapObjectInspector
operator|)
name|oi
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"parsing of: "
operator|+
name|oi
operator|.
name|getCategory
argument_list|()
operator|+
literal|" is not handled"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Object
name|parseMap
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|MapObjectInspector
name|oi
parameter_list|)
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
if|if
condition|(
name|parser
operator|.
name|getCurrentToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|ret
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|getCurrentToken
argument_list|()
operator|!=
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"struct expected"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|oi
operator|.
name|getMapKeyObjectInspector
argument_list|()
operator|instanceof
name|PrimitiveObjectInspector
operator|)
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"map key must be a primitive"
argument_list|)
throw|;
block|}
name|PrimitiveObjectInspector
name|keyOI
init|=
operator|(
name|PrimitiveObjectInspector
operator|)
name|oi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|valOI
init|=
name|oi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|JsonToken
name|currentToken
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|currentToken
operator|!=
literal|null
operator|&&
name|currentToken
operator|!=
name|JsonToken
operator|.
name|END_OBJECT
condition|)
block|{
if|if
condition|(
name|currentToken
operator|!=
name|JsonToken
operator|.
name|FIELD_NAME
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"unexpected token: "
operator|+
name|currentToken
argument_list|)
throw|;
block|}
name|Object
name|key
init|=
name|parseMapKey
argument_list|(
name|parser
argument_list|,
name|keyOI
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|parseDispatcher
argument_list|(
name|parser
argument_list|,
name|valOI
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|currentToken
operator|=
name|parser
operator|.
name|getCurrentToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentToken
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Object
name|parseStruct
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|StructObjectInspector
name|oi
parameter_list|)
throws|throws
name|JsonParseException
throws|,
name|IOException
throws|,
name|SerDeException
block|{
name|Object
index|[]
name|ret
init|=
operator|new
name|Object
index|[
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|getCurrentToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|parser
operator|.
name|getCurrentToken
argument_list|()
operator|!=
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"struct expected"
argument_list|)
throw|;
block|}
name|JsonToken
name|currentToken
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
while|while
condition|(
name|currentToken
operator|!=
literal|null
operator|&&
name|currentToken
operator|!=
name|JsonToken
operator|.
name|END_OBJECT
condition|)
block|{
switch|switch
condition|(
name|currentToken
condition|)
block|{
case|case
name|FIELD_NAME
case|:
name|String
name|name
init|=
name|parser
operator|.
name|getCurrentName
argument_list|()
decl_stmt|;
try|try
block|{
name|StructField
name|field
init|=
literal|null
decl_stmt|;
try|try
block|{
name|field
operator|=
name|getStructField
argument_list|(
name|oi
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
if|if
condition|(
name|ignoreUnknownFields
condition|)
block|{
if|if
condition|(
operator|!
name|reportedUnknownFieldNames
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"ignoring field:"
operator|+
name|name
argument_list|)
expr_stmt|;
name|reportedUnknownFieldNames
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|skipValue
argument_list|(
name|parser
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"undeclared field"
argument_list|)
throw|;
block|}
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
name|ret
index|[
name|field
operator|.
name|getFieldID
argument_list|()
index|]
operator|=
name|parseDispatcher
argument_list|(
name|parser
argument_list|,
name|field
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"struct field "
operator|+
name|name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"unexpected token: "
operator|+
name|currentToken
argument_list|)
throw|;
block|}
name|currentToken
operator|=
name|parser
operator|.
name|getCurrentToken
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|currentToken
operator|!=
literal|null
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|StructField
name|getStructField
parameter_list|(
name|StructObjectInspector
name|oi
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|hiveColIndexParsing
condition|)
block|{
name|int
name|colIndex
init|=
name|getColIndex
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|colIndex
operator|>=
literal|0
condition|)
block|{
return|return
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|get
argument_list|(
name|colIndex
argument_list|)
return|;
block|}
block|}
comment|// FIXME: linear scan inside the below method...get a map here or something..
return|return
name|oi
operator|.
name|getStructFieldRef
argument_list|(
name|name
argument_list|)
return|;
block|}
name|Pattern
name|internalPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^_col([0-9]+)$"
argument_list|)
decl_stmt|;
specifier|private
name|int
name|getColIndex
parameter_list|(
name|String
name|internalName
parameter_list|)
block|{
comment|// The above line should have been all the implementation that
comment|// we need, but due to a bug in that impl which recognizes
comment|// only single-digit columns, we need another impl here.
name|Matcher
name|m
init|=
name|internalPattern
operator|.
name|matcher
argument_list|(
name|internalName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|skipValue
parameter_list|(
name|JsonParser
name|parser
parameter_list|)
throws|throws
name|JsonParseException
throws|,
name|IOException
block|{
name|int
name|array
init|=
literal|0
decl_stmt|;
name|int
name|object
init|=
literal|0
decl_stmt|;
do|do
block|{
name|JsonToken
name|currentToken
init|=
name|parser
operator|.
name|getCurrentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentToken
operator|==
name|JsonToken
operator|.
name|START_ARRAY
condition|)
block|{
name|array
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|currentToken
operator|==
name|JsonToken
operator|.
name|END_ARRAY
condition|)
block|{
name|array
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|currentToken
operator|==
name|JsonToken
operator|.
name|START_OBJECT
condition|)
block|{
name|object
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|currentToken
operator|==
name|JsonToken
operator|.
name|END_OBJECT
condition|)
block|{
name|object
operator|--
expr_stmt|;
block|}
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|array
operator|>
literal|0
operator|||
name|object
operator|>
literal|0
condition|)
do|;
block|}
specifier|private
name|Object
name|parseList
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|ListObjectInspector
name|oi
parameter_list|)
throws|throws
name|JsonParseException
throws|,
name|IOException
throws|,
name|SerDeException
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|getCurrentToken
argument_list|()
operator|==
name|JsonToken
operator|.
name|VALUE_NULL
condition|)
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|parser
operator|.
name|getCurrentToken
argument_list|()
operator|!=
name|JsonToken
operator|.
name|START_ARRAY
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"array expected"
argument_list|)
throw|;
block|}
name|ObjectInspector
name|eOI
init|=
name|oi
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
name|JsonToken
name|currentToken
init|=
name|parser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
name|currentToken
operator|!=
literal|null
operator|&&
name|currentToken
operator|!=
name|JsonToken
operator|.
name|END_ARRAY
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|parseDispatcher
argument_list|(
name|parser
argument_list|,
name|eOI
argument_list|)
argument_list|)
expr_stmt|;
name|currentToken
operator|=
name|parser
operator|.
name|getCurrentToken
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"array: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|currentToken
operator|=
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
name|Object
name|parsePrimitive
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|JsonToken
name|currentToken
init|=
name|parser
operator|.
name|getCurrentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentToken
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
switch|switch
condition|(
name|parser
operator|.
name|getCurrentToken
argument_list|()
condition|)
block|{
case|case
name|VALUE_FALSE
case|:
case|case
name|VALUE_TRUE
case|:
case|case
name|VALUE_NUMBER_INT
case|:
case|case
name|VALUE_NUMBER_FLOAT
case|:
case|case
name|VALUE_STRING
case|:
return|return
name|getObjectOfCorrespondingPrimitiveType
argument_list|(
name|parser
operator|.
name|getValueAsString
argument_list|()
argument_list|,
name|oi
argument_list|)
return|;
case|case
name|VALUE_NULL
case|:
return|return
literal|null
return|;
default|default:
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"unexpected token type: "
operator|+
name|currentToken
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Object
name|getObjectOfCorrespondingPrimitiveType
parameter_list|(
name|String
name|s
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
throws|throws
name|IOException
block|{
name|PrimitiveTypeInfo
name|typeInfo
init|=
name|oi
operator|.
name|getTypeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|writeablePrimitives
condition|)
block|{
name|Converter
name|c
init|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|oi
argument_list|)
decl_stmt|;
return|return
name|c
operator|.
name|convert
argument_list|(
name|s
argument_list|)
return|;
block|}
switch|switch
condition|(
name|typeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|INT
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
name|Byte
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
name|Short
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|LONG
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|BOOLEAN
case|:
return|return
operator|(
name|s
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|)
return|;
case|case
name|FLOAT
case|:
return|return
name|Float
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|DOUBLE
case|:
return|return
name|Double
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|STRING
case|:
return|return
name|s
return|;
case|case
name|BINARY
case|:
try|try
block|{
name|String
name|t
init|=
name|Text
operator|.
name|decode
argument_list|(
name|s
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
decl_stmt|;
return|return
name|t
operator|.
name|getBytes
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error generating json binary type from object."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
case|case
name|DATE
case|:
return|return
name|Date
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
return|;
case|case
name|TIMESTAMP
case|:
return|return
name|tsParser
operator|.
name|parseTimestamp
argument_list|(
name|s
argument_list|)
return|;
case|case
name|DECIMAL
case|:
return|return
name|HiveDecimal
operator|.
name|create
argument_list|(
name|s
argument_list|)
return|;
case|case
name|VARCHAR
case|:
return|return
operator|new
name|HiveVarchar
argument_list|(
name|s
argument_list|,
operator|(
operator|(
name|BaseCharTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
case|case
name|CHAR
case|:
return|return
operator|new
name|HiveChar
argument_list|(
name|s
argument_list|,
operator|(
operator|(
name|BaseCharTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not convert from string to map type "
operator|+
name|typeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|)
throw|;
block|}
specifier|private
name|Object
name|parseMapKey
parameter_list|(
name|JsonParser
name|parser
parameter_list|,
name|PrimitiveObjectInspector
name|oi
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|JsonToken
name|currentToken
init|=
name|parser
operator|.
name|getCurrentToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentToken
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
switch|switch
condition|(
name|parser
operator|.
name|getCurrentToken
argument_list|()
condition|)
block|{
case|case
name|FIELD_NAME
case|:
return|return
name|getObjectOfCorrespondingPrimitiveType
argument_list|(
name|parser
operator|.
name|getValueAsString
argument_list|()
argument_list|,
name|oi
argument_list|)
return|;
case|case
name|VALUE_NULL
case|:
return|return
literal|null
return|;
default|default:
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"unexpected token type: "
operator|+
name|currentToken
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|parser
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setIgnoreUnknownFields
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|ignoreUnknownFields
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|void
name|enableHiveColIndexParsing
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|hiveColIndexParsing
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|void
name|setWritablesUsage
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|writeablePrimitives
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
block|{
return|return
name|oi
return|;
block|}
block|}
end_class

end_unit

