begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|ParameterizedType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_comment
comment|/**  * TypedSerDe.  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|TypedSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|protected
name|Type
name|objectType
decl_stmt|;
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|objectClass
decl_stmt|;
specifier|public
name|TypedSerDe
parameter_list|(
name|Type
name|objectType
parameter_list|)
throws|throws
name|SerDeException
block|{
name|this
operator|.
name|objectType
operator|=
name|objectType
expr_stmt|;
if|if
condition|(
name|objectType
operator|instanceof
name|Class
condition|)
block|{
name|objectClass
operator|=
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
name|objectType
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|objectType
operator|instanceof
name|ParameterizedType
condition|)
block|{
name|objectClass
operator|=
call|(
name|Class
argument_list|<
name|?
argument_list|>
call|)
argument_list|(
operator|(
operator|(
name|ParameterizedType
operator|)
name|objectType
operator|)
operator|.
name|getRawType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Cannot create TypedSerDe with type "
operator|+
name|objectType
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Object
name|deserializeCache
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|deserializeCache
operator|==
literal|null
condition|)
block|{
return|return
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|objectClass
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
assert|assert
operator|(
name|deserializeCache
operator|.
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|objectClass
argument_list|)
operator|)
assert|;
return|return
name|deserializeCache
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|objectType
argument_list|,
name|getObjectInspectorOptions
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
name|getObjectInspectorOptions
parameter_list|()
block|{
return|return
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|BytesWritable
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
comment|// no support for statistics
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

