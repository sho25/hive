begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|json
operator|.
name|BinaryEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|json
operator|.
name|HiveJsonReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|json
operator|.
name|HiveJsonWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|TimestampParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Hive SerDe for processing JSON formatted data. This is typically paired with  * the TextInputFormat and therefore each line provided to this SerDe must be a  * single, and complete JSON object.<br/>  *<h2>Example</h2>  *<p>  * {"name="john","age"=30}<br/>  * {"name="sue","age"=32}  *</p>  */
end_comment

begin_class
annotation|@
name|SerDeSpec
argument_list|(
name|schemaProps
operator|=
block|{
name|serdeConstants
operator|.
name|LIST_COLUMNS
block|,
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
block|,
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
block|,
name|JsonSerDe
operator|.
name|BINARY_FORMAT
block|,
name|JsonSerDe
operator|.
name|IGNORE_EXTRA
block|}
argument_list|)
specifier|public
class|class
name|JsonSerDe
extends|extends
name|AbstractSerDe
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|JsonSerDe
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BINARY_FORMAT
init|=
literal|"json.binary.format"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|IGNORE_EXTRA
init|=
literal|"text.ignore.extra.fields"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NULL_EMPTY_LINES
init|=
literal|"text.null.empty.line"
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
decl_stmt|;
specifier|private
name|BinaryEncoding
name|binaryEncoding
decl_stmt|;
specifier|private
name|boolean
name|nullEmptyLines
decl_stmt|;
specifier|private
name|HiveJsonReader
name|jsonReader
decl_stmt|;
specifier|private
name|HiveJsonWriter
name|jsonWriter
decl_stmt|;
specifier|private
name|StructTypeInfo
name|rowTypeInfo
decl_stmt|;
specifier|private
name|StructObjectInspector
name|soi
decl_stmt|;
comment|/**    * Initialize the SerDe. By default, items being deserialized are expected to    * be wrapped in Hadoop Writable objects and objects being serialized are    * expected to be Java primitive objects.    */
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
name|initialize
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Initialize the SerDe.    *    * @param conf System properties; can be null in compile time    * @param tbl table properties    * @param writeablePrimitivesDeserialize true if outputs are Hadoop Writable    */
specifier|public
name|void
name|initialize
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Properties
name|tbl
parameter_list|,
specifier|final
name|boolean
name|writeablePrimitivesDeserialize
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing JsonSerDe: {}"
argument_list|,
name|tbl
operator|.
name|entrySet
argument_list|()
argument_list|)
expr_stmt|;
comment|// Get column names
specifier|final
name|String
name|columnNameProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
decl_stmt|;
specifier|final
name|String
name|columnNameDelimiter
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|COLUMN_NAME_DELIMITER
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|SerDeUtils
operator|.
name|COMMA
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|columnNames
operator|=
name|columnNameProperty
operator|.
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|Arrays
operator|.
name|asList
argument_list|(
name|columnNameProperty
operator|.
name|split
argument_list|(
name|columnNameDelimiter
argument_list|)
argument_list|)
expr_stmt|;
comment|// all column types
specifier|final
name|String
name|columnTypeProperty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
init|=
name|columnTypeProperty
operator|.
name|isEmpty
argument_list|()
condition|?
name|Collections
operator|.
name|emptyList
argument_list|()
else|:
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
name|columnTypeProperty
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"columns: {}, {}"
argument_list|,
name|columnNameProperty
argument_list|,
name|columnNames
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"types: {}, {} "
argument_list|,
name|columnTypeProperty
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|columnNames
operator|.
name|size
argument_list|()
operator|==
name|columnTypes
operator|.
name|size
argument_list|()
operator|)
assert|;
specifier|final
name|String
name|nullEmpty
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|NULL_EMPTY_LINES
argument_list|,
literal|"false"
argument_list|)
decl_stmt|;
name|this
operator|.
name|nullEmptyLines
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|nullEmpty
argument_list|)
expr_stmt|;
name|this
operator|.
name|rowTypeInfo
operator|=
operator|(
name|StructTypeInfo
operator|)
name|TypeInfoFactory
operator|.
name|getStructTypeInfo
argument_list|(
name|columnNames
argument_list|,
name|columnTypes
argument_list|)
expr_stmt|;
name|this
operator|.
name|soi
operator|=
operator|(
name|StructObjectInspector
operator|)
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|this
operator|.
name|rowTypeInfo
argument_list|)
expr_stmt|;
specifier|final
name|TimestampParser
name|tsParser
decl_stmt|;
specifier|final
name|String
name|parserFormats
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
argument_list|)
decl_stmt|;
if|if
condition|(
name|parserFormats
operator|!=
literal|null
condition|)
block|{
name|tsParser
operator|=
operator|new
name|TimestampParser
argument_list|(
name|HiveStringUtils
operator|.
name|splitAndUnEscape
argument_list|(
name|parserFormats
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tsParser
operator|=
operator|new
name|TimestampParser
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|binaryEncodingStr
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|BINARY_FORMAT
argument_list|,
literal|"base64"
argument_list|)
decl_stmt|;
name|this
operator|.
name|binaryEncoding
operator|=
name|BinaryEncoding
operator|.
name|valueOf
argument_list|(
name|binaryEncodingStr
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|jsonReader
operator|=
operator|new
name|HiveJsonReader
argument_list|(
name|this
operator|.
name|soi
argument_list|,
name|tsParser
argument_list|)
expr_stmt|;
name|this
operator|.
name|jsonWriter
operator|=
operator|new
name|HiveJsonWriter
argument_list|(
name|this
operator|.
name|binaryEncoding
argument_list|,
name|columnNames
argument_list|)
expr_stmt|;
name|this
operator|.
name|jsonReader
operator|.
name|setBinaryEncoding
argument_list|(
name|binaryEncoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|jsonReader
operator|.
name|enable
argument_list|(
name|HiveJsonReader
operator|.
name|Feature
operator|.
name|COL_INDEX_PARSING
argument_list|)
expr_stmt|;
if|if
condition|(
name|writeablePrimitivesDeserialize
condition|)
block|{
name|this
operator|.
name|jsonReader
operator|.
name|enable
argument_list|(
name|HiveJsonReader
operator|.
name|Feature
operator|.
name|PRIMITIVE_TO_WRITABLE
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|ignoreExtras
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|IGNORE_EXTRA
argument_list|,
literal|"true"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|ignoreExtras
argument_list|)
condition|)
block|{
name|this
operator|.
name|jsonReader
operator|.
name|enable
argument_list|(
name|HiveJsonReader
operator|.
name|Feature
operator|.
name|IGNORE_UKNOWN_FIELDS
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"JSON Struct Reader: {}"
argument_list|,
name|jsonReader
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"JSON Struct Writer: {}"
argument_list|,
name|jsonWriter
argument_list|)
expr_stmt|;
block|}
comment|/**    * Deserialize an object out of a Writable blob containing JSON text. The    * return value of this function will be constant since the function will    * reuse the returned object. If the client wants to keep a copy of the    * object, the client needs to clone the returned value by calling    * ObjectInspectorUtils.getStandardObject().    *    * @param blob The Writable (Text) object containing a serialized object    * @return A List containing all the values of the row    */
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
specifier|final
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
specifier|final
name|Text
name|t
init|=
operator|(
name|Text
operator|)
name|blob
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|nullEmptyLines
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Encountered an empty row in the text file"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|fieldCount
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
return|return
name|Collections
operator|.
name|nCopies
argument_list|(
name|fieldCount
argument_list|,
literal|null
argument_list|)
return|;
block|}
try|try
block|{
return|return
name|jsonReader
operator|.
name|parseStruct
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|(
name|t
operator|.
name|getBytes
argument_list|()
operator|)
argument_list|,
literal|0
argument_list|,
name|t
operator|.
name|getLength
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Problem parsing JSON text [{}]."
argument_list|,
name|t
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Given an object and object inspector pair, traverse the object    * and generate a Text representation of the object.    */
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|,
specifier|final
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
specifier|final
name|String
name|jsonText
init|=
name|this
operator|.
name|jsonWriter
operator|.
name|write
argument_list|(
name|obj
argument_list|,
name|objInspector
argument_list|)
decl_stmt|;
return|return
operator|new
name|Text
argument_list|(
name|jsonText
argument_list|)
return|;
block|}
comment|/**    * Returns an object inspector for the specified schema that is capable of    * reading in the object representation of the JSON string.    */
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|jsonReader
operator|.
name|getObjectInspector
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|Text
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
comment|// no support for statistics yet
return|return
literal|null
return|;
block|}
specifier|public
name|StructTypeInfo
name|getTypeInfo
parameter_list|()
block|{
return|return
name|rowTypeInfo
return|;
block|}
specifier|public
name|BinaryEncoding
name|getBinaryEncoding
parameter_list|()
block|{
return|return
name|binaryEncoding
return|;
block|}
specifier|public
name|boolean
name|isNullEmptyLines
parameter_list|()
block|{
return|return
name|nullEmptyLines
return|;
block|}
block|}
end_class

end_unit

