begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|BinarySortableSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|InputByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/*  * Directly deserialize with the caller reading field-by-field the LazyBinary serialization format.  *  * The caller is responsible for calling the read method for the right type of each field  * (after calling readCheckNull).  *  * Reading some fields require a results object to receive value information.  A separate  * results object is created by the caller at initialization per different field even for the same  * type.   *  * Some type values are by reference to either bytes in the deserialization buffer or to  * other type specific buffers.  So, those references are only valid until the next time set is  * called.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|BinarySortableDeserializeRead
implements|implements
name|DeserializeRead
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|BinarySortableDeserializeRead
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|TypeInfo
index|[]
name|typeInfos
decl_stmt|;
comment|// The sort order (ascending/descending) for each field. Set to true when descending (invert).
specifier|private
name|boolean
index|[]
name|columnSortOrderIsDesc
decl_stmt|;
comment|// Which field we are on.  We start with -1 so readCheckNull can increment once and the read
comment|// field data methods don't increment.
specifier|private
name|int
name|fieldIndex
decl_stmt|;
specifier|private
name|int
name|fieldCount
decl_stmt|;
specifier|private
name|int
name|start
decl_stmt|;
specifier|private
name|DecimalTypeInfo
name|saveDecimalTypeInfo
decl_stmt|;
specifier|private
name|HiveDecimal
name|saveDecimal
decl_stmt|;
specifier|private
name|byte
index|[]
name|tempDecimalBuffer
decl_stmt|;
specifier|private
name|HiveDecimalWritable
name|tempHiveDecimalWritable
decl_stmt|;
specifier|private
name|boolean
name|readBeyondConfiguredFieldsWarned
decl_stmt|;
specifier|private
name|boolean
name|readBeyondBufferRangeWarned
decl_stmt|;
specifier|private
name|boolean
name|bufferRangeHasExtraDataWarned
decl_stmt|;
specifier|private
name|InputByteBuffer
name|inputByteBuffer
init|=
operator|new
name|InputByteBuffer
argument_list|()
decl_stmt|;
comment|/*    * Use this constructor when only ascending sort order is used.    */
specifier|public
name|BinarySortableDeserializeRead
parameter_list|(
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
parameter_list|)
block|{
name|this
argument_list|(
name|primitiveTypeInfos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|BinarySortableDeserializeRead
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|boolean
index|[]
name|columnSortOrderIsDesc
parameter_list|)
block|{
name|this
operator|.
name|typeInfos
operator|=
name|typeInfos
expr_stmt|;
name|fieldCount
operator|=
name|typeInfos
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|columnSortOrderIsDesc
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|columnSortOrderIsDesc
operator|=
name|columnSortOrderIsDesc
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|columnSortOrderIsDesc
operator|=
operator|new
name|boolean
index|[
name|typeInfos
operator|.
name|length
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|this
operator|.
name|columnSortOrderIsDesc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|inputByteBuffer
operator|=
operator|new
name|InputByteBuffer
argument_list|()
expr_stmt|;
name|readBeyondConfiguredFieldsWarned
operator|=
literal|false
expr_stmt|;
name|readBeyondBufferRangeWarned
operator|=
literal|false
expr_stmt|;
name|bufferRangeHasExtraDataWarned
operator|=
literal|false
expr_stmt|;
block|}
comment|// Not public since we must have column information.
specifier|private
name|BinarySortableDeserializeRead
parameter_list|()
block|{   }
comment|/*    * The primitive type information for all fields.    */
specifier|public
name|TypeInfo
index|[]
name|typeInfos
parameter_list|()
block|{
return|return
name|typeInfos
return|;
block|}
comment|/*    * Set the range of bytes to be deserialized.    */
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|fieldIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|inputByteBuffer
operator|.
name|reset
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|)
expr_stmt|;
name|start
operator|=
name|offset
expr_stmt|;
block|}
comment|/*    * Reads the NULL information for a field.    *    * @return Returns true when the field is NULL; reading is positioned to the next field.    *         Otherwise, false when the field is NOT NULL; reading is positioned to the field data.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readCheckNull
parameter_list|()
throws|throws
name|IOException
block|{
comment|// We start with fieldIndex as -1 so we can increment once here and then the read
comment|// field data methods don't increment.
name|fieldIndex
operator|++
expr_stmt|;
if|if
condition|(
name|fieldIndex
operator|>=
name|fieldCount
condition|)
block|{
comment|// Reading beyond the specified field count produces NULL.
if|if
condition|(
operator|!
name|readBeyondConfiguredFieldsWarned
condition|)
block|{
comment|// Warn only once.
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading beyond configured fields! Configured "
operator|+
name|fieldCount
operator|+
literal|" fields but "
operator|+
literal|" reading more (NULLs returned).  Ignoring similar problems."
argument_list|)
expr_stmt|;
name|readBeyondConfiguredFieldsWarned
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|inputByteBuffer
operator|.
name|isEof
argument_list|()
condition|)
block|{
comment|// Also, reading beyond our byte range produces NULL.
if|if
condition|(
operator|!
name|readBeyondBufferRangeWarned
condition|)
block|{
comment|// Warn only once.
name|int
name|length
init|=
name|inputByteBuffer
operator|.
name|tell
argument_list|()
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading beyond buffer range! Buffer range "
operator|+
name|start
operator|+
literal|" for length "
operator|+
name|length
operator|+
literal|" but reading more... "
operator|+
literal|"(total buffer length "
operator|+
name|inputByteBuffer
operator|.
name|getData
argument_list|()
operator|.
name|length
operator|+
literal|")"
operator|+
literal|"  Ignoring similar problems."
argument_list|)
expr_stmt|;
name|readBeyondBufferRangeWarned
operator|=
literal|true
expr_stmt|;
block|}
comment|// We cannot read beyond so we must return NULL here.
return|return
literal|true
return|;
block|}
name|byte
name|isNull
init|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNull
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// We have a field and are positioned to it.
if|if
condition|(
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfos
index|[
name|fieldIndex
index|]
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
operator|!=
name|PrimitiveCategory
operator|.
name|DECIMAL
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Since enforcing precision and scale may turn a HiveDecimal into a NULL, we must read
comment|// it here.
return|return
name|earlyReadHiveDecimal
argument_list|()
return|;
block|}
comment|/*    * Call this method after all fields have been read to check for extra fields.    */
specifier|public
name|void
name|extraFieldsCheck
parameter_list|()
block|{
if|if
condition|(
operator|!
name|inputByteBuffer
operator|.
name|isEof
argument_list|()
condition|)
block|{
comment|// We did not consume all of the byte range.
if|if
condition|(
operator|!
name|bufferRangeHasExtraDataWarned
condition|)
block|{
comment|// Warn only once.
name|int
name|length
init|=
name|inputByteBuffer
operator|.
name|getEnd
argument_list|()
operator|-
name|start
decl_stmt|;
name|int
name|remaining
init|=
name|inputByteBuffer
operator|.
name|getEnd
argument_list|()
operator|-
name|inputByteBuffer
operator|.
name|tell
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Not all fields were read in the buffer range! Buffer range "
operator|+
name|start
operator|+
literal|" for length "
operator|+
name|length
operator|+
literal|" but "
operator|+
name|remaining
operator|+
literal|" bytes remain. "
operator|+
literal|"(total buffer length "
operator|+
name|inputByteBuffer
operator|.
name|getData
argument_list|()
operator|.
name|length
operator|+
literal|")"
operator|+
literal|"  Ignoring similar problems."
argument_list|)
expr_stmt|;
name|bufferRangeHasExtraDataWarned
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Read integrity warning flags.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readBeyondConfiguredFieldsWarned
parameter_list|()
block|{
return|return
name|readBeyondConfiguredFieldsWarned
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readBeyondBufferRangeWarned
parameter_list|()
block|{
return|return
name|readBeyondBufferRangeWarned
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|bufferRangeHasExtraDataWarned
parameter_list|()
block|{
return|return
name|bufferRangeHasExtraDataWarned
return|;
block|}
comment|/*    * BOOLEAN.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readBoolean
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
name|b
init|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
argument_list|)
decl_stmt|;
return|return
operator|(
name|b
operator|==
literal|2
operator|)
return|;
block|}
comment|/*    * BYTE.    */
annotation|@
name|Override
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
return|return
call|(
name|byte
call|)
argument_list|(
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
argument_list|)
operator|^
literal|0x80
argument_list|)
return|;
block|}
comment|/*    * SHORT.    */
annotation|@
name|Override
specifier|public
name|short
name|readShort
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|invert
init|=
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
decl_stmt|;
name|int
name|v
init|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|^
literal|0x80
decl_stmt|;
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
return|return
operator|(
name|short
operator|)
name|v
return|;
block|}
comment|/*    * INT.    */
annotation|@
name|Override
specifier|public
name|int
name|readInt
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|invert
init|=
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
decl_stmt|;
name|int
name|v
init|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|^
literal|0x80
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
comment|/*    * LONG.    */
annotation|@
name|Override
specifier|public
name|long
name|readLong
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|invert
init|=
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
decl_stmt|;
name|long
name|v
init|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|^
literal|0x80
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
return|return
name|v
return|;
block|}
comment|/*    * FLOAT.    */
annotation|@
name|Override
specifier|public
name|float
name|readFloat
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|invert
init|=
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
decl_stmt|;
name|int
name|v
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|v
operator|&
operator|(
literal|1
operator|<<
literal|31
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
comment|// negative number, flip all bits
name|v
operator|=
operator|~
name|v
expr_stmt|;
block|}
else|else
block|{
comment|// positive number, flip the first bit
name|v
operator|=
name|v
operator|^
operator|(
literal|1
operator|<<
literal|31
operator|)
expr_stmt|;
block|}
return|return
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|v
argument_list|)
return|;
block|}
comment|/*    * DOUBLE.    */
annotation|@
name|Override
specifier|public
name|double
name|readDouble
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|boolean
name|invert
init|=
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
decl_stmt|;
name|long
name|v
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|8
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|v
operator|&
operator|(
literal|1L
operator|<<
literal|63
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
comment|// negative number, flip all bits
name|v
operator|=
operator|~
name|v
expr_stmt|;
block|}
else|else
block|{
comment|// positive number, flip the first bit
name|v
operator|=
name|v
operator|^
operator|(
literal|1L
operator|<<
literal|63
operator|)
expr_stmt|;
block|}
return|return
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|v
argument_list|)
return|;
block|}
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|BinarySortableReadStringResults
extends|extends
name|ReadStringResults
block|{
comment|// Use an org.apache.hadoop.io.Text object as a buffer to decode the BinarySortable
comment|// format string into.
specifier|private
name|Text
name|text
decl_stmt|;
specifier|public
name|BinarySortableReadStringResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|text
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Reading a STRING field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different bytes field.
annotation|@
name|Override
specifier|public
name|ReadStringResults
name|createReadStringResults
parameter_list|()
block|{
return|return
operator|new
name|BinarySortableReadStringResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readString
parameter_list|(
name|ReadStringResults
name|readStringResults
parameter_list|)
throws|throws
name|IOException
block|{
name|BinarySortableReadStringResults
name|binarySortableReadStringResults
init|=
operator|(
name|BinarySortableReadStringResults
operator|)
name|readStringResults
decl_stmt|;
name|BinarySortableSerDe
operator|.
name|deserializeText
argument_list|(
name|inputByteBuffer
argument_list|,
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
argument_list|,
name|binarySortableReadStringResults
operator|.
name|text
argument_list|)
expr_stmt|;
name|readStringResults
operator|.
name|bytes
operator|=
name|binarySortableReadStringResults
operator|.
name|text
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|readStringResults
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|readStringResults
operator|.
name|length
operator|=
name|binarySortableReadStringResults
operator|.
name|text
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|/*    * CHAR.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|BinarySortableReadHiveCharResults
extends|extends
name|ReadHiveCharResults
block|{
specifier|public
name|BinarySortableReadHiveCharResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveCharWritable
name|getHiveCharWritable
parameter_list|()
block|{
return|return
name|hiveCharWritable
return|;
block|}
block|}
comment|// Reading a CHAR field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different CHAR field.
annotation|@
name|Override
specifier|public
name|ReadHiveCharResults
name|createReadHiveCharResults
parameter_list|()
block|{
return|return
operator|new
name|BinarySortableReadHiveCharResults
argument_list|()
return|;
block|}
specifier|public
name|void
name|readHiveChar
parameter_list|(
name|ReadHiveCharResults
name|readHiveCharResults
parameter_list|)
throws|throws
name|IOException
block|{
name|BinarySortableReadHiveCharResults
name|binarySortableReadHiveCharResults
init|=
operator|(
name|BinarySortableReadHiveCharResults
operator|)
name|readHiveCharResults
decl_stmt|;
if|if
condition|(
operator|!
name|binarySortableReadHiveCharResults
operator|.
name|isInit
argument_list|()
condition|)
block|{
name|binarySortableReadHiveCharResults
operator|.
name|init
argument_list|(
operator|(
name|CharTypeInfo
operator|)
name|typeInfos
index|[
name|fieldIndex
index|]
argument_list|)
expr_stmt|;
block|}
name|HiveCharWritable
name|hiveCharWritable
init|=
name|binarySortableReadHiveCharResults
operator|.
name|getHiveCharWritable
argument_list|()
decl_stmt|;
comment|// Decode the bytes into our Text buffer, then truncate.
name|BinarySortableSerDe
operator|.
name|deserializeText
argument_list|(
name|inputByteBuffer
argument_list|,
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
argument_list|,
name|hiveCharWritable
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
name|hiveCharWritable
operator|.
name|enforceMaxLength
argument_list|(
name|binarySortableReadHiveCharResults
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
name|readHiveCharResults
operator|.
name|bytes
operator|=
name|hiveCharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|readHiveCharResults
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|readHiveCharResults
operator|.
name|length
operator|=
name|hiveCharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|/*    * VARCHAR.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|BinarySortableReadHiveVarcharResults
extends|extends
name|ReadHiveVarcharResults
block|{
specifier|public
name|BinarySortableReadHiveVarcharResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveVarcharWritable
name|getHiveVarcharWritable
parameter_list|()
block|{
return|return
name|hiveVarcharWritable
return|;
block|}
block|}
comment|// Reading a VARCHAR field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different VARCHAR field.
annotation|@
name|Override
specifier|public
name|ReadHiveVarcharResults
name|createReadHiveVarcharResults
parameter_list|()
block|{
return|return
operator|new
name|BinarySortableReadHiveVarcharResults
argument_list|()
return|;
block|}
specifier|public
name|void
name|readHiveVarchar
parameter_list|(
name|ReadHiveVarcharResults
name|readHiveVarcharResults
parameter_list|)
throws|throws
name|IOException
block|{
name|BinarySortableReadHiveVarcharResults
name|binarySortableReadHiveVarcharResults
init|=
operator|(
name|BinarySortableReadHiveVarcharResults
operator|)
name|readHiveVarcharResults
decl_stmt|;
if|if
condition|(
operator|!
name|binarySortableReadHiveVarcharResults
operator|.
name|isInit
argument_list|()
condition|)
block|{
name|binarySortableReadHiveVarcharResults
operator|.
name|init
argument_list|(
operator|(
name|VarcharTypeInfo
operator|)
name|typeInfos
index|[
name|fieldIndex
index|]
argument_list|)
expr_stmt|;
block|}
name|HiveVarcharWritable
name|hiveVarcharWritable
init|=
name|binarySortableReadHiveVarcharResults
operator|.
name|getHiveVarcharWritable
argument_list|()
decl_stmt|;
comment|// Decode the bytes into our Text buffer, then truncate.
name|BinarySortableSerDe
operator|.
name|deserializeText
argument_list|(
name|inputByteBuffer
argument_list|,
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
argument_list|,
name|hiveVarcharWritable
operator|.
name|getTextValue
argument_list|()
argument_list|)
expr_stmt|;
name|hiveVarcharWritable
operator|.
name|enforceMaxLength
argument_list|(
name|binarySortableReadHiveVarcharResults
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
name|readHiveVarcharResults
operator|.
name|bytes
operator|=
name|hiveVarcharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|readHiveVarcharResults
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|readHiveVarcharResults
operator|.
name|length
operator|=
name|hiveVarcharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|/*    * BINARY.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|BinarySortableReadBinaryResults
extends|extends
name|ReadBinaryResults
block|{
comment|// Use an org.apache.hadoop.io.Text object as a buffer to decode the BinarySortable
comment|// format string into.
specifier|private
name|Text
name|text
decl_stmt|;
specifier|public
name|BinarySortableReadBinaryResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|text
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Reading a BINARY field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different bytes field.
annotation|@
name|Override
specifier|public
name|ReadBinaryResults
name|createReadBinaryResults
parameter_list|()
block|{
return|return
operator|new
name|BinarySortableReadBinaryResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readBinary
parameter_list|(
name|ReadBinaryResults
name|readBinaryResults
parameter_list|)
throws|throws
name|IOException
block|{
name|BinarySortableReadBinaryResults
name|binarySortableReadBinaryResults
init|=
operator|(
name|BinarySortableReadBinaryResults
operator|)
name|readBinaryResults
decl_stmt|;
name|BinarySortableSerDe
operator|.
name|deserializeText
argument_list|(
name|inputByteBuffer
argument_list|,
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
argument_list|,
name|binarySortableReadBinaryResults
operator|.
name|text
argument_list|)
expr_stmt|;
name|readBinaryResults
operator|.
name|bytes
operator|=
name|binarySortableReadBinaryResults
operator|.
name|text
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|readBinaryResults
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|readBinaryResults
operator|.
name|length
operator|=
name|binarySortableReadBinaryResults
operator|.
name|text
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|/*    * DATE.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|BinarySortableReadDateResults
extends|extends
name|ReadDateResults
block|{
specifier|public
name|BinarySortableReadDateResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DateWritable
name|getDateWritable
parameter_list|()
block|{
return|return
name|dateWritable
return|;
block|}
block|}
comment|// Reading a DATE field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different DATE field.
annotation|@
name|Override
specifier|public
name|ReadDateResults
name|createReadDateResults
parameter_list|()
block|{
return|return
operator|new
name|BinarySortableReadDateResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readDate
parameter_list|(
name|ReadDateResults
name|readDateResults
parameter_list|)
throws|throws
name|IOException
block|{
name|BinarySortableReadDateResults
name|binarySortableReadDateResults
init|=
operator|(
name|BinarySortableReadDateResults
operator|)
name|readDateResults
decl_stmt|;
specifier|final
name|boolean
name|invert
init|=
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
decl_stmt|;
name|int
name|v
init|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|^
literal|0x80
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
name|DateWritable
name|dateWritable
init|=
name|binarySortableReadDateResults
operator|.
name|getDateWritable
argument_list|()
decl_stmt|;
name|dateWritable
operator|.
name|set
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
comment|/*    * TIMESTAMP.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|BinarySortableReadTimestampResults
extends|extends
name|ReadTimestampResults
block|{
specifier|private
name|byte
index|[]
name|timestampBytes
decl_stmt|;
specifier|public
name|BinarySortableReadTimestampResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|timestampBytes
operator|=
operator|new
name|byte
index|[
name|TimestampWritable
operator|.
name|BINARY_SORTABLE_LENGTH
index|]
expr_stmt|;
block|}
specifier|public
name|TimestampWritable
name|getTimestampWritable
parameter_list|()
block|{
return|return
name|timestampWritable
return|;
block|}
block|}
comment|// Reading a TIMESTAMP field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different TIMESTAMP field.
annotation|@
name|Override
specifier|public
name|ReadTimestampResults
name|createReadTimestampResults
parameter_list|()
block|{
return|return
operator|new
name|BinarySortableReadTimestampResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readTimestamp
parameter_list|(
name|ReadTimestampResults
name|readTimestampResults
parameter_list|)
throws|throws
name|IOException
block|{
name|BinarySortableReadTimestampResults
name|binarySortableReadTimestampResults
init|=
operator|(
name|BinarySortableReadTimestampResults
operator|)
name|readTimestampResults
decl_stmt|;
specifier|final
name|boolean
name|invert
init|=
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
decl_stmt|;
name|byte
index|[]
name|timestampBytes
init|=
name|binarySortableReadTimestampResults
operator|.
name|timestampBytes
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|timestampBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|timestampBytes
index|[
name|i
index|]
operator|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
expr_stmt|;
block|}
name|TimestampWritable
name|timestampWritable
init|=
name|binarySortableReadTimestampResults
operator|.
name|getTimestampWritable
argument_list|()
decl_stmt|;
name|timestampWritable
operator|.
name|setBinarySortable
argument_list|(
name|timestampBytes
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/*    * INTERVAL_YEAR_MONTH.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|BinarySortableReadIntervalYearMonthResults
extends|extends
name|ReadIntervalYearMonthResults
block|{
specifier|public
name|BinarySortableReadIntervalYearMonthResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveIntervalYearMonthWritable
name|getHiveIntervalYearMonthWritable
parameter_list|()
block|{
return|return
name|hiveIntervalYearMonthWritable
return|;
block|}
block|}
comment|// Reading a INTERVAL_YEAR_MONTH field require a results object to receive value information.
comment|// A separate results object is created by the caller at initialization per different
comment|// INTERVAL_YEAR_MONTH field.
annotation|@
name|Override
specifier|public
name|ReadIntervalYearMonthResults
name|createReadIntervalYearMonthResults
parameter_list|()
block|{
return|return
operator|new
name|BinarySortableReadIntervalYearMonthResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readIntervalYearMonth
parameter_list|(
name|ReadIntervalYearMonthResults
name|readIntervalYearMonthResults
parameter_list|)
throws|throws
name|IOException
block|{
name|BinarySortableReadIntervalYearMonthResults
name|binarySortableReadIntervalYearMonthResults
init|=
operator|(
name|BinarySortableReadIntervalYearMonthResults
operator|)
name|readIntervalYearMonthResults
decl_stmt|;
specifier|final
name|boolean
name|invert
init|=
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
decl_stmt|;
name|int
name|v
init|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|^
literal|0x80
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
name|HiveIntervalYearMonthWritable
name|hiveIntervalYearMonthWritable
init|=
name|binarySortableReadIntervalYearMonthResults
operator|.
name|getHiveIntervalYearMonthWritable
argument_list|()
decl_stmt|;
name|hiveIntervalYearMonthWritable
operator|.
name|set
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
comment|/*    * INTERVAL_DAY_TIME.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|BinarySortableReadIntervalDayTimeResults
extends|extends
name|ReadIntervalDayTimeResults
block|{
specifier|public
name|BinarySortableReadIntervalDayTimeResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveIntervalDayTimeWritable
name|getHiveIntervalDayTimeWritable
parameter_list|()
block|{
return|return
name|hiveIntervalDayTimeWritable
return|;
block|}
block|}
comment|// Reading a INTERVAL_DAY_TIME field require a results object to receive value information.
comment|// A separate results object is created by the caller at initialization per different
comment|// INTERVAL_DAY_TIME field.
annotation|@
name|Override
specifier|public
name|ReadIntervalDayTimeResults
name|createReadIntervalDayTimeResults
parameter_list|()
block|{
return|return
operator|new
name|BinarySortableReadIntervalDayTimeResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readIntervalDayTime
parameter_list|(
name|ReadIntervalDayTimeResults
name|readIntervalDayTimeResults
parameter_list|)
throws|throws
name|IOException
block|{
name|BinarySortableReadIntervalDayTimeResults
name|binarySortableReadIntervalDayTimeResults
init|=
operator|(
name|BinarySortableReadIntervalDayTimeResults
operator|)
name|readIntervalDayTimeResults
decl_stmt|;
specifier|final
name|boolean
name|invert
init|=
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
decl_stmt|;
name|long
name|totalSecs
init|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|^
literal|0x80
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|7
condition|;
name|i
operator|++
control|)
block|{
name|totalSecs
operator|=
operator|(
name|totalSecs
operator|<<
literal|8
operator|)
operator|+
operator|(
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
name|int
name|nanos
init|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|^
literal|0x80
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|nanos
operator|=
operator|(
name|nanos
operator|<<
literal|8
operator|)
operator|+
operator|(
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
name|HiveIntervalDayTimeWritable
name|hiveIntervalDayTimeWritable
init|=
name|binarySortableReadIntervalDayTimeResults
operator|.
name|getHiveIntervalDayTimeWritable
argument_list|()
decl_stmt|;
name|hiveIntervalDayTimeWritable
operator|.
name|set
argument_list|(
name|totalSecs
argument_list|,
name|nanos
argument_list|)
expr_stmt|;
block|}
comment|/*    * DECIMAL.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|BinarySortableReadDecimalResults
extends|extends
name|ReadDecimalResults
block|{
specifier|public
name|HiveDecimal
name|hiveDecimal
decl_stmt|;
specifier|public
name|BinarySortableReadDecimalResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
name|DecimalTypeInfo
name|decimalTypeInfo
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|decimalTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HiveDecimal
name|getHiveDecimal
parameter_list|()
block|{
return|return
name|hiveDecimal
return|;
block|}
block|}
comment|// Reading a DECIMAL field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different DECIMAL field.
annotation|@
name|Override
specifier|public
name|ReadDecimalResults
name|createReadDecimalResults
parameter_list|()
block|{
return|return
operator|new
name|BinarySortableReadDecimalResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readHiveDecimal
parameter_list|(
name|ReadDecimalResults
name|readDecimalResults
parameter_list|)
throws|throws
name|IOException
block|{
name|BinarySortableReadDecimalResults
name|binarySortableReadDecimalResults
init|=
operator|(
name|BinarySortableReadDecimalResults
operator|)
name|readDecimalResults
decl_stmt|;
if|if
condition|(
operator|!
name|binarySortableReadDecimalResults
operator|.
name|isInit
argument_list|()
condition|)
block|{
name|binarySortableReadDecimalResults
operator|.
name|init
argument_list|(
name|saveDecimalTypeInfo
argument_list|)
expr_stmt|;
block|}
name|binarySortableReadDecimalResults
operator|.
name|hiveDecimal
operator|=
name|saveDecimal
expr_stmt|;
name|saveDecimal
operator|=
literal|null
expr_stmt|;
name|saveDecimalTypeInfo
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * We read the whole HiveDecimal value and then enforce precision and scale, which may    * make it a NULL.    * @return     Returns true if this HiveDecimal enforced to a NULL.    * @throws IOException     */
specifier|private
name|boolean
name|earlyReadHiveDecimal
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Since enforcing precision and scale can cause a HiveDecimal to become NULL,
comment|// we must read it, enforce it here, and either return NULL or buffer the result.
specifier|final
name|boolean
name|invert
init|=
name|columnSortOrderIsDesc
index|[
name|fieldIndex
index|]
decl_stmt|;
name|int
name|b
init|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|-
literal|1
decl_stmt|;
assert|assert
operator|(
name|b
operator|==
literal|1
operator|||
name|b
operator|==
operator|-
literal|1
operator|||
name|b
operator|==
literal|0
operator|)
assert|;
name|boolean
name|positive
init|=
name|b
operator|!=
operator|-
literal|1
decl_stmt|;
name|int
name|factor
init|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|^
literal|0x80
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|factor
operator|=
operator|(
name|factor
operator|<<
literal|8
operator|)
operator|+
operator|(
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|invert
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|positive
condition|)
block|{
name|factor
operator|=
operator|-
name|factor
expr_stmt|;
block|}
name|int
name|start
init|=
name|inputByteBuffer
operator|.
name|tell
argument_list|()
decl_stmt|;
name|int
name|length
init|=
literal|0
decl_stmt|;
do|do
block|{
name|b
operator|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|positive
condition|?
name|invert
else|:
operator|!
name|invert
argument_list|)
expr_stmt|;
assert|assert
operator|(
name|b
operator|!=
literal|1
operator|)
assert|;
if|if
condition|(
name|b
operator|==
literal|0
condition|)
block|{
comment|// end of digits
break|break;
block|}
name|length
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
if|if
condition|(
name|tempDecimalBuffer
operator|==
literal|null
operator|||
name|tempDecimalBuffer
operator|.
name|length
operator|<
name|length
condition|)
block|{
name|tempDecimalBuffer
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
block|}
name|inputByteBuffer
operator|.
name|seek
argument_list|(
name|start
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|tempDecimalBuffer
index|[
name|i
index|]
operator|=
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|positive
condition|?
name|invert
else|:
operator|!
name|invert
argument_list|)
expr_stmt|;
block|}
comment|// read the null byte again
name|inputByteBuffer
operator|.
name|read
argument_list|(
name|positive
condition|?
name|invert
else|:
operator|!
name|invert
argument_list|)
expr_stmt|;
name|String
name|digits
init|=
operator|new
name|String
argument_list|(
name|tempDecimalBuffer
argument_list|,
literal|0
argument_list|,
name|length
argument_list|,
name|BinarySortableSerDe
operator|.
name|decimalCharSet
argument_list|)
decl_stmt|;
name|BigInteger
name|bi
init|=
operator|new
name|BigInteger
argument_list|(
name|digits
argument_list|)
decl_stmt|;
name|HiveDecimal
name|bd
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|bi
argument_list|)
operator|.
name|scaleByPowerOfTen
argument_list|(
name|factor
operator|-
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|positive
condition|)
block|{
name|bd
operator|=
name|bd
operator|.
name|negate
argument_list|()
expr_stmt|;
block|}
comment|// We have a decimal.  After we enforce precision and scale, will it become a NULL?
if|if
condition|(
name|tempHiveDecimalWritable
operator|==
literal|null
condition|)
block|{
name|tempHiveDecimalWritable
operator|=
operator|new
name|HiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
name|tempHiveDecimalWritable
operator|.
name|set
argument_list|(
name|bd
argument_list|)
expr_stmt|;
name|saveDecimalTypeInfo
operator|=
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfos
index|[
name|fieldIndex
index|]
expr_stmt|;
name|int
name|precision
init|=
name|saveDecimalTypeInfo
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|saveDecimalTypeInfo
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|saveDecimal
operator|=
name|tempHiveDecimalWritable
operator|.
name|getHiveDecimal
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
comment|// Now return whether it is NULL or NOT NULL.
return|return
operator|(
name|saveDecimal
operator|==
literal|null
operator|)
return|;
block|}
block|}
end_class

end_unit

