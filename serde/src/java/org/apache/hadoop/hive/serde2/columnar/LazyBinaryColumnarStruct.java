begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyObjectBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_class
specifier|public
class|class
name|LazyBinaryColumnarStruct
extends|extends
name|ColumnarStructBase
block|{
specifier|public
name|LazyBinaryColumnarStruct
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|List
argument_list|<
name|Integer
argument_list|>
name|notSkippedColumnIDs
parameter_list|)
block|{
name|super
argument_list|(
name|oi
argument_list|,
name|notSkippedColumnIDs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|int
name|getLength
parameter_list|(
name|ObjectInspector
name|objectInspector
parameter_list|,
name|ByteArrayRef
name|cachedByteArrayRef
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|Category
name|category
init|=
name|objectInspector
operator|.
name|getCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|category
operator|.
name|equals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|)
condition|)
block|{
name|PrimitiveCategory
name|primitiveCategory
init|=
operator|(
operator|(
name|PrimitiveObjectInspector
operator|)
name|objectInspector
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|primitiveCategory
operator|.
name|equals
argument_list|(
name|PrimitiveCategory
operator|.
name|STRING
argument_list|)
operator|&&
operator|(
name|length
operator|==
literal|1
operator|)
operator|&&
operator|(
name|cachedByteArrayRef
operator|.
name|getData
argument_list|()
index|[
name|start
index|]
operator|==
name|LazyBinaryColumnarSerDe
operator|.
name|INVALID_UTF__SINGLE_BYTE
index|[
literal|0
index|]
operator|)
condition|)
block|{
return|return
literal|0
return|;
block|}
block|}
return|return
name|length
return|;
block|}
annotation|@
name|Override
specifier|protected
name|LazyObjectBase
name|createLazyObjectBase
parameter_list|(
name|ObjectInspector
name|objectInspector
parameter_list|)
block|{
return|return
name|LazyBinaryFactory
operator|.
name|createLazyBinaryObject
argument_list|(
name|objectInspector
argument_list|)
return|;
block|}
block|}
end_class

end_unit

