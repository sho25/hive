begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|CharArrayReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|au
operator|.
name|com
operator|.
name|bytecode
operator|.
name|opencsv
operator|.
name|CSVReader
import|;
end_import

begin_import
import|import
name|au
operator|.
name|com
operator|.
name|bytecode
operator|.
name|opencsv
operator|.
name|CSVWriter
import|;
end_import

begin_comment
comment|/**  * OpenCSVSerde use opencsv to deserialize CSV format.  * Users can specify custom separator, quote or escape characters. And the default separator(\),  * quote("), and escape characters(\) are the same as the opencsv library.  *  */
end_comment

begin_class
annotation|@
name|SerDeSpec
argument_list|(
name|schemaProps
operator|=
block|{
name|serdeConstants
operator|.
name|LIST_COLUMNS
block|,
name|OpenCSVSerde
operator|.
name|SEPARATORCHAR
block|,
name|OpenCSVSerde
operator|.
name|QUOTECHAR
block|,
name|OpenCSVSerde
operator|.
name|ESCAPECHAR
block|}
argument_list|)
specifier|public
specifier|final
class|class
name|OpenCSVSerde
extends|extends
name|AbstractSerDe
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|OpenCSVSerde
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ObjectInspector
name|inspector
decl_stmt|;
specifier|private
name|String
index|[]
name|outputFields
decl_stmt|;
specifier|private
name|int
name|numCols
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|row
decl_stmt|;
specifier|private
name|char
name|separatorChar
decl_stmt|;
specifier|private
name|char
name|quoteChar
decl_stmt|;
specifier|private
name|char
name|escapeChar
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SEPARATORCHAR
init|=
literal|"separatorChar"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QUOTECHAR
init|=
literal|"quoteChar"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ESCAPECHAR
init|=
literal|"escapeChar"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|,
specifier|final
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|tbl
operator|.
name|getProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|numCols
operator|=
name|columnNames
operator|.
name|size
argument_list|()
expr_stmt|;
specifier|final
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|columnOIs
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|numCols
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|columnOIs
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
expr_stmt|;
block|}
name|inspector
operator|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|columnOIs
argument_list|)
expr_stmt|;
name|outputFields
operator|=
operator|new
name|String
index|[
name|numCols
index|]
expr_stmt|;
name|row
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|numCols
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
name|i
operator|++
control|)
block|{
name|row
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|separatorChar
operator|=
name|getProperty
argument_list|(
name|tbl
argument_list|,
name|SEPARATORCHAR
argument_list|,
name|CSVWriter
operator|.
name|DEFAULT_SEPARATOR
argument_list|)
expr_stmt|;
name|quoteChar
operator|=
name|getProperty
argument_list|(
name|tbl
argument_list|,
name|QUOTECHAR
argument_list|,
name|CSVWriter
operator|.
name|DEFAULT_QUOTE_CHARACTER
argument_list|)
expr_stmt|;
name|escapeChar
operator|=
name|getProperty
argument_list|(
name|tbl
argument_list|,
name|ESCAPECHAR
argument_list|,
name|CSVWriter
operator|.
name|DEFAULT_ESCAPE_CHARACTER
argument_list|)
expr_stmt|;
block|}
specifier|private
name|char
name|getProperty
parameter_list|(
specifier|final
name|Properties
name|tbl
parameter_list|,
specifier|final
name|String
name|property
parameter_list|,
specifier|final
name|char
name|def
parameter_list|)
block|{
specifier|final
name|String
name|val
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
return|return
name|val
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|def
return|;
block|}
annotation|@
name|Override
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|,
name|ObjectInspector
name|objInspector
parameter_list|)
throws|throws
name|SerDeException
block|{
specifier|final
name|StructObjectInspector
name|outputRowOI
init|=
operator|(
name|StructObjectInspector
operator|)
name|objInspector
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|outputFieldRefs
init|=
name|outputRowOI
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputFieldRefs
operator|.
name|size
argument_list|()
operator|!=
name|numCols
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Cannot serialize the object because there are "
operator|+
name|outputFieldRefs
operator|.
name|size
argument_list|()
operator|+
literal|" fields but the table has "
operator|+
name|numCols
operator|+
literal|" columns."
argument_list|)
throw|;
block|}
comment|// Get all data out.
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|numCols
condition|;
name|c
operator|++
control|)
block|{
specifier|final
name|Object
name|field
init|=
name|outputRowOI
operator|.
name|getStructFieldData
argument_list|(
name|obj
argument_list|,
name|outputFieldRefs
operator|.
name|get
argument_list|(
name|c
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ObjectInspector
name|fieldOI
init|=
name|outputFieldRefs
operator|.
name|get
argument_list|(
name|c
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
comment|// The data must be of type String
specifier|final
name|StringObjectInspector
name|fieldStringOI
init|=
operator|(
name|StringObjectInspector
operator|)
name|fieldOI
decl_stmt|;
comment|// Convert the field to Java class String, because objects of String type
comment|// can be stored in String, Text, or some other classes.
name|outputFields
index|[
name|c
index|]
operator|=
name|fieldStringOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|CSVWriter
name|csv
init|=
name|newWriter
argument_list|(
name|writer
argument_list|,
name|separatorChar
argument_list|,
name|quoteChar
argument_list|,
name|escapeChar
argument_list|)
decl_stmt|;
try|try
block|{
name|csv
operator|.
name|writeNext
argument_list|(
name|outputFields
argument_list|)
expr_stmt|;
name|csv
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|new
name|Text
argument_list|(
name|writer
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|ioe
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|deserialize
parameter_list|(
specifier|final
name|Writable
name|blob
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Text
name|rowText
init|=
operator|(
name|Text
operator|)
name|blob
decl_stmt|;
name|CSVReader
name|csv
init|=
literal|null
decl_stmt|;
try|try
block|{
name|csv
operator|=
name|newReader
argument_list|(
operator|new
name|CharArrayReader
argument_list|(
name|rowText
operator|.
name|toString
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|,
name|separatorChar
argument_list|,
name|quoteChar
argument_list|,
name|escapeChar
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|read
init|=
name|csv
operator|.
name|readNext
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numCols
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|read
operator|!=
literal|null
operator|&&
name|i
operator|<
name|read
operator|.
name|length
condition|)
block|{
name|row
operator|.
name|set
argument_list|(
name|i
argument_list|,
name|read
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|row
operator|.
name|set
argument_list|(
name|i
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|row
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|csv
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|csv
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"fail to close csv writer "
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|CSVReader
name|newReader
parameter_list|(
specifier|final
name|Reader
name|reader
parameter_list|,
name|char
name|separator
parameter_list|,
name|char
name|quote
parameter_list|,
name|char
name|escape
parameter_list|)
block|{
comment|// CSVReader will throw an exception if any of separator, quote, or escape is the same, but
comment|// the CSV format specifies that the escape character and quote char are the same... very weird
if|if
condition|(
name|CSVWriter
operator|.
name|DEFAULT_ESCAPE_CHARACTER
operator|==
name|escape
condition|)
block|{
return|return
operator|new
name|CSVReader
argument_list|(
name|reader
argument_list|,
name|separator
argument_list|,
name|quote
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|CSVReader
argument_list|(
name|reader
argument_list|,
name|separator
argument_list|,
name|quote
argument_list|,
name|escape
argument_list|)
return|;
block|}
block|}
specifier|private
name|CSVWriter
name|newWriter
parameter_list|(
specifier|final
name|Writer
name|writer
parameter_list|,
name|char
name|separator
parameter_list|,
name|char
name|quote
parameter_list|,
name|char
name|escape
parameter_list|)
block|{
if|if
condition|(
name|CSVWriter
operator|.
name|DEFAULT_ESCAPE_CHARACTER
operator|==
name|escape
condition|)
block|{
return|return
operator|new
name|CSVWriter
argument_list|(
name|writer
argument_list|,
name|separator
argument_list|,
name|quote
argument_list|,
literal|""
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|CSVWriter
argument_list|(
name|writer
argument_list|,
name|separator
argument_list|,
name|quote
argument_list|,
name|escape
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getObjectInspector
parameter_list|()
throws|throws
name|SerDeException
block|{
return|return
name|inspector
return|;
block|}
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|getSerializedClass
parameter_list|()
block|{
return|return
name|Text
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|SerDeStats
name|getSerDeStats
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

