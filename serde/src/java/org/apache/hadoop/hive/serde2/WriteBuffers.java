begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|RandomAccessOutput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|BinarySortableSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HashCodeUtil
import|;
end_import

begin_comment
comment|/**  * The structure storing arbitrary amount of data as a set of fixed-size byte buffers.  * Maintains read and write pointers for convenient single-threaded writing/reading.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|WriteBuffers
implements|implements
name|RandomAccessOutput
block|{
specifier|private
specifier|final
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
name|writeBuffers
init|=
operator|new
name|ArrayList
argument_list|<
name|byte
index|[]
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
comment|/** Buffer size in writeBuffers */
specifier|private
specifier|final
name|int
name|wbSize
decl_stmt|;
specifier|private
specifier|final
name|int
name|wbSizeLog2
decl_stmt|;
specifier|private
specifier|final
name|long
name|offsetMask
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxSize
decl_stmt|;
specifier|public
specifier|static
class|class
name|Position
block|{
specifier|private
name|byte
index|[]
name|buffer
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|bufferIndex
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|offset
init|=
literal|0
decl_stmt|;
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|buffer
operator|=
literal|null
expr_stmt|;
name|bufferIndex
operator|=
name|offset
operator|=
operator|-
literal|1
expr_stmt|;
block|}
block|}
name|Position
name|writePos
init|=
operator|new
name|Position
argument_list|()
decl_stmt|;
comment|// Position where we'd write
name|Position
name|defaultReadPos
init|=
operator|new
name|Position
argument_list|()
decl_stmt|;
comment|// Position where we'd read (by default).
specifier|public
name|WriteBuffers
parameter_list|(
name|int
name|wbSize
parameter_list|,
name|long
name|maxSize
parameter_list|)
block|{
name|this
operator|.
name|wbSize
operator|=
name|Integer
operator|.
name|bitCount
argument_list|(
name|wbSize
argument_list|)
operator|==
literal|1
condition|?
name|wbSize
else|:
name|Integer
operator|.
name|highestOneBit
argument_list|(
name|wbSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|wbSizeLog2
operator|=
literal|31
operator|-
name|Integer
operator|.
name|numberOfLeadingZeros
argument_list|(
name|this
operator|.
name|wbSize
argument_list|)
expr_stmt|;
name|this
operator|.
name|offsetMask
operator|=
name|this
operator|.
name|wbSize
operator|-
literal|1
expr_stmt|;
name|this
operator|.
name|maxSize
operator|=
name|maxSize
expr_stmt|;
name|writePos
operator|.
name|bufferIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|int
name|readVInt
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|readVLong
argument_list|(
name|defaultReadPos
argument_list|)
return|;
block|}
specifier|public
name|int
name|readVInt
parameter_list|(
name|Position
name|readPos
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|readVLong
argument_list|(
name|readPos
argument_list|)
return|;
block|}
specifier|public
name|long
name|readVLong
parameter_list|()
block|{
return|return
name|readVLong
argument_list|(
name|defaultReadPos
argument_list|)
return|;
block|}
specifier|public
name|long
name|readVLong
parameter_list|(
name|Position
name|readPos
parameter_list|)
block|{
name|ponderNextBufferToRead
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
name|byte
name|firstByte
init|=
name|readPos
operator|.
name|buffer
index|[
name|readPos
operator|.
name|offset
operator|++
index|]
decl_stmt|;
name|int
name|length
init|=
operator|(
name|byte
operator|)
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|firstByte
return|;
block|}
name|long
name|i
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isAllInOneReadBuffer
argument_list|(
name|length
argument_list|,
name|readPos
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|i
operator|=
operator|(
name|i
operator|<<
literal|8
operator|)
operator||
operator|(
name|readPos
operator|.
name|buffer
index|[
name|readPos
operator|.
name|offset
operator|+
name|idx
index|]
operator|&
literal|0xFF
operator|)
expr_stmt|;
block|}
name|readPos
operator|.
name|offset
operator|+=
name|length
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|length
condition|;
name|idx
operator|++
control|)
block|{
name|i
operator|=
operator|(
name|i
operator|<<
literal|8
operator|)
operator||
operator|(
name|readNextByte
argument_list|(
name|readPos
argument_list|)
operator|&
literal|0xFF
operator|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|WritableUtils
operator|.
name|isNegativeVInt
argument_list|(
name|firstByte
argument_list|)
condition|?
operator|(
name|i
operator|^
operator|-
literal|1L
operator|)
else|:
name|i
operator|)
return|;
block|}
specifier|public
name|void
name|skipVLong
parameter_list|()
block|{
name|skipVLong
argument_list|(
name|defaultReadPos
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|skipVLong
parameter_list|(
name|Position
name|readPos
parameter_list|)
block|{
name|ponderNextBufferToRead
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
name|byte
name|firstByte
init|=
name|readPos
operator|.
name|buffer
index|[
name|readPos
operator|.
name|offset
operator|++
index|]
decl_stmt|;
name|int
name|length
init|=
operator|(
name|byte
operator|)
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|firstByte
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|1
condition|)
block|{
name|readPos
operator|.
name|offset
operator|+=
operator|(
name|length
operator|-
literal|1
operator|)
expr_stmt|;
block|}
name|int
name|diff
init|=
name|readPos
operator|.
name|offset
operator|-
name|wbSize
decl_stmt|;
while|while
condition|(
name|diff
operator|>=
literal|0
condition|)
block|{
operator|++
name|readPos
operator|.
name|bufferIndex
expr_stmt|;
name|readPos
operator|.
name|buffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|readPos
operator|.
name|bufferIndex
argument_list|)
expr_stmt|;
name|readPos
operator|.
name|offset
operator|=
name|diff
expr_stmt|;
name|diff
operator|=
name|readPos
operator|.
name|offset
operator|-
name|wbSize
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setReadPoint
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|setReadPoint
argument_list|(
name|offset
argument_list|,
name|defaultReadPos
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setReadPoint
parameter_list|(
name|long
name|offset
parameter_list|,
name|Position
name|readPos
parameter_list|)
block|{
name|readPos
operator|.
name|bufferIndex
operator|=
name|getBufferIndex
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|readPos
operator|.
name|buffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|readPos
operator|.
name|bufferIndex
argument_list|)
expr_stmt|;
name|readPos
operator|.
name|offset
operator|=
name|getOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|hashCode
argument_list|(
name|offset
argument_list|,
name|length
argument_list|,
name|defaultReadPos
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|Position
name|readPos
parameter_list|)
block|{
name|setReadPoint
argument_list|(
name|offset
argument_list|,
name|readPos
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAllInOneReadBuffer
argument_list|(
name|length
argument_list|,
name|readPos
argument_list|)
condition|)
block|{
name|int
name|result
init|=
name|HashCodeUtil
operator|.
name|murmurHash
argument_list|(
name|readPos
operator|.
name|buffer
argument_list|,
name|readPos
operator|.
name|offset
argument_list|,
name|length
argument_list|)
decl_stmt|;
name|readPos
operator|.
name|offset
operator|+=
name|length
expr_stmt|;
return|return
name|result
return|;
block|}
comment|// Rare case of buffer boundary. Unfortunately we'd have to copy some bytes.
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
name|int
name|destOffset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|destOffset
operator|<
name|length
condition|)
block|{
name|ponderNextBufferToRead
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
name|int
name|toRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
operator|-
name|destOffset
argument_list|,
name|wbSize
operator|-
name|readPos
operator|.
name|offset
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|readPos
operator|.
name|buffer
argument_list|,
name|readPos
operator|.
name|offset
argument_list|,
name|bytes
argument_list|,
name|destOffset
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
name|readPos
operator|.
name|offset
operator|+=
name|toRead
expr_stmt|;
name|destOffset
operator|+=
name|toRead
expr_stmt|;
block|}
return|return
name|HashCodeUtil
operator|.
name|murmurHash
argument_list|(
name|bytes
argument_list|,
literal|0
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
return|;
block|}
specifier|private
name|byte
name|readNextByte
parameter_list|(
name|Position
name|readPos
parameter_list|)
block|{
comment|// This method is inefficient. It's only used when something crosses buffer boundaries.
name|ponderNextBufferToRead
argument_list|(
name|readPos
argument_list|)
expr_stmt|;
return|return
name|readPos
operator|.
name|buffer
index|[
name|readPos
operator|.
name|offset
operator|++
index|]
return|;
block|}
specifier|private
name|void
name|ponderNextBufferToRead
parameter_list|(
name|Position
name|readPos
parameter_list|)
block|{
if|if
condition|(
name|readPos
operator|.
name|offset
operator|>=
name|wbSize
condition|)
block|{
operator|++
name|readPos
operator|.
name|bufferIndex
expr_stmt|;
name|readPos
operator|.
name|buffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|readPos
operator|.
name|bufferIndex
argument_list|)
expr_stmt|;
name|readPos
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|hashCode
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
return|return
name|HashCodeUtil
operator|.
name|murmurHash
argument_list|(
name|key
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
specifier|private
name|void
name|setByte
parameter_list|(
name|long
name|offset
parameter_list|,
name|byte
name|value
parameter_list|)
block|{
comment|// No checks, the caller must ensure the offsets are correct.
name|writeBuffers
operator|.
name|get
argument_list|(
name|getBufferIndex
argument_list|(
name|offset
argument_list|)
argument_list|)
index|[
name|getOffset
argument_list|(
name|offset
argument_list|)
index|]
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reserve
parameter_list|(
name|int
name|byteCount
parameter_list|)
block|{
if|if
condition|(
name|byteCount
operator|<
literal|0
condition|)
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"byteCount must be non-negative"
argument_list|)
throw|;
name|int
name|currentWriteOffset
init|=
name|writePos
operator|.
name|offset
operator|+
name|byteCount
decl_stmt|;
while|while
condition|(
name|currentWriteOffset
operator|>
name|wbSize
condition|)
block|{
name|nextBufferToWrite
argument_list|()
expr_stmt|;
name|currentWriteOffset
operator|-=
name|wbSize
expr_stmt|;
block|}
name|writePos
operator|.
name|offset
operator|=
name|currentWriteOffset
expr_stmt|;
block|}
specifier|public
name|void
name|setWritePoint
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
name|writePos
operator|.
name|bufferIndex
operator|=
name|getBufferIndex
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|buffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|writePos
operator|.
name|bufferIndex
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|offset
operator|=
name|getOffset
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
block|{
if|if
condition|(
name|writePos
operator|.
name|offset
operator|==
name|wbSize
condition|)
block|{
name|nextBufferToWrite
argument_list|()
expr_stmt|;
block|}
name|writePos
operator|.
name|buffer
index|[
name|writePos
operator|.
name|offset
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
block|{
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|writePos
operator|.
name|bufferIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|nextBufferToWrite
argument_list|()
expr_stmt|;
block|}
name|int
name|srcOffset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|srcOffset
operator|<
name|len
condition|)
block|{
name|int
name|toWrite
init|=
name|Math
operator|.
name|min
argument_list|(
name|len
operator|-
name|srcOffset
argument_list|,
name|wbSize
operator|-
name|writePos
operator|.
name|offset
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|srcOffset
operator|+
name|off
argument_list|,
name|writePos
operator|.
name|buffer
argument_list|,
name|writePos
operator|.
name|offset
argument_list|,
name|toWrite
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|offset
operator|+=
name|toWrite
expr_stmt|;
name|srcOffset
operator|+=
name|toWrite
expr_stmt|;
if|if
condition|(
name|writePos
operator|.
name|offset
operator|==
name|wbSize
condition|)
block|{
name|nextBufferToWrite
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
operator|(
name|int
operator|)
name|getWritePoint
argument_list|()
return|;
block|}
specifier|private
name|int
name|getOffset
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|offset
operator|&
name|offsetMask
argument_list|)
return|;
block|}
specifier|private
name|int
name|getBufferIndex
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
return|return
call|(
name|int
call|)
argument_list|(
name|offset
operator|>>>
name|wbSizeLog2
argument_list|)
return|;
block|}
specifier|private
name|void
name|nextBufferToWrite
parameter_list|()
block|{
if|if
condition|(
name|writePos
operator|.
name|bufferIndex
operator|==
operator|(
name|writeBuffers
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|)
condition|)
block|{
if|if
condition|(
operator|(
literal|1
operator|+
name|writeBuffers
operator|.
name|size
argument_list|()
operator|)
operator|*
operator|(
operator|(
name|long
operator|)
name|wbSize
operator|)
operator|>
name|maxSize
condition|)
block|{
comment|// We could verify precisely at write time, but just do approximate at allocation time.
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Too much memory used by write buffers"
argument_list|)
throw|;
block|}
name|writeBuffers
operator|.
name|add
argument_list|(
operator|new
name|byte
index|[
name|wbSize
index|]
argument_list|)
expr_stmt|;
block|}
operator|++
name|writePos
operator|.
name|bufferIndex
expr_stmt|;
name|writePos
operator|.
name|buffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|writePos
operator|.
name|bufferIndex
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
block|}
comment|/** Compares two parts of the buffer with each other. Does not modify readPoint. */
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|long
name|leftOffset
parameter_list|,
name|int
name|leftLength
parameter_list|,
name|long
name|rightOffset
parameter_list|,
name|int
name|rightLength
parameter_list|)
block|{
if|if
condition|(
name|rightLength
operator|!=
name|leftLength
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|leftIndex
init|=
name|getBufferIndex
argument_list|(
name|leftOffset
argument_list|)
decl_stmt|,
name|rightIndex
init|=
name|getBufferIndex
argument_list|(
name|rightOffset
argument_list|)
decl_stmt|,
name|leftFrom
init|=
name|getOffset
argument_list|(
name|leftOffset
argument_list|)
decl_stmt|,
name|rightFrom
init|=
name|getOffset
argument_list|(
name|rightOffset
argument_list|)
decl_stmt|;
name|byte
index|[]
name|leftBuffer
init|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|leftIndex
argument_list|)
decl_stmt|,
name|rightBuffer
init|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|rightIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|leftFrom
operator|+
name|leftLength
operator|<=
name|wbSize
operator|&&
name|rightFrom
operator|+
name|rightLength
operator|<=
name|wbSize
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftLength
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|leftBuffer
index|[
name|leftFrom
operator|+
name|i
index|]
operator|!=
name|rightBuffer
index|[
name|rightFrom
operator|+
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftLength
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|leftFrom
operator|==
name|wbSize
condition|)
block|{
operator|++
name|leftIndex
expr_stmt|;
name|leftBuffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|leftIndex
argument_list|)
expr_stmt|;
name|leftFrom
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|rightFrom
operator|==
name|wbSize
condition|)
block|{
operator|++
name|rightIndex
expr_stmt|;
name|rightBuffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|rightIndex
argument_list|)
expr_stmt|;
name|rightFrom
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|leftBuffer
index|[
name|leftFrom
operator|++
index|]
operator|!=
name|rightBuffer
index|[
name|rightFrom
operator|++
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Compares part of the buffer with a part of an external byte array.    * Does not modify readPoint.    */
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|int
name|leftLength
parameter_list|,
name|long
name|rightOffset
parameter_list|,
name|int
name|rightLength
parameter_list|)
block|{
if|if
condition|(
name|rightLength
operator|!=
name|leftLength
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|rightIndex
init|=
name|getBufferIndex
argument_list|(
name|rightOffset
argument_list|)
decl_stmt|,
name|rightFrom
init|=
name|getOffset
argument_list|(
name|rightOffset
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rightBuffer
init|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|rightIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightFrom
operator|+
name|rightLength
operator|<=
name|wbSize
condition|)
block|{
comment|// TODO: allow using unsafe optionally.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftLength
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|left
index|[
name|i
index|]
operator|!=
name|rightBuffer
index|[
name|rightFrom
operator|+
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rightLength
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|rightFrom
operator|==
name|wbSize
condition|)
block|{
operator|++
name|rightIndex
expr_stmt|;
name|rightBuffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|rightIndex
argument_list|)
expr_stmt|;
name|rightFrom
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|left
index|[
name|i
index|]
operator|!=
name|rightBuffer
index|[
name|rightFrom
operator|++
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**    * Compares part of the buffer with a part of an external byte array.    * Does not modify readPoint.    */
specifier|public
name|boolean
name|isEqual
parameter_list|(
name|byte
index|[]
name|left
parameter_list|,
name|int
name|leftOffset
parameter_list|,
name|int
name|leftLength
parameter_list|,
name|long
name|rightOffset
parameter_list|,
name|int
name|rightLength
parameter_list|)
block|{
if|if
condition|(
name|rightLength
operator|!=
name|leftLength
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|rightIndex
init|=
name|getBufferIndex
argument_list|(
name|rightOffset
argument_list|)
decl_stmt|,
name|rightFrom
init|=
name|getOffset
argument_list|(
name|rightOffset
argument_list|)
decl_stmt|;
name|byte
index|[]
name|rightBuffer
init|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|rightIndex
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightFrom
operator|+
name|rightLength
operator|<=
name|wbSize
condition|)
block|{
comment|// TODO: allow using unsafe optionally.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|leftLength
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|left
index|[
name|leftOffset
operator|+
name|i
index|]
operator|!=
name|rightBuffer
index|[
name|rightFrom
operator|+
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rightLength
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|rightFrom
operator|==
name|wbSize
condition|)
block|{
operator|++
name|rightIndex
expr_stmt|;
name|rightBuffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|rightIndex
argument_list|)
expr_stmt|;
name|rightFrom
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|left
index|[
name|leftOffset
operator|+
name|i
index|]
operator|!=
name|rightBuffer
index|[
name|rightFrom
operator|++
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|writeBuffers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clearState
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|clearState
parameter_list|()
block|{
name|writePos
operator|.
name|clear
argument_list|()
expr_stmt|;
name|defaultReadPos
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|getWritePoint
parameter_list|()
block|{
if|if
condition|(
name|writePos
operator|.
name|bufferIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|nextBufferToWrite
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
operator|(
name|long
operator|)
name|writePos
operator|.
name|bufferIndex
operator|<<
name|wbSizeLog2
operator|)
operator|+
name|writePos
operator|.
name|offset
return|;
block|}
specifier|public
name|long
name|getReadPoint
parameter_list|()
block|{
return|return
name|getReadPoint
argument_list|(
name|defaultReadPos
argument_list|)
return|;
block|}
specifier|public
name|long
name|getReadPoint
parameter_list|(
name|Position
name|readPos
parameter_list|)
block|{
return|return
operator|(
name|readPos
operator|.
name|bufferIndex
operator|*
operator|(
name|long
operator|)
name|wbSize
operator|)
operator|+
name|readPos
operator|.
name|offset
return|;
block|}
specifier|public
name|void
name|getByteSegmentRefToCurrent
parameter_list|(
name|ByteSegmentRef
name|byteSegmentRef
parameter_list|,
name|int
name|length
parameter_list|,
name|Position
name|readPos
parameter_list|)
block|{
name|byteSegmentRef
operator|.
name|reset
argument_list|(
operator|(
name|readPos
operator|.
name|bufferIndex
operator|*
operator|(
name|long
operator|)
name|wbSize
operator|)
operator|+
name|readPos
operator|.
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|populateValue
argument_list|(
name|byteSegmentRef
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|writeVInt
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|LazyBinaryUtils
operator|.
name|writeVInt
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeVLong
parameter_list|(
name|long
name|value
parameter_list|)
block|{
name|LazyBinaryUtils
operator|.
name|writeVLong
argument_list|(
name|this
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/** Reads some bytes from the buffer and writes them again at current write point. */
specifier|public
name|void
name|writeBytes
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|readBufIndex
init|=
name|getBufferIndex
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|byte
index|[]
name|readBuffer
init|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|readBufIndex
argument_list|)
decl_stmt|;
name|int
name|readBufOffset
init|=
name|getOffset
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|int
name|srcOffset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|srcOffset
operator|<
name|length
condition|)
block|{
if|if
condition|(
name|readBufOffset
operator|==
name|wbSize
condition|)
block|{
operator|++
name|readBufIndex
expr_stmt|;
name|readBuffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|readBufIndex
argument_list|)
expr_stmt|;
name|readBufOffset
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|writePos
operator|.
name|offset
operator|==
name|wbSize
condition|)
block|{
name|nextBufferToWrite
argument_list|()
expr_stmt|;
block|}
comment|// How much we can read from current read buffer, out of what we need.
name|int
name|toRead
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
operator|-
name|srcOffset
argument_list|,
name|wbSize
operator|-
name|readBufOffset
argument_list|)
decl_stmt|;
comment|// How much we can write to current write buffer, out of what we need.
name|int
name|toWrite
init|=
name|Math
operator|.
name|min
argument_list|(
name|toRead
argument_list|,
name|wbSize
operator|-
name|writePos
operator|.
name|offset
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|readBuffer
argument_list|,
name|readBufOffset
argument_list|,
name|writePos
operator|.
name|buffer
argument_list|,
name|writePos
operator|.
name|offset
argument_list|,
name|toWrite
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|offset
operator|+=
name|toWrite
expr_stmt|;
name|readBufOffset
operator|+=
name|toWrite
expr_stmt|;
name|srcOffset
operator|+=
name|toWrite
expr_stmt|;
if|if
condition|(
name|toRead
operator|>
name|toWrite
condition|)
block|{
name|nextBufferToWrite
argument_list|()
expr_stmt|;
name|toRead
operator|-=
name|toWrite
expr_stmt|;
comment|// Remains to copy from current read buffer. Less than wbSize by def.
name|System
operator|.
name|arraycopy
argument_list|(
name|readBuffer
argument_list|,
name|readBufOffset
argument_list|,
name|writePos
operator|.
name|buffer
argument_list|,
name|writePos
operator|.
name|offset
argument_list|,
name|toRead
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|offset
operator|+=
name|toRead
expr_stmt|;
name|readBufOffset
operator|+=
name|toRead
expr_stmt|;
name|srcOffset
operator|+=
name|toRead
expr_stmt|;
block|}
block|}
block|}
comment|/**    * The class representing a segment of bytes in the buffer. Can either be a reference    * to a segment of the whole WriteBuffers (when bytes is not set), or to a segment of    * some byte array (when bytes is set).    */
specifier|public
specifier|static
class|class
name|ByteSegmentRef
block|{
specifier|public
name|ByteSegmentRef
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|reset
argument_list|(
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|length
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"Length is negative: "
operator|+
name|length
argument_list|)
throw|;
block|}
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
specifier|public
name|ByteSegmentRef
parameter_list|()
block|{     }
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
return|return
name|bytes
return|;
block|}
specifier|public
name|long
name|getOffset
parameter_list|()
block|{
return|return
name|offset
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
specifier|public
name|ByteBuffer
name|copy
parameter_list|()
block|{
name|byte
index|[]
name|copy
init|=
operator|new
name|byte
index|[
name|length
index|]
decl_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
operator|(
name|int
operator|)
name|offset
argument_list|,
name|copy
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|copy
argument_list|)
return|;
block|}
specifier|private
name|byte
index|[]
name|bytes
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|offset
decl_stmt|;
specifier|private
name|int
name|length
decl_stmt|;
block|}
comment|/**    * Changes the byte segment reference from being a reference to global buffer to    * the one with a self-contained byte array. The byte array will either be one of    * the internal ones, or a copy of data if the original reference pointed to a data    * spanning multiple internal buffers.    */
specifier|public
name|void
name|populateValue
parameter_list|(
name|WriteBuffers
operator|.
name|ByteSegmentRef
name|value
parameter_list|)
block|{
comment|// At this point, we are going to make a copy if needed to avoid array boundaries.
name|int
name|index
init|=
name|getBufferIndex
argument_list|(
name|value
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|int
name|bufferOffset
init|=
name|getOffset
argument_list|(
name|value
operator|.
name|getOffset
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|value
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|bufferOffset
operator|+
name|length
operator|<=
name|wbSize
condition|)
block|{
comment|// Common case - the segment is in one buffer.
name|value
operator|.
name|bytes
operator|=
name|buffer
expr_stmt|;
name|value
operator|.
name|offset
operator|=
name|bufferOffset
expr_stmt|;
return|return;
block|}
comment|// Special case (rare) - the segment is on buffer boundary.
name|value
operator|.
name|bytes
operator|=
operator|new
name|byte
index|[
name|length
index|]
expr_stmt|;
name|value
operator|.
name|offset
operator|=
literal|0
expr_stmt|;
name|int
name|destOffset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|destOffset
operator|<
name|length
condition|)
block|{
if|if
condition|(
name|destOffset
operator|>
literal|0
condition|)
block|{
name|buffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
operator|++
name|index
argument_list|)
expr_stmt|;
name|bufferOffset
operator|=
literal|0
expr_stmt|;
block|}
name|int
name|toCopy
init|=
name|Math
operator|.
name|min
argument_list|(
name|length
operator|-
name|destOffset
argument_list|,
name|wbSize
operator|-
name|bufferOffset
argument_list|)
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|buffer
argument_list|,
name|bufferOffset
argument_list|,
name|value
operator|.
name|bytes
argument_list|,
name|destOffset
argument_list|,
name|toCopy
argument_list|)
expr_stmt|;
name|destOffset
operator|+=
name|toCopy
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|isAllInOneReadBuffer
parameter_list|(
name|int
name|length
parameter_list|,
name|Position
name|readPos
parameter_list|)
block|{
return|return
name|readPos
operator|.
name|offset
operator|+
name|length
operator|<=
name|wbSize
return|;
block|}
specifier|private
name|boolean
name|isAllInOneWriteBuffer
parameter_list|(
name|int
name|length
parameter_list|)
block|{
return|return
name|writePos
operator|.
name|offset
operator|+
name|length
operator|<=
name|wbSize
return|;
block|}
specifier|public
name|void
name|seal
parameter_list|()
block|{
if|if
condition|(
name|writePos
operator|.
name|bufferIndex
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|writePos
operator|.
name|offset
operator|<
operator|(
name|wbSize
operator|*
literal|0.8
operator|)
condition|)
block|{
comment|// arbitrary
name|byte
index|[]
name|smallerBuffer
init|=
operator|new
name|byte
index|[
name|writePos
operator|.
name|offset
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|writePos
operator|.
name|buffer
argument_list|,
literal|0
argument_list|,
name|smallerBuffer
argument_list|,
literal|0
argument_list|,
name|writePos
operator|.
name|offset
argument_list|)
expr_stmt|;
name|writeBuffers
operator|.
name|set
argument_list|(
name|writePos
operator|.
name|bufferIndex
argument_list|,
name|smallerBuffer
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|writePos
operator|.
name|bufferIndex
operator|+
literal|1
operator|<
name|writeBuffers
operator|.
name|size
argument_list|()
condition|)
block|{
name|writeBuffers
operator|.
name|subList
argument_list|(
name|writePos
operator|.
name|bufferIndex
operator|+
literal|1
argument_list|,
name|writeBuffers
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|// Make sure we don't reference any old buffer.
name|clearState
argument_list|()
expr_stmt|;
block|}
specifier|public
name|long
name|readNByteLong
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|bytes
parameter_list|)
block|{
return|return
name|readNByteLong
argument_list|(
name|offset
argument_list|,
name|bytes
argument_list|,
name|defaultReadPos
argument_list|)
return|;
block|}
specifier|public
name|long
name|readNByteLong
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|bytes
parameter_list|,
name|Position
name|readPos
parameter_list|)
block|{
name|setReadPoint
argument_list|(
name|offset
argument_list|,
name|readPos
argument_list|)
expr_stmt|;
name|long
name|v
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isAllInOneReadBuffer
argument_list|(
name|bytes
argument_list|,
name|readPos
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
condition|;
operator|++
name|i
control|)
block|{
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|readPos
operator|.
name|buffer
index|[
name|readPos
operator|.
name|offset
operator|+
name|i
index|]
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
name|readPos
operator|.
name|offset
operator|+=
name|bytes
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
condition|;
operator|++
name|i
control|)
block|{
name|v
operator|=
operator|(
name|v
operator|<<
literal|8
operator|)
operator|+
operator|(
name|readNextByte
argument_list|(
name|readPos
argument_list|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
block|}
return|return
name|v
return|;
block|}
specifier|public
name|void
name|writeFiveByteULong
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|v
parameter_list|)
block|{
name|int
name|prevIndex
init|=
name|writePos
operator|.
name|bufferIndex
decl_stmt|,
name|prevOffset
init|=
name|writePos
operator|.
name|offset
decl_stmt|;
name|setWritePoint
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAllInOneWriteBuffer
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|writePos
operator|.
name|buffer
index|[
name|writePos
operator|.
name|offset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|32
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|buffer
index|[
name|writePos
operator|.
name|offset
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|24
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|buffer
index|[
name|writePos
operator|.
name|offset
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|16
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|buffer
index|[
name|writePos
operator|.
name|offset
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|8
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|buffer
index|[
name|writePos
operator|.
name|offset
operator|+
literal|4
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|offset
operator|+=
literal|5
expr_stmt|;
block|}
else|else
block|{
name|setByte
argument_list|(
name|offset
operator|++
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|setByte
argument_list|(
name|offset
operator|++
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|setByte
argument_list|(
name|offset
operator|++
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|setByte
argument_list|(
name|offset
operator|++
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|setByte
argument_list|(
name|offset
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writePos
operator|.
name|bufferIndex
operator|=
name|prevIndex
expr_stmt|;
name|writePos
operator|.
name|buffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|writePos
operator|.
name|bufferIndex
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|offset
operator|=
name|prevOffset
expr_stmt|;
block|}
specifier|public
name|int
name|readInt
parameter_list|(
name|long
name|offset
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
name|readNByteLong
argument_list|(
name|offset
argument_list|,
literal|4
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeInt
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|v
parameter_list|)
block|{
name|int
name|prevIndex
init|=
name|writePos
operator|.
name|bufferIndex
decl_stmt|,
name|prevOffset
init|=
name|writePos
operator|.
name|offset
decl_stmt|;
name|setWritePoint
argument_list|(
name|offset
argument_list|)
expr_stmt|;
if|if
condition|(
name|isAllInOneWriteBuffer
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|writePos
operator|.
name|buffer
index|[
name|writePos
operator|.
name|offset
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|24
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|buffer
index|[
name|writePos
operator|.
name|offset
operator|+
literal|1
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|16
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|buffer
index|[
name|writePos
operator|.
name|offset
operator|+
literal|2
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|buffer
index|[
name|writePos
operator|.
name|offset
operator|+
literal|3
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|offset
operator|+=
literal|4
expr_stmt|;
block|}
else|else
block|{
name|setByte
argument_list|(
name|offset
operator|++
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|24
argument_list|)
argument_list|)
expr_stmt|;
name|setByte
argument_list|(
name|offset
operator|++
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|setByte
argument_list|(
name|offset
operator|++
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|v
operator|>>>
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|setByte
argument_list|(
name|offset
argument_list|,
call|(
name|byte
call|)
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writePos
operator|.
name|bufferIndex
operator|=
name|prevIndex
expr_stmt|;
name|writePos
operator|.
name|buffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|writePos
operator|.
name|bufferIndex
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|offset
operator|=
name|prevOffset
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeByte
parameter_list|(
name|long
name|offset
parameter_list|,
name|byte
name|value
parameter_list|)
block|{
name|int
name|prevIndex
init|=
name|writePos
operator|.
name|bufferIndex
decl_stmt|,
name|prevOffset
init|=
name|writePos
operator|.
name|offset
decl_stmt|;
name|setWritePoint
argument_list|(
name|offset
argument_list|)
expr_stmt|;
comment|// One byte is always available for writing.
name|writePos
operator|.
name|buffer
index|[
name|writePos
operator|.
name|offset
index|]
operator|=
name|value
expr_stmt|;
name|writePos
operator|.
name|bufferIndex
operator|=
name|prevIndex
expr_stmt|;
name|writePos
operator|.
name|buffer
operator|=
name|writeBuffers
operator|.
name|get
argument_list|(
name|writePos
operator|.
name|bufferIndex
argument_list|)
expr_stmt|;
name|writePos
operator|.
name|offset
operator|=
name|prevOffset
expr_stmt|;
block|}
comment|/**    * Write buffer size    * @return write buffer size    */
specifier|public
name|long
name|size
parameter_list|()
block|{
return|return
name|writeBuffers
operator|.
name|size
argument_list|()
operator|*
operator|(
name|long
operator|)
name|wbSize
return|;
block|}
specifier|public
name|Position
name|getReadPosition
parameter_list|()
block|{
return|return
name|defaultReadPos
return|;
block|}
block|}
end_class

end_unit

