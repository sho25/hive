begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardUnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * TestBinarySortableSerDe.  *  */
end_comment

begin_class
specifier|public
class|class
name|VerifyLazy
block|{
specifier|public
specifier|static
name|boolean
name|lazyCompareList
parameter_list|(
name|ListTypeInfo
name|listTypeInfo
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|list
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|expectedList
parameter_list|)
block|{
name|TypeInfo
name|elementTypeInfo
init|=
name|listTypeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|list
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|lazyEleObj
init|=
name|list
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|expectedEleObj
init|=
name|expectedList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lazyCompare
argument_list|(
name|elementTypeInfo
argument_list|,
name|lazyEleObj
argument_list|,
name|expectedEleObj
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"List element deserialized value does not match elementTypeInfo "
operator|+
name|elementTypeInfo
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|lazyCompareMap
parameter_list|(
name|MapTypeInfo
name|mapTypeInfo
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expectedMap
parameter_list|)
block|{
name|TypeInfo
name|keyTypeInfo
init|=
name|mapTypeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
decl_stmt|;
name|TypeInfo
name|valueTypeInfo
init|=
name|mapTypeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|!=
name|expectedMap
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Map key/value deserialized map.size() "
operator|+
name|map
operator|.
name|size
argument_list|()
operator|+
literal|" map "
operator|+
name|map
operator|.
name|toString
argument_list|()
operator|+
literal|" expectedMap.size() "
operator|+
name|expectedMap
operator|.
name|size
argument_list|()
operator|+
literal|" expectedMap "
operator|+
name|expectedMap
operator|.
name|toString
argument_list|()
operator|+
literal|" does not match keyTypeInfo "
operator|+
name|keyTypeInfo
operator|.
name|toString
argument_list|()
operator|+
literal|" valueTypeInfo "
operator|+
name|valueTypeInfo
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|lazyCompareStruct
parameter_list|(
name|StructTypeInfo
name|structTypeInfo
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|fields
parameter_list|,
name|List
argument_list|<
name|Object
argument_list|>
name|expectedFields
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|int
name|size
init|=
name|fieldTypeInfos
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|lazyEleObj
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
name|expectedEleObj
init|=
name|expectedFields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|lazyCompare
argument_list|(
name|fieldTypeInfos
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|lazyEleObj
argument_list|,
name|expectedEleObj
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"SerDe deserialized value does not match"
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|lazyCompareUnion
parameter_list|(
name|UnionTypeInfo
name|unionTypeInfo
parameter_list|,
name|LazyBinaryUnion
name|union
parameter_list|,
name|UnionObject
name|expectedUnion
parameter_list|)
block|{
name|byte
name|tag
init|=
name|union
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|byte
name|expectedTag
init|=
name|expectedUnion
operator|.
name|getTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
name|expectedTag
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Union tag does not match union.getTag() "
operator|+
name|tag
operator|+
literal|" expectedUnion.getTag() "
operator|+
name|expectedTag
argument_list|)
throw|;
block|}
return|return
name|lazyCompare
argument_list|(
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|union
operator|.
name|getField
argument_list|()
argument_list|,
name|expectedUnion
operator|.
name|getObject
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|lazyCompareUnion
parameter_list|(
name|UnionTypeInfo
name|unionTypeInfo
parameter_list|,
name|LazyUnion
name|union
parameter_list|,
name|UnionObject
name|expectedUnion
parameter_list|)
block|{
name|byte
name|tag
init|=
name|union
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|byte
name|expectedTag
init|=
name|expectedUnion
operator|.
name|getTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
name|expectedTag
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Union tag does not match union.getTag() "
operator|+
name|tag
operator|+
literal|" expectedUnion.getTag() "
operator|+
name|expectedTag
argument_list|)
throw|;
block|}
return|return
name|lazyCompare
argument_list|(
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|union
operator|.
name|getField
argument_list|()
argument_list|,
name|expectedUnion
operator|.
name|getObject
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|lazyCompareUnion
parameter_list|(
name|UnionTypeInfo
name|unionTypeInfo
parameter_list|,
name|UnionObject
name|union
parameter_list|,
name|UnionObject
name|expectedUnion
parameter_list|)
block|{
name|byte
name|tag
init|=
name|union
operator|.
name|getTag
argument_list|()
decl_stmt|;
name|byte
name|expectedTag
init|=
name|expectedUnion
operator|.
name|getTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|!=
name|expectedTag
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Union tag does not match union.getTag() "
operator|+
name|tag
operator|+
literal|" expectedUnion.getTag() "
operator|+
name|expectedTag
argument_list|)
throw|;
block|}
return|return
name|lazyCompare
argument_list|(
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
operator|.
name|get
argument_list|(
name|tag
argument_list|)
argument_list|,
name|union
operator|.
name|getObject
argument_list|()
argument_list|,
name|expectedUnion
operator|.
name|getObject
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|lazyCompare
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|Object
name|lazyObject
parameter_list|,
name|Object
name|expectedObject
parameter_list|)
block|{
if|if
condition|(
name|expectedObject
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|lazyObject
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected object is null but object is not null "
operator|+
name|lazyObject
operator|.
name|toString
argument_list|()
operator|+
literal|" typeInfo "
operator|+
name|typeInfo
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|lazyObject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected object is not null \""
operator|+
name|expectedObject
operator|.
name|toString
argument_list|()
operator|+
literal|"\" typeInfo "
operator|+
name|typeInfo
operator|.
name|toString
argument_list|()
operator|+
literal|" but object is null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|lazyObject
operator|instanceof
name|Writable
condition|)
block|{
if|if
condition|(
operator|!
name|lazyObject
operator|.
name|equals
argument_list|(
name|expectedObject
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected object "
operator|+
name|expectedObject
operator|.
name|toString
argument_list|()
operator|+
literal|" and actual object "
operator|+
name|lazyObject
operator|.
name|toString
argument_list|()
operator|+
literal|" is not equal typeInfo "
operator|+
name|typeInfo
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|lazyObject
operator|instanceof
name|LazyPrimitive
condition|)
block|{
name|Object
name|primitiveObject
init|=
operator|(
operator|(
name|LazyPrimitive
operator|)
name|lazyObject
operator|)
operator|.
name|getObject
argument_list|()
decl_stmt|;
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
decl_stmt|;
switch|switch
condition|(
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyBoolean
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyBoolean"
argument_list|)
throw|;
block|}
name|boolean
name|value
init|=
operator|(
operator|(
name|LazyBoolean
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|boolean
name|expected
init|=
operator|(
operator|(
name|BooleanWritable
operator|)
name|expectedObject
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Boolean field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|BYTE
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyByte
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyByte"
argument_list|)
throw|;
block|}
name|byte
name|value
init|=
operator|(
operator|(
name|LazyByte
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|byte
name|expected
init|=
operator|(
operator|(
name|ByteWritable
operator|)
name|expectedObject
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Byte field mismatch (expected "
operator|+
operator|(
name|int
operator|)
name|expected
operator|+
literal|" found "
operator|+
operator|(
name|int
operator|)
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|SHORT
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyShort
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyShort"
argument_list|)
throw|;
block|}
name|short
name|value
init|=
operator|(
operator|(
name|LazyShort
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|short
name|expected
init|=
operator|(
operator|(
name|ShortWritable
operator|)
name|expectedObject
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Short field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|INT
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyInteger
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyInteger"
argument_list|)
throw|;
block|}
name|int
name|value
init|=
operator|(
operator|(
name|LazyInteger
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|int
name|expected
init|=
operator|(
operator|(
name|IntWritable
operator|)
name|expectedObject
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Int field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|LONG
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyLong
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyLong"
argument_list|)
throw|;
block|}
name|long
name|value
init|=
operator|(
operator|(
name|LazyLong
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|long
name|expected
init|=
operator|(
operator|(
name|LongWritable
operator|)
name|expectedObject
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Long field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyFloat
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyFloat"
argument_list|)
throw|;
block|}
name|float
name|value
init|=
operator|(
operator|(
name|LazyFloat
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|float
name|expected
init|=
operator|(
operator|(
name|FloatWritable
operator|)
name|expectedObject
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Float field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyDouble
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyDouble"
argument_list|)
throw|;
block|}
name|double
name|value
init|=
operator|(
operator|(
name|LazyDouble
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|double
name|expected
init|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|expectedObject
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Double field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|STRING
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyString
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Text expected writable not Text"
argument_list|)
throw|;
block|}
name|Text
name|value
init|=
operator|(
operator|(
name|LazyString
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
decl_stmt|;
name|Text
name|expected
init|=
operator|(
operator|(
name|Text
operator|)
name|expectedObject
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"String field mismatch (expected '"
operator|+
name|expected
operator|+
literal|"' found '"
operator|+
name|value
operator|+
literal|"')"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|CHAR
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyHiveChar
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyHiveChar"
argument_list|)
throw|;
block|}
name|HiveChar
name|value
init|=
operator|(
operator|(
name|LazyHiveChar
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|getHiveChar
argument_list|()
decl_stmt|;
name|HiveChar
name|expected
init|=
operator|(
operator|(
name|HiveCharWritable
operator|)
name|expectedObject
operator|)
operator|.
name|getHiveChar
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"HiveChar field mismatch (expected '"
operator|+
name|expected
operator|+
literal|"' found '"
operator|+
name|value
operator|+
literal|"')"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyHiveVarchar
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyHiveVarchar"
argument_list|)
throw|;
block|}
name|HiveVarchar
name|value
init|=
operator|(
operator|(
name|LazyHiveVarchar
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|getHiveVarchar
argument_list|()
decl_stmt|;
name|HiveVarchar
name|expected
init|=
operator|(
operator|(
name|HiveVarcharWritable
operator|)
name|expectedObject
operator|)
operator|.
name|getHiveVarchar
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"HiveVarchar field mismatch (expected '"
operator|+
name|expected
operator|+
literal|"' found '"
operator|+
name|value
operator|+
literal|"')"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|DECIMAL
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyHiveDecimal
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyDecimal"
argument_list|)
throw|;
block|}
name|HiveDecimal
name|value
init|=
operator|(
operator|(
name|LazyHiveDecimal
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
name|HiveDecimal
name|expected
init|=
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|expectedObject
operator|)
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfo
decl_stmt|;
name|int
name|precision
init|=
name|decimalTypeInfo
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|decimalTypeInfo
operator|.
name|getScale
argument_list|()
decl_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Decimal field mismatch (expected "
operator|+
name|expected
operator|.
name|toString
argument_list|()
operator|+
literal|" found "
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|") precision "
operator|+
name|precision
operator|+
literal|", scale "
operator|+
name|scale
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|DATE
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyDate
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyDate"
argument_list|)
throw|;
block|}
name|Date
name|value
init|=
operator|(
operator|(
name|LazyDate
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|Date
name|expected
init|=
operator|(
operator|(
name|DateWritable
operator|)
name|expectedObject
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Date field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyTimestamp
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"TimestampWritable expected writable not TimestampWritable"
argument_list|)
throw|;
block|}
name|Timestamp
name|value
init|=
operator|(
operator|(
name|LazyTimestamp
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|Timestamp
name|expected
init|=
operator|(
operator|(
name|TimestampWritable
operator|)
name|expectedObject
operator|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Timestamp field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyHiveIntervalYearMonth
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyHiveIntervalYearMonth"
argument_list|)
throw|;
block|}
name|HiveIntervalYearMonth
name|value
init|=
operator|(
operator|(
name|LazyHiveIntervalYearMonth
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
name|HiveIntervalYearMonth
name|expected
init|=
operator|(
operator|(
name|HiveIntervalYearMonthWritable
operator|)
name|expectedObject
operator|)
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"HiveIntervalYearMonth field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyHiveIntervalDayTime
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected writable LazyHiveIntervalDayTime"
argument_list|)
throw|;
block|}
name|HiveIntervalDayTime
name|value
init|=
operator|(
operator|(
name|LazyHiveIntervalDayTime
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
operator|.
name|getHiveIntervalDayTime
argument_list|()
decl_stmt|;
name|HiveIntervalDayTime
name|expected
init|=
operator|(
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|expectedObject
operator|)
operator|.
name|getHiveIntervalDayTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"HiveIntervalDayTime field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
name|BINARY
case|:
block|{
if|if
condition|(
operator|!
operator|(
name|primitiveObject
operator|instanceof
name|LazyBinary
operator|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Expected LazyBinary"
argument_list|)
throw|;
block|}
name|BytesWritable
name|bytesWritable
init|=
operator|(
operator|(
name|LazyBinary
operator|)
name|primitiveObject
operator|)
operator|.
name|getWritableObject
argument_list|()
decl_stmt|;
name|byte
index|[]
name|value
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bytesWritable
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytesWritable
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|BytesWritable
name|bytesWritableExpected
init|=
operator|(
name|BytesWritable
operator|)
name|expectedObject
decl_stmt|;
name|byte
index|[]
name|expected
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bytesWritableExpected
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytesWritableExpected
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
operator|!=
name|expected
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Byte Array field mismatch (expected "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|" found "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|")"
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
name|value
operator|.
name|length
condition|;
name|b
operator|++
control|)
block|{
if|if
condition|(
name|value
index|[
name|b
index|]
operator|!=
name|expected
index|[
name|b
index|]
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Byte Array field mismatch (expected "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|" found "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|value
argument_list|)
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unknown primitive category "
operator|+
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
elseif|else
if|if
condition|(
name|lazyObject
operator|instanceof
name|LazyArray
condition|)
block|{
name|LazyArray
name|lazyArray
init|=
operator|(
name|LazyArray
operator|)
name|lazyObject
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
name|lazyArray
operator|.
name|getList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|expectedList
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|expectedObject
decl_stmt|;
name|ListTypeInfo
name|listTypeInfo
init|=
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
name|expectedList
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"SerDe deserialized list length does not match (list "
operator|+
name|list
operator|.
name|toString
argument_list|()
operator|+
literal|" list.size() "
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|" expectedList "
operator|+
name|expectedList
operator|.
name|toString
argument_list|()
operator|+
literal|" expectedList.size() "
operator|+
name|expectedList
operator|.
name|size
argument_list|()
operator|+
literal|")"
operator|+
literal|" elementTypeInfo "
operator|+
name|listTypeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|lazyCompareList
argument_list|(
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
argument_list|,
name|list
argument_list|,
name|expectedList
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|instanceof
name|ListTypeInfo
condition|)
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
decl_stmt|;
if|if
condition|(
name|lazyObject
operator|instanceof
name|LazyBinaryArray
condition|)
block|{
name|list
operator|=
operator|(
operator|(
name|LazyBinaryArray
operator|)
name|lazyObject
operator|)
operator|.
name|getList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|list
operator|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|lazyObject
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|expectedList
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|expectedObject
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
name|expectedList
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"SerDe deserialized list length does not match (list "
operator|+
name|list
operator|.
name|toString
argument_list|()
operator|+
literal|" list.size() "
operator|+
name|list
operator|.
name|size
argument_list|()
operator|+
literal|" expectedList "
operator|+
name|expectedList
operator|.
name|toString
argument_list|()
operator|+
literal|" expectedList.size() "
operator|+
name|expectedList
operator|.
name|size
argument_list|()
operator|+
literal|")"
argument_list|)
throw|;
block|}
return|return
name|lazyCompareList
argument_list|(
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
argument_list|,
name|list
argument_list|,
name|expectedList
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|lazyObject
operator|instanceof
name|LazyMap
condition|)
block|{
name|LazyMap
name|lazyMap
init|=
operator|(
name|LazyMap
operator|)
name|lazyObject
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
init|=
name|lazyMap
operator|.
name|getMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expectedMap
init|=
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|expectedObject
decl_stmt|;
return|return
name|lazyCompareMap
argument_list|(
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
argument_list|,
name|map
argument_list|,
name|expectedMap
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|instanceof
name|MapTypeInfo
condition|)
block|{
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|map
decl_stmt|;
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|expectedMap
init|=
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|expectedObject
decl_stmt|;
if|if
condition|(
name|lazyObject
operator|instanceof
name|LazyBinaryMap
condition|)
block|{
name|map
operator|=
operator|(
operator|(
name|LazyBinaryMap
operator|)
name|lazyObject
operator|)
operator|.
name|getMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|map
operator|=
operator|(
name|Map
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
operator|)
name|lazyObject
expr_stmt|;
block|}
return|return
name|lazyCompareMap
argument_list|(
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
argument_list|,
name|map
argument_list|,
name|expectedMap
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|lazyObject
operator|instanceof
name|LazyStruct
condition|)
block|{
name|LazyStruct
name|lazyStruct
init|=
operator|(
name|LazyStruct
operator|)
name|lazyObject
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|fields
init|=
name|lazyStruct
operator|.
name|getFieldsAsList
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|expectedFields
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|expectedObject
decl_stmt|;
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
decl_stmt|;
return|return
name|lazyCompareStruct
argument_list|(
name|structTypeInfo
argument_list|,
name|fields
argument_list|,
name|expectedFields
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|instanceof
name|StructTypeInfo
condition|)
block|{
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|fields
decl_stmt|;
if|if
condition|(
name|lazyObject
operator|instanceof
name|LazyBinaryStruct
condition|)
block|{
name|fields
operator|=
operator|(
operator|(
name|LazyBinaryStruct
operator|)
name|lazyObject
operator|)
operator|.
name|getFieldsAsList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|fields
operator|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|lazyObject
expr_stmt|;
block|}
name|List
argument_list|<
name|Object
argument_list|>
name|expectedFields
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|expectedObject
decl_stmt|;
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
decl_stmt|;
return|return
name|lazyCompareStruct
argument_list|(
name|structTypeInfo
argument_list|,
name|fields
argument_list|,
name|expectedFields
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|lazyObject
operator|instanceof
name|LazyUnion
condition|)
block|{
name|LazyUnion
name|union
init|=
operator|(
name|LazyUnion
operator|)
name|lazyObject
decl_stmt|;
name|StandardUnionObjectInspector
operator|.
name|StandardUnion
name|expectedUnion
init|=
operator|(
name|StandardUnionObjectInspector
operator|.
name|StandardUnion
operator|)
name|expectedObject
decl_stmt|;
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
decl_stmt|;
return|return
name|lazyCompareUnion
argument_list|(
name|unionTypeInfo
argument_list|,
name|union
argument_list|,
name|expectedUnion
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|typeInfo
operator|instanceof
name|UnionTypeInfo
condition|)
block|{
name|StandardUnionObjectInspector
operator|.
name|StandardUnion
name|expectedUnion
init|=
operator|(
name|StandardUnionObjectInspector
operator|.
name|StandardUnion
operator|)
name|expectedObject
decl_stmt|;
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
decl_stmt|;
if|if
condition|(
name|lazyObject
operator|instanceof
name|LazyBinaryUnion
condition|)
block|{
return|return
name|lazyCompareUnion
argument_list|(
name|unionTypeInfo
argument_list|,
operator|(
name|LazyBinaryUnion
operator|)
name|lazyObject
argument_list|,
name|expectedUnion
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|lazyCompareUnion
argument_list|(
name|unionTypeInfo
argument_list|,
operator|(
name|UnionObject
operator|)
name|lazyObject
argument_list|,
name|expectedUnion
argument_list|)
return|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Not implemented "
operator|+
name|typeInfo
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

