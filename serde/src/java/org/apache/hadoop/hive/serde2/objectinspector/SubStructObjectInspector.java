begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * SubsetStructObjectInspector implement a wrapper around a base object inspector (baseOI)  * such that when the row corresponding to the baseOI is given together with this object  * inspector, it will mask out some fields in the row as if they are not there.  */
end_comment

begin_class
specifier|public
class|class
name|SubStructObjectInspector
extends|extends
name|StructObjectInspector
block|{
specifier|protected
name|StructObjectInspector
name|baseOI
decl_stmt|;
comment|// base object inspector
specifier|protected
name|int
name|startCol
decl_stmt|;
comment|// start column number
specifier|protected
name|int
name|numCols
decl_stmt|;
comment|// number of columns
specifier|protected
name|List
argument_list|<
name|StructField
argument_list|>
name|fields
decl_stmt|;
comment|/**    * Create a new Object Inspector based on a base object inspector and the subset of    * columns will be inspected (from startCol to startCol+numCols).    * @param baseOI    * @param startCol    * @param numCols    */
specifier|public
name|SubStructObjectInspector
parameter_list|(
name|StructObjectInspector
name|baseOI
parameter_list|,
name|int
name|startCol
parameter_list|,
name|int
name|numCols
parameter_list|)
block|{
name|this
operator|.
name|baseOI
operator|=
name|baseOI
expr_stmt|;
name|this
operator|.
name|startCol
operator|=
name|startCol
expr_stmt|;
name|this
operator|.
name|numCols
operator|=
name|numCols
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|baseFields
init|=
name|baseOI
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
assert|assert
name|startCol
operator|<
name|baseFields
operator|.
name|size
argument_list|()
operator|&&
name|startCol
operator|+
name|numCols
operator|<
name|baseFields
operator|.
name|size
argument_list|()
assert|;
name|this
operator|.
name|fields
operator|=
operator|new
name|ArrayList
argument_list|<
name|StructField
argument_list|>
argument_list|(
name|numCols
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|.
name|addAll
argument_list|(
name|baseOI
operator|.
name|getAllStructFieldRefs
argument_list|()
operator|.
name|subList
argument_list|(
name|startCol
argument_list|,
name|startCol
operator|+
name|numCols
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTypeName
parameter_list|()
block|{
return|return
name|ObjectInspectorUtils
operator|.
name|getStandardStructTypeName
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Category
name|getCategory
parameter_list|()
block|{
return|return
name|Category
operator|.
name|STRUCT
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|getAllStructFieldRefs
parameter_list|()
block|{
return|return
name|this
operator|.
name|fields
return|;
block|}
annotation|@
name|Override
specifier|public
name|StructField
name|getStructFieldRef
parameter_list|(
name|String
name|fieldName
parameter_list|)
block|{
return|return
name|ObjectInspectorUtils
operator|.
name|getStandardStructFieldRef
argument_list|(
name|fieldName
argument_list|,
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getStructFieldData
parameter_list|(
name|Object
name|data
parameter_list|,
name|StructField
name|fieldRef
parameter_list|)
block|{
return|return
name|baseOI
operator|.
name|getStructFieldData
argument_list|(
name|data
argument_list|,
name|fieldRef
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Object
argument_list|>
name|getStructFieldsDataAsList
parameter_list|(
name|Object
name|data
parameter_list|)
block|{
return|return
name|baseOI
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|data
argument_list|)
operator|.
name|subList
argument_list|(
name|startCol
argument_list|,
name|startCol
operator|+
name|numCols
argument_list|)
return|;
block|}
block|}
end_class

end_unit

