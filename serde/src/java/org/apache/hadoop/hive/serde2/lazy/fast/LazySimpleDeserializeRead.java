begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyByte
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyShort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|TimestampParser
import|;
end_import

begin_comment
comment|/*  * Directly deserialize with the caller reading field-by-field the LazySimple (text)  * serialization format.  *  * The caller is responsible for calling the read method for the right type of each field  * (after calling readCheckNull).  *  * Reading some fields require a results object to receive value information.  A separate  * results object is created by the caller at initialization per different field even for the same  * type.  *  * Some type values are by reference to either bytes in the deserialization buffer or to  * other type specific buffers.  So, those references are only valid until the next time set is  * called.  */
end_comment

begin_class
specifier|public
class|class
name|LazySimpleDeserializeRead
implements|implements
name|DeserializeRead
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LazySimpleDeserializeRead
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
decl_stmt|;
specifier|private
name|byte
name|separator
decl_stmt|;
specifier|private
name|boolean
name|isEscaped
decl_stmt|;
specifier|private
name|byte
name|escapeChar
decl_stmt|;
specifier|private
name|byte
index|[]
name|nullSequenceBytes
decl_stmt|;
specifier|private
name|boolean
name|isExtendedBooleanLiteral
decl_stmt|;
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|private
name|int
name|start
decl_stmt|;
specifier|private
name|int
name|offset
decl_stmt|;
specifier|private
name|int
name|end
decl_stmt|;
specifier|private
name|int
name|fieldCount
decl_stmt|;
specifier|private
name|int
name|fieldIndex
decl_stmt|;
specifier|private
name|int
name|fieldStart
decl_stmt|;
specifier|private
name|int
name|fieldLength
decl_stmt|;
specifier|private
name|boolean
name|saveBool
decl_stmt|;
specifier|private
name|byte
name|saveByte
decl_stmt|;
specifier|private
name|short
name|saveShort
decl_stmt|;
specifier|private
name|int
name|saveInt
decl_stmt|;
specifier|private
name|long
name|saveLong
decl_stmt|;
specifier|private
name|float
name|saveFloat
decl_stmt|;
specifier|private
name|double
name|saveDouble
decl_stmt|;
specifier|private
name|byte
index|[]
name|saveBytes
decl_stmt|;
specifier|private
name|int
name|saveBytesStart
decl_stmt|;
specifier|private
name|int
name|saveBytesLength
decl_stmt|;
specifier|private
name|Date
name|saveDate
decl_stmt|;
specifier|private
name|Timestamp
name|saveTimestamp
decl_stmt|;
specifier|private
name|HiveIntervalYearMonth
name|saveIntervalYearMonth
decl_stmt|;
specifier|private
name|HiveIntervalDayTime
name|saveIntervalDayTime
decl_stmt|;
specifier|private
name|HiveDecimal
name|saveDecimal
decl_stmt|;
specifier|private
name|DecimalTypeInfo
name|saveDecimalTypeInfo
decl_stmt|;
specifier|private
name|Text
name|tempText
decl_stmt|;
specifier|private
name|TimestampParser
name|timestampParser
decl_stmt|;
specifier|private
name|boolean
name|readBeyondConfiguredFieldsWarned
decl_stmt|;
specifier|private
name|boolean
name|readBeyondBufferRangeWarned
decl_stmt|;
specifier|private
name|boolean
name|bufferRangeHasExtraDataWarned
decl_stmt|;
specifier|public
name|LazySimpleDeserializeRead
parameter_list|(
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
parameter_list|,
name|byte
name|separator
parameter_list|,
name|LazySerDeParameters
name|lazyParams
parameter_list|)
block|{
name|this
operator|.
name|primitiveTypeInfos
operator|=
name|primitiveTypeInfos
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
name|isEscaped
operator|=
name|lazyParams
operator|.
name|isEscaped
argument_list|()
expr_stmt|;
name|escapeChar
operator|=
name|lazyParams
operator|.
name|getEscapeChar
argument_list|()
expr_stmt|;
name|nullSequenceBytes
operator|=
name|lazyParams
operator|.
name|getNullSequence
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|isExtendedBooleanLiteral
operator|=
name|lazyParams
operator|.
name|isExtendedBooleanLiteral
argument_list|()
expr_stmt|;
name|fieldCount
operator|=
name|primitiveTypeInfos
operator|.
name|length
expr_stmt|;
name|tempText
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|readBeyondConfiguredFieldsWarned
operator|=
literal|false
expr_stmt|;
name|readBeyondBufferRangeWarned
operator|=
literal|false
expr_stmt|;
name|bufferRangeHasExtraDataWarned
operator|=
literal|false
expr_stmt|;
block|}
comment|// Not public since we must have the field count so every 8 fields NULL bytes can be navigated.
specifier|private
name|LazySimpleDeserializeRead
parameter_list|()
block|{   }
comment|/*    * The primitive type information for all fields.    */
annotation|@
name|Override
specifier|public
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
parameter_list|()
block|{
return|return
name|primitiveTypeInfos
return|;
block|}
comment|/*    * Set the range of bytes to be deserialized.    */
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|start
operator|=
name|offset
expr_stmt|;
name|end
operator|=
name|offset
operator|+
name|length
expr_stmt|;
name|fieldIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/*    * Reads the NULL information for a field.    *    * @return Returns true when the field is NULL; reading is positioned to the next field.    *         Otherwise, false when the field is NOT NULL; reading is positioned to the field data.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readCheckNull
parameter_list|()
block|{
if|if
condition|(
operator|++
name|fieldIndex
operator|>=
name|fieldCount
condition|)
block|{
comment|// Reading beyond the specified field count produces NULL.
if|if
condition|(
operator|!
name|readBeyondConfiguredFieldsWarned
condition|)
block|{
comment|// Warn only once.
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading beyond configured fields! Configured "
operator|+
name|fieldCount
operator|+
literal|" fields but "
operator|+
literal|" reading more (NULLs returned).  Ignoring similar problems."
argument_list|)
expr_stmt|;
name|readBeyondConfiguredFieldsWarned
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
comment|// We must allow for an empty field at the end, so no strict>= checking.
if|if
condition|(
operator|!
name|readBeyondBufferRangeWarned
condition|)
block|{
comment|// Warn only once.
name|int
name|length
init|=
name|end
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading beyond buffer range! Buffer range "
operator|+
name|start
operator|+
literal|" for length "
operator|+
name|length
operator|+
literal|" but reading more (NULLs returned)."
operator|+
literal|"  Ignoring similar problems."
argument_list|)
expr_stmt|;
name|readBeyondBufferRangeWarned
operator|=
literal|true
expr_stmt|;
block|}
comment|// char[] charsBuffer = new char[end - start];
comment|// for (int c = 0; c< charsBuffer.length; c++) {
comment|//  charsBuffer[c] = (char) (bytes[start + c]& 0xFF);
comment|// }
return|return
literal|true
return|;
block|}
name|fieldStart
operator|=
name|offset
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|fieldLength
operator|=
name|offset
operator|-
name|fieldStart
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|bytes
index|[
name|offset
index|]
operator|==
name|separator
condition|)
block|{
name|fieldLength
operator|=
operator|(
name|offset
operator|++
operator|-
name|fieldStart
operator|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|isEscaped
operator|&&
name|bytes
index|[
name|offset
index|]
operator|==
name|escapeChar
operator|&&
name|offset
operator|+
literal|1
operator|<
name|end
condition|)
block|{
comment|// Ignore the char after escape char.
name|offset
operator|+=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|offset
operator|++
expr_stmt|;
block|}
block|}
name|char
index|[]
name|charField
init|=
operator|new
name|char
index|[
name|fieldLength
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|charField
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|charField
index|[
name|c
index|]
operator|=
call|(
name|char
call|)
argument_list|(
name|bytes
index|[
name|fieldStart
operator|+
name|c
index|]
operator|&
literal|0xFF
argument_list|)
expr_stmt|;
block|}
comment|// Is the field the configured string representing NULL?
if|if
condition|(
name|nullSequenceBytes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldLength
operator|==
name|nullSequenceBytes
operator|.
name|length
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|bytes
index|[
name|fieldStart
operator|+
name|i
index|]
operator|!=
name|nullSequenceBytes
index|[
name|i
index|]
condition|)
block|{
break|break;
block|}
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|fieldLength
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
switch|switch
condition|(
name|primitiveTypeInfos
index|[
name|fieldIndex
index|]
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|int
name|i
init|=
name|fieldStart
decl_stmt|;
if|if
condition|(
name|fieldLength
operator|==
literal|4
condition|)
block|{
if|if
condition|(
operator|(
name|bytes
index|[
name|i
index|]
operator|==
literal|'T'
operator|||
name|bytes
index|[
name|i
index|]
operator|==
literal|'t'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'R'
operator|||
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'r'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'U'
operator|||
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'u'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'E'
operator|||
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'e'
operator|)
condition|)
block|{
name|saveBool
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// No boolean value match for 5 char field.
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldLength
operator|==
literal|5
condition|)
block|{
if|if
condition|(
operator|(
name|bytes
index|[
name|i
index|]
operator|==
literal|'F'
operator|||
name|bytes
index|[
name|i
index|]
operator|==
literal|'f'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'A'
operator|||
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'a'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'L'
operator|||
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'l'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'S'
operator|||
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'s'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|4
index|]
operator|==
literal|'E'
operator|||
name|bytes
index|[
name|i
operator|+
literal|4
index|]
operator|==
literal|'e'
operator|)
condition|)
block|{
name|saveBool
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// No boolean value match for 4 char field.
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|isExtendedBooleanLiteral
operator|&&
name|fieldLength
operator|==
literal|1
condition|)
block|{
name|byte
name|b
init|=
name|bytes
index|[
name|fieldStart
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|'1'
operator|||
name|b
operator|==
literal|'t'
operator|||
name|b
operator|==
literal|'T'
condition|)
block|{
name|saveBool
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|'0'
operator|||
name|b
operator|==
literal|'f'
operator|||
name|b
operator|==
literal|'F'
condition|)
block|{
name|saveBool
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// No boolean value match for extended 1 char field.
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
comment|// No boolean value match for other lengths.
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|BYTE
case|:
try|try
block|{
name|saveByte
operator|=
name|LazyByte
operator|.
name|parseByte
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"TINYINT"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|//    if (!parseLongFast()) {
comment|//      return true;
comment|//    }
comment|//    saveShort = (short) saveLong;
comment|//    if (saveShort != saveLong) {
comment|//      return true;
comment|//    }
break|break;
case|case
name|SHORT
case|:
try|try
block|{
name|saveShort
operator|=
name|LazyShort
operator|.
name|parseShort
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"SMALLINT"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|//    if (!parseLongFast()) {
comment|//      return true;
comment|//    }
comment|//    saveShort = (short) saveLong;
comment|//    if (saveShort != saveLong) {
comment|//      return true;
comment|//    }
break|break;
case|case
name|INT
case|:
try|try
block|{
name|saveInt
operator|=
name|LazyInteger
operator|.
name|parseInt
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"INT"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|//    if (!parseLongFast()) {
comment|//      return true;
comment|//    }
comment|//    saveInt = (int) saveLong;
comment|//    if (saveInt != saveLong) {
comment|//      return true;
comment|//    }
break|break;
case|case
name|LONG
case|:
try|try
block|{
name|saveLong
operator|=
name|LazyLong
operator|.
name|parseLong
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"BIGINT"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|//    if (!parseLongFast()) {
comment|//      return true;
comment|//    }
break|break;
case|case
name|FLOAT
case|:
block|{
name|String
name|byteData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byteData
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|saveFloat
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|byteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the Float data type range so converted to null. Given data is :"
operator|+
name|byteData
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the Float data type range so converted to null."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|//    if (!parseFloat()) {
comment|//      return true;
comment|//    }
break|break;
case|case
name|DOUBLE
case|:
block|{
name|String
name|byteData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byteData
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|saveDouble
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|byteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the Double data type range so converted to null. Given data is :"
operator|+
name|byteData
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the Double data type range so converted to null."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|//    if (!parseDouble()) {
comment|//      return true;
comment|//    }
break|break;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
if|if
condition|(
name|isEscaped
condition|)
block|{
name|LazyUtils
operator|.
name|copyAndEscapeStringDataToText
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|escapeChar
argument_list|,
name|tempText
argument_list|)
expr_stmt|;
name|saveBytes
operator|=
name|tempText
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|saveBytesStart
operator|=
literal|0
expr_stmt|;
name|saveBytesLength
operator|=
name|tempText
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// if the data is not escaped, simply copy the data.
name|saveBytes
operator|=
name|bytes
expr_stmt|;
name|saveBytesStart
operator|=
name|fieldStart
expr_stmt|;
name|saveBytesLength
operator|=
name|fieldLength
expr_stmt|;
block|}
break|break;
case|case
name|BINARY
case|:
block|{
name|byte
index|[]
name|recv
init|=
operator|new
name|byte
index|[
name|fieldLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|recv
argument_list|,
literal|0
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decoded
init|=
name|LazyBinary
operator|.
name|decodeIfNeeded
argument_list|(
name|recv
argument_list|)
decl_stmt|;
comment|// use the original bytes in case decoding should fail
name|decoded
operator|=
name|decoded
operator|.
name|length
operator|>
literal|0
condition|?
name|decoded
else|:
name|recv
expr_stmt|;
name|saveBytes
operator|=
name|decoded
expr_stmt|;
name|saveBytesStart
operator|=
literal|0
expr_stmt|;
name|saveBytesLength
operator|=
name|decoded
operator|.
name|length
expr_stmt|;
block|}
break|break;
case|case
name|DATE
case|:
block|{
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|saveDate
operator|=
name|Date
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"DATE"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|//    if (!parseDate()) {
comment|//      return true;
comment|//    }
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"US-ASCII"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unsupported encoding found "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|s
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|compareTo
argument_list|(
literal|"NULL"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"TIMESTAMP"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
try|try
block|{
if|if
condition|(
name|timestampParser
operator|==
literal|null
condition|)
block|{
name|timestampParser
operator|=
operator|new
name|TimestampParser
argument_list|()
expr_stmt|;
block|}
name|saveTimestamp
operator|=
name|timestampParser
operator|.
name|parseTimestamp
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"TIMESTAMP"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
comment|//    if (!parseTimestamp()) {
comment|//      return true;
comment|//    }
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|saveIntervalYearMonth
operator|=
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"INTERVAL_YEAR_MONTH"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|//    if (!parseIntervalYearMonth()) {
comment|//      return true;
comment|//    }
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|saveIntervalDayTime
operator|=
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"INTERVAL_DAY_TIME"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|//    if (!parseIntervalDayTime()) {
comment|//      return true;
comment|//    }
break|break;
case|case
name|DECIMAL
case|:
block|{
name|String
name|byteData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byteData
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the HiveDecimal data type range so converted to null."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|saveDecimal
operator|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|byteData
argument_list|)
expr_stmt|;
name|saveDecimalTypeInfo
operator|=
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfos
index|[
name|fieldIndex
index|]
expr_stmt|;
name|int
name|precision
init|=
name|saveDecimalTypeInfo
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|saveDecimalTypeInfo
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|saveDecimal
operator|=
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|saveDecimal
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
name|saveDecimal
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the HiveDecimal data type range so converted to null. Given data is :"
operator|+
name|byteData
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|//    if (!parseDecimal()) {
comment|//      return true;
comment|//    }
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unexpected primitive category "
operator|+
name|primitiveTypeInfos
index|[
name|fieldIndex
index|]
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|logExceptionMessage
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|bytesStart
parameter_list|,
name|int
name|bytesLength
parameter_list|,
name|String
name|dataType
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|byteData
init|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|bytesStart
argument_list|,
name|bytesLength
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the "
operator|+
name|dataType
operator|+
literal|" data type range so converted to null. Given data is :"
operator|+
name|byteData
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"For debugging purposes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the "
operator|+
name|dataType
operator|+
literal|" data type range so converted to null."
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Call this method after all fields have been read to check for extra fields.    */
annotation|@
name|Override
specifier|public
name|void
name|extraFieldsCheck
parameter_list|()
block|{
if|if
condition|(
name|offset
operator|<
name|end
condition|)
block|{
comment|// We did not consume all of the byte range.
if|if
condition|(
operator|!
name|bufferRangeHasExtraDataWarned
condition|)
block|{
comment|// Warn only once.
name|int
name|length
init|=
name|end
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Not all fields were read in the buffer range! Buffer range "
operator|+
name|start
operator|+
literal|" for length "
operator|+
name|length
operator|+
literal|" but reading more (NULLs returned)."
operator|+
literal|"  Ignoring similar problems."
argument_list|)
expr_stmt|;
name|bufferRangeHasExtraDataWarned
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Read integrity warning flags.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readBeyondConfiguredFieldsWarned
parameter_list|()
block|{
return|return
name|readBeyondConfiguredFieldsWarned
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readBeyondBufferRangeWarned
parameter_list|()
block|{
return|return
name|readBeyondBufferRangeWarned
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|bufferRangeHasExtraDataWarned
parameter_list|()
block|{
return|return
name|bufferRangeHasExtraDataWarned
return|;
block|}
comment|/*    * BOOLEAN.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readBoolean
parameter_list|()
block|{
return|return
name|saveBool
return|;
block|}
comment|/*    * BYTE.    */
annotation|@
name|Override
specifier|public
name|byte
name|readByte
parameter_list|()
block|{
return|return
name|saveByte
return|;
block|}
comment|/*    * SHORT.    */
annotation|@
name|Override
specifier|public
name|short
name|readShort
parameter_list|()
block|{
return|return
name|saveShort
return|;
block|}
comment|/*    * INT.    */
annotation|@
name|Override
specifier|public
name|int
name|readInt
parameter_list|()
block|{
return|return
name|saveInt
return|;
block|}
comment|/*    * LONG.    */
annotation|@
name|Override
specifier|public
name|long
name|readLong
parameter_list|()
block|{
return|return
name|saveLong
return|;
block|}
comment|/*    * FLOAT.    */
annotation|@
name|Override
specifier|public
name|float
name|readFloat
parameter_list|()
block|{
return|return
name|saveFloat
return|;
block|}
comment|/*    * DOUBLE.    */
annotation|@
name|Override
specifier|public
name|double
name|readDouble
parameter_list|()
block|{
return|return
name|saveDouble
return|;
block|}
comment|/*    * STRING.    *    * Can be used to read CHAR and VARCHAR when the caller takes responsibility for    * truncation/padding issues.    */
comment|// This class is for internal use.
specifier|private
class|class
name|LazySimpleReadStringResults
extends|extends
name|ReadStringResults
block|{
specifier|public
name|LazySimpleReadStringResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Reading a STRING field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different bytes field.
annotation|@
name|Override
specifier|public
name|ReadStringResults
name|createReadStringResults
parameter_list|()
block|{
return|return
operator|new
name|LazySimpleReadStringResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readString
parameter_list|(
name|ReadStringResults
name|readStringResults
parameter_list|)
block|{
name|readStringResults
operator|.
name|bytes
operator|=
name|saveBytes
expr_stmt|;
name|readStringResults
operator|.
name|start
operator|=
name|saveBytesStart
expr_stmt|;
name|readStringResults
operator|.
name|length
operator|=
name|saveBytesLength
expr_stmt|;
block|}
comment|/*    * CHAR.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazySimpleReadHiveCharResults
extends|extends
name|ReadHiveCharResults
block|{
comment|// Use our STRING reader.
specifier|public
name|LazySimpleReadStringResults
name|readStringResults
decl_stmt|;
specifier|public
name|LazySimpleReadHiveCharResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveCharWritable
name|getHiveCharWritable
parameter_list|()
block|{
return|return
name|hiveCharWritable
return|;
block|}
block|}
comment|// Reading a CHAR field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different CHAR field.
annotation|@
name|Override
specifier|public
name|ReadHiveCharResults
name|createReadHiveCharResults
parameter_list|()
block|{
return|return
operator|new
name|LazySimpleReadHiveCharResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readHiveChar
parameter_list|(
name|ReadHiveCharResults
name|readHiveCharResults
parameter_list|)
throws|throws
name|IOException
block|{
name|LazySimpleReadHiveCharResults
name|LazySimpleReadHiveCharResults
init|=
operator|(
name|LazySimpleReadHiveCharResults
operator|)
name|readHiveCharResults
decl_stmt|;
if|if
condition|(
operator|!
name|LazySimpleReadHiveCharResults
operator|.
name|isInit
argument_list|()
condition|)
block|{
name|LazySimpleReadHiveCharResults
operator|.
name|init
argument_list|(
operator|(
name|CharTypeInfo
operator|)
name|primitiveTypeInfos
index|[
name|fieldIndex
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LazySimpleReadHiveCharResults
operator|.
name|readStringResults
operator|==
literal|null
condition|)
block|{
name|LazySimpleReadHiveCharResults
operator|.
name|readStringResults
operator|=
operator|new
name|LazySimpleReadStringResults
argument_list|()
expr_stmt|;
block|}
name|LazySimpleReadStringResults
name|readStringResults
init|=
name|LazySimpleReadHiveCharResults
operator|.
name|readStringResults
decl_stmt|;
comment|// Read the bytes using our basic method.
name|readString
argument_list|(
name|readStringResults
argument_list|)
expr_stmt|;
comment|// Copy the bytes into our Text object, then truncate.
name|HiveCharWritable
name|hiveCharWritable
init|=
name|LazySimpleReadHiveCharResults
operator|.
name|getHiveCharWritable
argument_list|()
decl_stmt|;
name|hiveCharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|set
argument_list|(
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|readStringResults
operator|.
name|length
argument_list|)
expr_stmt|;
name|hiveCharWritable
operator|.
name|enforceMaxLength
argument_list|(
name|LazySimpleReadHiveCharResults
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
name|readHiveCharResults
operator|.
name|bytes
operator|=
name|hiveCharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|readHiveCharResults
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|readHiveCharResults
operator|.
name|length
operator|=
name|hiveCharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|/*    * VARCHAR.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazySimpleReadHiveVarcharResults
extends|extends
name|ReadHiveVarcharResults
block|{
comment|// Use our bytes reader.
specifier|public
name|LazySimpleReadStringResults
name|readStringResults
decl_stmt|;
specifier|public
name|LazySimpleReadHiveVarcharResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveVarcharWritable
name|getHiveVarcharWritable
parameter_list|()
block|{
return|return
name|hiveVarcharWritable
return|;
block|}
block|}
comment|// Reading a VARCHAR field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different VARCHAR field.
annotation|@
name|Override
specifier|public
name|ReadHiveVarcharResults
name|createReadHiveVarcharResults
parameter_list|()
block|{
return|return
operator|new
name|LazySimpleReadHiveVarcharResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readHiveVarchar
parameter_list|(
name|ReadHiveVarcharResults
name|readHiveVarcharResults
parameter_list|)
throws|throws
name|IOException
block|{
name|LazySimpleReadHiveVarcharResults
name|lazySimpleReadHiveVarvarcharResults
init|=
operator|(
name|LazySimpleReadHiveVarcharResults
operator|)
name|readHiveVarcharResults
decl_stmt|;
if|if
condition|(
operator|!
name|lazySimpleReadHiveVarvarcharResults
operator|.
name|isInit
argument_list|()
condition|)
block|{
name|lazySimpleReadHiveVarvarcharResults
operator|.
name|init
argument_list|(
operator|(
name|VarcharTypeInfo
operator|)
name|primitiveTypeInfos
index|[
name|fieldIndex
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lazySimpleReadHiveVarvarcharResults
operator|.
name|readStringResults
operator|==
literal|null
condition|)
block|{
name|lazySimpleReadHiveVarvarcharResults
operator|.
name|readStringResults
operator|=
operator|new
name|LazySimpleReadStringResults
argument_list|()
expr_stmt|;
block|}
name|LazySimpleReadStringResults
name|readStringResults
init|=
name|lazySimpleReadHiveVarvarcharResults
operator|.
name|readStringResults
decl_stmt|;
comment|// Read the bytes using our basic method.
name|readString
argument_list|(
name|readStringResults
argument_list|)
expr_stmt|;
comment|// Copy the bytes into our Text object, then truncate.
name|HiveVarcharWritable
name|hiveVarcharWritable
init|=
name|lazySimpleReadHiveVarvarcharResults
operator|.
name|getHiveVarcharWritable
argument_list|()
decl_stmt|;
name|hiveVarcharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|set
argument_list|(
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|readStringResults
operator|.
name|length
argument_list|)
expr_stmt|;
name|hiveVarcharWritable
operator|.
name|enforceMaxLength
argument_list|(
name|lazySimpleReadHiveVarvarcharResults
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
name|readHiveVarcharResults
operator|.
name|bytes
operator|=
name|hiveVarcharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|readHiveVarcharResults
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|readHiveVarcharResults
operator|.
name|length
operator|=
name|hiveVarcharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|/*    * BINARY.    */
comment|// This class is for internal use.
specifier|private
class|class
name|LazySimpleReadBinaryResults
extends|extends
name|ReadBinaryResults
block|{
specifier|public
name|LazySimpleReadBinaryResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Reading a BINARY field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different bytes field.
annotation|@
name|Override
specifier|public
name|ReadBinaryResults
name|createReadBinaryResults
parameter_list|()
block|{
return|return
operator|new
name|LazySimpleReadBinaryResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readBinary
parameter_list|(
name|ReadBinaryResults
name|readBinaryResults
parameter_list|)
block|{
name|readBinaryResults
operator|.
name|bytes
operator|=
name|saveBytes
expr_stmt|;
name|readBinaryResults
operator|.
name|start
operator|=
name|saveBytesStart
expr_stmt|;
name|readBinaryResults
operator|.
name|length
operator|=
name|saveBytesLength
expr_stmt|;
block|}
comment|/*    * DATE.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazySimpleReadDateResults
extends|extends
name|ReadDateResults
block|{
specifier|public
name|LazySimpleReadDateResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DateWritable
name|getDateWritable
parameter_list|()
block|{
return|return
name|dateWritable
return|;
block|}
block|}
comment|// Reading a DATE field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different DATE field.
annotation|@
name|Override
specifier|public
name|ReadDateResults
name|createReadDateResults
parameter_list|()
block|{
return|return
operator|new
name|LazySimpleReadDateResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readDate
parameter_list|(
name|ReadDateResults
name|readDateResults
parameter_list|)
block|{
name|LazySimpleReadDateResults
name|lazySimpleReadDateResults
init|=
operator|(
name|LazySimpleReadDateResults
operator|)
name|readDateResults
decl_stmt|;
name|DateWritable
name|dateWritable
init|=
name|lazySimpleReadDateResults
operator|.
name|getDateWritable
argument_list|()
decl_stmt|;
name|dateWritable
operator|.
name|set
argument_list|(
name|saveDate
argument_list|)
expr_stmt|;
name|saveDate
operator|=
literal|null
expr_stmt|;
block|}
comment|/*    * INTERVAL_YEAR_MONTH.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazySimpleReadIntervalYearMonthResults
extends|extends
name|ReadIntervalYearMonthResults
block|{
specifier|public
name|LazySimpleReadIntervalYearMonthResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveIntervalYearMonthWritable
name|getHiveIntervalYearMonthWritable
parameter_list|()
block|{
return|return
name|hiveIntervalYearMonthWritable
return|;
block|}
block|}
comment|// Reading a INTERVAL_YEAR_MONTH field require a results object to receive value information.
comment|// A separate results object is created by the caller at initialization per different
comment|// INTERVAL_YEAR_MONTH field.
annotation|@
name|Override
specifier|public
name|ReadIntervalYearMonthResults
name|createReadIntervalYearMonthResults
parameter_list|()
block|{
return|return
operator|new
name|LazySimpleReadIntervalYearMonthResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readIntervalYearMonth
parameter_list|(
name|ReadIntervalYearMonthResults
name|readIntervalYearMonthResults
parameter_list|)
throws|throws
name|IOException
block|{
name|LazySimpleReadIntervalYearMonthResults
name|lazySimpleReadIntervalYearMonthResults
init|=
operator|(
name|LazySimpleReadIntervalYearMonthResults
operator|)
name|readIntervalYearMonthResults
decl_stmt|;
name|HiveIntervalYearMonthWritable
name|hiveIntervalYearMonthWritable
init|=
name|lazySimpleReadIntervalYearMonthResults
operator|.
name|getHiveIntervalYearMonthWritable
argument_list|()
decl_stmt|;
name|hiveIntervalYearMonthWritable
operator|.
name|set
argument_list|(
name|saveIntervalYearMonth
argument_list|)
expr_stmt|;
name|saveIntervalYearMonth
operator|=
literal|null
expr_stmt|;
block|}
comment|/*    * INTERVAL_DAY_TIME.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazySimpleReadIntervalDayTimeResults
extends|extends
name|ReadIntervalDayTimeResults
block|{
specifier|public
name|LazySimpleReadIntervalDayTimeResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveIntervalDayTimeWritable
name|getHiveIntervalDayTimeWritable
parameter_list|()
block|{
return|return
name|hiveIntervalDayTimeWritable
return|;
block|}
block|}
comment|// Reading a INTERVAL_DAY_TIME field require a results object to receive value information.
comment|// A separate results object is created by the caller at initialization per different
comment|// INTERVAL_DAY_TIME field.
annotation|@
name|Override
specifier|public
name|ReadIntervalDayTimeResults
name|createReadIntervalDayTimeResults
parameter_list|()
block|{
return|return
operator|new
name|LazySimpleReadIntervalDayTimeResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readIntervalDayTime
parameter_list|(
name|ReadIntervalDayTimeResults
name|readIntervalDayTimeResults
parameter_list|)
throws|throws
name|IOException
block|{
name|LazySimpleReadIntervalDayTimeResults
name|lazySimpleReadIntervalDayTimeResults
init|=
operator|(
name|LazySimpleReadIntervalDayTimeResults
operator|)
name|readIntervalDayTimeResults
decl_stmt|;
name|HiveIntervalDayTimeWritable
name|hiveIntervalDayTimeWritable
init|=
name|lazySimpleReadIntervalDayTimeResults
operator|.
name|getHiveIntervalDayTimeWritable
argument_list|()
decl_stmt|;
name|hiveIntervalDayTimeWritable
operator|.
name|set
argument_list|(
name|saveIntervalDayTime
argument_list|)
expr_stmt|;
name|saveIntervalDayTime
operator|=
literal|null
expr_stmt|;
block|}
comment|/*    * TIMESTAMP.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazySimpleReadTimestampResults
extends|extends
name|ReadTimestampResults
block|{
specifier|public
name|LazySimpleReadTimestampResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TimestampWritable
name|getTimestampWritable
parameter_list|()
block|{
return|return
name|timestampWritable
return|;
block|}
block|}
comment|// Reading a TIMESTAMP field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different TIMESTAMP field.
annotation|@
name|Override
specifier|public
name|ReadTimestampResults
name|createReadTimestampResults
parameter_list|()
block|{
return|return
operator|new
name|LazySimpleReadTimestampResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readTimestamp
parameter_list|(
name|ReadTimestampResults
name|readTimestampResults
parameter_list|)
block|{
name|LazySimpleReadTimestampResults
name|lazySimpleReadTimestampResults
init|=
operator|(
name|LazySimpleReadTimestampResults
operator|)
name|readTimestampResults
decl_stmt|;
name|TimestampWritable
name|timestampWritable
init|=
name|lazySimpleReadTimestampResults
operator|.
name|getTimestampWritable
argument_list|()
decl_stmt|;
name|timestampWritable
operator|.
name|set
argument_list|(
name|saveTimestamp
argument_list|)
expr_stmt|;
name|saveTimestamp
operator|=
literal|null
expr_stmt|;
block|}
comment|/*    * DECIMAL.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazySimpleReadDecimalResults
extends|extends
name|ReadDecimalResults
block|{
name|HiveDecimal
name|hiveDecimal
decl_stmt|;
specifier|public
name|LazySimpleReadDecimalResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HiveDecimal
name|getHiveDecimal
parameter_list|()
block|{
return|return
name|hiveDecimal
return|;
block|}
block|}
comment|// Reading a DECIMAL field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different DECIMAL field.
annotation|@
name|Override
specifier|public
name|ReadDecimalResults
name|createReadDecimalResults
parameter_list|()
block|{
return|return
operator|new
name|LazySimpleReadDecimalResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readHiveDecimal
parameter_list|(
name|ReadDecimalResults
name|readDecimalResults
parameter_list|)
block|{
name|LazySimpleReadDecimalResults
name|lazySimpleReadDecimalResults
init|=
operator|(
name|LazySimpleReadDecimalResults
operator|)
name|readDecimalResults
decl_stmt|;
if|if
condition|(
operator|!
name|lazySimpleReadDecimalResults
operator|.
name|isInit
argument_list|()
condition|)
block|{
name|lazySimpleReadDecimalResults
operator|.
name|init
argument_list|(
name|saveDecimalTypeInfo
argument_list|)
expr_stmt|;
block|}
name|lazySimpleReadDecimalResults
operator|.
name|hiveDecimal
operator|=
name|saveDecimal
expr_stmt|;
name|saveDecimal
operator|=
literal|null
expr_stmt|;
name|saveDecimalTypeInfo
operator|=
literal|null
expr_stmt|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|maxLongBytes
init|=
operator|(
operator|(
name|Long
operator|)
name|Long
operator|.
name|MAX_VALUE
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|maxLongDigitsCount
init|=
name|maxLongBytes
operator|.
name|length
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|minLongNoSignBytes
init|=
operator|(
operator|(
name|Long
operator|)
name|Long
operator|.
name|MIN_VALUE
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|int
name|byteArrayCompareRanges
parameter_list|(
name|byte
index|[]
name|arg1
parameter_list|,
name|int
name|start1
parameter_list|,
name|byte
index|[]
name|arg2
parameter_list|,
name|int
name|start2
parameter_list|,
name|int
name|len
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
comment|// Note the "& 0xff" is just a way to convert unsigned bytes to signed integer.
name|int
name|b1
init|=
name|arg1
index|[
name|i
operator|+
name|start1
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|b2
init|=
name|arg2
index|[
name|i
operator|+
name|start2
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|b1
operator|!=
name|b2
condition|)
block|{
return|return
name|b1
operator|-
name|b2
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

