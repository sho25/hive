begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|DataTypePhysicalVariation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyByte
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyShort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|TimestampParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
import|;
end_import

begin_comment
comment|/*  * Directly deserialize with the caller reading field-by-field the LazySimple (text)  * serialization format.  *  * The caller is responsible for calling the read method for the right type of each field  * (after calling readNextField).  *  * Reading some fields require a results object to receive value information.  A separate  * results object is created by the caller at initialization per different field even for the same  * type.  *  * Some type values are by reference to either bytes in the deserialization buffer or to  * other type specific buffers.  So, those references are only valid until the next time set is  * called.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LazySimpleDeserializeRead
extends|extends
name|DeserializeRead
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LazySimpleDeserializeRead
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/*    * Information on a field.  Made a class to allow readField to be agnostic to whether a top level    * or field within a complex type is being read    */
specifier|private
specifier|static
class|class
name|Field
block|{
comment|// Optimize for most common case -- primitive.
specifier|public
specifier|final
name|boolean
name|isPrimitive
decl_stmt|;
specifier|public
specifier|final
name|PrimitiveCategory
name|primitiveCategory
decl_stmt|;
specifier|public
specifier|final
name|Category
name|complexCategory
decl_stmt|;
specifier|public
specifier|final
name|TypeInfo
name|typeInfo
decl_stmt|;
specifier|public
specifier|final
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
decl_stmt|;
specifier|public
name|ComplexTypeHelper
name|complexTypeHelper
decl_stmt|;
specifier|public
name|Field
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|,
name|DataTypePhysicalVariation
name|dataTypePhysicalVariation
parameter_list|)
block|{
name|Category
name|category
init|=
name|typeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
if|if
condition|(
name|category
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|isPrimitive
operator|=
literal|true
expr_stmt|;
name|primitiveCategory
operator|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
name|complexCategory
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|isPrimitive
operator|=
literal|false
expr_stmt|;
name|primitiveCategory
operator|=
literal|null
expr_stmt|;
name|complexCategory
operator|=
name|category
expr_stmt|;
block|}
name|this
operator|.
name|typeInfo
operator|=
name|typeInfo
expr_stmt|;
name|this
operator|.
name|dataTypePhysicalVariation
operator|=
name|dataTypePhysicalVariation
expr_stmt|;
name|complexTypeHelper
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Field
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
name|this
argument_list|(
name|typeInfo
argument_list|,
name|DataTypePhysicalVariation
operator|.
name|NONE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Used to keep position/length for complex type fields.    * NOTE: The top level uses startPositions instead.    */
specifier|private
specifier|static
class|class
name|ComplexTypeHelper
block|{
specifier|public
specifier|final
name|Field
name|complexField
decl_stmt|;
specifier|public
name|int
name|complexFieldStart
decl_stmt|;
specifier|public
name|int
name|complexFieldLength
decl_stmt|;
specifier|public
name|int
name|complexFieldEnd
decl_stmt|;
specifier|public
name|int
name|fieldPosition
decl_stmt|;
specifier|public
name|ComplexTypeHelper
parameter_list|(
name|Field
name|complexField
parameter_list|)
block|{
name|this
operator|.
name|complexField
operator|=
name|complexField
expr_stmt|;
block|}
specifier|public
name|void
name|setCurrentFieldInfo
parameter_list|(
name|int
name|complexFieldStart
parameter_list|,
name|int
name|complexFieldLength
parameter_list|)
block|{
name|this
operator|.
name|complexFieldStart
operator|=
name|complexFieldStart
expr_stmt|;
name|this
operator|.
name|complexFieldLength
operator|=
name|complexFieldLength
expr_stmt|;
name|complexFieldEnd
operator|=
name|complexFieldStart
operator|+
name|complexFieldLength
expr_stmt|;
name|fieldPosition
operator|=
name|complexFieldStart
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ListComplexTypeHelper
extends|extends
name|ComplexTypeHelper
block|{
specifier|public
name|Field
name|elementField
decl_stmt|;
specifier|public
name|ListComplexTypeHelper
parameter_list|(
name|Field
name|complexField
parameter_list|,
name|Field
name|elementField
parameter_list|)
block|{
name|super
argument_list|(
name|complexField
argument_list|)
expr_stmt|;
name|this
operator|.
name|elementField
operator|=
name|elementField
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|MapComplexTypeHelper
extends|extends
name|ComplexTypeHelper
block|{
specifier|public
name|Field
name|keyField
decl_stmt|;
specifier|public
name|Field
name|valueField
decl_stmt|;
specifier|public
name|boolean
name|fieldHaveParsedKey
decl_stmt|;
specifier|public
name|MapComplexTypeHelper
parameter_list|(
name|Field
name|complexField
parameter_list|,
name|Field
name|keyField
parameter_list|,
name|Field
name|valueField
parameter_list|)
block|{
name|super
argument_list|(
name|complexField
argument_list|)
expr_stmt|;
name|this
operator|.
name|keyField
operator|=
name|keyField
expr_stmt|;
name|this
operator|.
name|valueField
operator|=
name|valueField
expr_stmt|;
name|fieldHaveParsedKey
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StructComplexTypeHelper
extends|extends
name|ComplexTypeHelper
block|{
specifier|public
name|Field
index|[]
name|fields
decl_stmt|;
specifier|public
name|int
name|nextFieldIndex
decl_stmt|;
specifier|public
name|StructComplexTypeHelper
parameter_list|(
name|Field
name|complexField
parameter_list|,
name|Field
index|[]
name|fields
parameter_list|)
block|{
name|super
argument_list|(
name|complexField
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|nextFieldIndex
operator|=
literal|0
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|UnionComplexTypeHelper
extends|extends
name|ComplexTypeHelper
block|{
specifier|public
name|Field
name|tagField
decl_stmt|;
specifier|public
name|Field
index|[]
name|fields
decl_stmt|;
specifier|public
name|boolean
name|fieldHaveParsedTag
decl_stmt|;
specifier|public
name|int
name|fieldTag
decl_stmt|;
specifier|public
name|UnionComplexTypeHelper
parameter_list|(
name|Field
name|complexField
parameter_list|,
name|Field
index|[]
name|fields
parameter_list|)
block|{
name|super
argument_list|(
name|complexField
argument_list|)
expr_stmt|;
name|this
operator|.
name|tagField
operator|=
operator|new
name|Field
argument_list|(
name|TypeInfoFactory
operator|.
name|intTypeInfo
argument_list|)
expr_stmt|;
name|this
operator|.
name|fields
operator|=
name|fields
expr_stmt|;
name|fieldHaveParsedTag
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
name|int
index|[]
name|startPositions
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|separators
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isEscaped
decl_stmt|;
specifier|private
specifier|final
name|byte
name|escapeChar
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|escapeCounts
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|nullSequenceBytes
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isExtendedBooleanLiteral
decl_stmt|;
specifier|private
specifier|final
name|int
name|fieldCount
decl_stmt|;
specifier|private
specifier|final
name|Field
index|[]
name|fields
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxLevelDepth
decl_stmt|;
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|private
name|int
name|start
decl_stmt|;
specifier|private
name|int
name|end
decl_stmt|;
specifier|private
name|boolean
name|topLevelParsed
decl_stmt|;
comment|// Used by readNextField/skipNextField and not by readField.
specifier|private
name|int
name|nextFieldIndex
decl_stmt|;
comment|// For getDetailedReadPositionString.
specifier|private
name|int
name|currentLevel
decl_stmt|;
specifier|private
name|int
name|currentTopLevelFieldIndex
decl_stmt|;
specifier|private
name|int
name|currentFieldStart
decl_stmt|;
specifier|private
name|int
name|currentFieldLength
decl_stmt|;
specifier|private
name|int
name|currentEscapeCount
decl_stmt|;
specifier|private
name|ComplexTypeHelper
index|[]
name|currentComplexTypeHelpers
decl_stmt|;
comment|// For string/char/varchar buffering when there are escapes.
specifier|private
name|int
name|internalBufferLen
decl_stmt|;
specifier|private
name|byte
index|[]
name|internalBuffer
decl_stmt|;
specifier|private
specifier|final
name|TimestampParser
name|timestampParser
decl_stmt|;
specifier|private
name|boolean
name|isEndOfInputReached
decl_stmt|;
specifier|private
name|int
name|addComplexFields
parameter_list|(
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfoList
parameter_list|,
name|Field
index|[]
name|fields
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|Field
name|field
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|fieldTypeInfoList
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|field
operator|=
operator|new
name|Field
argument_list|(
name|fieldTypeInfoList
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|isPrimitive
condition|)
block|{
name|depth
operator|=
name|Math
operator|.
name|max
argument_list|(
name|depth
argument_list|,
name|addComplexTypeHelper
argument_list|(
name|field
argument_list|,
name|depth
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fields
index|[
name|i
index|]
operator|=
name|field
expr_stmt|;
block|}
return|return
name|depth
return|;
block|}
specifier|private
name|int
name|addComplexTypeHelper
parameter_list|(
name|Field
name|complexField
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
comment|// Assume one separator (depth) needed.
name|depth
operator|++
expr_stmt|;
switch|switch
condition|(
name|complexField
operator|.
name|complexCategory
condition|)
block|{
case|case
name|LIST
case|:
block|{
specifier|final
name|ListTypeInfo
name|listTypeInfo
init|=
operator|(
name|ListTypeInfo
operator|)
name|complexField
operator|.
name|typeInfo
decl_stmt|;
specifier|final
name|Field
name|elementField
init|=
operator|new
name|Field
argument_list|(
name|listTypeInfo
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|elementField
operator|.
name|isPrimitive
condition|)
block|{
name|depth
operator|=
name|addComplexTypeHelper
argument_list|(
name|elementField
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ListComplexTypeHelper
name|listHelper
init|=
operator|new
name|ListComplexTypeHelper
argument_list|(
name|complexField
argument_list|,
name|elementField
argument_list|)
decl_stmt|;
name|complexField
operator|.
name|complexTypeHelper
operator|=
name|listHelper
expr_stmt|;
block|}
break|break;
case|case
name|MAP
case|:
block|{
comment|// Map needs two separators (key and key/value pair).
name|depth
operator|++
expr_stmt|;
specifier|final
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|(
name|MapTypeInfo
operator|)
name|complexField
operator|.
name|typeInfo
decl_stmt|;
specifier|final
name|Field
name|keyField
init|=
operator|new
name|Field
argument_list|(
name|mapTypeInfo
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|keyField
operator|.
name|isPrimitive
condition|)
block|{
name|depth
operator|=
name|Math
operator|.
name|max
argument_list|(
name|depth
argument_list|,
name|addComplexTypeHelper
argument_list|(
name|keyField
argument_list|,
name|depth
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Field
name|valueField
init|=
operator|new
name|Field
argument_list|(
name|mapTypeInfo
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|valueField
operator|.
name|isPrimitive
condition|)
block|{
name|depth
operator|=
name|Math
operator|.
name|max
argument_list|(
name|depth
argument_list|,
name|addComplexTypeHelper
argument_list|(
name|valueField
argument_list|,
name|depth
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|MapComplexTypeHelper
name|mapHelper
init|=
operator|new
name|MapComplexTypeHelper
argument_list|(
name|complexField
argument_list|,
name|keyField
argument_list|,
name|valueField
argument_list|)
decl_stmt|;
name|complexField
operator|.
name|complexTypeHelper
operator|=
name|mapHelper
expr_stmt|;
block|}
break|break;
case|case
name|STRUCT
case|:
block|{
specifier|final
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|complexField
operator|.
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfoList
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|Field
index|[]
name|fields
init|=
operator|new
name|Field
index|[
name|fieldTypeInfoList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|depth
operator|=
name|addComplexFields
argument_list|(
name|fieldTypeInfoList
argument_list|,
name|fields
argument_list|,
name|depth
argument_list|)
expr_stmt|;
specifier|final
name|StructComplexTypeHelper
name|structHelper
init|=
operator|new
name|StructComplexTypeHelper
argument_list|(
name|complexField
argument_list|,
name|fields
argument_list|)
decl_stmt|;
name|complexField
operator|.
name|complexTypeHelper
operator|=
name|structHelper
expr_stmt|;
block|}
break|break;
case|case
name|UNION
case|:
block|{
specifier|final
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|complexField
operator|.
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfoList
init|=
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
specifier|final
name|Field
index|[]
name|fields
init|=
operator|new
name|Field
index|[
name|fieldTypeInfoList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|depth
operator|=
name|addComplexFields
argument_list|(
name|fieldTypeInfoList
argument_list|,
name|fields
argument_list|,
name|depth
argument_list|)
expr_stmt|;
specifier|final
name|UnionComplexTypeHelper
name|structHelper
init|=
operator|new
name|UnionComplexTypeHelper
argument_list|(
name|complexField
argument_list|,
name|fields
argument_list|)
decl_stmt|;
name|complexField
operator|.
name|complexTypeHelper
operator|=
name|structHelper
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unexpected complex category "
operator|+
name|complexField
operator|.
name|complexCategory
argument_list|)
throw|;
block|}
return|return
name|depth
return|;
block|}
specifier|public
name|LazySimpleDeserializeRead
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|DataTypePhysicalVariation
index|[]
name|dataTypePhysicalVariations
parameter_list|,
name|boolean
name|useExternalBuffer
parameter_list|,
name|LazySerDeParameters
name|lazyParams
parameter_list|)
block|{
name|super
argument_list|(
name|typeInfos
argument_list|,
name|dataTypePhysicalVariations
argument_list|,
name|useExternalBuffer
argument_list|)
expr_stmt|;
specifier|final
name|int
name|count
init|=
name|typeInfos
operator|.
name|length
decl_stmt|;
name|fieldCount
operator|=
name|count
expr_stmt|;
name|int
name|depth
init|=
literal|0
decl_stmt|;
name|fields
operator|=
operator|new
name|Field
index|[
name|count
index|]
expr_stmt|;
name|Field
name|field
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|field
operator|=
operator|new
name|Field
argument_list|(
name|typeInfos
index|[
name|i
index|]
argument_list|,
name|this
operator|.
name|dataTypePhysicalVariations
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|field
operator|.
name|isPrimitive
condition|)
block|{
name|depth
operator|=
name|Math
operator|.
name|max
argument_list|(
name|depth
argument_list|,
name|addComplexTypeHelper
argument_list|(
name|field
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fields
index|[
name|i
index|]
operator|=
name|field
expr_stmt|;
block|}
name|maxLevelDepth
operator|=
name|depth
expr_stmt|;
name|currentComplexTypeHelpers
operator|=
operator|new
name|ComplexTypeHelper
index|[
name|depth
index|]
expr_stmt|;
comment|// Field length is difference between positions hence one extra.
name|startPositions
operator|=
operator|new
name|int
index|[
name|count
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|separators
operator|=
name|lazyParams
operator|.
name|getSeparators
argument_list|()
expr_stmt|;
name|isEscaped
operator|=
name|lazyParams
operator|.
name|isEscaped
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEscaped
condition|)
block|{
name|escapeChar
operator|=
name|lazyParams
operator|.
name|getEscapeChar
argument_list|()
expr_stmt|;
name|escapeCounts
operator|=
operator|new
name|int
index|[
name|count
index|]
expr_stmt|;
block|}
else|else
block|{
name|escapeChar
operator|=
operator|(
name|byte
operator|)
literal|0
expr_stmt|;
name|escapeCounts
operator|=
literal|null
expr_stmt|;
block|}
name|nullSequenceBytes
operator|=
name|lazyParams
operator|.
name|getNullSequence
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|isExtendedBooleanLiteral
operator|=
name|lazyParams
operator|.
name|isExtendedBooleanLiteral
argument_list|()
expr_stmt|;
if|if
condition|(
name|lazyParams
operator|.
name|isLastColumnTakesRest
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"serialization.last.column.takes.rest not supported"
argument_list|)
throw|;
block|}
name|timestampParser
operator|=
operator|new
name|TimestampParser
argument_list|()
expr_stmt|;
name|internalBufferLen
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|LazySimpleDeserializeRead
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|boolean
name|useExternalBuffer
parameter_list|,
name|LazySerDeParameters
name|lazyParams
parameter_list|)
block|{
name|this
argument_list|(
name|typeInfos
argument_list|,
literal|null
argument_list|,
name|useExternalBuffer
argument_list|,
name|lazyParams
argument_list|)
expr_stmt|;
block|}
comment|/*    * Set the range of bytes to be deserialized.    */
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|start
operator|=
name|offset
expr_stmt|;
name|end
operator|=
name|offset
operator|+
name|length
expr_stmt|;
name|topLevelParsed
operator|=
literal|false
expr_stmt|;
name|currentLevel
operator|=
literal|0
expr_stmt|;
name|nextFieldIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/*    * Get detailed read position information to help diagnose exceptions.    */
specifier|public
name|String
name|getDetailedReadPositionString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Reading byte[] of length "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" at start offset "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" for length "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" to read "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" fields with types "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|typeInfos
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".  "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|topLevelParsed
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Error during field separator parsing"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Read field #"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|currentTopLevelFieldIndex
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" at field start position "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|startPositions
index|[
name|currentTopLevelFieldIndex
index|]
argument_list|)
expr_stmt|;
name|int
name|currentFieldLength
init|=
name|startPositions
index|[
name|currentTopLevelFieldIndex
operator|+
literal|1
index|]
operator|-
name|startPositions
index|[
name|currentTopLevelFieldIndex
index|]
operator|-
literal|1
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" for field length "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|currentFieldLength
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Parse the byte[] and fill each field.    *    * This is an adapted version of the parse method in the LazyStruct class.    * They should parse things the same way.    */
specifier|private
name|void
name|topLevelParse
parameter_list|()
block|{
name|int
name|fieldId
init|=
literal|0
decl_stmt|;
name|int
name|fieldByteBegin
init|=
name|start
decl_stmt|;
name|int
name|fieldByteEnd
init|=
name|start
decl_stmt|;
specifier|final
name|byte
name|separator
init|=
name|this
operator|.
name|separators
index|[
literal|0
index|]
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|this
operator|.
name|fieldCount
decl_stmt|;
specifier|final
name|int
index|[]
name|startPositions
init|=
name|this
operator|.
name|startPositions
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|this
operator|.
name|bytes
decl_stmt|;
specifier|final
name|int
name|end
init|=
name|this
operator|.
name|end
decl_stmt|;
comment|/*      * Optimize the loops by pulling special end cases and global decisions like isEscaped out!      */
if|if
condition|(
operator|!
name|isEscaped
condition|)
block|{
while|while
condition|(
name|fieldByteEnd
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|separator
condition|)
block|{
name|startPositions
index|[
name|fieldId
operator|++
index|]
operator|=
name|fieldByteBegin
expr_stmt|;
if|if
condition|(
name|fieldId
operator|==
name|fieldCount
condition|)
block|{
break|break;
block|}
name|fieldByteBegin
operator|=
operator|++
name|fieldByteEnd
expr_stmt|;
block|}
else|else
block|{
name|fieldByteEnd
operator|++
expr_stmt|;
block|}
block|}
comment|// End serves as final separator.
if|if
condition|(
name|fieldByteEnd
operator|==
name|end
operator|&&
name|fieldId
operator|<
name|fieldCount
condition|)
block|{
name|startPositions
index|[
name|fieldId
operator|++
index|]
operator|=
name|fieldByteBegin
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|byte
name|escapeChar
init|=
name|this
operator|.
name|escapeChar
decl_stmt|;
specifier|final
name|int
name|endLessOne
init|=
name|end
operator|-
literal|1
decl_stmt|;
specifier|final
name|int
index|[]
name|escapeCounts
init|=
name|this
operator|.
name|escapeCounts
decl_stmt|;
name|int
name|escapeCount
init|=
literal|0
decl_stmt|;
comment|// Process the bytes that can be escaped (the last one can't be).
while|while
condition|(
name|fieldByteEnd
operator|<
name|endLessOne
condition|)
block|{
if|if
condition|(
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|separator
condition|)
block|{
name|escapeCounts
index|[
name|fieldId
index|]
operator|=
name|escapeCount
expr_stmt|;
name|escapeCount
operator|=
literal|0
expr_stmt|;
name|startPositions
index|[
name|fieldId
operator|++
index|]
operator|=
name|fieldByteBegin
expr_stmt|;
if|if
condition|(
name|fieldId
operator|==
name|fieldCount
condition|)
block|{
break|break;
block|}
name|fieldByteBegin
operator|=
operator|++
name|fieldByteEnd
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|escapeChar
condition|)
block|{
comment|// Ignore the char after escape_char
name|fieldByteEnd
operator|+=
literal|2
expr_stmt|;
name|escapeCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|fieldByteEnd
operator|++
expr_stmt|;
block|}
block|}
comment|// Process the last byte if necessary.
if|if
condition|(
name|fieldByteEnd
operator|==
name|endLessOne
operator|&&
name|fieldId
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|separator
condition|)
block|{
name|escapeCounts
index|[
name|fieldId
index|]
operator|=
name|escapeCount
expr_stmt|;
name|escapeCount
operator|=
literal|0
expr_stmt|;
name|startPositions
index|[
name|fieldId
operator|++
index|]
operator|=
name|fieldByteBegin
expr_stmt|;
if|if
condition|(
name|fieldId
operator|<=
name|fieldCount
condition|)
block|{
name|fieldByteBegin
operator|=
operator|++
name|fieldByteEnd
expr_stmt|;
block|}
block|}
else|else
block|{
name|fieldByteEnd
operator|++
expr_stmt|;
block|}
block|}
comment|// End serves as final separator.
if|if
condition|(
name|fieldByteEnd
operator|==
name|end
operator|&&
name|fieldId
operator|<
name|fieldCount
condition|)
block|{
name|escapeCounts
index|[
name|fieldId
index|]
operator|=
name|escapeCount
expr_stmt|;
name|startPositions
index|[
name|fieldId
operator|++
index|]
operator|=
name|fieldByteBegin
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fieldId
operator|==
name|fieldCount
operator|||
name|fieldByteEnd
operator|==
name|end
condition|)
block|{
comment|// All fields have been parsed, or bytes have been parsed.
comment|// We need to set the startPositions of fields.length to ensure we
comment|// can use the same formula to calculate the length of each field.
comment|// For missing fields, their starting positions will all be the same,
comment|// which will make their lengths to be -1 and uncheckedGetField will
comment|// return these fields as NULLs.
name|Arrays
operator|.
name|fill
argument_list|(
name|startPositions
argument_list|,
name|fieldId
argument_list|,
name|startPositions
operator|.
name|length
argument_list|,
name|fieldByteEnd
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|isEndOfInputReached
operator|=
operator|(
name|fieldByteEnd
operator|==
name|end
operator|)
expr_stmt|;
block|}
specifier|private
name|int
name|parseComplexField
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|,
name|int
name|level
parameter_list|)
block|{
specifier|final
name|byte
name|separator
init|=
name|separators
index|[
name|level
index|]
decl_stmt|;
name|int
name|fieldByteEnd
init|=
name|start
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|this
operator|.
name|bytes
decl_stmt|;
name|currentEscapeCount
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|!
name|isEscaped
condition|)
block|{
while|while
condition|(
name|fieldByteEnd
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|separator
condition|)
block|{
return|return
name|fieldByteEnd
return|;
block|}
name|fieldByteEnd
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|byte
name|escapeChar
init|=
name|this
operator|.
name|escapeChar
decl_stmt|;
specifier|final
name|int
name|endLessOne
init|=
name|end
operator|-
literal|1
decl_stmt|;
name|int
name|escapeCount
init|=
literal|0
decl_stmt|;
comment|// Process the bytes that can be escaped (the last one can't be).
while|while
condition|(
name|fieldByteEnd
operator|<
name|endLessOne
condition|)
block|{
if|if
condition|(
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|separator
condition|)
block|{
name|currentEscapeCount
operator|=
name|escapeCount
expr_stmt|;
return|return
name|fieldByteEnd
return|;
block|}
elseif|else
if|if
condition|(
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|escapeChar
condition|)
block|{
comment|// Ignore the char after escape_char
name|fieldByteEnd
operator|+=
literal|2
expr_stmt|;
name|escapeCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|fieldByteEnd
operator|++
expr_stmt|;
block|}
block|}
comment|// Process the last byte.
if|if
condition|(
name|fieldByteEnd
operator|==
name|endLessOne
condition|)
block|{
if|if
condition|(
name|bytes
index|[
name|fieldByteEnd
index|]
operator|!=
name|separator
condition|)
block|{
name|fieldByteEnd
operator|++
expr_stmt|;
block|}
block|}
name|currentEscapeCount
operator|=
name|escapeCount
expr_stmt|;
block|}
return|return
name|fieldByteEnd
return|;
block|}
comment|/*    * Reads the the next field.    *    * Afterwards, reading is positioned to the next field.    *    * @return  Return true when the field was not null and data is put in the appropriate    *          current* member.    *          Otherwise, false when the field is null.    *    */
annotation|@
name|Override
specifier|public
name|boolean
name|readNextField
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|nextFieldIndex
operator|+
literal|1
operator|>=
name|fieldCount
condition|)
block|{
return|return
literal|false
return|;
block|}
name|nextFieldIndex
operator|++
expr_stmt|;
return|return
name|readField
argument_list|(
name|nextFieldIndex
argument_list|)
return|;
block|}
comment|/*    * Reads through an undesired field.    *    * No data values are valid after this call.    * Designed for skipping columns that are not included.    */
specifier|public
name|void
name|skipNextField
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|topLevelParsed
condition|)
block|{
name|topLevelParse
argument_list|()
expr_stmt|;
name|topLevelParsed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|nextFieldIndex
operator|+
literal|1
operator|>=
name|fieldCount
condition|)
block|{
comment|// No more.
block|}
else|else
block|{
name|nextFieldIndex
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReadFieldSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|checkNull
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|!=
name|nullSequenceBytes
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|byte
index|[]
name|nullSequenceBytes
init|=
name|this
operator|.
name|nullSequenceBytes
decl_stmt|;
switch|switch
condition|(
name|len
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|true
return|;
case|case
literal|2
case|:
return|return
name|bytes
index|[
name|start
index|]
operator|==
name|nullSequenceBytes
index|[
literal|0
index|]
operator|&&
name|bytes
index|[
name|start
operator|+
literal|1
index|]
operator|==
name|nullSequenceBytes
index|[
literal|1
index|]
return|;
case|case
literal|4
case|:
return|return
name|bytes
index|[
name|start
index|]
operator|==
name|nullSequenceBytes
index|[
literal|0
index|]
operator|&&
name|bytes
index|[
name|start
operator|+
literal|1
index|]
operator|==
name|nullSequenceBytes
index|[
literal|1
index|]
operator|&&
name|bytes
index|[
name|start
operator|+
literal|2
index|]
operator|==
name|nullSequenceBytes
index|[
literal|2
index|]
operator|&&
name|bytes
index|[
name|start
operator|+
literal|3
index|]
operator|==
name|nullSequenceBytes
index|[
literal|3
index|]
return|;
default|default:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nullSequenceBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bytes
index|[
name|start
operator|+
name|i
index|]
operator|!=
name|nullSequenceBytes
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/*    * When supported, read a field by field number (i.e. random access).    *    * Currently, only LazySimpleDeserializeRead supports this.    *    * @return  Return true when the field was not null and data is put in the appropriate    *          current* member.    *          Otherwise, false when the field is null.    */
specifier|public
name|boolean
name|readField
parameter_list|(
name|int
name|fieldIndex
parameter_list|)
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentLevel
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|topLevelParsed
condition|)
block|{
name|topLevelParse
argument_list|()
expr_stmt|;
name|topLevelParsed
operator|=
literal|true
expr_stmt|;
block|}
comment|// Top level.
name|currentTopLevelFieldIndex
operator|=
name|fieldIndex
expr_stmt|;
name|currentFieldStart
operator|=
name|startPositions
index|[
name|fieldIndex
index|]
expr_stmt|;
name|currentFieldLength
operator|=
name|startPositions
index|[
name|fieldIndex
operator|+
literal|1
index|]
operator|-
name|startPositions
index|[
name|fieldIndex
index|]
operator|-
literal|1
expr_stmt|;
name|currentEscapeCount
operator|=
operator|(
name|isEscaped
condition|?
name|escapeCounts
index|[
name|fieldIndex
index|]
else|:
literal|0
operator|)
expr_stmt|;
return|return
name|doReadField
argument_list|(
name|fields
index|[
name|fieldIndex
index|]
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|doReadField
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
specifier|final
name|int
name|fieldStart
init|=
name|currentFieldStart
decl_stmt|;
specifier|final
name|int
name|fieldLength
init|=
name|currentFieldLength
decl_stmt|;
if|if
condition|(
name|fieldLength
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|byte
index|[]
name|bytes
init|=
name|this
operator|.
name|bytes
decl_stmt|;
comment|// Is the field the configured string representing NULL?
if|if
condition|(
name|nullSequenceBytes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|checkNull
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
try|try
block|{
comment|/*        * We have a field and are positioned to it.  Read it.        */
if|if
condition|(
name|field
operator|.
name|isPrimitive
condition|)
block|{
switch|switch
condition|(
name|field
operator|.
name|primitiveCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|int
name|i
init|=
name|fieldStart
decl_stmt|;
if|if
condition|(
name|fieldLength
operator|==
literal|4
condition|)
block|{
if|if
condition|(
operator|(
name|bytes
index|[
name|i
index|]
operator|==
literal|'T'
operator|||
name|bytes
index|[
name|i
index|]
operator|==
literal|'t'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'R'
operator|||
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'r'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'U'
operator|||
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'u'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'E'
operator|||
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'e'
operator|)
condition|)
block|{
name|currentBoolean
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// No boolean value match for 4 char field.
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldLength
operator|==
literal|5
condition|)
block|{
if|if
condition|(
operator|(
name|bytes
index|[
name|i
index|]
operator|==
literal|'F'
operator|||
name|bytes
index|[
name|i
index|]
operator|==
literal|'f'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'A'
operator|||
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'a'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'L'
operator|||
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'l'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'S'
operator|||
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'s'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|4
index|]
operator|==
literal|'E'
operator|||
name|bytes
index|[
name|i
operator|+
literal|4
index|]
operator|==
literal|'e'
operator|)
condition|)
block|{
name|currentBoolean
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// No boolean value match for 5 char field.
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|isExtendedBooleanLiteral
operator|&&
name|fieldLength
operator|==
literal|1
condition|)
block|{
name|byte
name|b
init|=
name|bytes
index|[
name|fieldStart
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|'1'
operator|||
name|b
operator|==
literal|'t'
operator|||
name|b
operator|==
literal|'T'
condition|)
block|{
name|currentBoolean
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|'0'
operator|||
name|b
operator|==
literal|'f'
operator|||
name|b
operator|==
literal|'F'
condition|)
block|{
name|currentBoolean
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// No boolean value match for extended 1 char field.
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// No boolean value match for other lengths.
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
case|case
name|BYTE
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentByte
operator|=
name|LazyByte
operator|.
name|parseByte
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|SHORT
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentShort
operator|=
name|LazyShort
operator|.
name|parseShort
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|INT
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentInt
operator|=
name|LazyInteger
operator|.
name|parseInt
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|LONG
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentLong
operator|=
name|LazyLong
operator|.
name|parseLong
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|FLOAT
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentFloat
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DOUBLE
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentDouble
operator|=
name|StringToDouble
operator|.
name|strtod
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
block|{
if|if
condition|(
name|isEscaped
condition|)
block|{
if|if
condition|(
name|currentEscapeCount
operator|==
literal|0
condition|)
block|{
comment|// No escaping.
name|currentExternalBufferNeeded
operator|=
literal|false
expr_stmt|;
name|currentBytes
operator|=
name|bytes
expr_stmt|;
name|currentBytesStart
operator|=
name|fieldStart
expr_stmt|;
name|currentBytesLength
operator|=
name|fieldLength
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|unescapedLength
init|=
name|fieldLength
operator|-
name|currentEscapeCount
decl_stmt|;
if|if
condition|(
name|useExternalBuffer
condition|)
block|{
name|currentExternalBufferNeeded
operator|=
literal|true
expr_stmt|;
name|currentExternalBufferNeededLen
operator|=
name|unescapedLength
expr_stmt|;
block|}
else|else
block|{
comment|// The copyToBuffer will reposition and re-read the input buffer.
name|currentExternalBufferNeeded
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|internalBufferLen
operator|<
name|unescapedLength
condition|)
block|{
name|internalBufferLen
operator|=
name|unescapedLength
expr_stmt|;
name|internalBuffer
operator|=
operator|new
name|byte
index|[
name|internalBufferLen
index|]
expr_stmt|;
block|}
name|copyToBuffer
argument_list|(
name|internalBuffer
argument_list|,
literal|0
argument_list|,
name|unescapedLength
argument_list|)
expr_stmt|;
name|currentBytes
operator|=
name|internalBuffer
expr_stmt|;
name|currentBytesStart
operator|=
literal|0
expr_stmt|;
name|currentBytesLength
operator|=
name|unescapedLength
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// If the data is not escaped, reference the data directly.
name|currentExternalBufferNeeded
operator|=
literal|false
expr_stmt|;
name|currentBytes
operator|=
name|bytes
expr_stmt|;
name|currentBytesStart
operator|=
name|fieldStart
expr_stmt|;
name|currentBytesLength
operator|=
name|fieldLength
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
case|case
name|BINARY
case|:
block|{
name|byte
index|[]
name|recv
init|=
operator|new
name|byte
index|[
name|fieldLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|recv
argument_list|,
literal|0
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decoded
init|=
name|LazyBinary
operator|.
name|decodeIfNeeded
argument_list|(
name|recv
argument_list|)
decl_stmt|;
comment|// use the original bytes in case decoding should fail
name|decoded
operator|=
name|decoded
operator|.
name|length
operator|>
literal|0
condition|?
name|decoded
else|:
name|recv
expr_stmt|;
name|currentBytes
operator|=
name|decoded
expr_stmt|;
name|currentBytesStart
operator|=
literal|0
expr_stmt|;
name|currentBytesLength
operator|=
name|decoded
operator|.
name|length
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|DATE
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isDateMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentDateWritable
operator|.
name|set
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|TIMESTAMP
case|:
block|{
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isDateMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|compareTo
argument_list|(
literal|"NULL"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"TIMESTAMP"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|currentTimestampWritable
operator|.
name|set
argument_list|(
name|timestampParser
operator|.
name|parseTimestamp
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"TIMESTAMP"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
case|case
name|INTERVAL_YEAR_MONTH
case|:
if|if
condition|(
name|fieldLength
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|currentHiveIntervalYearMonthWritable
operator|.
name|set
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"INTERVAL_YEAR_MONTH"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|INTERVAL_DAY_TIME
case|:
if|if
condition|(
name|fieldLength
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|currentHiveIntervalDayTimeWritable
operator|.
name|set
argument_list|(
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"INTERVAL_DAY_TIME"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|DECIMAL
case|:
block|{
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Trim blanks because OldHiveDecimal did...
name|currentHiveDecimalWritable
operator|.
name|setFromBytes
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
comment|/* trimBlanks */
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|decimalIsNull
init|=
operator|!
name|currentHiveDecimalWritable
operator|.
name|isSet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|decimalIsNull
condition|)
block|{
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|field
operator|.
name|typeInfo
decl_stmt|;
name|int
name|precision
init|=
name|decimalTypeInfo
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|decimalTypeInfo
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|decimalIsNull
operator|=
operator|!
name|currentHiveDecimalWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|decimalIsNull
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|dataTypePhysicalVariation
operator|==
name|DataTypePhysicalVariation
operator|.
name|DECIMAL_64
condition|)
block|{
name|currentDecimal64
operator|=
name|currentHiveDecimalWritable
operator|.
name|serialize64
argument_list|(
name|scale
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the HiveDecimal data type range so converted to null. Given data is :"
operator|+
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unexpected primitive category "
operator|+
name|field
operator|.
name|primitiveCategory
argument_list|)
throw|;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|field
operator|.
name|complexCategory
condition|)
block|{
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
block|{
if|if
condition|(
name|currentLevel
operator|>
literal|0
condition|)
block|{
comment|// Check for Map which occupies 2 levels (key separator and key/value pair separator).
if|if
condition|(
name|currentComplexTypeHelpers
index|[
name|currentLevel
operator|-
literal|1
index|]
operator|==
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentLevel
operator|>
literal|1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentComplexTypeHelpers
index|[
name|currentLevel
operator|-
literal|2
index|]
operator|instanceof
name|MapComplexTypeHelper
argument_list|)
expr_stmt|;
name|currentLevel
operator|++
expr_stmt|;
block|}
block|}
name|ComplexTypeHelper
name|complexTypeHelper
init|=
name|field
operator|.
name|complexTypeHelper
decl_stmt|;
name|currentComplexTypeHelpers
index|[
name|currentLevel
operator|++
index|]
operator|=
name|complexTypeHelper
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|complexCategory
operator|==
name|Category
operator|.
name|MAP
condition|)
block|{
name|currentComplexTypeHelpers
index|[
name|currentLevel
index|]
operator|=
literal|null
expr_stmt|;
block|}
comment|// Set up context for readNextComplexField.
name|complexTypeHelper
operator|.
name|setCurrentFieldInfo
argument_list|(
name|currentFieldStart
argument_list|,
name|currentFieldLength
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unexpected complex category "
operator|+
name|field
operator|.
name|complexCategory
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|field
operator|.
name|complexCategory
argument_list|,
name|field
operator|.
name|primitiveCategory
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|field
operator|.
name|complexCategory
argument_list|,
name|field
operator|.
name|primitiveCategory
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|copyToExternalBuffer
parameter_list|(
name|byte
index|[]
name|externalBuffer
parameter_list|,
name|int
name|externalBufferStart
parameter_list|)
block|{
name|copyToBuffer
argument_list|(
name|externalBuffer
argument_list|,
name|externalBufferStart
argument_list|,
name|currentExternalBufferNeededLen
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyToBuffer
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|bufferStart
parameter_list|,
name|int
name|bufferLength
parameter_list|)
block|{
specifier|final
name|int
name|fieldStart
init|=
name|currentFieldStart
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufferLength
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
name|bytes
index|[
name|fieldStart
operator|+
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|==
name|escapeChar
operator|&&
name|i
operator|<
name|bufferLength
operator|-
literal|1
condition|)
block|{
operator|++
name|i
expr_stmt|;
comment|// Check if it's '\r' or '\n'
if|if
condition|(
name|bytes
index|[
name|fieldStart
operator|+
name|i
index|]
operator|==
literal|'r'
condition|)
block|{
name|buffer
index|[
name|bufferStart
operator|+
name|k
operator|++
index|]
operator|=
literal|'\r'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytes
index|[
name|fieldStart
operator|+
name|i
index|]
operator|==
literal|'n'
condition|)
block|{
name|buffer
index|[
name|bufferStart
operator|+
name|k
operator|++
index|]
operator|=
literal|'\n'
expr_stmt|;
block|}
else|else
block|{
comment|// get the next byte
name|buffer
index|[
name|bufferStart
operator|+
name|k
operator|++
index|]
operator|=
name|bytes
index|[
name|fieldStart
operator|+
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|buffer
index|[
name|bufferStart
operator|+
name|k
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNextComplexMultiValue
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentLevel
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|ComplexTypeHelper
name|complexTypeHelper
init|=
name|currentComplexTypeHelpers
index|[
name|currentLevel
operator|-
literal|1
index|]
decl_stmt|;
specifier|final
name|Field
name|complexField
init|=
name|complexTypeHelper
operator|.
name|complexField
decl_stmt|;
specifier|final
name|int
name|fieldPosition
init|=
name|complexTypeHelper
operator|.
name|fieldPosition
decl_stmt|;
specifier|final
name|int
name|complexFieldEnd
init|=
name|complexTypeHelper
operator|.
name|complexFieldEnd
decl_stmt|;
switch|switch
condition|(
name|complexField
operator|.
name|complexCategory
condition|)
block|{
case|case
name|LIST
case|:
block|{
comment|// Allow for empty string, etc.
specifier|final
name|boolean
name|isNext
init|=
operator|(
name|fieldPosition
operator|<=
name|complexFieldEnd
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|isNext
condition|)
block|{
name|popComplexType
argument_list|()
expr_stmt|;
block|}
return|return
name|isNext
return|;
block|}
case|case
name|MAP
case|:
block|{
specifier|final
name|boolean
name|isNext
init|=
operator|(
name|fieldPosition
operator|<
name|complexFieldEnd
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|isNext
condition|)
block|{
name|popComplexType
argument_list|()
expr_stmt|;
block|}
return|return
name|isNext
return|;
block|}
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Complex category "
operator|+
name|complexField
operator|.
name|complexCategory
operator|+
literal|" not multi-value"
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unexpected complex category "
operator|+
name|complexField
operator|.
name|complexCategory
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|popComplexType
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentLevel
operator|>
literal|0
argument_list|)
expr_stmt|;
name|currentLevel
operator|--
expr_stmt|;
if|if
condition|(
name|currentLevel
operator|>
literal|0
condition|)
block|{
comment|// Check for Map which occupies 2 levels (key separator and key/value pair separator).
if|if
condition|(
name|currentComplexTypeHelpers
index|[
name|currentLevel
operator|-
literal|1
index|]
operator|==
literal|null
condition|)
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentLevel
operator|>
literal|1
argument_list|)
expr_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentComplexTypeHelpers
index|[
name|currentLevel
operator|-
literal|2
index|]
operator|instanceof
name|MapComplexTypeHelper
argument_list|)
expr_stmt|;
name|currentLevel
operator|--
expr_stmt|;
block|}
block|}
block|}
comment|/*    * NOTE: There is an expectation that all fields will be read-thru.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readComplexField
parameter_list|()
throws|throws
name|IOException
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentLevel
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|ComplexTypeHelper
name|complexTypeHelper
init|=
name|currentComplexTypeHelpers
index|[
name|currentLevel
operator|-
literal|1
index|]
decl_stmt|;
specifier|final
name|Field
name|complexField
init|=
name|complexTypeHelper
operator|.
name|complexField
decl_stmt|;
switch|switch
condition|(
name|complexField
operator|.
name|complexCategory
condition|)
block|{
case|case
name|LIST
case|:
block|{
specifier|final
name|ListComplexTypeHelper
name|listHelper
init|=
operator|(
name|ListComplexTypeHelper
operator|)
name|complexTypeHelper
decl_stmt|;
specifier|final
name|int
name|fieldPosition
init|=
name|listHelper
operator|.
name|fieldPosition
decl_stmt|;
specifier|final
name|int
name|complexFieldEnd
init|=
name|listHelper
operator|.
name|complexFieldEnd
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|fieldPosition
operator|<=
name|complexFieldEnd
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fieldEnd
init|=
name|parseComplexField
argument_list|(
name|fieldPosition
argument_list|,
name|complexFieldEnd
argument_list|,
name|currentLevel
argument_list|)
decl_stmt|;
name|listHelper
operator|.
name|fieldPosition
operator|=
name|fieldEnd
operator|+
literal|1
expr_stmt|;
comment|// Move past separator.
name|currentFieldStart
operator|=
name|fieldPosition
expr_stmt|;
name|currentFieldLength
operator|=
name|fieldEnd
operator|-
name|fieldPosition
expr_stmt|;
return|return
name|doReadField
argument_list|(
name|listHelper
operator|.
name|elementField
argument_list|)
return|;
block|}
case|case
name|MAP
case|:
block|{
specifier|final
name|MapComplexTypeHelper
name|mapHelper
init|=
operator|(
name|MapComplexTypeHelper
operator|)
name|complexTypeHelper
decl_stmt|;
specifier|final
name|int
name|fieldPosition
init|=
name|mapHelper
operator|.
name|fieldPosition
decl_stmt|;
specifier|final
name|int
name|complexFieldEnd
init|=
name|mapHelper
operator|.
name|complexFieldEnd
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|fieldPosition
operator|<=
name|complexFieldEnd
argument_list|)
expr_stmt|;
name|currentFieldStart
operator|=
name|fieldPosition
expr_stmt|;
specifier|final
name|boolean
name|isParentMap
init|=
name|isParentMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|isParentMap
condition|)
block|{
name|currentLevel
operator|++
expr_stmt|;
block|}
name|int
name|fieldEnd
decl_stmt|;
if|if
condition|(
operator|!
name|mapHelper
operator|.
name|fieldHaveParsedKey
condition|)
block|{
comment|// Parse until key separator (currentLevel + 1).
name|fieldEnd
operator|=
name|parseComplexField
argument_list|(
name|fieldPosition
argument_list|,
name|complexFieldEnd
argument_list|,
name|currentLevel
operator|+
literal|1
argument_list|)
expr_stmt|;
name|mapHelper
operator|.
name|fieldPosition
operator|=
name|fieldEnd
operator|+
literal|1
expr_stmt|;
comment|// Move past key separator.
name|currentFieldLength
operator|=
name|fieldEnd
operator|-
name|fieldPosition
expr_stmt|;
name|mapHelper
operator|.
name|fieldHaveParsedKey
operator|=
literal|true
expr_stmt|;
specifier|final
name|boolean
name|result
init|=
name|doReadField
argument_list|(
name|mapHelper
operator|.
name|keyField
argument_list|)
decl_stmt|;
if|if
condition|(
name|isParentMap
condition|)
block|{
name|currentLevel
operator|--
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
comment|// Parse until pair separator (currentLevel).
name|fieldEnd
operator|=
name|parseComplexField
argument_list|(
name|fieldPosition
argument_list|,
name|complexFieldEnd
argument_list|,
name|currentLevel
argument_list|)
expr_stmt|;
name|mapHelper
operator|.
name|fieldPosition
operator|=
name|fieldEnd
operator|+
literal|1
expr_stmt|;
comment|// Move past pair separator.
name|currentFieldLength
operator|=
name|fieldEnd
operator|-
name|fieldPosition
expr_stmt|;
name|mapHelper
operator|.
name|fieldHaveParsedKey
operator|=
literal|false
expr_stmt|;
specifier|final
name|boolean
name|result
init|=
name|doReadField
argument_list|(
name|mapHelper
operator|.
name|valueField
argument_list|)
decl_stmt|;
if|if
condition|(
name|isParentMap
condition|)
block|{
name|currentLevel
operator|--
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
case|case
name|STRUCT
case|:
block|{
specifier|final
name|StructComplexTypeHelper
name|structHelper
init|=
operator|(
name|StructComplexTypeHelper
operator|)
name|complexTypeHelper
decl_stmt|;
specifier|final
name|int
name|fieldPosition
init|=
name|structHelper
operator|.
name|fieldPosition
decl_stmt|;
specifier|final
name|int
name|complexFieldEnd
init|=
name|structHelper
operator|.
name|complexFieldEnd
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|fieldPosition
operator|<=
name|complexFieldEnd
argument_list|)
expr_stmt|;
name|currentFieldStart
operator|=
name|fieldPosition
expr_stmt|;
specifier|final
name|int
name|nextFieldIndex
init|=
name|structHelper
operator|.
name|nextFieldIndex
decl_stmt|;
specifier|final
name|Field
index|[]
name|fields
init|=
name|structHelper
operator|.
name|fields
decl_stmt|;
specifier|final
name|int
name|fieldEnd
decl_stmt|;
if|if
condition|(
name|nextFieldIndex
operator|!=
name|fields
operator|.
name|length
operator|-
literal|1
condition|)
block|{
comment|// Parse until field separator (currentLevel).
name|fieldEnd
operator|=
name|parseComplexField
argument_list|(
name|fieldPosition
argument_list|,
name|complexFieldEnd
argument_list|,
name|currentLevel
argument_list|)
expr_stmt|;
name|structHelper
operator|.
name|fieldPosition
operator|=
name|fieldEnd
operator|+
literal|1
expr_stmt|;
comment|// Move past key separator.
name|currentFieldLength
operator|=
name|fieldEnd
operator|-
name|fieldPosition
expr_stmt|;
return|return
name|doReadField
argument_list|(
name|fields
index|[
name|structHelper
operator|.
name|nextFieldIndex
operator|++
index|]
argument_list|)
return|;
block|}
else|else
block|{
comment|// Parse until field separator (currentLevel).
name|fieldEnd
operator|=
name|parseComplexField
argument_list|(
name|fieldPosition
argument_list|,
name|complexFieldEnd
argument_list|,
name|currentLevel
argument_list|)
expr_stmt|;
name|currentFieldLength
operator|=
name|fieldEnd
operator|-
name|fieldPosition
expr_stmt|;
name|structHelper
operator|.
name|nextFieldIndex
operator|=
literal|0
expr_stmt|;
name|boolean
name|result
init|=
name|doReadField
argument_list|(
name|fields
index|[
name|fields
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isEscaped
condition|)
block|{
comment|// No parsing necessary -- the end is the parent's end.
name|structHelper
operator|.
name|fieldPosition
operator|=
name|complexFieldEnd
operator|+
literal|1
expr_stmt|;
comment|// Move past parent field separator.
name|currentEscapeCount
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// We must parse to get the escape count.
name|parseComplexField
argument_list|(
name|fieldPosition
argument_list|,
name|complexFieldEnd
argument_list|,
name|currentLevel
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
case|case
name|UNION
case|:
block|{
specifier|final
name|UnionComplexTypeHelper
name|unionHelper
init|=
operator|(
name|UnionComplexTypeHelper
operator|)
name|complexTypeHelper
decl_stmt|;
specifier|final
name|int
name|fieldPosition
init|=
name|unionHelper
operator|.
name|fieldPosition
decl_stmt|;
specifier|final
name|int
name|complexFieldEnd
init|=
name|unionHelper
operator|.
name|complexFieldEnd
decl_stmt|;
name|Preconditions
operator|.
name|checkState
argument_list|(
name|fieldPosition
operator|<=
name|complexFieldEnd
argument_list|)
expr_stmt|;
name|currentFieldStart
operator|=
name|fieldPosition
expr_stmt|;
specifier|final
name|int
name|fieldEnd
decl_stmt|;
if|if
condition|(
operator|!
name|unionHelper
operator|.
name|fieldHaveParsedTag
condition|)
block|{
name|boolean
name|isParentMap
init|=
name|isParentMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|isParentMap
condition|)
block|{
name|currentLevel
operator|++
expr_stmt|;
block|}
comment|// Parse until union separator (currentLevel).
name|fieldEnd
operator|=
name|parseComplexField
argument_list|(
name|fieldPosition
argument_list|,
name|complexFieldEnd
argument_list|,
name|currentLevel
argument_list|)
expr_stmt|;
name|unionHelper
operator|.
name|fieldPosition
operator|=
name|fieldEnd
operator|+
literal|1
expr_stmt|;
comment|// Move past union separator.
name|currentFieldLength
operator|=
name|fieldEnd
operator|-
name|fieldPosition
expr_stmt|;
name|unionHelper
operator|.
name|fieldHaveParsedTag
operator|=
literal|true
expr_stmt|;
name|boolean
name|successful
init|=
name|doReadField
argument_list|(
name|unionHelper
operator|.
name|tagField
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|successful
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Null union tag"
argument_list|)
throw|;
block|}
name|unionHelper
operator|.
name|fieldTag
operator|=
name|currentInt
expr_stmt|;
if|if
condition|(
name|isParentMap
condition|)
block|{
name|currentLevel
operator|--
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isEscaped
condition|)
block|{
comment|// No parsing necessary -- the end is the parent's end.
name|unionHelper
operator|.
name|fieldPosition
operator|=
name|complexFieldEnd
operator|+
literal|1
expr_stmt|;
comment|// Move past parent field separator.
name|currentEscapeCount
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
comment|// We must parse to get the escape count.
name|fieldEnd
operator|=
name|parseComplexField
argument_list|(
name|fieldPosition
argument_list|,
name|complexFieldEnd
argument_list|,
name|currentLevel
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|currentFieldLength
operator|=
name|complexFieldEnd
operator|-
name|fieldPosition
expr_stmt|;
name|unionHelper
operator|.
name|fieldHaveParsedTag
operator|=
literal|false
expr_stmt|;
return|return
name|doReadField
argument_list|(
name|unionHelper
operator|.
name|fields
index|[
name|unionHelper
operator|.
name|fieldTag
index|]
argument_list|)
return|;
block|}
block|}
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unexpected complex category "
operator|+
name|complexField
operator|.
name|complexCategory
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|isParentMap
parameter_list|()
block|{
return|return
name|currentLevel
operator|>=
literal|2
operator|&&
name|currentComplexTypeHelpers
index|[
name|currentLevel
operator|-
literal|2
index|]
operator|instanceof
name|MapComplexTypeHelper
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|finishComplexVariableFieldsType
parameter_list|()
block|{
name|Preconditions
operator|.
name|checkState
argument_list|(
name|currentLevel
operator|>
literal|0
argument_list|)
expr_stmt|;
specifier|final
name|ComplexTypeHelper
name|complexTypeHelper
init|=
name|currentComplexTypeHelpers
index|[
name|currentLevel
operator|-
literal|1
index|]
decl_stmt|;
specifier|final
name|Field
name|complexField
init|=
name|complexTypeHelper
operator|.
name|complexField
decl_stmt|;
switch|switch
condition|(
name|complexField
operator|.
name|complexCategory
condition|)
block|{
case|case
name|LIST
case|:
case|case
name|MAP
case|:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Complex category "
operator|+
name|complexField
operator|.
name|complexCategory
operator|+
literal|" is not variable fields type"
argument_list|)
throw|;
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
name|popComplexType
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unexpected category "
operator|+
name|complexField
operator|.
name|complexCategory
argument_list|)
throw|;
block|}
block|}
comment|/*    * Call this method may be called after all the all fields have been read to check    * for unread fields.    *    * Note that when optimizing reading to stop reading unneeded include columns, worrying    * about whether all data is consumed is not appropriate (often we aren't reading it all by    * design).    *    * Since LazySimpleDeserializeRead parses the line through the last desired column it does    * support this function.    */
specifier|public
name|boolean
name|isEndOfInputReached
parameter_list|()
block|{
return|return
name|isEndOfInputReached
return|;
block|}
specifier|public
name|void
name|logExceptionMessage
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|bytesStart
parameter_list|,
name|int
name|bytesLength
parameter_list|,
name|Category
name|dataComplexCategory
parameter_list|,
name|PrimitiveCategory
name|dataPrimitiveCategory
parameter_list|)
block|{
specifier|final
name|String
name|dataType
decl_stmt|;
if|if
condition|(
name|dataComplexCategory
operator|==
literal|null
condition|)
block|{
switch|switch
condition|(
name|dataPrimitiveCategory
condition|)
block|{
case|case
name|BYTE
case|:
name|dataType
operator|=
literal|"TINYINT"
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|dataType
operator|=
literal|"BIGINT"
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|dataType
operator|=
literal|"SMALLINT"
expr_stmt|;
break|break;
default|default:
name|dataType
operator|=
name|dataPrimitiveCategory
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|dataComplexCategory
condition|)
block|{
case|case
name|LIST
case|:
case|case
name|MAP
case|:
case|case
name|STRUCT
case|:
case|case
name|UNION
case|:
name|dataType
operator|=
name|dataComplexCategory
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unexpected complex category "
operator|+
name|dataComplexCategory
argument_list|)
throw|;
block|}
block|}
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|bytesStart
argument_list|,
name|bytesLength
argument_list|,
name|dataType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|logExceptionMessage
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|bytesStart
parameter_list|,
name|int
name|bytesLength
parameter_list|,
name|String
name|dataType
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|byteData
init|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|bytesStart
argument_list|,
name|bytesLength
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the "
operator|+
name|dataType
operator|+
literal|" data type range so converted to null. Given data is :"
operator|+
name|byteData
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"For debugging purposes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the "
operator|+
name|dataType
operator|+
literal|" data type range so converted to null."
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|maxLongBytes
init|=
operator|(
operator|(
name|Long
operator|)
name|Long
operator|.
name|MAX_VALUE
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|int
name|byteArrayCompareRanges
parameter_list|(
name|byte
index|[]
name|arg1
parameter_list|,
name|int
name|start1
parameter_list|,
name|byte
index|[]
name|arg2
parameter_list|,
name|int
name|start2
parameter_list|,
name|int
name|len
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
comment|// Note the "& 0xff" is just a way to convert unsigned bytes to signed integer.
name|int
name|b1
init|=
name|arg1
index|[
name|i
operator|+
name|start1
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|b2
init|=
name|arg2
index|[
name|i
operator|+
name|start2
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|b1
operator|!=
name|b2
condition|)
block|{
return|return
name|b1
operator|-
name|b2
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

