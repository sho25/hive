begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyByte
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyShort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|TimestampParser
import|;
end_import

begin_comment
comment|/*  * Directly deserialize with the caller reading field-by-field the LazySimple (text)  * serialization format.  *  * The caller is responsible for calling the read method for the right type of each field  * (after calling readNextField).  *  * Reading some fields require a results object to receive value information.  A separate  * results object is created by the caller at initialization per different field even for the same  * type.  *  * Some type values are by reference to either bytes in the deserialization buffer or to  * other type specific buffers.  So, those references are only valid until the next time set is  * called.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LazySimpleDeserializeRead
extends|extends
name|DeserializeRead
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LazySimpleDeserializeRead
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|int
index|[]
name|startPosition
decl_stmt|;
specifier|private
specifier|final
name|byte
name|separator
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isEscaped
decl_stmt|;
specifier|private
specifier|final
name|byte
name|escapeChar
decl_stmt|;
specifier|private
specifier|final
name|int
index|[]
name|escapeCounts
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|nullSequenceBytes
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isExtendedBooleanLiteral
decl_stmt|;
specifier|private
specifier|final
name|int
name|fieldCount
decl_stmt|;
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|private
name|int
name|start
decl_stmt|;
specifier|private
name|int
name|end
decl_stmt|;
specifier|private
name|boolean
name|parsed
decl_stmt|;
comment|// Used by readNextField/skipNextField and not by readField.
specifier|private
name|int
name|nextFieldIndex
decl_stmt|;
comment|// For getDetailedReadPositionString.
specifier|private
name|int
name|currentFieldIndex
decl_stmt|;
specifier|private
name|int
name|currentFieldStart
decl_stmt|;
specifier|private
name|int
name|currentFieldLength
decl_stmt|;
comment|// For string/char/varchar buffering when there are escapes.
specifier|private
name|int
name|internalBufferLen
decl_stmt|;
specifier|private
name|byte
index|[]
name|internalBuffer
decl_stmt|;
specifier|private
specifier|final
name|TimestampParser
name|timestampParser
decl_stmt|;
specifier|private
name|boolean
name|isEndOfInputReached
decl_stmt|;
specifier|public
name|LazySimpleDeserializeRead
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|boolean
name|useExternalBuffer
parameter_list|,
name|byte
name|separator
parameter_list|,
name|LazySerDeParameters
name|lazyParams
parameter_list|)
block|{
name|super
argument_list|(
name|typeInfos
argument_list|,
name|useExternalBuffer
argument_list|)
expr_stmt|;
name|fieldCount
operator|=
name|typeInfos
operator|.
name|length
expr_stmt|;
comment|// Field length is difference between positions hence one extra.
name|startPosition
operator|=
operator|new
name|int
index|[
name|fieldCount
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
name|isEscaped
operator|=
name|lazyParams
operator|.
name|isEscaped
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEscaped
condition|)
block|{
name|escapeChar
operator|=
name|lazyParams
operator|.
name|getEscapeChar
argument_list|()
expr_stmt|;
name|escapeCounts
operator|=
operator|new
name|int
index|[
name|fieldCount
index|]
expr_stmt|;
block|}
else|else
block|{
name|escapeChar
operator|=
operator|(
name|byte
operator|)
literal|0
expr_stmt|;
name|escapeCounts
operator|=
literal|null
expr_stmt|;
block|}
name|nullSequenceBytes
operator|=
name|lazyParams
operator|.
name|getNullSequence
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|isExtendedBooleanLiteral
operator|=
name|lazyParams
operator|.
name|isExtendedBooleanLiteral
argument_list|()
expr_stmt|;
if|if
condition|(
name|lazyParams
operator|.
name|isLastColumnTakesRest
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"serialization.last.column.takes.rest not supported"
argument_list|)
throw|;
block|}
name|timestampParser
operator|=
operator|new
name|TimestampParser
argument_list|()
expr_stmt|;
name|internalBufferLen
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|LazySimpleDeserializeRead
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|boolean
name|useExternalBuffer
parameter_list|,
name|LazySerDeParameters
name|lazyParams
parameter_list|)
block|{
name|this
argument_list|(
name|typeInfos
argument_list|,
name|useExternalBuffer
argument_list|,
name|lazyParams
operator|.
name|getSeparators
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|lazyParams
argument_list|)
expr_stmt|;
block|}
comment|/*    * Set the range of bytes to be deserialized.    */
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|start
operator|=
name|offset
expr_stmt|;
name|end
operator|=
name|offset
operator|+
name|length
expr_stmt|;
name|parsed
operator|=
literal|false
expr_stmt|;
name|nextFieldIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/*    * Get detailed read position information to help diagnose exceptions.    */
specifier|public
name|String
name|getDetailedReadPositionString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Reading byte[] of length "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" at start offset "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" for length "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" to read "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" fields with types "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|typeInfos
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".  "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|parsed
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Error during field separator parsing"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Read field #"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|currentFieldIndex
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" at field start position "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|startPosition
index|[
name|currentFieldIndex
index|]
argument_list|)
expr_stmt|;
name|int
name|currentFieldLength
init|=
name|startPosition
index|[
name|currentFieldIndex
operator|+
literal|1
index|]
operator|-
name|startPosition
index|[
name|currentFieldIndex
index|]
operator|-
literal|1
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" for field length "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|currentFieldLength
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Parse the byte[] and fill each field.    *    * This is an adapted version of the parse method in the LazyStruct class.    * They should parse things the same way.    */
specifier|private
name|void
name|parse
parameter_list|()
block|{
name|int
name|fieldId
init|=
literal|0
decl_stmt|;
name|int
name|fieldByteBegin
init|=
name|start
decl_stmt|;
name|int
name|fieldByteEnd
init|=
name|start
decl_stmt|;
specifier|final
name|byte
name|separator
init|=
name|this
operator|.
name|separator
decl_stmt|;
specifier|final
name|int
name|fieldCount
init|=
name|this
operator|.
name|fieldCount
decl_stmt|;
specifier|final
name|int
index|[]
name|startPosition
init|=
name|this
operator|.
name|startPosition
decl_stmt|;
specifier|final
name|byte
index|[]
name|bytes
init|=
name|this
operator|.
name|bytes
decl_stmt|;
specifier|final
name|int
name|end
init|=
name|this
operator|.
name|end
decl_stmt|;
comment|/*      * Optimize the loops by pulling special end cases and global decisions like isEscaped out!      */
if|if
condition|(
operator|!
name|isEscaped
condition|)
block|{
while|while
condition|(
name|fieldByteEnd
operator|<
name|end
condition|)
block|{
if|if
condition|(
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|separator
condition|)
block|{
name|startPosition
index|[
name|fieldId
operator|++
index|]
operator|=
name|fieldByteBegin
expr_stmt|;
if|if
condition|(
name|fieldId
operator|==
name|fieldCount
condition|)
block|{
break|break;
block|}
name|fieldByteBegin
operator|=
operator|++
name|fieldByteEnd
expr_stmt|;
block|}
else|else
block|{
name|fieldByteEnd
operator|++
expr_stmt|;
block|}
block|}
comment|// End serves as final separator.
if|if
condition|(
name|fieldByteEnd
operator|==
name|end
operator|&&
name|fieldId
operator|<
name|fieldCount
condition|)
block|{
name|startPosition
index|[
name|fieldId
operator|++
index|]
operator|=
name|fieldByteBegin
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|byte
name|escapeChar
init|=
name|this
operator|.
name|escapeChar
decl_stmt|;
specifier|final
name|int
name|endLessOne
init|=
name|end
operator|-
literal|1
decl_stmt|;
specifier|final
name|int
index|[]
name|escapeCounts
init|=
name|this
operator|.
name|escapeCounts
decl_stmt|;
name|int
name|escapeCount
init|=
literal|0
decl_stmt|;
comment|// Process the bytes that can be escaped (the last one can't be).
while|while
condition|(
name|fieldByteEnd
operator|<
name|endLessOne
condition|)
block|{
if|if
condition|(
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|separator
condition|)
block|{
name|escapeCounts
index|[
name|fieldId
index|]
operator|=
name|escapeCount
expr_stmt|;
name|escapeCount
operator|=
literal|0
expr_stmt|;
name|startPosition
index|[
name|fieldId
operator|++
index|]
operator|=
name|fieldByteBegin
expr_stmt|;
if|if
condition|(
name|fieldId
operator|==
name|fieldCount
condition|)
block|{
break|break;
block|}
name|fieldByteBegin
operator|=
operator|++
name|fieldByteEnd
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|escapeChar
condition|)
block|{
comment|// Ignore the char after escape_char
name|fieldByteEnd
operator|+=
literal|2
expr_stmt|;
name|escapeCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|fieldByteEnd
operator|++
expr_stmt|;
block|}
block|}
comment|// Process the last byte if necessary.
if|if
condition|(
name|fieldByteEnd
operator|==
name|endLessOne
operator|&&
name|fieldId
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|separator
condition|)
block|{
name|escapeCounts
index|[
name|fieldId
index|]
operator|=
name|escapeCount
expr_stmt|;
name|escapeCount
operator|=
literal|0
expr_stmt|;
name|startPosition
index|[
name|fieldId
operator|++
index|]
operator|=
name|fieldByteBegin
expr_stmt|;
if|if
condition|(
name|fieldId
operator|<=
name|fieldCount
condition|)
block|{
name|fieldByteBegin
operator|=
operator|++
name|fieldByteEnd
expr_stmt|;
block|}
block|}
else|else
block|{
name|fieldByteEnd
operator|++
expr_stmt|;
block|}
block|}
comment|// End serves as final separator.
if|if
condition|(
name|fieldByteEnd
operator|==
name|end
operator|&&
name|fieldId
operator|<
name|fieldCount
condition|)
block|{
name|escapeCounts
index|[
name|fieldId
index|]
operator|=
name|escapeCount
expr_stmt|;
name|startPosition
index|[
name|fieldId
operator|++
index|]
operator|=
name|fieldByteBegin
expr_stmt|;
block|}
block|}
if|if
condition|(
name|fieldId
operator|==
name|fieldCount
operator|||
name|fieldByteEnd
operator|==
name|end
condition|)
block|{
comment|// All fields have been parsed, or bytes have been parsed.
comment|// We need to set the startPosition of fields.length to ensure we
comment|// can use the same formula to calculate the length of each field.
comment|// For missing fields, their starting positions will all be the same,
comment|// which will make their lengths to be -1 and uncheckedGetField will
comment|// return these fields as NULLs.
name|Arrays
operator|.
name|fill
argument_list|(
name|startPosition
argument_list|,
name|fieldId
argument_list|,
name|startPosition
operator|.
name|length
argument_list|,
name|fieldByteEnd
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|isEndOfInputReached
operator|=
operator|(
name|fieldByteEnd
operator|==
name|end
operator|)
expr_stmt|;
block|}
comment|/*    * Reads the the next field.    *    * Afterwards, reading is positioned to the next field.    *    * @return  Return true when the field was not null and data is put in the appropriate    *          current* member.    *          Otherwise, false when the field is null.    *    */
annotation|@
name|Override
specifier|public
name|boolean
name|readNextField
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|nextFieldIndex
operator|+
literal|1
operator|>=
name|fieldCount
condition|)
block|{
return|return
literal|false
return|;
block|}
name|nextFieldIndex
operator|++
expr_stmt|;
return|return
name|readField
argument_list|(
name|nextFieldIndex
argument_list|)
return|;
block|}
comment|/*    * Reads through an undesired field.    *    * No data values are valid after this call.    * Designed for skipping columns that are not included.    */
specifier|public
name|void
name|skipNextField
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|parsed
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
name|parsed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|nextFieldIndex
operator|+
literal|1
operator|>=
name|fieldCount
condition|)
block|{
comment|// No more.
block|}
else|else
block|{
name|nextFieldIndex
operator|++
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReadFieldSupported
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|checkNull
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|!=
name|nullSequenceBytes
operator|.
name|length
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|byte
index|[]
name|nullSequenceBytes
init|=
name|this
operator|.
name|nullSequenceBytes
decl_stmt|;
switch|switch
condition|(
name|len
condition|)
block|{
case|case
literal|0
case|:
return|return
literal|true
return|;
case|case
literal|2
case|:
return|return
name|bytes
index|[
name|start
index|]
operator|==
name|nullSequenceBytes
index|[
literal|0
index|]
operator|&&
name|bytes
index|[
name|start
operator|+
literal|1
index|]
operator|==
name|nullSequenceBytes
index|[
literal|1
index|]
return|;
case|case
literal|4
case|:
return|return
name|bytes
index|[
name|start
index|]
operator|==
name|nullSequenceBytes
index|[
literal|0
index|]
operator|&&
name|bytes
index|[
name|start
operator|+
literal|1
index|]
operator|==
name|nullSequenceBytes
index|[
literal|1
index|]
operator|&&
name|bytes
index|[
name|start
operator|+
literal|2
index|]
operator|==
name|nullSequenceBytes
index|[
literal|2
index|]
operator|&&
name|bytes
index|[
name|start
operator|+
literal|3
index|]
operator|==
name|nullSequenceBytes
index|[
literal|3
index|]
return|;
default|default:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nullSequenceBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|bytes
index|[
name|start
operator|+
name|i
index|]
operator|!=
name|nullSequenceBytes
index|[
name|i
index|]
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/*    * When supported, read a field by field number (i.e. random access).    *    * Currently, only LazySimpleDeserializeRead supports this.    *    * @return  Return true when the field was not null and data is put in the appropriate    *          current* member.    *          Otherwise, false when the field is null.    */
specifier|public
name|boolean
name|readField
parameter_list|(
name|int
name|fieldIndex
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|parsed
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
name|parsed
operator|=
literal|true
expr_stmt|;
block|}
name|currentFieldIndex
operator|=
name|fieldIndex
expr_stmt|;
specifier|final
name|int
name|fieldStart
init|=
name|startPosition
index|[
name|fieldIndex
index|]
decl_stmt|;
name|currentFieldStart
operator|=
name|fieldStart
expr_stmt|;
specifier|final
name|int
name|fieldLength
init|=
name|startPosition
index|[
name|fieldIndex
operator|+
literal|1
index|]
operator|-
name|startPosition
index|[
name|fieldIndex
index|]
operator|-
literal|1
decl_stmt|;
name|currentFieldLength
operator|=
name|fieldLength
expr_stmt|;
if|if
condition|(
name|fieldLength
operator|<
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|byte
index|[]
name|bytes
init|=
name|this
operator|.
name|bytes
decl_stmt|;
comment|// Is the field the configured string representing NULL?
if|if
condition|(
name|nullSequenceBytes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|checkNull
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
try|try
block|{
comment|/*        * We have a field and are positioned to it.  Read it.        */
switch|switch
condition|(
name|primitiveCategories
index|[
name|fieldIndex
index|]
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|int
name|i
init|=
name|fieldStart
decl_stmt|;
if|if
condition|(
name|fieldLength
operator|==
literal|4
condition|)
block|{
if|if
condition|(
operator|(
name|bytes
index|[
name|i
index|]
operator|==
literal|'T'
operator|||
name|bytes
index|[
name|i
index|]
operator|==
literal|'t'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'R'
operator|||
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'r'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'U'
operator|||
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'u'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'E'
operator|||
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'e'
operator|)
condition|)
block|{
name|currentBoolean
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// No boolean value match for 4 char field.
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldLength
operator|==
literal|5
condition|)
block|{
if|if
condition|(
operator|(
name|bytes
index|[
name|i
index|]
operator|==
literal|'F'
operator|||
name|bytes
index|[
name|i
index|]
operator|==
literal|'f'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'A'
operator|||
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'a'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'L'
operator|||
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'l'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'S'
operator|||
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'s'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|4
index|]
operator|==
literal|'E'
operator|||
name|bytes
index|[
name|i
operator|+
literal|4
index|]
operator|==
literal|'e'
operator|)
condition|)
block|{
name|currentBoolean
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// No boolean value match for 5 char field.
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|isExtendedBooleanLiteral
operator|&&
name|fieldLength
operator|==
literal|1
condition|)
block|{
name|byte
name|b
init|=
name|bytes
index|[
name|fieldStart
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|'1'
operator|||
name|b
operator|==
literal|'t'
operator|||
name|b
operator|==
literal|'T'
condition|)
block|{
name|currentBoolean
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|'0'
operator|||
name|b
operator|==
literal|'f'
operator|||
name|b
operator|==
literal|'F'
condition|)
block|{
name|currentBoolean
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// No boolean value match for extended 1 char field.
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// No boolean value match for other lengths.
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
case|case
name|BYTE
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentByte
operator|=
name|LazyByte
operator|.
name|parseByte
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|SHORT
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentShort
operator|=
name|LazyShort
operator|.
name|parseShort
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|INT
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentInt
operator|=
name|LazyInteger
operator|.
name|parseInt
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|LONG
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentLong
operator|=
name|LazyLong
operator|.
name|parseLong
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|FLOAT
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentFloat
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|DOUBLE
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentDouble
operator|=
name|StringToDouble
operator|.
name|strtod
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
block|{
if|if
condition|(
name|isEscaped
condition|)
block|{
if|if
condition|(
name|escapeCounts
index|[
name|fieldIndex
index|]
operator|==
literal|0
condition|)
block|{
comment|// No escaping.
name|currentExternalBufferNeeded
operator|=
literal|false
expr_stmt|;
name|currentBytes
operator|=
name|bytes
expr_stmt|;
name|currentBytesStart
operator|=
name|fieldStart
expr_stmt|;
name|currentBytesLength
operator|=
name|fieldLength
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|unescapedLength
init|=
name|fieldLength
operator|-
name|escapeCounts
index|[
name|fieldIndex
index|]
decl_stmt|;
if|if
condition|(
name|useExternalBuffer
condition|)
block|{
name|currentExternalBufferNeeded
operator|=
literal|true
expr_stmt|;
name|currentExternalBufferNeededLen
operator|=
name|unescapedLength
expr_stmt|;
block|}
else|else
block|{
comment|// The copyToBuffer will reposition and re-read the input buffer.
name|currentExternalBufferNeeded
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|internalBufferLen
operator|<
name|unescapedLength
condition|)
block|{
name|internalBufferLen
operator|=
name|unescapedLength
expr_stmt|;
name|internalBuffer
operator|=
operator|new
name|byte
index|[
name|internalBufferLen
index|]
expr_stmt|;
block|}
name|copyToBuffer
argument_list|(
name|internalBuffer
argument_list|,
literal|0
argument_list|,
name|unescapedLength
argument_list|)
expr_stmt|;
name|currentBytes
operator|=
name|internalBuffer
expr_stmt|;
name|currentBytesStart
operator|=
literal|0
expr_stmt|;
name|currentBytesLength
operator|=
name|unescapedLength
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// If the data is not escaped, reference the data directly.
name|currentExternalBufferNeeded
operator|=
literal|false
expr_stmt|;
name|currentBytes
operator|=
name|bytes
expr_stmt|;
name|currentBytesStart
operator|=
name|fieldStart
expr_stmt|;
name|currentBytesLength
operator|=
name|fieldLength
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
case|case
name|BINARY
case|:
block|{
name|byte
index|[]
name|recv
init|=
operator|new
name|byte
index|[
name|fieldLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|recv
argument_list|,
literal|0
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decoded
init|=
name|LazyBinary
operator|.
name|decodeIfNeeded
argument_list|(
name|recv
argument_list|)
decl_stmt|;
comment|// use the original bytes in case decoding should fail
name|decoded
operator|=
name|decoded
operator|.
name|length
operator|>
literal|0
condition|?
name|decoded
else|:
name|recv
expr_stmt|;
name|currentBytes
operator|=
name|decoded
expr_stmt|;
name|currentBytesStart
operator|=
literal|0
expr_stmt|;
name|currentBytesLength
operator|=
name|decoded
operator|.
name|length
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|DATE
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isDateMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|currentDateWritable
operator|.
name|set
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|TIMESTAMP
case|:
block|{
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isDateMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|StandardCharsets
operator|.
name|US_ASCII
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|compareTo
argument_list|(
literal|"NULL"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"TIMESTAMP"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|currentTimestampWritable
operator|.
name|set
argument_list|(
name|timestampParser
operator|.
name|parseTimestamp
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"TIMESTAMP"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
case|case
name|INTERVAL_YEAR_MONTH
case|:
if|if
condition|(
name|fieldLength
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|currentHiveIntervalYearMonthWritable
operator|.
name|set
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"INTERVAL_YEAR_MONTH"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|INTERVAL_DAY_TIME
case|:
if|if
condition|(
name|fieldLength
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
name|currentHiveIntervalDayTimeWritable
operator|.
name|set
argument_list|(
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"INTERVAL_DAY_TIME"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
case|case
name|DECIMAL
case|:
block|{
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Trim blanks because OldHiveDecimal did...
name|currentHiveDecimalWritable
operator|.
name|setFromBytes
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
comment|/* trimBlanks */
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|decimalIsNull
init|=
operator|!
name|currentHiveDecimalWritable
operator|.
name|isSet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|decimalIsNull
condition|)
block|{
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfos
index|[
name|fieldIndex
index|]
decl_stmt|;
name|int
name|precision
init|=
name|decimalTypeInfo
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|decimalTypeInfo
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|decimalIsNull
operator|=
operator|!
name|currentHiveDecimalWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|decimalIsNull
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the HiveDecimal data type range so converted to null. Given data is :"
operator|+
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unexpected primitive category "
operator|+
name|primitiveCategories
index|[
name|fieldIndex
index|]
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|// U+FFFD will throw this as well
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|primitiveCategories
index|[
name|fieldIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
comment|// E.g. can be thrown by Date.valueOf
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|primitiveCategories
index|[
name|fieldIndex
index|]
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|copyToExternalBuffer
parameter_list|(
name|byte
index|[]
name|externalBuffer
parameter_list|,
name|int
name|externalBufferStart
parameter_list|)
block|{
name|copyToBuffer
argument_list|(
name|externalBuffer
argument_list|,
name|externalBufferStart
argument_list|,
name|currentExternalBufferNeededLen
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyToBuffer
parameter_list|(
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|bufferStart
parameter_list|,
name|int
name|bufferLength
parameter_list|)
block|{
specifier|final
name|int
name|fieldStart
init|=
name|currentFieldStart
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufferLength
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b
init|=
name|bytes
index|[
name|fieldStart
operator|+
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|==
name|escapeChar
operator|&&
name|i
operator|<
name|bufferLength
operator|-
literal|1
condition|)
block|{
operator|++
name|i
expr_stmt|;
comment|// Check if it's '\r' or '\n'
if|if
condition|(
name|bytes
index|[
name|fieldStart
operator|+
name|i
index|]
operator|==
literal|'r'
condition|)
block|{
name|buffer
index|[
name|bufferStart
operator|+
name|k
operator|++
index|]
operator|=
literal|'\r'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|bytes
index|[
name|fieldStart
operator|+
name|i
index|]
operator|==
literal|'n'
condition|)
block|{
name|buffer
index|[
name|bufferStart
operator|+
name|k
operator|++
index|]
operator|=
literal|'\n'
expr_stmt|;
block|}
else|else
block|{
comment|// get the next byte
name|buffer
index|[
name|bufferStart
operator|+
name|k
operator|++
index|]
operator|=
name|bytes
index|[
name|fieldStart
operator|+
name|i
index|]
expr_stmt|;
block|}
block|}
else|else
block|{
name|buffer
index|[
name|bufferStart
operator|+
name|k
operator|++
index|]
operator|=
name|b
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Call this method may be called after all the all fields have been read to check    * for unread fields.    *    * Note that when optimizing reading to stop reading unneeded include columns, worrying    * about whether all data is consumed is not appropriate (often we aren't reading it all by    * design).    *    * Since LazySimpleDeserializeRead parses the line through the last desired column it does    * support this function.    */
specifier|public
name|boolean
name|isEndOfInputReached
parameter_list|()
block|{
return|return
name|isEndOfInputReached
return|;
block|}
specifier|public
name|void
name|logExceptionMessage
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|bytesStart
parameter_list|,
name|int
name|bytesLength
parameter_list|,
name|PrimitiveCategory
name|dataCategory
parameter_list|)
block|{
specifier|final
name|String
name|dataType
decl_stmt|;
switch|switch
condition|(
name|dataCategory
condition|)
block|{
case|case
name|BYTE
case|:
name|dataType
operator|=
literal|"TINYINT"
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|dataType
operator|=
literal|"BIGINT"
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|dataType
operator|=
literal|"SMALLINT"
expr_stmt|;
break|break;
default|default:
name|dataType
operator|=
name|dataCategory
operator|.
name|toString
argument_list|()
expr_stmt|;
break|break;
block|}
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|bytesStart
argument_list|,
name|bytesLength
argument_list|,
name|dataType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|logExceptionMessage
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|bytesStart
parameter_list|,
name|int
name|bytesLength
parameter_list|,
name|String
name|dataType
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|byteData
init|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|bytesStart
argument_list|,
name|bytesLength
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the "
operator|+
name|dataType
operator|+
literal|" data type range so converted to null. Given data is :"
operator|+
name|byteData
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"For debugging purposes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the "
operator|+
name|dataType
operator|+
literal|" data type range so converted to null."
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------------------------------------------
specifier|private
specifier|static
name|byte
index|[]
name|maxLongBytes
init|=
operator|(
operator|(
name|Long
operator|)
name|Long
operator|.
name|MAX_VALUE
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|maxLongDigitsCount
init|=
name|maxLongBytes
operator|.
name|length
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|minLongNoSignBytes
init|=
operator|(
operator|(
name|Long
operator|)
name|Long
operator|.
name|MIN_VALUE
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|int
name|byteArrayCompareRanges
parameter_list|(
name|byte
index|[]
name|arg1
parameter_list|,
name|int
name|start1
parameter_list|,
name|byte
index|[]
name|arg2
parameter_list|,
name|int
name|start2
parameter_list|,
name|int
name|len
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
comment|// Note the "& 0xff" is just a way to convert unsigned bytes to signed integer.
name|int
name|b1
init|=
name|arg1
index|[
name|i
operator|+
name|start1
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|b2
init|=
name|arg2
index|[
name|i
operator|+
name|start2
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|b1
operator|!=
name|b2
condition|)
block|{
return|return
name|b1
operator|-
name|b2
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

