begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharacterCodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyByte
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyShort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|TimestampParser
import|;
end_import

begin_comment
comment|/*  * Directly deserialize with the caller reading field-by-field the LazySimple (text)  * serialization format.  *  * The caller is responsible for calling the read method for the right type of each field  * (after calling readCheckNull).  *  * Reading some fields require a results object to receive value information.  A separate  * results object is created by the caller at initialization per different field even for the same  * type.  *  * Some type values are by reference to either bytes in the deserialization buffer or to  * other type specific buffers.  So, those references are only valid until the next time set is  * called.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LazySimpleDeserializeRead
extends|extends
name|DeserializeRead
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LazySimpleDeserializeRead
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|int
index|[]
name|startPosition
decl_stmt|;
specifier|private
name|byte
name|separator
decl_stmt|;
specifier|private
name|boolean
name|isEscaped
decl_stmt|;
specifier|private
name|byte
name|escapeChar
decl_stmt|;
specifier|private
name|byte
index|[]
name|nullSequenceBytes
decl_stmt|;
specifier|private
name|boolean
name|isExtendedBooleanLiteral
decl_stmt|;
specifier|private
name|boolean
name|lastColumnTakesRest
decl_stmt|;
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|private
name|int
name|start
decl_stmt|;
specifier|private
name|int
name|offset
decl_stmt|;
specifier|private
name|int
name|end
decl_stmt|;
specifier|private
name|int
name|fieldCount
decl_stmt|;
specifier|private
name|int
name|fieldIndex
decl_stmt|;
specifier|private
name|int
name|fieldStart
decl_stmt|;
specifier|private
name|int
name|fieldLength
decl_stmt|;
specifier|private
name|Text
name|tempText
decl_stmt|;
specifier|private
name|TimestampParser
name|timestampParser
decl_stmt|;
specifier|private
name|boolean
name|extraFieldWarned
decl_stmt|;
specifier|private
name|boolean
name|missingFieldWarned
decl_stmt|;
specifier|public
name|LazySimpleDeserializeRead
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|byte
name|separator
parameter_list|,
name|LazySerDeParameters
name|lazyParams
parameter_list|)
block|{
name|super
argument_list|(
name|typeInfos
argument_list|)
expr_stmt|;
comment|// Field length is difference between positions hence one extra.
name|startPosition
operator|=
operator|new
name|int
index|[
name|typeInfos
operator|.
name|length
operator|+
literal|1
index|]
expr_stmt|;
name|this
operator|.
name|separator
operator|=
name|separator
expr_stmt|;
name|isEscaped
operator|=
name|lazyParams
operator|.
name|isEscaped
argument_list|()
expr_stmt|;
name|escapeChar
operator|=
name|lazyParams
operator|.
name|getEscapeChar
argument_list|()
expr_stmt|;
name|nullSequenceBytes
operator|=
name|lazyParams
operator|.
name|getNullSequence
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|isExtendedBooleanLiteral
operator|=
name|lazyParams
operator|.
name|isExtendedBooleanLiteral
argument_list|()
expr_stmt|;
name|lastColumnTakesRest
operator|=
name|lazyParams
operator|.
name|isLastColumnTakesRest
argument_list|()
expr_stmt|;
name|fieldCount
operator|=
name|typeInfos
operator|.
name|length
expr_stmt|;
name|tempText
operator|=
operator|new
name|Text
argument_list|()
expr_stmt|;
name|extraFieldWarned
operator|=
literal|false
expr_stmt|;
name|missingFieldWarned
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|LazySimpleDeserializeRead
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|LazySerDeParameters
name|lazyParams
parameter_list|)
block|{
name|this
argument_list|(
name|typeInfos
argument_list|,
name|lazyParams
operator|.
name|getSeparators
argument_list|()
index|[
literal|0
index|]
argument_list|,
name|lazyParams
argument_list|)
expr_stmt|;
block|}
comment|// Not public since we must have the field count so every 8 fields NULL bytes can be navigated.
specifier|private
name|LazySimpleDeserializeRead
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/*    * Set the range of bytes to be deserialized.    */
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|start
operator|=
name|offset
expr_stmt|;
name|end
operator|=
name|offset
operator|+
name|length
expr_stmt|;
name|fieldIndex
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**    * Parse the byte[] and fill each field.    *    * This is an adapted version of the parse method in the LazyStruct class.    * They should parse things the same way.    */
specifier|private
name|void
name|parse
parameter_list|()
block|{
name|int
name|structByteEnd
init|=
name|end
decl_stmt|;
name|int
name|fieldId
init|=
literal|0
decl_stmt|;
name|int
name|fieldByteBegin
init|=
name|start
decl_stmt|;
name|int
name|fieldByteEnd
init|=
name|start
decl_stmt|;
comment|// Go through all bytes in the byte[]
while|while
condition|(
name|fieldByteEnd
operator|<=
name|structByteEnd
condition|)
block|{
if|if
condition|(
name|fieldByteEnd
operator|==
name|structByteEnd
operator|||
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|separator
condition|)
block|{
comment|// Reached the end of a field?
if|if
condition|(
name|lastColumnTakesRest
operator|&&
name|fieldId
operator|==
name|fieldCount
operator|-
literal|1
condition|)
block|{
name|fieldByteEnd
operator|=
name|structByteEnd
expr_stmt|;
block|}
name|startPosition
index|[
name|fieldId
index|]
operator|=
name|fieldByteBegin
expr_stmt|;
name|fieldId
operator|++
expr_stmt|;
if|if
condition|(
name|fieldId
operator|==
name|fieldCount
operator|||
name|fieldByteEnd
operator|==
name|structByteEnd
condition|)
block|{
comment|// All fields have been parsed, or bytes have been parsed.
comment|// We need to set the startPosition of fields.length to ensure we
comment|// can use the same formula to calculate the length of each field.
comment|// For missing fields, their starting positions will all be the same,
comment|// which will make their lengths to be -1 and uncheckedGetField will
comment|// return these fields as NULLs.
for|for
control|(
name|int
name|i
init|=
name|fieldId
init|;
name|i
operator|<=
name|fieldCount
condition|;
name|i
operator|++
control|)
block|{
name|startPosition
index|[
name|i
index|]
operator|=
name|fieldByteEnd
operator|+
literal|1
expr_stmt|;
block|}
break|break;
block|}
name|fieldByteBegin
operator|=
name|fieldByteEnd
operator|+
literal|1
expr_stmt|;
name|fieldByteEnd
operator|++
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isEscaped
operator|&&
name|bytes
index|[
name|fieldByteEnd
index|]
operator|==
name|escapeChar
operator|&&
name|fieldByteEnd
operator|+
literal|1
operator|<
name|structByteEnd
condition|)
block|{
comment|// ignore the char after escape_char
name|fieldByteEnd
operator|+=
literal|2
expr_stmt|;
block|}
else|else
block|{
name|fieldByteEnd
operator|++
expr_stmt|;
block|}
block|}
block|}
comment|// Extra bytes at the end?
if|if
condition|(
operator|!
name|extraFieldWarned
operator|&&
name|fieldByteEnd
operator|<
name|structByteEnd
condition|)
block|{
name|doExtraFieldWarned
argument_list|()
expr_stmt|;
block|}
comment|// Missing fields?
if|if
condition|(
operator|!
name|missingFieldWarned
operator|&&
name|fieldId
operator|<
name|fieldCount
condition|)
block|{
name|doMissingFieldWarned
argument_list|(
name|fieldId
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Reads the NULL information for a field.    *    * @return Returns true when the field is NULL; reading is positioned to the next field.    *         Otherwise, false when the field is NOT NULL; reading is positioned to the field data.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readCheckNull
parameter_list|()
block|{
if|if
condition|(
name|fieldIndex
operator|==
operator|-
literal|1
condition|)
block|{
name|parse
argument_list|()
expr_stmt|;
name|fieldIndex
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fieldIndex
operator|+
literal|1
operator|>=
name|fieldCount
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
name|fieldIndex
operator|++
expr_stmt|;
block|}
comment|// Do we want this field?
if|if
condition|(
name|columnsToInclude
operator|!=
literal|null
operator|&&
operator|!
name|columnsToInclude
index|[
name|fieldIndex
index|]
condition|)
block|{
return|return
literal|true
return|;
block|}
name|fieldStart
operator|=
name|startPosition
index|[
name|fieldIndex
index|]
expr_stmt|;
name|fieldLength
operator|=
name|startPosition
index|[
name|fieldIndex
operator|+
literal|1
index|]
operator|-
name|startPosition
index|[
name|fieldIndex
index|]
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|fieldLength
operator|<
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// Is the field the configured string representing NULL?
if|if
condition|(
name|nullSequenceBytes
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fieldLength
operator|==
name|nullSequenceBytes
operator|.
name|length
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|bytes
index|[
name|fieldStart
operator|+
name|i
index|]
operator|!=
name|nullSequenceBytes
index|[
name|i
index|]
condition|)
block|{
break|break;
block|}
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|>=
name|fieldLength
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
comment|/*      * We have a field and are positioned to it.  Read it.      */
switch|switch
condition|(
name|primitiveCategories
index|[
name|fieldIndex
index|]
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|int
name|i
init|=
name|fieldStart
decl_stmt|;
if|if
condition|(
name|fieldLength
operator|==
literal|4
condition|)
block|{
if|if
condition|(
operator|(
name|bytes
index|[
name|i
index|]
operator|==
literal|'T'
operator|||
name|bytes
index|[
name|i
index|]
operator|==
literal|'t'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'R'
operator|||
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'r'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'U'
operator|||
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'u'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'E'
operator|||
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'e'
operator|)
condition|)
block|{
name|currentBoolean
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// No boolean value match for 5 char field.
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|fieldLength
operator|==
literal|5
condition|)
block|{
if|if
condition|(
operator|(
name|bytes
index|[
name|i
index|]
operator|==
literal|'F'
operator|||
name|bytes
index|[
name|i
index|]
operator|==
literal|'f'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'A'
operator|||
name|bytes
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'a'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'L'
operator|||
name|bytes
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'l'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'S'
operator|||
name|bytes
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'s'
operator|)
operator|&&
operator|(
name|bytes
index|[
name|i
operator|+
literal|4
index|]
operator|==
literal|'E'
operator|||
name|bytes
index|[
name|i
operator|+
literal|4
index|]
operator|==
literal|'e'
operator|)
condition|)
block|{
name|currentBoolean
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// No boolean value match for 4 char field.
return|return
literal|true
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|isExtendedBooleanLiteral
operator|&&
name|fieldLength
operator|==
literal|1
condition|)
block|{
name|byte
name|b
init|=
name|bytes
index|[
name|fieldStart
index|]
decl_stmt|;
if|if
condition|(
name|b
operator|==
literal|'1'
operator|||
name|b
operator|==
literal|'t'
operator|||
name|b
operator|==
literal|'T'
condition|)
block|{
name|currentBoolean
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|b
operator|==
literal|'0'
operator|||
name|b
operator|==
literal|'f'
operator|||
name|b
operator|==
literal|'F'
condition|)
block|{
name|currentBoolean
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|// No boolean value match for extended 1 char field.
return|return
literal|true
return|;
block|}
block|}
else|else
block|{
comment|// No boolean value match for other lengths.
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|BYTE
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|currentByte
operator|=
name|LazyByte
operator|.
name|parseByte
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"TINYINT"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
case|case
name|SHORT
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|currentShort
operator|=
name|LazyShort
operator|.
name|parseShort
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"SMALLINT"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
case|case
name|INT
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|currentInt
operator|=
name|LazyInteger
operator|.
name|parseInt
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"INT"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
case|case
name|LONG
case|:
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|currentLong
operator|=
name|LazyLong
operator|.
name|parseLong
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"BIGINT"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|byteData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byteData
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|currentFloat
operator|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|byteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the Float data type range so converted to null. Given data is :"
operator|+
name|byteData
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the Float data type range so converted to null."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|byteData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byteData
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|currentDouble
operator|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|byteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the Double data type range so converted to null. Given data is :"
operator|+
name|byteData
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the Double data type range so converted to null."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
if|if
condition|(
name|isEscaped
condition|)
block|{
name|LazyUtils
operator|.
name|copyAndEscapeStringDataToText
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
name|escapeChar
argument_list|,
name|tempText
argument_list|)
expr_stmt|;
name|currentBytes
operator|=
name|tempText
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|currentBytesStart
operator|=
literal|0
expr_stmt|;
name|currentBytesLength
operator|=
name|tempText
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// if the data is not escaped, simply copy the data.
name|currentBytes
operator|=
name|bytes
expr_stmt|;
name|currentBytesStart
operator|=
name|fieldStart
expr_stmt|;
name|currentBytesLength
operator|=
name|fieldLength
expr_stmt|;
block|}
break|break;
case|case
name|BINARY
case|:
block|{
name|byte
index|[]
name|recv
init|=
operator|new
name|byte
index|[
name|fieldLength
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|recv
argument_list|,
literal|0
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|byte
index|[]
name|decoded
init|=
name|LazyBinary
operator|.
name|decodeIfNeeded
argument_list|(
name|recv
argument_list|)
decl_stmt|;
comment|// use the original bytes in case decoding should fail
name|decoded
operator|=
name|decoded
operator|.
name|length
operator|>
literal|0
condition|?
name|decoded
else|:
name|recv
expr_stmt|;
name|currentBytes
operator|=
name|decoded
expr_stmt|;
name|currentBytesStart
operator|=
literal|0
expr_stmt|;
name|currentBytesLength
operator|=
name|decoded
operator|.
name|length
expr_stmt|;
block|}
break|break;
case|case
name|DATE
case|:
block|{
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isDateMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|currentDateWritable
operator|.
name|set
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"DATE"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isDateMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"US-ASCII"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unsupported encoding found "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|s
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|.
name|compareTo
argument_list|(
literal|"NULL"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"TIMESTAMP"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
try|try
block|{
if|if
condition|(
name|timestampParser
operator|==
literal|null
condition|)
block|{
name|timestampParser
operator|=
operator|new
name|TimestampParser
argument_list|()
expr_stmt|;
block|}
name|currentTimestampWritable
operator|.
name|set
argument_list|(
name|timestampParser
operator|.
name|parseTimestamp
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"TIMESTAMP"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
if|if
condition|(
name|fieldLength
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|currentHiveIntervalYearMonthWritable
operator|.
name|set
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"INTERVAL_YEAR_MONTH"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
if|if
condition|(
name|fieldLength
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|s
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
name|currentHiveIntervalDayTimeWritable
operator|.
name|set
argument_list|(
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|logExceptionMessage
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|,
literal|"INTERVAL_DAY_TIME"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|DECIMAL
case|:
block|{
if|if
condition|(
operator|!
name|LazyUtils
operator|.
name|isNumberMaybe
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|byteData
init|=
literal|null
decl_stmt|;
try|try
block|{
name|byteData
operator|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|fieldStart
argument_list|,
name|fieldLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the HiveDecimal data type range so converted to null."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|HiveDecimal
name|decimal
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|byteData
argument_list|)
decl_stmt|;
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfos
index|[
name|fieldIndex
index|]
decl_stmt|;
name|int
name|precision
init|=
name|decimalTypeInfo
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|decimalTypeInfo
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|decimal
operator|=
name|HiveDecimal
operator|.
name|enforcePrecisionScale
argument_list|(
name|decimal
argument_list|,
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
if|if
condition|(
name|decimal
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the HiveDecimal data type range so converted to null. Given data is :"
operator|+
name|byteData
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|currentHiveDecimalWritable
operator|.
name|set
argument_list|(
name|decimal
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unexpected primitive category "
operator|+
name|primitiveCategories
index|[
name|fieldIndex
index|]
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|logExceptionMessage
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|bytesStart
parameter_list|,
name|int
name|bytesLength
parameter_list|,
name|String
name|dataType
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|String
name|byteData
init|=
name|Text
operator|.
name|decode
argument_list|(
name|bytes
argument_list|,
name|bytesStart
argument_list|,
name|bytesLength
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the "
operator|+
name|dataType
operator|+
literal|" data type range so converted to null. Given data is :"
operator|+
name|byteData
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"For debugging purposes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|CharacterCodingException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Data not in the "
operator|+
name|dataType
operator|+
literal|" data type range so converted to null."
argument_list|,
name|e1
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Call this method after all fields have been read to check for extra fields.    */
annotation|@
name|Override
specifier|public
name|void
name|extraFieldsCheck
parameter_list|()
block|{
comment|// UNDONE: Get rid of...
block|}
comment|/*    * Read integrity warning flags.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readBeyondConfiguredFieldsWarned
parameter_list|()
block|{
return|return
name|missingFieldWarned
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readBeyondBufferRangeWarned
parameter_list|()
block|{
return|return
name|extraFieldWarned
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|bufferRangeHasExtraDataWarned
parameter_list|()
block|{
return|return
literal|false
return|;
comment|// UNDONE: Get rid of...
block|}
specifier|private
name|void
name|doExtraFieldWarned
parameter_list|()
block|{
name|extraFieldWarned
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Extra bytes detected at the end of the row! Ignoring similar "
operator|+
literal|"problems."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doMissingFieldWarned
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|missingFieldWarned
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Missing fields! Expected "
operator|+
name|fieldCount
operator|+
literal|" fields but "
operator|+
literal|"only got "
operator|+
name|fieldId
operator|+
literal|"! Ignoring similar problems."
argument_list|)
expr_stmt|;
block|}
comment|//------------------------------------------------------------------------------------------------
specifier|private
specifier|static
name|byte
index|[]
name|maxLongBytes
init|=
operator|(
operator|(
name|Long
operator|)
name|Long
operator|.
name|MAX_VALUE
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|int
name|maxLongDigitsCount
init|=
name|maxLongBytes
operator|.
name|length
decl_stmt|;
specifier|private
specifier|static
name|byte
index|[]
name|minLongNoSignBytes
init|=
operator|(
operator|(
name|Long
operator|)
name|Long
operator|.
name|MIN_VALUE
operator|)
operator|.
name|toString
argument_list|()
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|int
name|byteArrayCompareRanges
parameter_list|(
name|byte
index|[]
name|arg1
parameter_list|,
name|int
name|start1
parameter_list|,
name|byte
index|[]
name|arg2
parameter_list|,
name|int
name|start2
parameter_list|,
name|int
name|len
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
comment|// Note the "& 0xff" is just a way to convert unsigned bytes to signed integer.
name|int
name|b1
init|=
name|arg1
index|[
name|i
operator|+
name|start1
index|]
operator|&
literal|0xff
decl_stmt|;
name|int
name|b2
init|=
name|arg2
index|[
name|i
operator|+
name|start2
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
name|b1
operator|!=
name|b2
condition|)
block|{
return|return
name|b1
operator|-
name|b2
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

