begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
operator|.
name|VInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
operator|.
name|VLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/*  * Directly deserialize with the caller reading field-by-field the LazyBinary serialization format.  *  * The caller is responsible for calling the read method for the right type of each field  * (after calling readNextField).  *  * Reading some fields require a results object to receive value information.  A separate  * results object is created by the caller at initialization per different field even for the same  * type.  *  * Some type values are by reference to either bytes in the deserialization buffer or to  * other type specific buffers.  So, those references are only valid until the next time set is  * called.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LazyBinaryDeserializeRead
extends|extends
name|DeserializeRead
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LazyBinaryDeserializeRead
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|private
name|int
name|start
decl_stmt|;
specifier|private
name|int
name|offset
decl_stmt|;
specifier|private
name|int
name|end
decl_stmt|;
specifier|private
name|boolean
name|skipLengthPrefix
init|=
literal|false
decl_stmt|;
comment|// Object to receive results of reading a decoded variable length int or long.
specifier|private
name|VInt
name|tempVInt
decl_stmt|;
specifier|private
name|VLong
name|tempVLong
decl_stmt|;
specifier|private
name|Deque
argument_list|<
name|Field
argument_list|>
name|stack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Field
name|root
decl_stmt|;
specifier|private
class|class
name|Field
block|{
name|Field
index|[]
name|children
decl_stmt|;
name|Category
name|category
decl_stmt|;
name|PrimitiveCategory
name|primitiveCategory
decl_stmt|;
name|TypeInfo
name|typeInfo
decl_stmt|;
name|int
name|index
decl_stmt|;
name|int
name|count
decl_stmt|;
name|int
name|start
decl_stmt|;
name|int
name|end
decl_stmt|;
name|int
name|nullByteStart
decl_stmt|;
name|byte
name|nullByte
decl_stmt|;
name|byte
name|tag
decl_stmt|;
block|}
specifier|public
name|LazyBinaryDeserializeRead
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|boolean
name|useExternalBuffer
parameter_list|)
block|{
name|super
argument_list|(
name|typeInfos
argument_list|,
name|useExternalBuffer
argument_list|)
expr_stmt|;
name|tempVInt
operator|=
operator|new
name|VInt
argument_list|()
expr_stmt|;
name|tempVLong
operator|=
operator|new
name|VLong
argument_list|()
expr_stmt|;
name|currentExternalBufferNeeded
operator|=
literal|false
expr_stmt|;
name|root
operator|=
operator|new
name|Field
argument_list|()
expr_stmt|;
name|root
operator|.
name|category
operator|=
name|Category
operator|.
name|STRUCT
expr_stmt|;
name|root
operator|.
name|children
operator|=
name|createFields
argument_list|(
name|typeInfos
argument_list|)
expr_stmt|;
name|root
operator|.
name|count
operator|=
name|typeInfos
operator|.
name|length
expr_stmt|;
block|}
specifier|private
name|Field
index|[]
name|createFields
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|)
block|{
specifier|final
name|Field
index|[]
name|children
init|=
operator|new
name|Field
index|[
name|typeInfos
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|typeInfos
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|children
index|[
name|i
index|]
operator|=
name|createField
argument_list|(
name|typeInfos
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
specifier|private
name|Field
name|createField
parameter_list|(
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
specifier|final
name|Field
name|field
init|=
operator|new
name|Field
argument_list|()
decl_stmt|;
specifier|final
name|Category
name|category
init|=
name|typeInfo
operator|.
name|getCategory
argument_list|()
decl_stmt|;
name|field
operator|.
name|category
operator|=
name|category
expr_stmt|;
name|field
operator|.
name|typeInfo
operator|=
name|typeInfo
expr_stmt|;
switch|switch
condition|(
name|category
condition|)
block|{
case|case
name|PRIMITIVE
case|:
name|field
operator|.
name|primitiveCategory
operator|=
operator|(
operator|(
name|PrimitiveTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getPrimitiveCategory
argument_list|()
expr_stmt|;
break|break;
case|case
name|LIST
case|:
name|field
operator|.
name|children
operator|=
operator|new
name|Field
index|[
literal|1
index|]
expr_stmt|;
name|field
operator|.
name|children
index|[
literal|0
index|]
operator|=
name|createField
argument_list|(
operator|(
operator|(
name|ListTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getListElementTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|field
operator|.
name|children
operator|=
operator|new
name|Field
index|[
literal|2
index|]
expr_stmt|;
name|field
operator|.
name|children
index|[
literal|0
index|]
operator|=
name|createField
argument_list|(
operator|(
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getMapKeyTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|field
operator|.
name|children
index|[
literal|1
index|]
operator|=
name|createField
argument_list|(
operator|(
operator|(
name|MapTypeInfo
operator|)
name|typeInfo
operator|)
operator|.
name|getMapValueTypeInfo
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
specifier|final
name|StructTypeInfo
name|structTypeInfo
init|=
operator|(
name|StructTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|structTypeInfo
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
decl_stmt|;
name|field
operator|.
name|children
operator|=
name|createFields
argument_list|(
name|fieldTypeInfos
operator|.
name|toArray
argument_list|(
operator|new
name|TypeInfo
index|[
name|fieldTypeInfos
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNION
case|:
specifier|final
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|(
name|UnionTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|objectTypeInfos
init|=
name|unionTypeInfo
operator|.
name|getAllUnionObjectTypeInfos
argument_list|()
decl_stmt|;
name|field
operator|.
name|children
operator|=
name|createFields
argument_list|(
name|objectTypeInfos
operator|.
name|toArray
argument_list|(
operator|new
name|TypeInfo
index|[
name|objectTypeInfos
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
return|return
name|field
return|;
block|}
comment|/*    * Set the range of bytes to be deserialized.    */
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|start
operator|=
name|offset
expr_stmt|;
name|end
operator|=
name|offset
operator|+
name|length
expr_stmt|;
name|stack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|clearIndex
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|clearIndex
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
name|field
operator|.
name|index
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|children
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Field
name|child
range|:
name|field
operator|.
name|children
control|)
block|{
name|clearIndex
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*    * Get detailed read position information to help diagnose exceptions.    */
specifier|public
name|String
name|getDetailedReadPositionString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|64
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Reading byte[] of length "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" at start offset "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" for length "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" to read "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|root
operator|.
name|children
operator|.
name|length
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" fields with types "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|typeInfos
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".  Read field #"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|root
operator|.
name|index
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" at field start position "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|root
operator|.
name|start
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" current read offset "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|offset
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/*    * Reads the the next field.    *    * Afterwards, reading is positioned to the next field.    *    * @return  Return true when the field was not null and data is put in the appropriate    *          current* member.    *          Otherwise, false when the field is null.    *    */
annotation|@
name|Override
specifier|public
name|boolean
name|readNextField
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|readComplexField
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|readPrimitive
parameter_list|(
name|Field
name|field
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|PrimitiveCategory
name|primitiveCategory
init|=
name|field
operator|.
name|primitiveCategory
decl_stmt|;
specifier|final
name|TypeInfo
name|typeInfo
init|=
name|field
operator|.
name|typeInfo
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|BOOLEAN
case|:
comment|// No check needed for single byte read.
name|currentBoolean
operator|=
operator|(
name|bytes
index|[
name|offset
operator|++
index|]
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
comment|// No check needed for single byte read.
name|currentByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|+
literal|2
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|currentShort
operator|=
name|LazyBinaryUtils
operator|.
name|byteArrayToShort
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
name|INT
case|:
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|currentInt
operator|=
name|tempVInt
operator|.
name|value
expr_stmt|;
break|break;
case|case
name|LONG
case|:
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVLong
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVLong
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVLong
operator|.
name|length
expr_stmt|;
name|currentLong
operator|=
name|tempVLong
operator|.
name|value
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|+
literal|4
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|currentFloat
operator|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|LazyBinaryUtils
operator|.
name|byteArrayToInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|+
literal|8
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|currentDouble
operator|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|LazyBinaryUtils
operator|.
name|byteArrayToLong
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|8
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
block|{
comment|// using vint instead of 4 bytes
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|int
name|saveStart
init|=
name|offset
decl_stmt|;
name|int
name|length
init|=
name|tempVInt
operator|.
name|value
decl_stmt|;
name|offset
operator|+=
name|length
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|currentBytes
operator|=
name|bytes
expr_stmt|;
name|currentBytesStart
operator|=
name|saveStart
expr_stmt|;
name|currentBytesLength
operator|=
name|length
expr_stmt|;
block|}
break|break;
case|case
name|DATE
case|:
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|currentDateWritable
operator|.
name|set
argument_list|(
name|tempVInt
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|int
name|length
init|=
name|TimestampWritable
operator|.
name|getTotalLength
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|saveStart
init|=
name|offset
decl_stmt|;
name|offset
operator|+=
name|length
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|currentTimestampWritable
operator|.
name|set
argument_list|(
name|bytes
argument_list|,
name|saveStart
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|currentHiveIntervalYearMonthWritable
operator|.
name|set
argument_list|(
name|tempVInt
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
comment|// The first bounds check requires at least one more byte beyond for 2nd int (hence>=).
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>=
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVLong
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVLong
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVLong
operator|.
name|length
expr_stmt|;
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|currentHiveIntervalDayTimeWritable
operator|.
name|set
argument_list|(
name|tempVLong
operator|.
name|value
argument_list|,
name|tempVInt
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
block|{
comment|// Since enforcing precision and scale can cause a HiveDecimal to become NULL,
comment|// we must read it, enforce it here, and either return NULL or buffer the result.
comment|// These calls are to see how much data there is. The setFromBytes call below will do the same
comment|// readVInt reads but actually unpack the decimal.
comment|// The first bounds check requires at least one more byte beyond for 2nd int (hence>=).
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>=
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|int
name|readScale
init|=
name|tempVInt
operator|.
name|value
decl_stmt|;
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|int
name|saveStart
init|=
name|offset
decl_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|value
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|int
name|length
init|=
name|offset
operator|-
name|saveStart
decl_stmt|;
comment|//   scale = 2, length = 6, value = -6065716379.11
comment|//   \002\006\255\114\197\131\083\105
comment|//           \255\114\197\131\083\105
name|currentHiveDecimalWritable
operator|.
name|setFromBigIntegerBytesAndScale
argument_list|(
name|bytes
argument_list|,
name|saveStart
argument_list|,
name|length
argument_list|,
name|readScale
argument_list|)
expr_stmt|;
name|boolean
name|decimalIsNull
init|=
operator|!
name|currentHiveDecimalWritable
operator|.
name|isSet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|decimalIsNull
condition|)
block|{
specifier|final
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfo
decl_stmt|;
specifier|final
name|int
name|precision
init|=
name|decimalTypeInfo
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
specifier|final
name|int
name|scale
init|=
name|decimalTypeInfo
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|decimalIsNull
operator|=
operator|!
name|currentHiveDecimalWritable
operator|.
name|mutateEnforcePrecisionScale
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|decimalIsNull
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unexpected primitive category "
operator|+
name|primitiveCategory
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
comment|/*    * Reads through an undesired field.    *    * No data values are valid after this call.    * Designed for skipping columns that are not included.    */
specifier|public
name|void
name|skipNextField
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Field
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isNull
init|=
name|isNull
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNull
condition|)
block|{
name|current
operator|.
name|index
operator|++
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|readUnionTag
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|current
operator|.
name|index
operator|++
expr_stmt|;
return|return;
block|}
specifier|final
name|Field
name|child
init|=
name|getChild
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|category
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|readPrimitive
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|current
operator|.
name|index
operator|++
expr_stmt|;
block|}
else|else
block|{
name|parseHeader
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|child
operator|.
name|count
condition|;
name|i
operator|++
control|)
block|{
name|skipNextField
argument_list|()
expr_stmt|;
block|}
name|finishComplexVariableFieldsType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
block|}
comment|/*    * Call this method may be called after all the all fields have been read to check    * for unread fields.    *    * Note that when optimizing reading to stop reading unneeded include columns, worrying    * about whether all data is consumed is not appropriate (often we aren't reading it all by    * design).    *    * Since LazySimpleDeserializeRead parses the line through the last desired column it does    * support this function.    */
specifier|public
name|boolean
name|isEndOfInputReached
parameter_list|()
block|{
return|return
operator|(
name|offset
operator|==
name|end
operator|)
return|;
block|}
specifier|private
name|boolean
name|isNull
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
specifier|final
name|byte
name|b
init|=
call|(
name|byte
call|)
argument_list|(
literal|1
operator|<<
operator|(
name|field
operator|.
name|index
operator|%
literal|8
operator|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|field
operator|.
name|category
condition|)
block|{
case|case
name|PRIMITIVE
case|:
return|return
literal|false
return|;
case|case
name|LIST
case|:
case|case
name|MAP
case|:
specifier|final
name|byte
name|nullByte
init|=
name|bytes
index|[
name|field
operator|.
name|nullByteStart
operator|+
operator|(
name|field
operator|.
name|index
operator|/
literal|8
operator|)
index|]
decl_stmt|;
return|return
operator|(
name|nullByte
operator|&
name|b
operator|)
operator|==
literal|0
return|;
case|case
name|STRUCT
case|:
if|if
condition|(
name|field
operator|.
name|index
operator|%
literal|8
operator|==
literal|0
condition|)
block|{
name|field
operator|.
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
return|return
operator|(
name|field
operator|.
name|nullByte
operator|&
name|b
operator|)
operator|==
literal|0
return|;
case|case
name|UNION
case|:
return|return
literal|false
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|void
name|parseHeader
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
comment|// Init
name|field
operator|.
name|index
operator|=
literal|0
expr_stmt|;
name|field
operator|.
name|start
operator|=
name|offset
expr_stmt|;
comment|// Read length
if|if
condition|(
operator|!
name|skipLengthPrefix
condition|)
block|{
specifier|final
name|int
name|length
init|=
name|LazyBinaryUtils
operator|.
name|byteArrayToInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
name|field
operator|.
name|end
operator|=
name|offset
operator|+
name|length
expr_stmt|;
block|}
switch|switch
condition|(
name|field
operator|.
name|category
condition|)
block|{
case|case
name|LIST
case|:
case|case
name|MAP
case|:
comment|// Read count
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|category
operator|==
name|Category
operator|.
name|LIST
condition|)
block|{
name|field
operator|.
name|count
operator|=
name|tempVInt
operator|.
name|value
expr_stmt|;
block|}
else|else
block|{
name|field
operator|.
name|count
operator|=
name|tempVInt
operator|.
name|value
operator|*
literal|2
expr_stmt|;
block|}
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
comment|// Null byte start
name|field
operator|.
name|nullByteStart
operator|=
name|offset
expr_stmt|;
name|offset
operator|+=
operator|(
operator|(
name|field
operator|.
name|count
operator|)
operator|+
literal|7
operator|)
operator|/
literal|8
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|field
operator|.
name|count
operator|=
operator|(
operator|(
name|StructTypeInfo
operator|)
name|field
operator|.
name|typeInfo
operator|)
operator|.
name|getAllStructFieldTypeInfos
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|field
operator|.
name|count
operator|=
literal|2
expr_stmt|;
break|break;
block|}
block|}
specifier|private
name|Field
name|getChild
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
operator|.
name|category
condition|)
block|{
case|case
name|LIST
case|:
return|return
name|field
operator|.
name|children
index|[
literal|0
index|]
return|;
case|case
name|MAP
case|:
return|return
name|field
operator|.
name|children
index|[
name|field
operator|.
name|index
operator|%
literal|2
index|]
return|;
case|case
name|STRUCT
case|:
return|return
name|field
operator|.
name|children
index|[
name|field
operator|.
name|index
index|]
return|;
case|case
name|UNION
case|:
return|return
name|field
operator|.
name|children
index|[
name|field
operator|.
name|tag
index|]
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|boolean
name|readUnionTag
parameter_list|(
name|Field
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|.
name|category
operator|==
name|Category
operator|.
name|UNION
operator|&&
name|field
operator|.
name|index
operator|==
literal|0
condition|)
block|{
name|field
operator|.
name|tag
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
name|currentInt
operator|=
name|field
operator|.
name|tag
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// Push or next
annotation|@
name|Override
specifier|public
name|boolean
name|readComplexField
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Field
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|boolean
name|isNull
init|=
name|isNull
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNull
condition|)
block|{
name|current
operator|.
name|index
operator|++
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|readUnionTag
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|current
operator|.
name|index
operator|++
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|Field
name|child
init|=
name|getChild
argument_list|(
name|current
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|category
operator|==
name|Category
operator|.
name|PRIMITIVE
condition|)
block|{
name|isNull
operator|=
operator|!
name|readPrimitive
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|current
operator|.
name|index
operator|++
expr_stmt|;
block|}
else|else
block|{
name|parseHeader
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
return|return
operator|!
name|isNull
return|;
block|}
comment|// Pop (list, map)
annotation|@
name|Override
specifier|public
name|boolean
name|isNextComplexMultiValue
parameter_list|()
block|{
name|Field
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isNext
init|=
name|current
operator|.
name|index
operator|<
name|current
operator|.
name|count
decl_stmt|;
if|if
condition|(
operator|!
name|isNext
condition|)
block|{
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|stack
operator|.
name|peek
argument_list|()
operator|.
name|index
operator|++
expr_stmt|;
block|}
return|return
name|isNext
return|;
block|}
comment|// Pop (struct, union)
annotation|@
name|Override
specifier|public
name|void
name|finishComplexVariableFieldsType
parameter_list|()
block|{
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
name|stack
operator|.
name|peek
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|()
throw|;
block|}
name|stack
operator|.
name|peek
argument_list|()
operator|.
name|index
operator|++
expr_stmt|;
block|}
block|}
end_class

end_unit

