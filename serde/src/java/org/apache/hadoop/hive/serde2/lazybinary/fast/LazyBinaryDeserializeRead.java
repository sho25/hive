begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
operator|.
name|VInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
operator|.
name|VLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_comment
comment|/*  * Directly deserialize with the caller reading field-by-field the LazyBinary serialization format.  *  * The caller is responsible for calling the read method for the right type of each field  * (after calling readCheckNull).  *  * Reading some fields require a results object to receive value information.  A separate  * results object is created by the caller at initialization per different field even for the same  * type.   *  * Some type values are by reference to either bytes in the deserialization buffer or to  * other type specific buffers.  So, those references are only valid until the next time set is  * called.  */
end_comment

begin_class
specifier|public
class|class
name|LazyBinaryDeserializeRead
implements|implements
name|DeserializeRead
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|LazyBinaryDeserializeRead
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
decl_stmt|;
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|private
name|int
name|start
decl_stmt|;
specifier|private
name|int
name|offset
decl_stmt|;
specifier|private
name|int
name|end
decl_stmt|;
specifier|private
name|int
name|fieldCount
decl_stmt|;
specifier|private
name|int
name|fieldIndex
decl_stmt|;
specifier|private
name|byte
name|nullByte
decl_stmt|;
specifier|private
name|DecimalTypeInfo
name|saveDecimalTypeInfo
decl_stmt|;
specifier|private
name|HiveDecimal
name|saveDecimal
decl_stmt|;
comment|// Object to receive results of reading a decoded variable length int or long.
specifier|private
name|VInt
name|tempVInt
decl_stmt|;
specifier|private
name|VLong
name|tempVLong
decl_stmt|;
specifier|private
name|HiveDecimalWritable
name|tempHiveDecimalWritable
decl_stmt|;
specifier|private
name|boolean
name|readBeyondConfiguredFieldsWarned
decl_stmt|;
specifier|private
name|boolean
name|readBeyondBufferRangeWarned
decl_stmt|;
specifier|private
name|boolean
name|bufferRangeHasExtraDataWarned
decl_stmt|;
specifier|public
name|LazyBinaryDeserializeRead
parameter_list|(
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
parameter_list|)
block|{
name|this
operator|.
name|primitiveTypeInfos
operator|=
name|primitiveTypeInfos
expr_stmt|;
name|fieldCount
operator|=
name|primitiveTypeInfos
operator|.
name|length
expr_stmt|;
name|tempVInt
operator|=
operator|new
name|VInt
argument_list|()
expr_stmt|;
name|tempVLong
operator|=
operator|new
name|VLong
argument_list|()
expr_stmt|;
name|readBeyondConfiguredFieldsWarned
operator|=
literal|false
expr_stmt|;
name|readBeyondBufferRangeWarned
operator|=
literal|false
expr_stmt|;
name|bufferRangeHasExtraDataWarned
operator|=
literal|false
expr_stmt|;
block|}
comment|// Not public since we must have the field count so every 8 fields NULL bytes can be navigated.
specifier|private
name|LazyBinaryDeserializeRead
parameter_list|()
block|{   }
comment|/*    * The primitive type information for all fields.    */
specifier|public
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
parameter_list|()
block|{
return|return
name|primitiveTypeInfos
return|;
block|}
comment|/*    * Set the range of bytes to be deserialized.    */
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|start
operator|=
name|offset
expr_stmt|;
name|end
operator|=
name|offset
operator|+
name|length
expr_stmt|;
name|fieldIndex
operator|=
literal|0
expr_stmt|;
block|}
comment|/*    * Reads the NULL information for a field.    *    * @return Returns true when the field is NULL; reading is positioned to the next field.    *         Otherwise, false when the field is NOT NULL; reading is positioned to the field data.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readCheckNull
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fieldIndex
operator|>=
name|fieldCount
condition|)
block|{
comment|// Reading beyond the specified field count produces NULL.
if|if
condition|(
operator|!
name|readBeyondConfiguredFieldsWarned
condition|)
block|{
comment|// Warn only once.
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading beyond configured fields! Configured "
operator|+
name|fieldCount
operator|+
literal|" fields but "
operator|+
literal|" reading more (NULLs returned).  Ignoring similar problems."
argument_list|)
expr_stmt|;
name|readBeyondConfiguredFieldsWarned
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
if|if
condition|(
name|fieldIndex
operator|==
literal|0
condition|)
block|{
comment|// The rest of the range check for fields after the first is below after checking
comment|// the NULL byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
comment|// NOTE: The bit is set to 1 if a field is NOT NULL.
if|if
condition|(
operator|(
name|nullByte
operator|&
operator|(
literal|1
operator|<<
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|)
operator|)
operator|!=
literal|0
condition|)
block|{
comment|// Make sure there is at least one byte that can be read for a value.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
comment|// Careful: since we may be dealing with NULLs in the final NULL byte, we check after
comment|// the NULL byte check..
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
comment|// We have a field and are positioned to it.
if|if
condition|(
name|primitiveTypeInfos
index|[
name|fieldIndex
index|]
operator|.
name|getPrimitiveCategory
argument_list|()
operator|!=
name|PrimitiveCategory
operator|.
name|DECIMAL
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// Since enforcing precision and scale may turn a HiveDecimal into a NULL, we must read
comment|// it here.
return|return
name|earlyReadHiveDecimal
argument_list|()
return|;
block|}
comment|// When NULL, we need to move past this field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/*    * Call this method after all fields have been read to check for extra fields.    */
specifier|public
name|void
name|extraFieldsCheck
parameter_list|()
block|{
if|if
condition|(
name|offset
operator|<
name|end
condition|)
block|{
comment|// We did not consume all of the byte range.
if|if
condition|(
operator|!
name|bufferRangeHasExtraDataWarned
condition|)
block|{
comment|// Warn only once.
name|int
name|length
init|=
name|end
operator|-
name|start
decl_stmt|;
name|int
name|remaining
init|=
name|end
operator|-
name|offset
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Not all fields were read in the buffer range! Buffer range "
operator|+
name|start
operator|+
literal|" for length "
operator|+
name|length
operator|+
literal|" but "
operator|+
name|remaining
operator|+
literal|" bytes remain. "
operator|+
literal|"(total buffer length "
operator|+
name|bytes
operator|.
name|length
operator|+
literal|")"
operator|+
literal|"  Ignoring similar problems."
argument_list|)
expr_stmt|;
name|bufferRangeHasExtraDataWarned
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Read integrity warning flags.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readBeyondConfiguredFieldsWarned
parameter_list|()
block|{
return|return
name|readBeyondConfiguredFieldsWarned
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|readBeyondBufferRangeWarned
parameter_list|()
block|{
return|return
name|readBeyondBufferRangeWarned
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|bufferRangeHasExtraDataWarned
parameter_list|()
block|{
return|return
name|bufferRangeHasExtraDataWarned
return|;
block|}
specifier|private
name|void
name|warnBeyondEof
parameter_list|()
throws|throws
name|EOFException
block|{
if|if
condition|(
operator|!
name|readBeyondBufferRangeWarned
condition|)
block|{
comment|// Warn only once.
name|int
name|length
init|=
name|end
operator|-
name|start
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading beyond buffer range! Buffer range "
operator|+
name|start
operator|+
literal|" for length "
operator|+
name|length
operator|+
literal|" but reading more... "
operator|+
literal|"(total buffer length "
operator|+
name|bytes
operator|.
name|length
operator|+
literal|")"
operator|+
literal|"  Ignoring similar problems."
argument_list|)
expr_stmt|;
name|readBeyondBufferRangeWarned
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/*    * BOOLEAN.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readBoolean
parameter_list|()
throws|throws
name|IOException
block|{
comment|// No check needed for single byte read.
name|byte
name|result
init|=
name|bytes
index|[
name|offset
operator|++
index|]
decl_stmt|;
comment|// Move past this NOT NULL field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
return|return
operator|(
name|result
operator|!=
literal|0
operator|)
return|;
block|}
comment|/*    * BYTE.    */
annotation|@
name|Override
specifier|public
name|byte
name|readByte
parameter_list|()
throws|throws
name|IOException
block|{
comment|// No check needed for single byte read.
name|byte
name|result
init|=
name|bytes
index|[
name|offset
operator|++
index|]
decl_stmt|;
comment|// Move past this NOT NULL field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*    * SHORT.    */
annotation|@
name|Override
specifier|public
name|short
name|readShort
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|+
literal|2
operator|>
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|short
name|result
init|=
name|LazyBinaryUtils
operator|.
name|byteArrayToShort
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
comment|// Move past this NOT NULL field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*    * INT.    */
annotation|@
name|Override
specifier|public
name|int
name|readInt
parameter_list|()
throws|throws
name|IOException
block|{
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
comment|// Move past this NOT NULL field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
return|return
name|tempVInt
operator|.
name|value
return|;
block|}
comment|/*    * LONG.    */
annotation|@
name|Override
specifier|public
name|long
name|readLong
parameter_list|()
throws|throws
name|IOException
block|{
name|LazyBinaryUtils
operator|.
name|readVLong
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVLong
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVLong
operator|.
name|length
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
comment|// Move past this NOT NULL field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
return|return
name|tempVLong
operator|.
name|value
return|;
block|}
comment|/*    * FLOAT.    */
annotation|@
name|Override
specifier|public
name|float
name|readFloat
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|+
literal|4
operator|>
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|float
name|result
init|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|LazyBinaryUtils
operator|.
name|byteArrayToInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
comment|// Move past this NOT NULL field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*    * DOUBLE.    */
annotation|@
name|Override
specifier|public
name|double
name|readDouble
parameter_list|()
throws|throws
name|IOException
block|{
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|+
literal|8
operator|>
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|double
name|result
init|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|LazyBinaryUtils
operator|.
name|byteArrayToLong
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
argument_list|)
decl_stmt|;
name|offset
operator|+=
literal|8
expr_stmt|;
comment|// Move past this NOT NULL field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/*    * STRING.    *    * Can be used to read CHAR and VARCHAR when the caller takes responsibility for    * truncation/padding issues.    */
comment|// This class is for internal use.
specifier|private
class|class
name|LazyBinaryReadStringResults
extends|extends
name|ReadStringResults
block|{
specifier|public
name|LazyBinaryReadStringResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Reading a STRING field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different bytes field.
annotation|@
name|Override
specifier|public
name|ReadStringResults
name|createReadStringResults
parameter_list|()
block|{
return|return
operator|new
name|LazyBinaryReadStringResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readString
parameter_list|(
name|ReadStringResults
name|readStringResults
parameter_list|)
throws|throws
name|IOException
block|{
comment|// using vint instead of 4 bytes
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
comment|// Could be last item for empty string -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|int
name|saveStart
init|=
name|offset
decl_stmt|;
name|int
name|length
init|=
name|tempVInt
operator|.
name|value
decl_stmt|;
name|offset
operator|+=
name|length
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
comment|// Move past this NOT NULL field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
name|readStringResults
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|readStringResults
operator|.
name|start
operator|=
name|saveStart
expr_stmt|;
name|readStringResults
operator|.
name|length
operator|=
name|length
expr_stmt|;
block|}
comment|/*    * CHAR.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazyBinaryReadHiveCharResults
extends|extends
name|ReadHiveCharResults
block|{
comment|// Use our STRING reader.
specifier|public
name|LazyBinaryReadStringResults
name|readStringResults
decl_stmt|;
specifier|public
name|LazyBinaryReadHiveCharResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveCharWritable
name|getHiveCharWritable
parameter_list|()
block|{
return|return
name|hiveCharWritable
return|;
block|}
block|}
comment|// Reading a CHAR field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different CHAR field.
annotation|@
name|Override
specifier|public
name|ReadHiveCharResults
name|createReadHiveCharResults
parameter_list|()
block|{
return|return
operator|new
name|LazyBinaryReadHiveCharResults
argument_list|()
return|;
block|}
specifier|public
name|void
name|readHiveChar
parameter_list|(
name|ReadHiveCharResults
name|readHiveCharResults
parameter_list|)
throws|throws
name|IOException
block|{
name|LazyBinaryReadHiveCharResults
name|lazyBinaryReadHiveCharResults
init|=
operator|(
name|LazyBinaryReadHiveCharResults
operator|)
name|readHiveCharResults
decl_stmt|;
if|if
condition|(
operator|!
name|lazyBinaryReadHiveCharResults
operator|.
name|isInit
argument_list|()
condition|)
block|{
name|lazyBinaryReadHiveCharResults
operator|.
name|init
argument_list|(
operator|(
name|CharTypeInfo
operator|)
name|primitiveTypeInfos
index|[
name|fieldIndex
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lazyBinaryReadHiveCharResults
operator|.
name|readStringResults
operator|==
literal|null
condition|)
block|{
name|lazyBinaryReadHiveCharResults
operator|.
name|readStringResults
operator|=
operator|new
name|LazyBinaryReadStringResults
argument_list|()
expr_stmt|;
block|}
name|LazyBinaryReadStringResults
name|readStringResults
init|=
name|lazyBinaryReadHiveCharResults
operator|.
name|readStringResults
decl_stmt|;
comment|// Read the bytes using our basic method.
name|readString
argument_list|(
name|readStringResults
argument_list|)
expr_stmt|;
comment|// Copy the bytes into our Text object, then truncate.
name|HiveCharWritable
name|hiveCharWritable
init|=
name|lazyBinaryReadHiveCharResults
operator|.
name|getHiveCharWritable
argument_list|()
decl_stmt|;
name|hiveCharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|set
argument_list|(
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|readStringResults
operator|.
name|length
argument_list|)
expr_stmt|;
name|hiveCharWritable
operator|.
name|enforceMaxLength
argument_list|(
name|lazyBinaryReadHiveCharResults
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
name|readHiveCharResults
operator|.
name|bytes
operator|=
name|hiveCharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|readHiveCharResults
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|readHiveCharResults
operator|.
name|length
operator|=
name|hiveCharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|/*    * VARCHAR.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazyBinaryReadHiveVarcharResults
extends|extends
name|ReadHiveVarcharResults
block|{
comment|// Use our STRING reader.
specifier|public
name|LazyBinaryReadStringResults
name|readStringResults
decl_stmt|;
specifier|public
name|LazyBinaryReadHiveVarcharResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveVarcharWritable
name|getHiveVarcharWritable
parameter_list|()
block|{
return|return
name|hiveVarcharWritable
return|;
block|}
block|}
comment|// Reading a VARCHAR field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different VARCHAR field.
annotation|@
name|Override
specifier|public
name|ReadHiveVarcharResults
name|createReadHiveVarcharResults
parameter_list|()
block|{
return|return
operator|new
name|LazyBinaryReadHiveVarcharResults
argument_list|()
return|;
block|}
specifier|public
name|void
name|readHiveVarchar
parameter_list|(
name|ReadHiveVarcharResults
name|readHiveVarcharResults
parameter_list|)
throws|throws
name|IOException
block|{
name|LazyBinaryReadHiveVarcharResults
name|lazyBinaryReadHiveVarcharResults
init|=
operator|(
name|LazyBinaryReadHiveVarcharResults
operator|)
name|readHiveVarcharResults
decl_stmt|;
if|if
condition|(
operator|!
name|lazyBinaryReadHiveVarcharResults
operator|.
name|isInit
argument_list|()
condition|)
block|{
name|lazyBinaryReadHiveVarcharResults
operator|.
name|init
argument_list|(
operator|(
name|VarcharTypeInfo
operator|)
name|primitiveTypeInfos
index|[
name|fieldIndex
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lazyBinaryReadHiveVarcharResults
operator|.
name|readStringResults
operator|==
literal|null
condition|)
block|{
name|lazyBinaryReadHiveVarcharResults
operator|.
name|readStringResults
operator|=
operator|new
name|LazyBinaryReadStringResults
argument_list|()
expr_stmt|;
block|}
name|LazyBinaryReadStringResults
name|readStringResults
init|=
name|lazyBinaryReadHiveVarcharResults
operator|.
name|readStringResults
decl_stmt|;
comment|// Read the bytes using our basic method.
name|readString
argument_list|(
name|readStringResults
argument_list|)
expr_stmt|;
comment|// Copy the bytes into our Text object, then truncate.
name|HiveVarcharWritable
name|hiveVarcharWritable
init|=
name|lazyBinaryReadHiveVarcharResults
operator|.
name|getHiveVarcharWritable
argument_list|()
decl_stmt|;
name|hiveVarcharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|set
argument_list|(
name|readStringResults
operator|.
name|bytes
argument_list|,
name|readStringResults
operator|.
name|start
argument_list|,
name|readStringResults
operator|.
name|length
argument_list|)
expr_stmt|;
name|hiveVarcharWritable
operator|.
name|enforceMaxLength
argument_list|(
name|lazyBinaryReadHiveVarcharResults
operator|.
name|getMaxLength
argument_list|()
argument_list|)
expr_stmt|;
name|readHiveVarcharResults
operator|.
name|bytes
operator|=
name|hiveVarcharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|readHiveVarcharResults
operator|.
name|start
operator|=
literal|0
expr_stmt|;
name|readHiveVarcharResults
operator|.
name|length
operator|=
name|hiveVarcharWritable
operator|.
name|getTextValue
argument_list|()
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
comment|/*    * BINARY.    */
comment|// This class is for internal use.
specifier|private
class|class
name|LazyBinaryReadBinaryResults
extends|extends
name|ReadBinaryResults
block|{
comment|// Use our STRING reader.
specifier|public
name|LazyBinaryReadStringResults
name|readStringResults
decl_stmt|;
specifier|public
name|LazyBinaryReadBinaryResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Reading a BINARY field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different bytes field.
annotation|@
name|Override
specifier|public
name|ReadBinaryResults
name|createReadBinaryResults
parameter_list|()
block|{
return|return
operator|new
name|LazyBinaryReadBinaryResults
argument_list|()
return|;
block|}
specifier|public
name|void
name|readBinary
parameter_list|(
name|ReadBinaryResults
name|readBinaryResults
parameter_list|)
throws|throws
name|IOException
block|{
name|LazyBinaryReadBinaryResults
name|lazyBinaryReadBinaryResults
init|=
operator|(
name|LazyBinaryReadBinaryResults
operator|)
name|readBinaryResults
decl_stmt|;
if|if
condition|(
name|lazyBinaryReadBinaryResults
operator|.
name|readStringResults
operator|==
literal|null
condition|)
block|{
name|lazyBinaryReadBinaryResults
operator|.
name|readStringResults
operator|=
operator|new
name|LazyBinaryReadStringResults
argument_list|()
expr_stmt|;
block|}
name|LazyBinaryReadStringResults
name|readStringResults
init|=
name|lazyBinaryReadBinaryResults
operator|.
name|readStringResults
decl_stmt|;
comment|// Read the bytes using our basic method.
name|readString
argument_list|(
name|readStringResults
argument_list|)
expr_stmt|;
name|readBinaryResults
operator|.
name|bytes
operator|=
name|readStringResults
operator|.
name|bytes
expr_stmt|;
name|readBinaryResults
operator|.
name|start
operator|=
name|readStringResults
operator|.
name|start
expr_stmt|;
name|readBinaryResults
operator|.
name|length
operator|=
name|readStringResults
operator|.
name|length
expr_stmt|;
block|}
comment|/*    * DATE.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazyBinaryReadDateResults
extends|extends
name|ReadDateResults
block|{
specifier|public
name|LazyBinaryReadDateResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|DateWritable
name|getDateWritable
parameter_list|()
block|{
return|return
name|dateWritable
return|;
block|}
block|}
comment|// Reading a DATE field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different DATE field.
annotation|@
name|Override
specifier|public
name|ReadDateResults
name|createReadDateResults
parameter_list|()
block|{
return|return
operator|new
name|LazyBinaryReadDateResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readDate
parameter_list|(
name|ReadDateResults
name|readDateResults
parameter_list|)
throws|throws
name|IOException
block|{
name|LazyBinaryReadDateResults
name|lazyBinaryReadDateResults
init|=
operator|(
name|LazyBinaryReadDateResults
operator|)
name|readDateResults
decl_stmt|;
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
comment|// Move past this NOT NULL field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
name|DateWritable
name|dateWritable
init|=
name|lazyBinaryReadDateResults
operator|.
name|getDateWritable
argument_list|()
decl_stmt|;
name|dateWritable
operator|.
name|set
argument_list|(
name|tempVInt
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
comment|/*    * INTERVAL_YEAR_MONTH.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazyBinaryReadIntervalYearMonthResults
extends|extends
name|ReadIntervalYearMonthResults
block|{
specifier|public
name|LazyBinaryReadIntervalYearMonthResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveIntervalYearMonthWritable
name|getHiveIntervalYearMonthWritable
parameter_list|()
block|{
return|return
name|hiveIntervalYearMonthWritable
return|;
block|}
block|}
comment|// Reading a INTERVAL_YEAR_MONTH field require a results object to receive value information.
comment|// A separate results object is created by the caller at initialization per different
comment|// INTERVAL_YEAR_MONTH field.
annotation|@
name|Override
specifier|public
name|ReadIntervalYearMonthResults
name|createReadIntervalYearMonthResults
parameter_list|()
block|{
return|return
operator|new
name|LazyBinaryReadIntervalYearMonthResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readIntervalYearMonth
parameter_list|(
name|ReadIntervalYearMonthResults
name|readIntervalYearMonthResults
parameter_list|)
throws|throws
name|IOException
block|{
name|LazyBinaryReadIntervalYearMonthResults
name|lazyBinaryReadIntervalYearMonthResults
init|=
operator|(
name|LazyBinaryReadIntervalYearMonthResults
operator|)
name|readIntervalYearMonthResults
decl_stmt|;
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
comment|// Move past this NOT NULL field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
name|HiveIntervalYearMonthWritable
name|hiveIntervalYearMonthWritable
init|=
name|lazyBinaryReadIntervalYearMonthResults
operator|.
name|getHiveIntervalYearMonthWritable
argument_list|()
decl_stmt|;
name|hiveIntervalYearMonthWritable
operator|.
name|set
argument_list|(
name|tempVInt
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
comment|/*    * INTERVAL_DAY_TIME.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazyBinaryReadIntervalDayTimeResults
extends|extends
name|ReadIntervalDayTimeResults
block|{
specifier|public
name|LazyBinaryReadIntervalDayTimeResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveIntervalDayTimeWritable
name|getHiveIntervalDayTimeWritable
parameter_list|()
block|{
return|return
name|hiveIntervalDayTimeWritable
return|;
block|}
block|}
comment|// Reading a INTERVAL_DAY_TIME field require a results object to receive value information.
comment|// A separate results object is created by the caller at initialization per different
comment|// INTERVAL_DAY_TIME field.
annotation|@
name|Override
specifier|public
name|ReadIntervalDayTimeResults
name|createReadIntervalDayTimeResults
parameter_list|()
block|{
return|return
operator|new
name|LazyBinaryReadIntervalDayTimeResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readIntervalDayTime
parameter_list|(
name|ReadIntervalDayTimeResults
name|readIntervalDayTimeResults
parameter_list|)
throws|throws
name|IOException
block|{
name|LazyBinaryReadIntervalDayTimeResults
name|lazyBinaryReadIntervalDayTimeResults
init|=
operator|(
name|LazyBinaryReadIntervalDayTimeResults
operator|)
name|readIntervalDayTimeResults
decl_stmt|;
name|LazyBinaryUtils
operator|.
name|readVLong
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVLong
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVLong
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
comment|// Overshoot or not enough for next item.
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
comment|// Move past this NOT NULL field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
name|HiveIntervalDayTimeWritable
name|hiveIntervalDayTimeWritable
init|=
name|lazyBinaryReadIntervalDayTimeResults
operator|.
name|getHiveIntervalDayTimeWritable
argument_list|()
decl_stmt|;
name|hiveIntervalDayTimeWritable
operator|.
name|set
argument_list|(
name|tempVLong
operator|.
name|value
argument_list|,
name|tempVInt
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
comment|/*    * TIMESTAMP.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazyBinaryReadTimestampResults
extends|extends
name|ReadTimestampResults
block|{
specifier|public
name|LazyBinaryReadTimestampResults
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|TimestampWritable
name|getTimestampWritable
parameter_list|()
block|{
return|return
name|timestampWritable
return|;
block|}
block|}
comment|// Reading a TIMESTAMP field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different TIMESTAMP field.
annotation|@
name|Override
specifier|public
name|ReadTimestampResults
name|createReadTimestampResults
parameter_list|()
block|{
return|return
operator|new
name|LazyBinaryReadTimestampResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readTimestamp
parameter_list|(
name|ReadTimestampResults
name|readTimestampResults
parameter_list|)
throws|throws
name|IOException
block|{
name|LazyBinaryReadTimestampResults
name|lazyBinaryReadTimestampResults
init|=
operator|(
name|LazyBinaryReadTimestampResults
operator|)
name|readTimestampResults
decl_stmt|;
name|int
name|length
init|=
name|TimestampWritable
operator|.
name|getTotalLength
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|saveStart
init|=
name|offset
decl_stmt|;
name|offset
operator|+=
name|length
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
comment|// Move past this NOT NULL field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
name|TimestampWritable
name|timestampWritable
init|=
name|lazyBinaryReadTimestampResults
operator|.
name|getTimestampWritable
argument_list|()
decl_stmt|;
name|timestampWritable
operator|.
name|set
argument_list|(
name|bytes
argument_list|,
name|saveStart
argument_list|)
expr_stmt|;
block|}
comment|/*    * DECIMAL.    */
comment|// This class is for internal use.
specifier|private
specifier|static
class|class
name|LazyBinaryReadDecimalResults
extends|extends
name|ReadDecimalResults
block|{
specifier|public
name|HiveDecimal
name|hiveDecimal
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|DecimalTypeInfo
name|decimalTypeInfo
parameter_list|)
block|{
name|super
operator|.
name|init
argument_list|(
name|decimalTypeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HiveDecimal
name|getHiveDecimal
parameter_list|()
block|{
return|return
name|hiveDecimal
return|;
block|}
block|}
comment|// Reading a DECIMAL field require a results object to receive value information.  A separate
comment|// results object is created by the caller at initialization per different DECIMAL field.
annotation|@
name|Override
specifier|public
name|ReadDecimalResults
name|createReadDecimalResults
parameter_list|()
block|{
return|return
operator|new
name|LazyBinaryReadDecimalResults
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readHiveDecimal
parameter_list|(
name|ReadDecimalResults
name|readDecimalResults
parameter_list|)
throws|throws
name|IOException
block|{
name|LazyBinaryReadDecimalResults
name|lazyBinaryReadDecimalResults
init|=
operator|(
name|LazyBinaryReadDecimalResults
operator|)
name|readDecimalResults
decl_stmt|;
if|if
condition|(
operator|!
name|lazyBinaryReadDecimalResults
operator|.
name|isInit
argument_list|()
condition|)
block|{
name|lazyBinaryReadDecimalResults
operator|.
name|init
argument_list|(
name|saveDecimalTypeInfo
argument_list|)
expr_stmt|;
block|}
name|lazyBinaryReadDecimalResults
operator|.
name|hiveDecimal
operator|=
name|saveDecimal
expr_stmt|;
name|saveDecimal
operator|=
literal|null
expr_stmt|;
name|saveDecimalTypeInfo
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    * We read the whole HiveDecimal value and then enforce precision and scale, which may    * make it a NULL.    * @return     Returns true if this HiveDecimal enforced to a NULL.    */
specifier|private
name|boolean
name|earlyReadHiveDecimal
parameter_list|()
throws|throws
name|EOFException
block|{
comment|// Since enforcing precision and scale can cause a HiveDecimal to become NULL,
comment|// we must read it, enforce it here, and either return NULL or buffer the result.
comment|// These calls are to see how much data there is. The setFromBytes call below will do the same
comment|// readVInt reads but actually unpack the decimal.
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|int
name|saveStart
init|=
name|offset
decl_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
comment|// Overshoot or not enough for next item.
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
comment|// Overshoot or not enough for next item.
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|offset
operator|+=
name|tempVInt
operator|.
name|value
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|int
name|length
init|=
name|offset
operator|-
name|saveStart
decl_stmt|;
if|if
condition|(
name|tempHiveDecimalWritable
operator|==
literal|null
condition|)
block|{
name|tempHiveDecimalWritable
operator|=
operator|new
name|HiveDecimalWritable
argument_list|()
expr_stmt|;
block|}
name|LazyBinarySerDe
operator|.
name|setFromBytes
argument_list|(
name|bytes
argument_list|,
name|saveStart
argument_list|,
name|length
argument_list|,
name|tempHiveDecimalWritable
argument_list|)
expr_stmt|;
name|saveDecimalTypeInfo
operator|=
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfos
index|[
name|fieldIndex
index|]
expr_stmt|;
name|int
name|precision
init|=
name|saveDecimalTypeInfo
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|saveDecimalTypeInfo
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|saveDecimal
operator|=
name|tempHiveDecimalWritable
operator|.
name|getHiveDecimal
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
expr_stmt|;
comment|// Move past this field whether it is NULL or NOT NULL.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
name|warnBeyondEof
argument_list|()
expr_stmt|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
comment|// Now return whether it is NULL or NOT NULL.
return|return
operator|(
name|saveDecimal
operator|==
literal|null
operator|)
return|;
block|}
block|}
end_class

end_unit

