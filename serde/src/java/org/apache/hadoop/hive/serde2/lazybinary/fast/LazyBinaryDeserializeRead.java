begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinarySerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
operator|.
name|VInt
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryUtils
operator|.
name|VLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|WritableUtils
import|;
end_import

begin_comment
comment|/*  * Directly deserialize with the caller reading field-by-field the LazyBinary serialization format.  *  * The caller is responsible for calling the read method for the right type of each field  * (after calling readCheckNull).  *  * Reading some fields require a results object to receive value information.  A separate  * results object is created by the caller at initialization per different field even for the same  * type.  *  * Some type values are by reference to either bytes in the deserialization buffer or to  * other type specific buffers.  So, those references are only valid until the next time set is  * called.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|LazyBinaryDeserializeRead
extends|extends
name|DeserializeRead
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LazyBinaryDeserializeRead
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|byte
index|[]
name|bytes
decl_stmt|;
specifier|private
name|int
name|start
decl_stmt|;
specifier|private
name|int
name|offset
decl_stmt|;
specifier|private
name|int
name|end
decl_stmt|;
specifier|private
name|int
name|fieldCount
decl_stmt|;
specifier|private
name|int
name|fieldStart
decl_stmt|;
specifier|private
name|int
name|fieldIndex
decl_stmt|;
specifier|private
name|byte
name|nullByte
decl_stmt|;
comment|// Object to receive results of reading a decoded variable length int or long.
specifier|private
name|VInt
name|tempVInt
decl_stmt|;
specifier|private
name|VLong
name|tempVLong
decl_stmt|;
specifier|private
name|boolean
name|readBeyondConfiguredFieldsWarned
decl_stmt|;
specifier|private
name|boolean
name|bufferRangeHasExtraDataWarned
decl_stmt|;
specifier|public
name|LazyBinaryDeserializeRead
parameter_list|(
name|TypeInfo
index|[]
name|typeInfos
parameter_list|,
name|boolean
name|useExternalBuffer
parameter_list|)
block|{
name|super
argument_list|(
name|typeInfos
argument_list|,
name|useExternalBuffer
argument_list|)
expr_stmt|;
name|fieldCount
operator|=
name|typeInfos
operator|.
name|length
expr_stmt|;
name|tempVInt
operator|=
operator|new
name|VInt
argument_list|()
expr_stmt|;
name|tempVLong
operator|=
operator|new
name|VLong
argument_list|()
expr_stmt|;
name|currentExternalBufferNeeded
operator|=
literal|false
expr_stmt|;
name|readBeyondConfiguredFieldsWarned
operator|=
literal|false
expr_stmt|;
name|bufferRangeHasExtraDataWarned
operator|=
literal|false
expr_stmt|;
block|}
comment|// Not public since we must have the field count so every 8 fields NULL bytes can be navigated.
specifier|private
name|LazyBinaryDeserializeRead
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/*    * Set the range of bytes to be deserialized.    */
annotation|@
name|Override
specifier|public
name|void
name|set
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|this
operator|.
name|bytes
operator|=
name|bytes
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|start
operator|=
name|offset
expr_stmt|;
name|end
operator|=
name|offset
operator|+
name|length
expr_stmt|;
name|fieldIndex
operator|=
literal|0
expr_stmt|;
block|}
comment|/*    * Get detailed read position information to help diagnose exceptions.    */
specifier|public
name|String
name|getDetailedReadPositionString
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Reading byte[] of length "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" at start offset "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" for length "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|end
operator|-
name|start
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" to read "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fieldCount
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" fields with types "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|Arrays
operator|.
name|toString
argument_list|(
name|typeInfos
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|".  Read field #"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fieldIndex
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" at field start position "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|fieldStart
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" current read offset "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|offset
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/*    * Reads the NULL information for a field.    *    * @return Returns true when the field is NULL; reading is positioned to the next field.    *         Otherwise, false when the field is NOT NULL; reading is positioned to the field data.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readCheckNull
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|fieldIndex
operator|>=
name|fieldCount
condition|)
block|{
comment|// Reading beyond the specified field count produces NULL.
if|if
condition|(
operator|!
name|readBeyondConfiguredFieldsWarned
condition|)
block|{
comment|// Warn only once.
name|LOG
operator|.
name|info
argument_list|(
literal|"Reading beyond configured fields! Configured "
operator|+
name|fieldCount
operator|+
literal|" fields but "
operator|+
literal|" reading more (NULLs returned).  Ignoring similar problems."
argument_list|)
expr_stmt|;
name|readBeyondConfiguredFieldsWarned
operator|=
literal|true
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
name|fieldStart
operator|=
name|offset
expr_stmt|;
if|if
condition|(
name|fieldIndex
operator|==
literal|0
condition|)
block|{
comment|// The rest of the range check for fields after the first is below after checking
comment|// the NULL byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
comment|// NOTE: The bit is set to 1 if a field is NOT NULL.
name|boolean
name|isNull
decl_stmt|;
if|if
condition|(
operator|(
name|nullByte
operator|&
operator|(
literal|1
operator|<<
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|)
operator|)
operator|==
literal|0
condition|)
block|{
name|isNull
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|isNull
operator|=
literal|false
expr_stmt|;
comment|// Assume.
comment|// Make sure there is at least one byte that can be read for a value.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
comment|/*        * We have a field and are positioned to it.  Read it.        */
switch|switch
condition|(
name|primitiveCategories
index|[
name|fieldIndex
index|]
condition|)
block|{
case|case
name|BOOLEAN
case|:
comment|// No check needed for single byte read.
name|currentBoolean
operator|=
operator|(
name|bytes
index|[
name|offset
operator|++
index|]
operator|!=
literal|0
operator|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
comment|// No check needed for single byte read.
name|currentByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|+
literal|2
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|currentShort
operator|=
name|LazyBinaryUtils
operator|.
name|byteArrayToShort
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|2
expr_stmt|;
break|break;
case|case
name|INT
case|:
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|currentInt
operator|=
name|tempVInt
operator|.
name|value
expr_stmt|;
break|break;
case|case
name|LONG
case|:
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVLong
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVLong
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVLong
operator|.
name|length
expr_stmt|;
name|currentLong
operator|=
name|tempVLong
operator|.
name|value
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|+
literal|4
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|currentFloat
operator|=
name|Float
operator|.
name|intBitsToFloat
argument_list|(
name|LazyBinaryUtils
operator|.
name|byteArrayToInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|4
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|+
literal|8
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|currentDouble
operator|=
name|Double
operator|.
name|longBitsToDouble
argument_list|(
name|LazyBinaryUtils
operator|.
name|byteArrayToLong
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|offset
operator|+=
literal|8
expr_stmt|;
break|break;
case|case
name|BINARY
case|:
case|case
name|STRING
case|:
case|case
name|CHAR
case|:
case|case
name|VARCHAR
case|:
block|{
comment|// using vint instead of 4 bytes
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|int
name|saveStart
init|=
name|offset
decl_stmt|;
name|int
name|length
init|=
name|tempVInt
operator|.
name|value
decl_stmt|;
name|offset
operator|+=
name|length
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|currentBytes
operator|=
name|bytes
expr_stmt|;
name|currentBytesStart
operator|=
name|saveStart
expr_stmt|;
name|currentBytesLength
operator|=
name|length
expr_stmt|;
block|}
break|break;
case|case
name|DATE
case|:
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|currentDateWritable
operator|.
name|set
argument_list|(
name|tempVInt
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|int
name|length
init|=
name|TimestampWritable
operator|.
name|getTotalLength
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|int
name|saveStart
init|=
name|offset
decl_stmt|;
name|offset
operator|+=
name|length
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|currentTimestampWritable
operator|.
name|set
argument_list|(
name|bytes
argument_list|,
name|saveStart
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|currentHiveIntervalYearMonthWritable
operator|.
name|set
argument_list|(
name|tempVInt
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
comment|// The first bounds check requires at least one more byte beyond for 2nd int (hence>=).
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>=
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVLong
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVLong
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVLong
operator|.
name|length
expr_stmt|;
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|currentHiveIntervalDayTimeWritable
operator|.
name|set
argument_list|(
name|tempVLong
operator|.
name|value
argument_list|,
name|tempVInt
operator|.
name|value
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
block|{
comment|// Since enforcing precision and scale can cause a HiveDecimal to become NULL,
comment|// we must read it, enforce it here, and either return NULL or buffer the result.
comment|// These calls are to see how much data there is. The setFromBytes call below will do the same
comment|// readVInt reads but actually unpack the decimal.
comment|// The first bounds check requires at least one more byte beyond for 2nd int (hence>=).
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>=
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|int
name|saveStart
init|=
name|offset
decl_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
comment|// Parse the first byte of a vint/vlong to determine the number of bytes.
if|if
condition|(
name|offset
operator|+
name|WritableUtils
operator|.
name|decodeVIntSize
argument_list|(
name|bytes
index|[
name|offset
index|]
argument_list|)
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|LazyBinaryUtils
operator|.
name|readVInt
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|tempVInt
argument_list|)
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|length
expr_stmt|;
name|offset
operator|+=
name|tempVInt
operator|.
name|value
expr_stmt|;
comment|// Last item -- ok to be at end.
if|if
condition|(
name|offset
operator|>
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|int
name|length
init|=
name|offset
operator|-
name|saveStart
decl_stmt|;
name|LazyBinarySerDe
operator|.
name|setFromBytes
argument_list|(
name|bytes
argument_list|,
name|saveStart
argument_list|,
name|length
argument_list|,
name|currentHiveDecimalWritable
argument_list|)
expr_stmt|;
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|typeInfos
index|[
name|fieldIndex
index|]
decl_stmt|;
name|int
name|precision
init|=
name|decimalTypeInfo
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|decimalTypeInfo
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|HiveDecimal
name|decimal
init|=
name|currentHiveDecimalWritable
operator|.
name|getHiveDecimal
argument_list|(
name|precision
argument_list|,
name|scale
argument_list|)
decl_stmt|;
if|if
condition|(
name|decimal
operator|==
literal|null
condition|)
block|{
name|isNull
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Put value back into writable.
name|currentHiveDecimalWritable
operator|.
name|set
argument_list|(
name|decimal
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unexpected primitive category "
operator|+
name|primitiveCategories
index|[
name|fieldIndex
index|]
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
comment|/*        * Now that we have read through the field -- did we really want it?        */
if|if
condition|(
name|columnsToInclude
operator|!=
literal|null
operator|&&
operator|!
name|columnsToInclude
index|[
name|fieldIndex
index|]
condition|)
block|{
name|isNull
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// Logically move past this field.
name|fieldIndex
operator|++
expr_stmt|;
comment|// Every 8 fields we read a new NULL byte.
if|if
condition|(
name|fieldIndex
operator|<
name|fieldCount
condition|)
block|{
if|if
condition|(
operator|(
name|fieldIndex
operator|%
literal|8
operator|)
operator|==
literal|0
condition|)
block|{
comment|// Get next null byte.
if|if
condition|(
name|offset
operator|>=
name|end
condition|)
block|{
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
block|}
name|nullByte
operator|=
name|bytes
index|[
name|offset
operator|++
index|]
expr_stmt|;
block|}
block|}
return|return
name|isNull
return|;
block|}
comment|/*    * Call this method after all fields have been read to check for extra fields.    */
specifier|public
name|void
name|extraFieldsCheck
parameter_list|()
block|{
if|if
condition|(
name|offset
operator|<
name|end
condition|)
block|{
comment|// We did not consume all of the byte range.
if|if
condition|(
operator|!
name|bufferRangeHasExtraDataWarned
condition|)
block|{
comment|// Warn only once.
name|int
name|length
init|=
name|end
operator|-
name|start
decl_stmt|;
name|int
name|remaining
init|=
name|end
operator|-
name|offset
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Not all fields were read in the buffer range! Buffer range "
operator|+
name|start
operator|+
literal|" for length "
operator|+
name|length
operator|+
literal|" but "
operator|+
name|remaining
operator|+
literal|" bytes remain. "
operator|+
literal|"(total buffer length "
operator|+
name|bytes
operator|.
name|length
operator|+
literal|")"
operator|+
literal|"  Ignoring similar problems."
argument_list|)
expr_stmt|;
name|bufferRangeHasExtraDataWarned
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
comment|/*    * Read integrity warning flags.    */
annotation|@
name|Override
specifier|public
name|boolean
name|readBeyondConfiguredFieldsWarned
parameter_list|()
block|{
return|return
name|readBeyondConfiguredFieldsWarned
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|bufferRangeHasExtraDataWarned
parameter_list|()
block|{
return|return
name|bufferRangeHasExtraDataWarned
return|;
block|}
block|}
end_class

end_unit

