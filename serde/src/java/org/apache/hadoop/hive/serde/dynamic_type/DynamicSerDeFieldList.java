begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|dynamic_type
package|;
end_package

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TApplicationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|server
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|DynamicSerDeFieldList
extends|extends
name|DynamicSerDeSimpleNode
implements|implements
name|Serializable
block|{
comment|//  private void writeObject(ObjectOutputStream out) throws IOException {
comment|//    out.writeObject(types_by_column_name);
comment|//    out.writeObject(ordered_types);
comment|//  }
comment|// production: Field()*
comment|// mapping of the fieldid to the field
specifier|private
name|Map
argument_list|<
name|Integer
argument_list|,
name|DynamicSerDeTypeBase
argument_list|>
name|types_by_id
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DynamicSerDeTypeBase
argument_list|>
name|types_by_column_name
init|=
literal|null
decl_stmt|;
specifier|private
name|DynamicSerDeTypeBase
name|ordered_types
index|[]
init|=
literal|null
decl_stmt|;
specifier|public
name|DynamicSerDeFieldList
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DynamicSerDeFieldList
parameter_list|(
name|thrift_grammar
name|p
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|p
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DynamicSerDeField
name|getField
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|DynamicSerDeField
operator|)
name|this
operator|.
name|jjtGetChild
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|final
specifier|protected
name|DynamicSerDeField
index|[]
name|getChildren
parameter_list|()
block|{
name|int
name|size
init|=
name|this
operator|.
name|jjtGetNumChildren
argument_list|()
decl_stmt|;
name|DynamicSerDeField
name|result
index|[]
init|=
operator|new
name|DynamicSerDeField
index|[
name|size
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
operator|(
name|DynamicSerDeField
operator|)
name|this
operator|.
name|jjtGetChild
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|int
name|getNumFields
parameter_list|()
block|{
return|return
name|this
operator|.
name|jjtGetNumChildren
argument_list|()
return|;
block|}
specifier|public
name|void
name|initialize
parameter_list|()
block|{
if|if
condition|(
name|types_by_id
operator|==
literal|null
condition|)
block|{
comment|// multiple means of lookup
name|types_by_id
operator|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|DynamicSerDeTypeBase
argument_list|>
argument_list|()
expr_stmt|;
name|types_by_column_name
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DynamicSerDeTypeBase
argument_list|>
argument_list|()
expr_stmt|;
name|ordered_types
operator|=
operator|new
name|DynamicSerDeTypeBase
index|[
name|this
operator|.
name|jjtGetNumChildren
argument_list|()
index|]
expr_stmt|;
comment|// put them in and also roll them up while we're at it
comment|// a Field contains a FieldType which in turn contains a type
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|jjtGetNumChildren
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DynamicSerDeField
name|mt
init|=
name|this
operator|.
name|getField
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DynamicSerDeTypeBase
name|type
init|=
name|mt
operator|.
name|getFieldType
argument_list|()
operator|.
name|getMyType
argument_list|()
decl_stmt|;
name|type
operator|.
name|fieldid
operator|=
name|mt
operator|.
name|fieldid
expr_stmt|;
name|type
operator|.
name|name
operator|=
name|mt
operator|.
name|name
expr_stmt|;
name|types_by_id
operator|.
name|put
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|mt
operator|.
name|fieldid
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|types_by_column_name
operator|.
name|put
argument_list|(
name|mt
operator|.
name|name
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|ordered_types
index|[
name|i
index|]
operator|=
name|type
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|DynamicSerDeTypeBase
name|getFieldByFieldId
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
name|types_by_id
operator|.
name|get
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|protected
name|DynamicSerDeTypeBase
name|getFieldByName
parameter_list|(
name|String
name|fieldname
parameter_list|)
block|{
return|return
name|types_by_column_name
operator|.
name|get
argument_list|(
name|fieldname
argument_list|)
return|;
block|}
specifier|public
name|DynamicSerDeTypeContainer
name|deserialize
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|TException
throws|,
name|IllegalAccessException
block|{
name|DynamicSerDeTypeContainer
name|result
init|=
operator|new
name|DynamicSerDeTypeContainer
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|this
operator|.
name|getNumFields
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DynamicSerDeTypeBase
name|mt
init|=
literal|null
decl_stmt|;
name|TField
name|field
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|thrift_mode
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
name|mt
operator|=
name|this
operator|.
name|getFieldByFieldId
argument_list|(
name|field
operator|.
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|mt
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"ERROR for fieldid: "
operator|+
name|field
operator|.
name|id
operator|+
literal|" system has no knowledge of this field which is of type : "
operator|+
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|thrift_mode
operator|||
name|field
operator|.
name|type
operator|<
literal|0
condition|)
block|{
name|mt
operator|=
name|this
operator|.
name|ordered_types
index|[
name|i
index|]
expr_stmt|;
block|}
name|result
operator|.
name|fields
operator|.
name|put
argument_list|(
name|mt
operator|.
name|name
argument_list|,
name|mt
operator|.
name|deserialize
argument_list|(
name|iprot
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|thrift_mode
condition|)
block|{
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|obj_fields
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
throws|,
name|SerDeException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|it
init|=
name|obj_fields
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Object
name|f
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|DynamicSerDeTypeBase
name|mt
init|=
name|this
operator|.
name|types_by_column_name
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|thrift_mode
condition|)
block|{
name|field
operator|.
name|name
operator|=
name|mt
operator|.
name|name
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|mt
operator|.
name|getType
argument_list|()
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|(
name|short
operator|)
name|mt
operator|.
name|fieldid
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|}
name|mt
operator|.
name|serialize
argument_list|(
name|f
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
if|if
condition|(
name|thrift_mode
condition|)
block|{
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|thrift_mode
condition|)
block|{
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|prefix
init|=
literal|""
decl_stmt|;
for|for
control|(
name|DynamicSerDeField
name|t
range|:
name|this
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|result
operator|.
name|append
argument_list|(
name|prefix
operator|+
name|t
operator|.
name|fieldid
operator|+
literal|":"
operator|+
name|t
operator|.
name|getFieldType
argument_list|()
operator|.
name|getMyType
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|t
operator|.
name|name
argument_list|)
expr_stmt|;
name|prefix
operator|=
literal|","
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

