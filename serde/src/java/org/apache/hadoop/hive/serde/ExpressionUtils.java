begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_class
specifier|public
class|class
name|ExpressionUtils
block|{
specifier|private
specifier|static
name|Pattern
name|metachars
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|".*[\\.#\\[\\]].*"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isComplexExpression
parameter_list|(
name|String
name|exp
parameter_list|)
block|{
name|Matcher
name|m
init|=
name|metachars
operator|.
name|matcher
argument_list|(
name|exp
argument_list|)
decl_stmt|;
return|return
operator|(
name|m
operator|.
name|matches
argument_list|()
operator|)
return|;
block|}
comment|/** Decompose a complex expression into 2 parts: top-level field, and the rest of the expression.    *     * @param exp  the expression to decompose    * @return     a List of size 2, containing the top-level field, and the rest of the expression,     *             or a List of size 1, if exp is a simple expression.    */
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|decomposeComplexExpression
parameter_list|(
name|String
name|exp
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|posDot
init|=
name|exp
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|int
name|posSquare
init|=
name|exp
operator|.
name|indexOf
argument_list|(
literal|'['
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|posDot
decl_stmt|;
if|if
condition|(
name|posDot
operator|==
operator|-
literal|1
operator|||
operator|(
name|posSquare
operator|!=
operator|-
literal|1
operator|&&
name|posSquare
operator|<
name|posDot
operator|)
condition|)
block|{
name|pos
operator|=
name|posSquare
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|exp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|topLevelField
init|=
name|exp
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
decl_stmt|;
name|String
name|suffixField
init|=
name|exp
operator|.
name|substring
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|topLevelField
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|suffixField
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

