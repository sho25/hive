begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|ColumnSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|ComplexSerDeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|ExpressionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|ReflectionSerDeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|SerDeField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_class
specifier|public
class|class
name|columnsetSerDe
extends|extends
name|ThriftByteStreamTypedSerDe
implements|implements
name|SerDe
block|{
specifier|protected
name|boolean
name|inStreaming
decl_stmt|;
specifier|private
name|String
name|separator
decl_stmt|;
specifier|public
name|columnsetSerDe
parameter_list|()
throws|throws
name|SerDeException
block|{
name|this
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|ColumnSet
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|columnsetSerDe
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|argType
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// fill super with dummies
name|super
argument_list|(
name|argType
argument_list|,
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
expr_stmt|;
name|separator
operator|=
literal|"\001"
expr_stmt|;
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
name|inStreaming
operator|=
name|job
operator|.
name|get
argument_list|(
literal|"hive.streaming.select"
argument_list|)
operator|!=
literal|null
expr_stmt|;
name|String
name|alt_sep
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|alt_sep
operator|!=
literal|null
operator|&&
name|alt_sep
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|byte
name|b
index|[]
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|b
index|[
literal|0
index|]
operator|=
name|Byte
operator|.
name|valueOf
argument_list|(
name|alt_sep
argument_list|)
operator|.
name|byteValue
argument_list|()
expr_stmt|;
name|separator
operator|=
operator|new
name|String
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|separator
operator|=
name|alt_sep
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|Object
name|deserialize
parameter_list|(
name|ColumnSet
name|c
parameter_list|,
name|String
name|row
parameter_list|,
name|String
name|sep
parameter_list|)
throws|throws
name|Exception
block|{
name|c
operator|.
name|col
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
index|[]
name|l1
init|=
name|row
operator|.
name|split
argument_list|(
name|sep
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|l1
control|)
block|{
name|c
operator|.
name|col
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|c
operator|)
return|;
block|}
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|field
parameter_list|)
throws|throws
name|SerDeException
block|{
name|ColumnSet
name|c
init|=
operator|new
name|ColumnSet
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
try|try
block|{
name|Text
name|tw
init|=
operator|(
name|Text
operator|)
name|field
decl_stmt|;
name|String
name|row
init|=
name|tw
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|(
name|deserialize
argument_list|(
name|c
argument_list|,
name|row
argument_list|,
name|separator
argument_list|)
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"columnsetSerDe  expects Text"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
comment|// don't want to crap out streaming jobs because of one error.
if|if
condition|(
name|inStreaming
condition|)
block|{
return|return
operator|(
name|c
operator|)
return|;
block|}
else|else
block|{
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
block|}
block|}
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|SerDeException
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Not implemented yet"
argument_list|)
throw|;
block|}
specifier|public
name|SerDeField
name|getFieldFromExpression
parameter_list|(
name|SerDeField
name|parentField
parameter_list|,
name|String
name|fieldExpression
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|ExpressionUtils
operator|.
name|isComplexExpression
argument_list|(
name|fieldExpression
argument_list|)
condition|)
block|{
return|return
operator|(
operator|new
name|ComplexSerDeField
argument_list|(
name|parentField
argument_list|,
name|fieldExpression
argument_list|,
name|this
argument_list|)
operator|)
return|;
block|}
else|else
block|{
comment|// ok - we know there's no nesting possible. this is columnset after all :-)
comment|// also we don't want to check for __isset crap
name|String
name|className
init|=
name|type
operator|.
name|getName
argument_list|()
decl_stmt|;
return|return
operator|(
operator|new
name|ReflectionSerDeField
argument_list|(
name|className
argument_list|,
name|fieldExpression
argument_list|)
operator|)
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
name|Text
name|tw
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|columnsetSerDe
name|csd
init|=
operator|new
name|columnsetSerDe
argument_list|()
decl_stmt|;
name|BufferedReader
name|in
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|str
init|=
name|in
operator|.
name|readLine
argument_list|()
decl_stmt|;
while|while
condition|(
name|str
operator|!=
literal|null
condition|)
block|{
comment|//System.out.println(str);
name|tw
operator|.
name|set
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|csd
operator|.
name|deserialize
argument_list|(
name|tw
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|str
operator|=
name|in
operator|.
name|readLine
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

