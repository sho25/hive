begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TSerializer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_class
specifier|public
class|class
name|ThriftByteStreamTypedSerDe
extends|extends
name|ByteStreamTypedSerDe
block|{
specifier|protected
name|TIOStreamTransport
name|outTransport
decl_stmt|,
name|inTransport
decl_stmt|;
specifier|protected
name|TProtocol
name|outProtocol
decl_stmt|,
name|inProtocol
decl_stmt|;
specifier|private
name|void
name|init
parameter_list|(
name|TProtocolFactory
name|inFactory
parameter_list|,
name|TProtocolFactory
name|outFactory
parameter_list|)
throws|throws
name|Exception
block|{
name|outTransport
operator|=
operator|new
name|TIOStreamTransport
argument_list|(
name|bos
argument_list|)
expr_stmt|;
name|inTransport
operator|=
operator|new
name|TIOStreamTransport
argument_list|(
name|bis
argument_list|)
expr_stmt|;
name|outProtocol
operator|=
name|outFactory
operator|.
name|getProtocol
argument_list|(
name|outTransport
argument_list|)
expr_stmt|;
name|inProtocol
operator|=
name|inFactory
operator|.
name|getProtocol
argument_list|(
name|inTransport
argument_list|)
expr_stmt|;
name|json_serializer
operator|=
operator|new
name|TSerializer
argument_list|(
operator|new
name|TJSONProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"ThriftByteStreamTypedSerDe is still semi-abstract"
argument_list|)
throw|;
block|}
specifier|public
specifier|static
name|String
name|shortName
parameter_list|()
block|{
return|return
literal|"thriftbytestream"
return|;
block|}
specifier|public
name|String
name|getShortName
parameter_list|()
block|{
return|return
name|shortName
argument_list|()
return|;
block|}
static|static
block|{
name|StackTraceElement
index|[]
name|sTrace
init|=
operator|new
name|Exception
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|String
name|className
init|=
name|sTrace
index|[
literal|0
index|]
operator|.
name|getClassName
argument_list|()
decl_stmt|;
try|try
block|{
name|SerDeUtils
operator|.
name|registerSerDe
argument_list|(
name|shortName
argument_list|()
argument_list|,
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ThriftByteStreamTypedSerDe
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|argType
parameter_list|,
name|TProtocolFactory
name|inFactory
parameter_list|,
name|TProtocolFactory
name|outFactory
parameter_list|)
throws|throws
name|SerDeException
block|{
name|super
argument_list|(
name|argType
argument_list|)
expr_stmt|;
try|try
block|{
name|init
argument_list|(
name|inFactory
argument_list|,
name|outFactory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ThriftByteStreamTypedSerDe
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|argType
parameter_list|)
throws|throws
name|SerDeException
block|{
name|super
argument_list|(
name|argType
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Constructor not supported"
argument_list|)
throw|;
block|}
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|field
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Object
name|obj
init|=
name|super
operator|.
name|deserialize
argument_list|(
name|field
argument_list|)
decl_stmt|;
try|try
block|{
operator|(
operator|(
name|TBase
operator|)
name|obj
operator|)
operator|.
name|read
argument_list|(
name|inProtocol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|(
name|obj
operator|)
return|;
block|}
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|SerDeException
block|{
name|super
operator|.
name|serialize
argument_list|(
name|obj
argument_list|)
expr_stmt|;
try|try
block|{
operator|(
operator|(
name|TBase
operator|)
name|obj
operator|)
operator|.
name|write
argument_list|(
name|outProtocol
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// consider optimizing further - reuse a single BytesWritableobject pointing to
comment|// a different object everytime
name|BytesWritable
name|ret
init|=
operator|new
name|BytesWritable
argument_list|(
name|bos
operator|.
name|getData
argument_list|()
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setSize
argument_list|(
name|bos
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|(
name|ret
operator|)
return|;
block|}
specifier|public
name|SerDeField
name|getFieldFromExpression
parameter_list|(
name|SerDeField
name|parentField
parameter_list|,
name|String
name|fieldExpression
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|ExpressionUtils
operator|.
name|isComplexExpression
argument_list|(
name|fieldExpression
argument_list|)
condition|)
block|{
return|return
operator|(
operator|new
name|ComplexSerDeField
argument_list|(
name|parentField
argument_list|,
name|fieldExpression
argument_list|,
name|this
argument_list|)
operator|)
return|;
block|}
else|else
block|{
name|Class
name|inClass
init|=
name|type
decl_stmt|;
if|if
condition|(
name|parentField
operator|!=
literal|null
condition|)
block|{
comment|// the parent field can be of list type. in which case, we want to evaluate
comment|// the fieldExpression relative to the contained class type.
if|if
condition|(
name|parentField
operator|.
name|isList
argument_list|()
condition|)
block|{
name|inClass
operator|=
name|parentField
operator|.
name|getListElementType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|inClass
operator|=
name|parentField
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|className
init|=
name|inClass
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TBase
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|inClass
argument_list|)
condition|)
block|{
return|return
operator|(
operator|new
name|ThriftSerDeField
argument_list|(
name|className
argument_list|,
name|fieldExpression
argument_list|)
operator|)
return|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Non TBase type "
operator|+
name|inClass
operator|.
name|getName
argument_list|()
operator|+
literal|" embedded inside TBase?"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Class "
operator|+
name|className
operator|+
literal|"does not derive from TBase"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|List
argument_list|<
name|SerDeField
argument_list|>
name|getFields
parameter_list|(
name|SerDeField
name|parentField
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Class
name|c
init|=
name|type
decl_stmt|;
if|if
condition|(
name|parentField
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parentField
operator|.
name|isPrimitive
argument_list|()
operator|||
name|parentField
operator|.
name|isMap
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Trying to list fields of primitive or map"
argument_list|)
throw|;
block|}
if|if
condition|(
name|parentField
operator|.
name|isList
argument_list|()
condition|)
block|{
name|c
operator|=
name|parentField
operator|.
name|getListElementType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|parentField
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
block|}
name|Field
index|[]
name|farr
init|=
name|c
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
argument_list|(
name|farr
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|onef
range|:
name|farr
control|)
block|{
if|if
condition|(
name|onef
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"__isset"
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|ret
operator|.
name|add
argument_list|(
name|this
operator|.
name|getFieldFromExpression
argument_list|(
name|parentField
argument_list|,
name|onef
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|ret
operator|)
return|;
block|}
specifier|public
name|String
name|toJSONString
parameter_list|(
name|Object
name|obj
parameter_list|,
name|SerDeField
name|hf
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|hf
operator|==
literal|null
condition|)
block|{
comment|// if this is a top level Thrift object
return|return
name|json_serializer
operator|.
name|toString
argument_list|(
operator|(
name|TBase
operator|)
name|obj
argument_list|)
return|;
block|}
if|if
condition|(
name|hf
operator|.
name|isList
argument_list|()
operator|||
name|hf
operator|.
name|isMap
argument_list|()
condition|)
block|{
comment|// pretty print a list
return|return
name|SerDeUtils
operator|.
name|toJSONString
argument_list|(
name|obj
argument_list|,
name|hf
argument_list|,
name|this
argument_list|)
return|;
block|}
if|if
condition|(
name|hf
operator|.
name|isPrimitive
argument_list|()
condition|)
block|{
comment|// escape string before printing
return|return
name|SerDeUtils
operator|.
name|lightEscapeString
argument_list|(
name|obj
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|// anything else must be a top level thrift object as well
return|return
name|json_serializer
operator|.
name|toString
argument_list|(
operator|(
name|TBase
operator|)
name|obj
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"toJSONString:TJSONProtocol error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

