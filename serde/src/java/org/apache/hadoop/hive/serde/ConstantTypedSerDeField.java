begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implementation of ConstantTypedSerDeField  */
end_comment

begin_class
specifier|public
class|class
name|ConstantTypedSerDeField
implements|implements
name|SerDeField
block|{
specifier|protected
name|String
name|_fieldName
decl_stmt|;
specifier|protected
name|Object
name|_value
decl_stmt|;
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"[fieldName="
operator|+
name|_fieldName
operator|+
literal|",value="
operator|+
name|_value
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
return|;
block|}
specifier|public
name|ConstantTypedSerDeField
parameter_list|()
throws|throws
name|SerDeException
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"ConstantTypedSerDeField::empty constructor not implemented!"
argument_list|)
throw|;
block|}
specifier|public
name|ConstantTypedSerDeField
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|SerDeException
block|{
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
name|_value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|SerDeException
block|{
return|return
name|_value
return|;
block|}
specifier|public
name|boolean
name|isList
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isMap
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isPrimitive
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|Class
name|getType
parameter_list|()
block|{
comment|// total hack. Since fieldName is a String, this does the right thing :) pw 2/5/08
return|return
name|this
operator|.
name|_value
operator|.
name|getClass
argument_list|()
return|;
block|}
specifier|public
name|Class
name|getListElementType
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not a list field "
argument_list|)
throw|;
block|}
specifier|public
name|Class
name|getMapKeyType
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not a map field "
argument_list|)
throw|;
block|}
specifier|public
name|Class
name|getMapValueType
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not a map field "
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
end_class

end_unit

