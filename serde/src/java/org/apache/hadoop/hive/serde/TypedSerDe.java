begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|TypedSerDe
implements|implements
name|SerDe
block|{
specifier|private
name|Object
name|cachedObj
decl_stmt|;
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
specifier|public
name|TypedSerDe
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|argType
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|type
operator|=
name|argType
expr_stmt|;
name|cachedObj
operator|=
name|type
operator|.
name|newInstance
argument_list|()
expr_stmt|;
comment|//      hm = new HashMap<Enum, LongWritable> ();
comment|//      hm.put(Counter.READ_ERRORS, Long.valueOfWritable(0));
comment|//      hm.put(Counter.WRITE_ERRORS, Long.valueOfWritable(0));
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*     public static enum Counter {READ_ERRORS, WRITE_ERRORS}     HashMap<Enum, LongWritable> hm;     public Map<Enum, Long> getStats() {     HashMap<Enum, Long> ret = new HashMap<Enum, Long> ();     for(Enum one: hm.keySet()) {     ret.put(one, Long.valueOf(hm.get(one).get()));     }     return(ret);     }   */
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|field
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// used to return the cached object. except, the cached
comment|// object has references that are hard/expensive to clear
comment|// unless all objects in hive support some kind of a 'clear' function
try|try
block|{
return|return
name|type
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|// can insert type-checking here
return|return
operator|(
literal|null
operator|)
return|;
block|}
block|}
end_class

end_unit

