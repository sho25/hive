begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_comment
comment|// Copyright (c) 2006- Facebook
end_comment

begin_comment
comment|// Distributed under the Thrift Software License
end_comment

begin_comment
comment|//
end_comment

begin_comment
comment|// See accompanying file LICENSE or visit the Thrift site at:
end_comment

begin_comment
comment|// http://developers.facebook.com/thrift/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TListSerializer
parameter_list|<
name|T
extends|extends
name|TBase
parameter_list|>
block|{
specifier|private
name|TProtocol
name|iprot
decl_stmt|;
specifier|private
name|TProtocol
name|oprot
decl_stmt|;
specifier|private
name|Class
argument_list|<
name|T
argument_list|>
name|tclass
decl_stmt|;
specifier|private
name|TField
name|cField
init|=
operator|new
name|TField
argument_list|(
literal|"tarray"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|TList
name|cList
init|=
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|TStruct
name|cStruct
init|=
operator|new
name|TStruct
argument_list|(
literal|"TListSerializer"
argument_list|)
decl_stmt|;
specifier|public
name|TListSerializer
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|arg_tclass
parameter_list|,
name|TProtocol
name|arg_iprot
parameter_list|,
name|TProtocol
name|arg_oprot
parameter_list|)
block|{
name|iprot
operator|=
name|arg_iprot
expr_stmt|;
name|oprot
operator|=
name|arg_oprot
expr_stmt|;
name|tclass
operator|=
name|arg_tclass
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|ArrayList
argument_list|<
name|T
argument_list|>
name|tarray
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
name|TList
name|_list
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|tarray
operator|.
name|ensureCapacity
argument_list|(
name|_list
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i
init|=
literal|0
init|;
name|_i
operator|<
name|_list
operator|.
name|size
condition|;
operator|++
name|_i
control|)
block|{
name|T
name|_elem
decl_stmt|;
try|try
block|{
name|_elem
operator|=
name|tclass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|_elem
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|tarray
operator|.
name|add
argument_list|(
name|_elem
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|ArrayList
argument_list|<
name|T
argument_list|>
name|tarray
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|cStruct
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|cField
argument_list|)
expr_stmt|;
name|cList
operator|.
name|size
operator|=
name|tarray
operator|.
name|size
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeListBegin
argument_list|(
name|cList
argument_list|)
expr_stmt|;
for|for
control|(
name|T
name|_iter
range|:
name|tarray
control|)
block|{
name|_iter
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

