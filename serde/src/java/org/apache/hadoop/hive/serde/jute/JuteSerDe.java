begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|jute
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|// apache logging stuff
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|record
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|JuteSerDe
implements|implements
name|SerDe
block|{
specifier|protected
name|Class
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.metastore"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|String
name|className
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_CLASS
argument_list|)
decl_stmt|;
name|type
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|deserialize
parameter_list|(
name|Writable
name|field
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|Record
name|r
init|=
call|(
name|Record
call|)
argument_list|(
name|type
operator|.
name|newInstance
argument_list|()
argument_list|)
decl_stmt|;
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|100000
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|field
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|BinaryRecordInput
name|ri
init|=
operator|new
name|BinaryRecordInput
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|r
operator|.
name|deserialize
argument_list|(
name|ri
argument_list|,
literal|""
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"jute serialize problem: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|Record
name|r
init|=
operator|(
name|Record
operator|)
name|obj
decl_stmt|;
name|DataOutput
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|ByteArrayOutputStream
argument_list|(
literal|10000
argument_list|)
argument_list|)
decl_stmt|;
name|BinaryRecordOutput
name|ro
init|=
operator|new
name|BinaryRecordOutput
argument_list|(
name|dos
argument_list|)
decl_stmt|;
name|r
operator|.
name|serialize
argument_list|(
name|ro
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|BytesWritable
name|bw
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|bw
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
return|return
name|bw
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"jute serialize problem: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|SerDeField
name|getFieldFromExpression
parameter_list|(
name|SerDeField
name|parentField
parameter_list|,
name|String
name|fieldExpression
parameter_list|)
throws|throws
name|SerDeException
block|{
if|if
condition|(
name|ExpressionUtils
operator|.
name|isComplexExpression
argument_list|(
name|fieldExpression
argument_list|)
condition|)
block|{
return|return
operator|(
operator|new
name|ComplexSerDeField
argument_list|(
name|parentField
argument_list|,
name|fieldExpression
argument_list|,
name|this
argument_list|)
operator|)
return|;
block|}
name|Class
name|inClass
init|=
name|type
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"getFieldFromExpression("
operator|+
name|parentField
operator|+
literal|","
operator|+
name|fieldExpression
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentField
operator|!=
literal|null
condition|)
block|{
comment|// the parent field can be of list type. in which case, we want to evaluate
comment|// the fieldExpression relative to the contained class type.
if|if
condition|(
name|parentField
operator|.
name|isList
argument_list|()
condition|)
block|{
name|inClass
operator|=
name|parentField
operator|.
name|getListElementType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|inClass
operator|=
name|parentField
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
block|}
name|String
name|className
init|=
name|inClass
operator|.
name|getName
argument_list|()
decl_stmt|;
name|JuteSerDeField
name|field
init|=
operator|new
name|JuteSerDeField
argument_list|(
name|className
argument_list|,
name|fieldExpression
argument_list|)
decl_stmt|;
return|return
name|field
return|;
block|}
specifier|public
name|List
argument_list|<
name|SerDeField
argument_list|>
name|getFields
parameter_list|(
name|SerDeField
name|parentField
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Class
name|c
init|=
name|type
decl_stmt|;
if|if
condition|(
name|parentField
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parentField
operator|.
name|isPrimitive
argument_list|()
operator|||
name|parentField
operator|.
name|isMap
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Trying to list fields of primitive or map"
argument_list|)
throw|;
block|}
if|if
condition|(
name|parentField
operator|.
name|isList
argument_list|()
condition|)
block|{
name|c
operator|=
name|parentField
operator|.
name|getListElementType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|parentField
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
block|}
name|Field
index|[]
name|farr
init|=
name|c
operator|.
name|getDeclaredFields
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
name|ret
init|=
operator|new
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
argument_list|(
name|farr
operator|.
name|length
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Field
name|onef
range|:
name|farr
control|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|this
operator|.
name|getFieldFromExpression
argument_list|(
name|parentField
argument_list|,
name|onef
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|String
name|toJSONString
parameter_list|(
name|Object
name|obj
parameter_list|,
name|SerDeField
name|hf
parameter_list|)
throws|throws
name|SerDeException
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

