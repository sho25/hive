begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|dynamic_type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The default implementation of Hive Field based on Java Reflection.  */
end_comment

begin_class
specifier|public
class|class
name|DynamicSerDeHiveField
implements|implements
name|SerDeField
block|{
specifier|protected
name|DynamicSerDeTypeBase
name|_parentMetaType
decl_stmt|;
specifier|protected
name|DynamicSerDeTypeBase
name|_metaType
decl_stmt|;
specifier|protected
name|DynamicSerDeTypeBase
name|_valueMetaType
decl_stmt|;
specifier|protected
name|DynamicSerDeTypeBase
name|_keyMetaType
decl_stmt|;
specifier|protected
name|Class
name|_parentClass
decl_stmt|;
specifier|protected
name|Class
name|_class
decl_stmt|;
specifier|protected
name|String
name|_fieldName
decl_stmt|;
specifier|protected
name|boolean
name|_isList
decl_stmt|;
specifier|protected
name|boolean
name|_isMap
decl_stmt|;
specifier|protected
name|boolean
name|_isClassPrimitive
decl_stmt|;
specifier|protected
name|Class
name|_valueClass
decl_stmt|;
specifier|protected
name|Class
name|_keyClass
decl_stmt|;
specifier|public
specifier|static
name|boolean
name|isClassPrimitive
parameter_list|(
name|Class
name|c
parameter_list|)
block|{
return|return
operator|(
operator|(
name|c
operator|==
name|String
operator|.
name|class
operator|)
operator|||
operator|(
name|c
operator|==
name|Boolean
operator|.
name|class
operator|)
operator|||
operator|(
name|c
operator|==
name|Character
operator|.
name|class
operator|)
operator|||
name|java
operator|.
name|lang
operator|.
name|Number
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|c
argument_list|)
operator|||
name|c
operator|.
name|isPrimitive
argument_list|()
operator|)
return|;
block|}
specifier|public
name|DynamicSerDeHiveField
parameter_list|(
name|DynamicSerDeStructBase
name|parent
parameter_list|,
name|String
name|fieldName
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|_parentClass
operator|=
name|parent
operator|.
name|getRealType
argument_list|()
expr_stmt|;
name|_parentMetaType
operator|=
name|parent
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
name|_metaType
operator|=
name|parent
operator|.
name|getFieldList
argument_list|()
operator|.
name|getFieldByName
argument_list|(
name|fieldName
argument_list|)
expr_stmt|;
name|_isList
operator|=
name|_metaType
operator|.
name|isList
argument_list|()
expr_stmt|;
name|_isMap
operator|=
name|_metaType
operator|.
name|isMap
argument_list|()
expr_stmt|;
name|_isClassPrimitive
operator|=
name|_metaType
operator|.
name|isPrimitive
argument_list|()
expr_stmt|;
if|if
condition|(
name|_isList
condition|)
block|{
name|DynamicSerDeTypeList
name|type
init|=
operator|(
name|DynamicSerDeTypeList
operator|)
name|_metaType
decl_stmt|;
name|_valueClass
operator|=
name|type
operator|.
name|getElementType
argument_list|()
operator|.
name|getRealType
argument_list|()
expr_stmt|;
name|_valueMetaType
operator|=
name|type
operator|.
name|getElementType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|_isMap
condition|)
block|{
name|DynamicSerDeTypeMap
name|type
init|=
operator|(
name|DynamicSerDeTypeMap
operator|)
name|_metaType
decl_stmt|;
name|_keyClass
operator|=
name|type
operator|.
name|getKeyType
argument_list|()
operator|.
name|getRealType
argument_list|()
expr_stmt|;
name|_valueClass
operator|=
name|type
operator|.
name|getValueType
argument_list|()
operator|.
name|getRealType
argument_list|()
expr_stmt|;
name|_keyMetaType
operator|=
name|type
operator|.
name|getKeyType
argument_list|()
expr_stmt|;
name|_valueMetaType
operator|=
name|type
operator|.
name|getValueType
argument_list|()
expr_stmt|;
block|}
name|_class
operator|=
name|_metaType
operator|.
name|getRealType
argument_list|()
expr_stmt|;
if|if
condition|(
name|_class
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"_metaType.getClass().getName()="
operator|+
name|_metaType
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"could not get the real type for "
operator|+
name|_metaType
operator|.
name|name
operator|+
literal|":"
operator|+
name|_metaType
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Illegal class or member:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|obj
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|DynamicSerDeTypeContainer
name|container
init|=
operator|(
name|DynamicSerDeTypeContainer
operator|)
name|obj
decl_stmt|;
return|return
name|container
operator|.
name|fields
operator|.
name|get
argument_list|(
name|_fieldName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Illegal object or access error"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isList
parameter_list|()
block|{
return|return
name|_isList
return|;
block|}
specifier|public
name|boolean
name|isMap
parameter_list|()
block|{
return|return
name|_isMap
return|;
block|}
specifier|public
name|boolean
name|isPrimitive
parameter_list|()
block|{
if|if
condition|(
name|_isList
operator|||
name|_isMap
condition|)
return|return
literal|false
return|;
return|return
name|_isClassPrimitive
return|;
block|}
specifier|public
name|Class
name|getType
parameter_list|()
block|{
return|return
name|_class
return|;
block|}
specifier|public
name|DynamicSerDeTypeBase
name|getMetaType
parameter_list|()
block|{
return|return
name|_metaType
return|;
block|}
specifier|public
name|DynamicSerDeTypeBase
name|getListElementMetaType
parameter_list|()
block|{
if|if
condition|(
name|_isList
condition|)
block|{
return|return
name|_valueMetaType
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not a list field "
argument_list|)
throw|;
block|}
block|}
specifier|public
name|DynamicSerDeTypeBase
name|getMapKeyMetaType
parameter_list|()
block|{
if|if
condition|(
name|_isMap
condition|)
block|{
return|return
name|_keyMetaType
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not a list field "
argument_list|)
throw|;
block|}
block|}
specifier|public
name|DynamicSerDeTypeBase
name|getValueMetaType
parameter_list|()
block|{
if|if
condition|(
name|_isMap
condition|)
block|{
return|return
name|_valueMetaType
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not a list field "
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Class
name|getListElementType
parameter_list|()
block|{
if|if
condition|(
name|_isList
condition|)
block|{
return|return
name|_valueClass
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not a list field "
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Class
name|getMapKeyType
parameter_list|()
block|{
if|if
condition|(
name|_isMap
condition|)
block|{
return|return
name|_keyClass
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not a map field "
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Class
name|getMapValueType
parameter_list|()
block|{
if|if
condition|(
name|_isMap
condition|)
block|{
return|return
name|_valueClass
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Not a map field "
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
specifier|public
specifier|static
name|String
name|fieldToString
parameter_list|(
name|SerDeField
name|hf
parameter_list|)
block|{
return|return
operator|(
literal|"Field= "
operator|+
name|hf
operator|.
name|getName
argument_list|()
operator|+
literal|", isPrimitive="
operator|+
name|hf
operator|.
name|isPrimitive
argument_list|()
operator|+
literal|", isList="
operator|+
name|hf
operator|.
name|isList
argument_list|()
operator|+
operator|(
name|hf
operator|.
name|isList
argument_list|()
condition|?
literal|" of "
operator|+
name|hf
operator|.
name|getListElementType
argument_list|()
operator|.
name|getName
argument_list|()
else|:
literal|""
operator|)
operator|+
literal|", isMap="
operator|+
name|hf
operator|.
name|isMap
argument_list|()
operator|+
operator|(
name|hf
operator|.
name|isMap
argument_list|()
condition|?
literal|" of<"
operator|+
name|hf
operator|.
name|getMapKeyType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|","
operator|+
name|hf
operator|.
name|getMapValueType
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|">"
else|:
literal|""
operator|)
operator|+
literal|", type="
operator|+
name|hf
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|)
return|;
block|}
block|}
end_class

end_unit

