begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|dynamic_type
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|DynamicSerDe
implements|implements
name|SerDe
implements|,
name|Serializable
block|{
specifier|private
name|String
name|type_name
decl_stmt|;
specifier|private
name|DynamicSerDeStructBase
name|bt
decl_stmt|;
specifier|transient
specifier|private
name|thrift_grammar
name|parse_tree
decl_stmt|;
specifier|transient
specifier|private
name|boolean
name|inStreaming
decl_stmt|;
specifier|transient
specifier|protected
name|ByteStream
operator|.
name|Input
name|bis_
decl_stmt|;
specifier|transient
specifier|protected
name|ByteStream
operator|.
name|Output
name|bos_
decl_stmt|;
specifier|transient
specifier|private
name|TProtocol
name|oprot_
decl_stmt|;
specifier|transient
specifier|private
name|TProtocol
name|iprot_
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|META_TABLE_NAME
init|=
literal|"name"
decl_stmt|;
specifier|static
specifier|public
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
try|try
block|{
block|{
name|String
name|schema_file
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
name|String
name|kv_file
init|=
name|args
index|[
literal|1
index|]
decl_stmt|;
name|Properties
name|schema
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|schema
operator|.
name|load
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|schema_file
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|schema
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DynamicSerDe
name|serde
init|=
operator|new
name|DynamicSerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|BufferedReader
name|r
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|kv_file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|row
decl_stmt|;
name|SerDeField
name|keyF
init|=
name|serde
operator|.
name|getFieldFromExpression
argument_list|(
literal|null
argument_list|,
literal|"key"
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|row
operator|=
name|r
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|Text
name|t
init|=
operator|new
name|Text
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"row = "
operator|+
name|row
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|flush
argument_list|()
expr_stmt|;
name|Object
name|o
init|=
name|serde
operator|.
name|deserialize
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|o
operator|.
name|toString
argument_list|()
operator|+
literal|" of type "
operator|+
name|o
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|fo
init|=
name|keyF
operator|.
name|get
argument_list|(
name|o
argument_list|)
decl_stmt|;
block|}
if|if
condition|(
literal|true
condition|)
return|return;
block|}
name|Properties
name|schema
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|String
name|ddl
init|=
literal|"struct test { i32 hello, list<string> bye, set<i32> more, map<string,bool> another}"
decl_stmt|;
name|schema
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_DDL
argument_list|,
name|ddl
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_LIB
argument_list|,
operator|new
name|DynamicSerDe
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"com.facebook.thrift.protocol.TJSONProtocol"
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setProperty
argument_list|(
name|META_TABLE_NAME
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|DynamicSerDe
name|serde
init|=
operator|new
name|DynamicSerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|DynamicSerDeTypeContainer
name|data
init|=
operator|new
name|DynamicSerDeTypeContainer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|hellos
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|hellos
operator|.
name|add
argument_list|(
literal|"goodbye and this is more stuff - what is going oin here this is really really weird"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Integer
argument_list|>
name|set
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|set
operator|.
name|add
argument_list|(
literal|22
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"me"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|data
operator|.
name|fields
operator|.
name|put
argument_list|(
literal|"bye"
argument_list|,
name|hellos
argument_list|)
expr_stmt|;
name|data
operator|.
name|fields
operator|.
name|put
argument_list|(
literal|"hello"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|10032
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|.
name|fields
operator|.
name|put
argument_list|(
literal|"more"
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|data
operator|.
name|fields
operator|.
name|put
argument_list|(
literal|"another"
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|BytesWritable
name|foo
init|=
operator|(
name|BytesWritable
operator|)
name|serde
operator|.
name|serialize
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
operator|new
name|String
argument_list|(
name|foo
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|serde
operator|.
name|deserialize
argument_list|(
name|foo
argument_list|)
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"obj="
operator|+
name|obj
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"got exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|TIOStreamTransport
name|tios
decl_stmt|;
specifier|public
name|void
name|initialize
parameter_list|(
name|Configuration
name|job
parameter_list|,
name|Properties
name|tbl
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|String
name|ddl
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_DDL
argument_list|)
decl_stmt|;
name|type_name
operator|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|META_TABLE_NAME
argument_list|)
expr_stmt|;
name|String
name|protoName
init|=
name|tbl
operator|.
name|getProperty
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|)
decl_stmt|;
if|if
condition|(
name|protoName
operator|==
literal|null
condition|)
block|{
name|protoName
operator|=
literal|"com.facebook.thrift.protocol.TBinaryProtocol"
expr_stmt|;
block|}
name|TProtocolFactory
name|protFactory
init|=
name|TReflectionUtils
operator|.
name|getProtocolFactoryByName
argument_list|(
name|protoName
argument_list|)
decl_stmt|;
name|bos_
operator|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
expr_stmt|;
name|bis_
operator|=
operator|new
name|ByteStream
operator|.
name|Input
argument_list|()
expr_stmt|;
name|tios
operator|=
operator|new
name|TIOStreamTransport
argument_list|(
name|bis_
argument_list|,
name|bos_
argument_list|)
expr_stmt|;
name|oprot_
operator|=
name|protFactory
operator|.
name|getProtocol
argument_list|(
name|tios
argument_list|)
expr_stmt|;
name|iprot_
operator|=
name|protFactory
operator|.
name|getProtocol
argument_list|(
name|tios
argument_list|)
expr_stmt|;
comment|// in theory the include path should come from the configuration
name|List
argument_list|<
name|String
argument_list|>
name|include_path
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|include_path
operator|.
name|add
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|this
operator|.
name|parse_tree
operator|=
operator|new
name|thrift_grammar
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|ddl
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|,
name|include_path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|parse_tree
operator|.
name|Start
argument_list|()
expr_stmt|;
name|this
operator|.
name|bt
operator|=
operator|(
name|DynamicSerDeStructBase
operator|)
name|this
operator|.
name|parse_tree
operator|.
name|types
operator|.
name|get
argument_list|(
name|type_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|bt
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|bt
operator|=
operator|(
name|DynamicSerDeStructBase
operator|)
name|this
operator|.
name|parse_tree
operator|.
name|tables
operator|.
name|get
argument_list|(
name|type_name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|bt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Could not lookup table type "
operator|+
name|type_name
operator|+
literal|" in this ddl: "
operator|+
name|ddl
argument_list|)
throw|;
block|}
name|this
operator|.
name|bt
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|this
operator|.
name|inStreaming
operator|=
name|job
operator|.
name|get
argument_list|(
literal|"hive.streaming.select"
argument_list|)
operator|!=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|DynamicSerDeTypeContainer
name|deserialize
parameter_list|(
name|Writable
name|field
parameter_list|)
throws|throws
name|SerDeException
block|{
try|try
block|{
name|Text
name|b
init|=
operator|(
name|Text
operator|)
name|field
decl_stmt|;
name|bis_
operator|.
name|reset
argument_list|(
name|b
operator|.
name|getBytes
argument_list|()
argument_list|,
name|b
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
operator|.
name|bt
operator|.
name|deserialize
argument_list|(
name|iprot_
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Writable
name|serialize
parameter_list|(
name|Object
name|o
parameter_list|)
throws|throws
name|SerDeException
block|{
name|DynamicSerDeTypeContainer
name|obj
init|=
operator|(
name|DynamicSerDeTypeContainer
operator|)
name|o
decl_stmt|;
try|try
block|{
name|this
operator|.
name|bt
operator|.
name|serialize
argument_list|(
name|obj
argument_list|,
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|SerDeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
operator|new
name|BytesWritable
argument_list|(
name|bos_
operator|.
name|getData
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|SerDeField
name|getFieldFromExpression
parameter_list|(
name|SerDeField
name|parentField
parameter_list|,
name|String
name|fieldExpression
parameter_list|)
throws|throws
name|SerDeException
block|{
name|DynamicSerDeStructBase
name|type
init|=
name|bt
decl_stmt|;
name|DynamicSerDeHiveField
name|parentFieldCast
init|=
operator|(
name|DynamicSerDeHiveField
operator|)
name|parentField
decl_stmt|;
if|if
condition|(
name|parentFieldCast
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parentFieldCast
operator|.
name|isList
argument_list|()
condition|)
block|{
name|DynamicSerDeTypeBase
name|elemType
init|=
name|parentFieldCast
operator|.
name|getListElementMetaType
argument_list|()
decl_stmt|;
if|if
condition|(
name|elemType
operator|instanceof
name|DynamicSerDeStructBase
condition|)
block|{
name|type
operator|=
operator|(
name|DynamicSerDeStructBase
operator|)
name|elemType
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Trying to get fields from a non struct/table type: "
operator|+
name|elemType
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|DynamicSerDeTypeBase
name|metaType
init|=
name|parentFieldCast
operator|.
name|getMetaType
argument_list|()
decl_stmt|;
if|if
condition|(
name|metaType
operator|instanceof
name|DynamicSerDeStructBase
condition|)
block|{
name|type
operator|=
operator|(
name|DynamicSerDeStructBase
operator|)
name|metaType
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"Trying to get fields from a non struct/table type: "
operator|+
name|metaType
argument_list|)
throw|;
block|}
block|}
block|}
name|SerDeField
name|field
init|=
operator|new
name|DynamicSerDeHiveField
argument_list|(
name|type
argument_list|,
name|fieldExpression
argument_list|)
decl_stmt|;
return|return
name|field
return|;
block|}
specifier|public
name|List
argument_list|<
name|SerDeField
argument_list|>
name|getFields
parameter_list|(
name|SerDeField
name|parentField
parameter_list|)
throws|throws
name|SerDeException
block|{
name|DynamicSerDeStructBase
name|type
init|=
name|bt
decl_stmt|;
name|DynamicSerDeHiveField
name|parentFieldCast
init|=
operator|(
name|DynamicSerDeHiveField
operator|)
name|parentField
decl_stmt|;
if|if
condition|(
name|parentFieldCast
operator|!=
literal|null
condition|)
block|{
name|DynamicSerDeTypeBase
name|t
init|=
name|parentFieldCast
operator|.
name|getMetaType
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|DynamicSerDeStructBase
condition|)
block|{
name|type
operator|=
operator|(
name|DynamicSerDeStructBase
operator|)
name|t
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SerDeException
argument_list|(
literal|"trying to getFields on a non struct type: "
operator|+
name|t
argument_list|)
throw|;
block|}
block|}
name|List
argument_list|<
name|SerDeField
argument_list|>
name|fields
init|=
operator|new
name|ArrayList
argument_list|<
name|SerDeField
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|DynamicSerDeField
name|elem
range|:
name|type
operator|.
name|getFieldList
argument_list|()
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|fields
operator|.
name|add
argument_list|(
name|this
operator|.
name|getFieldFromExpression
argument_list|(
name|parentField
argument_list|,
name|elem
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fields
return|;
block|}
specifier|public
name|String
name|toJSONString
parameter_list|(
name|Object
name|obj
parameter_list|,
name|SerDeField
name|hf
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|//        return(tsd.toJSONString(obj, hf));
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

