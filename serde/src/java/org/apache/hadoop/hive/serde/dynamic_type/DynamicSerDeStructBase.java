begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|dynamic_type
package|;
end_package

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TApplicationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|server
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|*
import|;
end_import

begin_class
specifier|abstract
specifier|public
class|class
name|DynamicSerDeStructBase
extends|extends
name|DynamicSerDeTypeBase
implements|implements
name|Serializable
block|{
name|DynamicSerDeFieldList
name|fieldList
decl_stmt|;
specifier|public
name|DynamicSerDeStructBase
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DynamicSerDeStructBase
parameter_list|(
name|thrift_grammar
name|p
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|super
argument_list|(
name|p
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
specifier|abstract
specifier|public
name|DynamicSerDeFieldList
name|getFieldList
parameter_list|()
function_decl|;
specifier|public
name|void
name|initialize
parameter_list|()
block|{
name|fieldList
operator|=
name|getFieldList
argument_list|()
expr_stmt|;
name|fieldList
operator|.
name|initialize
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Class
name|getRealType
parameter_list|()
block|{
return|return
name|DynamicSerDeTypeContainer
operator|.
name|class
return|;
block|}
specifier|public
name|DynamicSerDeTypeContainer
name|deserialize
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|TException
throws|,
name|IllegalAccessException
block|{
if|if
condition|(
name|thrift_mode
condition|)
block|{
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
block|}
name|DynamicSerDeTypeContainer
name|container
init|=
name|fieldList
operator|.
name|deserialize
argument_list|(
name|iprot
argument_list|)
decl_stmt|;
if|if
condition|(
name|thrift_mode
condition|)
block|{
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
return|return
name|container
return|;
block|}
comment|/**    * serialize    *    * The way to serialize a Thrift "table" which in thrift land is really a function and thus this class's name.    *    * @param o - this list should be in the order of the function's params for now. If we wanted to remove this requirement,    * we'd need to make it a List<Pair<String, Object>> with the String being the field name.    *    */
specifier|public
name|void
name|serialize
parameter_list|(
name|DynamicSerDeTypeContainer
name|fields
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
throws|,
name|SerDeException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
specifier|final
name|int
name|seqid_
init|=
literal|0
decl_stmt|;
comment|// bugbug set it right - todo pw
if|if
condition|(
name|thrift_mode
condition|)
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
operator|new
name|TStruct
argument_list|(
name|this
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fieldList
operator|.
name|serialize
argument_list|(
name|fields
operator|.
name|fields
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
if|if
condition|(
name|thrift_mode
condition|)
block|{
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

