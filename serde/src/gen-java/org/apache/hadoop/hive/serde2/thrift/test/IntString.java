begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|IntString
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"IntString"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|MYINT_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"myint"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|MY_STRING_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"myString"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|UNDERSCORE_INT_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"underscore_int"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|public
name|int
name|myint
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MYINT
init|=
literal|1
decl_stmt|;
specifier|public
name|String
name|myString
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MYSTRING
init|=
literal|2
decl_stmt|;
specifier|public
name|int
name|underscore_int
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|UNDERSCORE_INT
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|myint
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|underscore_int
init|=
literal|false
decl_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
name|MYINT
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"myint"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|MYSTRING
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"myString"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|UNDERSCORE_INT
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"underscore_int"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
static|static
block|{
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|IntString
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IntString
parameter_list|()
block|{   }
specifier|public
name|IntString
parameter_list|(
name|int
name|myint
parameter_list|,
name|String
name|myString
parameter_list|,
name|int
name|underscore_int
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|myint
operator|=
name|myint
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|myint
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|myString
operator|=
name|myString
expr_stmt|;
name|this
operator|.
name|underscore_int
operator|=
name|underscore_int
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|underscore_int
operator|=
literal|true
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|IntString
parameter_list|(
name|IntString
name|other
parameter_list|)
block|{
name|__isset
operator|.
name|myint
operator|=
name|other
operator|.
name|__isset
operator|.
name|myint
expr_stmt|;
name|this
operator|.
name|myint
operator|=
name|other
operator|.
name|myint
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetMyString
argument_list|()
condition|)
block|{
name|this
operator|.
name|myString
operator|=
name|other
operator|.
name|myString
expr_stmt|;
block|}
name|__isset
operator|.
name|underscore_int
operator|=
name|other
operator|.
name|__isset
operator|.
name|underscore_int
expr_stmt|;
name|this
operator|.
name|underscore_int
operator|=
name|other
operator|.
name|underscore_int
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|IntString
name|clone
parameter_list|()
block|{
return|return
operator|new
name|IntString
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|int
name|getMyint
parameter_list|()
block|{
return|return
name|this
operator|.
name|myint
return|;
block|}
specifier|public
name|void
name|setMyint
parameter_list|(
name|int
name|myint
parameter_list|)
block|{
name|this
operator|.
name|myint
operator|=
name|myint
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|myint
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMyint
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|myint
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field myint is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetMyint
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|myint
return|;
block|}
specifier|public
name|void
name|setMyintIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|__isset
operator|.
name|myint
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|String
name|getMyString
parameter_list|()
block|{
return|return
name|this
operator|.
name|myString
return|;
block|}
specifier|public
name|void
name|setMyString
parameter_list|(
name|String
name|myString
parameter_list|)
block|{
name|this
operator|.
name|myString
operator|=
name|myString
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMyString
parameter_list|()
block|{
name|this
operator|.
name|myString
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field myString is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetMyString
parameter_list|()
block|{
return|return
name|this
operator|.
name|myString
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setMyStringIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|myString
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getUnderscore_int
parameter_list|()
block|{
return|return
name|this
operator|.
name|underscore_int
return|;
block|}
specifier|public
name|void
name|setUnderscore_int
parameter_list|(
name|int
name|underscore_int
parameter_list|)
block|{
name|this
operator|.
name|underscore_int
operator|=
name|underscore_int
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|underscore_int
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetUnderscore_int
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|underscore_int
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field underscore_int is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetUnderscore_int
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|underscore_int
return|;
block|}
specifier|public
name|void
name|setUnderscore_intIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|__isset
operator|.
name|underscore_int
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|MYINT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMyint
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMyint
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MYSTRING
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMyString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMyString
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UNDERSCORE_INT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetUnderscore_int
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setUnderscore_int
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|MYINT
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getMyint
argument_list|()
argument_list|)
return|;
case|case
name|MYSTRING
case|:
return|return
name|getMyString
argument_list|()
return|;
case|case
name|UNDERSCORE_INT
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getUnderscore_int
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
comment|// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSet
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|MYINT
case|:
return|return
name|isSetMyint
argument_list|()
return|;
case|case
name|MYSTRING
case|:
return|return
name|isSetMyString
argument_list|()
return|;
case|case
name|UNDERSCORE_INT
case|:
return|return
name|isSetUnderscore_int
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|IntString
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|IntString
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|IntString
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_myint
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_myint
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_myint
operator|||
name|that_present_myint
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_myint
operator|&&
name|that_present_myint
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|myint
operator|!=
name|that
operator|.
name|myint
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_myString
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetMyString
argument_list|()
decl_stmt|;
name|boolean
name|that_present_myString
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetMyString
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_myString
operator|||
name|that_present_myString
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_myString
operator|&&
name|that_present_myString
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|myString
operator|.
name|equals
argument_list|(
name|that
operator|.
name|myString
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_underscore_int
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_underscore_int
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_underscore_int
operator|||
name|that_present_underscore_int
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_underscore_int
operator|&&
name|that_present_underscore_int
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|underscore_int
operator|!=
name|that
operator|.
name|underscore_int
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
name|MYINT
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|myint
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|myint
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MYSTRING
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|myString
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|UNDERSCORE_INT
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|underscore_int
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|underscore_int
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MYINT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|myint
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|myString
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MY_STRING_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|myString
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|UNDERSCORE_INT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|underscore_int
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"IntString("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"myint:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|myint
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"myString:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|myString
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|myString
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"underscore_int:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|underscore_int
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
comment|// check that fields of type enum have valid values
block|}
block|}
end_class

end_unit

