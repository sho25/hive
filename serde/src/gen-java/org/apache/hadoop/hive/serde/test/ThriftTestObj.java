begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ThriftTestObj
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"ThriftTestObj"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|FIELD1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"field1"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|FIELD2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"field2"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|FIELD3_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"field3"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|public
name|int
name|field1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|FIELD1
init|=
literal|1
decl_stmt|;
specifier|public
name|String
name|field2
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|FIELD2
init|=
literal|2
decl_stmt|;
specifier|public
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|field3
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|FIELD3
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|field1
init|=
literal|false
decl_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
name|FIELD1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"field1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|FIELD2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"field2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|FIELD3
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"field3"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|InnerStruct
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
static|static
block|{
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|ThriftTestObj
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ThriftTestObj
parameter_list|()
block|{   }
specifier|public
name|ThriftTestObj
parameter_list|(
name|int
name|field1
parameter_list|,
name|String
name|field2
parameter_list|,
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|field3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|field1
operator|=
name|field1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|field1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|field2
operator|=
name|field2
expr_stmt|;
name|this
operator|.
name|field3
operator|=
name|field3
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|ThriftTestObj
parameter_list|(
name|ThriftTestObj
name|other
parameter_list|)
block|{
name|__isset
operator|.
name|field1
operator|=
name|other
operator|.
name|__isset
operator|.
name|field1
expr_stmt|;
name|this
operator|.
name|field1
operator|=
name|other
operator|.
name|field1
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetField2
argument_list|()
condition|)
block|{
name|this
operator|.
name|field2
operator|=
name|other
operator|.
name|field2
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetField3
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|__this__field3
init|=
operator|new
name|ArrayList
argument_list|<
name|InnerStruct
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|InnerStruct
name|other_element
range|:
name|other
operator|.
name|field3
control|)
block|{
name|__this__field3
operator|.
name|add
argument_list|(
operator|new
name|InnerStruct
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|field3
operator|=
name|__this__field3
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ThriftTestObj
name|clone
parameter_list|()
block|{
return|return
operator|new
name|ThriftTestObj
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|int
name|getField1
parameter_list|()
block|{
return|return
name|this
operator|.
name|field1
return|;
block|}
specifier|public
name|void
name|setField1
parameter_list|(
name|int
name|field1
parameter_list|)
block|{
name|this
operator|.
name|field1
operator|=
name|field1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|field1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetField1
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|field1
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field field1 is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetField1
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|field1
return|;
block|}
specifier|public
name|void
name|setField1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|this
operator|.
name|__isset
operator|.
name|field1
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|String
name|getField2
parameter_list|()
block|{
return|return
name|this
operator|.
name|field2
return|;
block|}
specifier|public
name|void
name|setField2
parameter_list|(
name|String
name|field2
parameter_list|)
block|{
name|this
operator|.
name|field2
operator|=
name|field2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetField2
parameter_list|()
block|{
name|this
operator|.
name|field2
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field field2 is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetField2
parameter_list|()
block|{
return|return
name|this
operator|.
name|field2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setField2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|field2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getField3Size
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|field3
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|field3
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|InnerStruct
argument_list|>
name|getField3Iterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|field3
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|field3
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToField3
parameter_list|(
name|InnerStruct
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|field3
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|field3
operator|=
operator|new
name|ArrayList
argument_list|<
name|InnerStruct
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|field3
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|getField3
parameter_list|()
block|{
return|return
name|this
operator|.
name|field3
return|;
block|}
specifier|public
name|void
name|setField3
parameter_list|(
name|List
argument_list|<
name|InnerStruct
argument_list|>
name|field3
parameter_list|)
block|{
name|this
operator|.
name|field3
operator|=
name|field3
expr_stmt|;
block|}
specifier|public
name|void
name|unsetField3
parameter_list|()
block|{
name|this
operator|.
name|field3
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field field3 is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetField3
parameter_list|()
block|{
return|return
name|this
operator|.
name|field3
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setField3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|field3
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|FIELD1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetField1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setField1
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FIELD2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetField2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setField2
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FIELD3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetField3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setField3
argument_list|(
operator|(
name|List
argument_list|<
name|InnerStruct
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|FIELD1
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getField1
argument_list|()
argument_list|)
return|;
case|case
name|FIELD2
case|:
return|return
name|getField2
argument_list|()
return|;
case|case
name|FIELD3
case|:
return|return
name|getField3
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
comment|// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSet
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|FIELD1
case|:
return|return
name|isSetField1
argument_list|()
return|;
case|case
name|FIELD2
case|:
return|return
name|isSetField2
argument_list|()
return|;
case|case
name|FIELD3
case|:
return|return
name|isSetField3
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|ThriftTestObj
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|ThriftTestObj
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|ThriftTestObj
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_field1
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_field1
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_field1
operator|||
name|that_present_field1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_field1
operator|&&
name|that_present_field1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|field1
operator|!=
name|that
operator|.
name|field1
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_field2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetField2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_field2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetField2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_field2
operator|||
name|that_present_field2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_field2
operator|&&
name|that_present_field2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|field2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|field2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_field3
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetField3
argument_list|()
decl_stmt|;
name|boolean
name|that_present_field3
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetField3
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_field3
operator|||
name|that_present_field3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_field3
operator|&&
name|that_present_field3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|field3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|field3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
name|FIELD1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|field1
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|field1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FIELD2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|field2
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FIELD3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list0
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|field3
operator|=
operator|new
name|ArrayList
argument_list|<
name|InnerStruct
argument_list|>
argument_list|(
name|_list0
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i1
init|=
literal|0
init|;
name|_i1
operator|<
name|_list0
operator|.
name|size
condition|;
operator|++
name|_i1
control|)
block|{
name|InnerStruct
name|_elem2
decl_stmt|;
name|_elem2
operator|=
operator|new
name|InnerStruct
argument_list|()
expr_stmt|;
name|_elem2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|field3
operator|.
name|add
argument_list|(
name|_elem2
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
comment|// check for required fields of primitive type, which can't be checked in the validate method
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|FIELD1_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|field1
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|field2
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|FIELD2_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|field2
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|field3
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|FIELD3_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|field3
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|InnerStruct
name|_iter3
range|:
name|this
operator|.
name|field3
control|)
block|{
name|_iter3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ThriftTestObj("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"field1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|field1
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"field2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|field2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|field2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"field3:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|field3
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|field3
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
comment|// check that fields of type enum have valid values
block|}
block|}
end_class

end_unit

