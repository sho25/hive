begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|NullValueOption
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|NullValueOption
operator|.
name|MAXVALUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
operator|.
name|NullValueOption
operator|.
name|MINVALUE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|Is
operator|.
name|is
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestObjectInspectorUtils.compare method.  * int compare(Object[] o1, ObjectInspector[] oi1, Object[] o2,  *       ObjectInspector[] oi2, boolean[] columnSortOrderIsDesc, NullValueOption[] nullSortOrder)  */
end_comment

begin_class
specifier|public
class|class
name|TestObjectInspectorUtilsCompare
block|{
specifier|private
name|Integer
index|[]
name|objects1
decl_stmt|;
specifier|private
name|ObjectInspector
index|[]
name|oi1
decl_stmt|;
specifier|private
name|Integer
index|[]
name|objects2
decl_stmt|;
specifier|private
name|ObjectInspector
index|[]
name|oi2
decl_stmt|;
name|boolean
index|[]
name|orderDesc
decl_stmt|;
name|NullValueOption
index|[]
name|nullValueOption
decl_stmt|;
name|void
name|o1
parameter_list|(
name|Integer
modifier|...
name|objects1
parameter_list|)
block|{
name|this
operator|.
name|objects1
operator|=
name|objects1
expr_stmt|;
name|this
operator|.
name|oi1
operator|=
name|createOI
argument_list|(
name|objects1
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ObjectInspector
index|[]
name|createOI
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|ObjectInspector
index|[]
name|objectInspectors
init|=
operator|new
name|ObjectInspector
index|[
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
operator|++
name|i
control|)
block|{
name|objectInspectors
index|[
name|i
index|]
operator|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
expr_stmt|;
block|}
return|return
name|objectInspectors
return|;
block|}
name|void
name|o2
parameter_list|(
name|Integer
modifier|...
name|objects2
parameter_list|)
block|{
name|this
operator|.
name|objects2
operator|=
name|objects2
expr_stmt|;
name|this
operator|.
name|oi2
operator|=
name|createOI
argument_list|(
name|objects2
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|void
name|order
parameter_list|(
name|boolean
modifier|...
name|isDesc
parameter_list|)
block|{
name|this
operator|.
name|orderDesc
operator|=
name|isDesc
expr_stmt|;
block|}
name|void
name|nullOrder
parameter_list|(
name|NullValueOption
modifier|...
name|nullValueOption
parameter_list|)
block|{
name|this
operator|.
name|nullValueOption
operator|=
name|nullValueOption
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTheFirstValueIsSmallerMinusOneIsReturned
parameter_list|()
block|{
name|o1
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|o2
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MAXVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTheFirstValueIsLargerOneIsReturned
parameter_list|()
block|{
name|o1
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|o2
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MAXVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTheFirstValueIsSmallerAndDescendingOrderOneIsReturned
parameter_list|()
block|{
name|o1
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|o2
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MAXVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenValuesAreEqual0IsReturned
parameter_list|()
block|{
name|o1
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|o2
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MAXVALUE
argument_list|,
name|MINVALUE
argument_list|,
name|MAXVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTheFirstPairIsEqualsButTheSecondNot
parameter_list|()
block|{
name|o1
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|o2
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MAXVALUE
argument_list|,
name|MAXVALUE
argument_list|,
name|MAXVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTheFirstValueIsNullAndNullsFirstMinusOneIsReturned
parameter_list|()
block|{
name|o1
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|o2
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MINVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTheFirstValueIsNullAndNullsLastOneIsReturned
parameter_list|()
block|{
name|o1
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|o2
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MAXVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTheFirstValueIsNullAndNullsFirstAndDescendingOrderMinusOneIsReturned
parameter_list|()
block|{
name|o1
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|o2
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MINVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTheFirstValueIsNullAndNullsLastAndDescendingOrderOneIsReturned
parameter_list|()
block|{
name|o1
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|o2
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MAXVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTheSecondValueIsNullAndNullsFirstOneIsReturned
parameter_list|()
block|{
name|o1
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|o2
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MINVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTheSecondValueIsNullAndNullsLastMinusOneIsReturned
parameter_list|()
block|{
name|o1
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|o2
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MAXVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTheSecondValueIsNullAndNullsFirstAndDescendingOrderOneIsReturned
parameter_list|()
block|{
name|o1
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|o2
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MINVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhenTheSecondValueIsNullAndNullsLastAndDescendingOrderMinusOneIsReturned
parameter_list|()
block|{
name|o1
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|o2
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|null
block|}
argument_list|)
expr_stmt|;
name|order
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|nullOrder
argument_list|(
name|MAXVALUE
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|objects1
argument_list|,
name|oi1
argument_list|,
name|objects2
argument_list|,
name|oi2
argument_list|,
name|orderDesc
argument_list|,
name|nullValueOption
argument_list|)
argument_list|,
name|is
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

