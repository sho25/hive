begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|teradata
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test all the data types supported for Teradata Binary Format.  */
end_comment

begin_class
specifier|public
class|class
name|TestTeradataBinarySerdeGeneral
block|{
specifier|private
specifier|final
name|TeradataBinarySerde
name|serde
init|=
operator|new
name|TeradataBinarySerde
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"TD_CHAR, TD_VARCHAR, TD_BIGINT, TD_INT, TD_SMALLINT, TD_BYTEINT, "
operator|+
literal|"TD_FLOAT,TD_DECIMAL,TD_DATE, TD_TIMESTAMP, TD_VARBYTE"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"char(3),varchar(100),bigint,int,smallint,tinyint,double,decimal(31,30),date,timestamp,binary"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeserializeAndSerialize
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesWritable
name|in
init|=
operator|new
name|BytesWritable
argument_list|(
name|BaseEncoding
operator|.
name|base16
argument_list|()
operator|.
name|lowerCase
argument_list|()
operator|.
name|decode
argument_list|(
literal|"00004e6f762020202020201b006120646179203d2031312f31312f31312020202020202020203435ec10000000000000c5feffff"
operator|+
literal|"7707010000000000002a40ef2b3dab0d14e6531c8908a72700000007b20100313931312d31312d31312031393a32303a32312e34"
operator|+
literal|"33333230301b00746573743a20202020202020343333322020202020202020333135"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Nov"
argument_list|,
operator|(
operator|(
name|HiveCharWritable
operator|)
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a day = 11/11/11         45"
argument_list|,
operator|(
operator|(
name|HiveVarcharWritable
operator|)
name|row
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4332L
argument_list|,
operator|(
operator|(
name|LongWritable
operator|)
name|row
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|315
argument_list|,
operator|(
operator|(
name|IntWritable
operator|)
name|row
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|short
operator|)
literal|1911
argument_list|,
operator|(
operator|(
name|ShortWritable
operator|)
name|row
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
operator|(
operator|(
name|ByteWritable
operator|)
name|row
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
literal|13
argument_list|,
operator|(
operator|(
name|DoubleWritable
operator|)
name|row
operator|.
name|get
argument_list|(
literal|6
argument_list|)
operator|)
operator|.
name|get
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|30
argument_list|,
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|row
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|)
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|(
name|double
operator|)
literal|3.141592653589793238462643383279
argument_list|,
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|row
operator|.
name|get
argument_list|(
literal|7
argument_list|)
operator|)
operator|.
name|getHiveDecimal
argument_list|()
operator|.
name|doubleValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1911-11-11"
argument_list|,
operator|(
operator|(
name|DateWritableV2
operator|)
name|row
operator|.
name|get
argument_list|(
literal|8
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"1911-11-11 19:20:21.4332"
argument_list|,
operator|(
operator|(
name|TimestampWritableV2
operator|)
name|row
operator|.
name|get
argument_list|(
literal|9
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|27
argument_list|,
operator|(
operator|(
name|BytesWritable
operator|)
name|row
operator|.
name|get
argument_list|(
literal|10
argument_list|)
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|BytesWritable
name|res
init|=
operator|(
name|BytesWritable
operator|)
name|serde
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|serde
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|in
operator|.
name|copyBytes
argument_list|()
argument_list|,
name|res
operator|.
name|copyBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeserializeAndSerializeWithNull
parameter_list|()
throws|throws
name|Exception
block|{
comment|//null bitmap: 0160 -> 00000001 01100000, 7th, 9th, 10th is null
name|BytesWritable
name|in
init|=
operator|new
name|BytesWritable
argument_list|(
name|BaseEncoding
operator|.
name|base16
argument_list|()
operator|.
name|lowerCase
argument_list|()
operator|.
name|decode
argument_list|(
literal|"01604d61722020202020201b006120646179203d2031332f30332f303820202020202020202020397ca10000000000004300000"
operator|+
literal|"0dd0700000000000048834000000000000000000000000000000000443f110020202020202020202020202020202020202020202"
operator|+
literal|"020202020200000"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mar"
argument_list|,
operator|(
operator|(
name|HiveCharWritable
operator|)
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|BytesWritable
name|res
init|=
operator|(
name|BytesWritable
operator|)
name|serde
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|serde
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|in
operator|.
name|copyBytes
argument_list|()
argument_list|,
name|res
operator|.
name|copyBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeserializeAndSerializeAllNull
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesWritable
name|in
init|=
operator|new
name|BytesWritable
argument_list|(
name|BaseEncoding
operator|.
name|base16
argument_list|()
operator|.
name|lowerCase
argument_list|()
operator|.
name|decode
argument_list|(
literal|"ffe0202020202020202020000000000000000000000000000000000000000000000000000000000000000000000000000000000"
operator|+
literal|"00000000020202020202020202020202020202020202020202020202020200000"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|7
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|BytesWritable
name|res
init|=
operator|(
name|BytesWritable
operator|)
name|serde
operator|.
name|serialize
argument_list|(
name|row
argument_list|,
name|serde
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|in
operator|.
name|copyBytes
argument_list|()
argument_list|,
name|res
operator|.
name|copyBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeserializeCorruptedRecord
parameter_list|()
throws|throws
name|Exception
block|{
name|BytesWritable
name|in
init|=
operator|new
name|BytesWritable
argument_list|(
name|BaseEncoding
operator|.
name|base16
argument_list|()
operator|.
name|lowerCase
argument_list|()
operator|.
name|decode
argument_list|(
literal|"00004e6f762020202020201b006120646179203d2031312f31312f31312020202020202020203435ec10000000000000c5feff"
operator|+
literal|"ff7707010000000000002a40ef2b3dab0d14e6531c8908a72700000007b20100313931312d31312d31312031393a32303a32312"
operator|+
literal|"e3433333230301b00746573743a20202020202020343333322020202020202020333135ff"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|row
operator|.
name|get
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

