begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|ConcurrentRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|RepeatingRule
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|annotations
operator|.
name|Concurrent
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|annotations
operator|.
name|Repeating
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestDateWritableV2
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestDateWritableV2
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ConcurrentRule
name|concurrentRule
init|=
operator|new
name|ConcurrentRule
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|RepeatingRule
name|repeatingRule
init|=
operator|new
name|RepeatingRule
argument_list|()
decl_stmt|;
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testConstructor
parameter_list|()
block|{
name|Date
name|date
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
decl_stmt|;
name|DateWritableV2
name|dw1
init|=
operator|new
name|DateWritableV2
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|DateWritableV2
name|dw2
init|=
operator|new
name|DateWritableV2
argument_list|(
name|dw1
argument_list|)
decl_stmt|;
name|DateWritableV2
name|dw3
init|=
operator|new
name|DateWritableV2
argument_list|(
name|dw1
operator|.
name|getDays
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dw1
argument_list|,
name|dw1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dw1
argument_list|,
name|dw2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dw2
argument_list|,
name|dw3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|date
argument_list|,
name|dw1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|date
argument_list|,
name|dw2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|date
argument_list|,
name|dw3
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testComparison
parameter_list|()
block|{
comment|// Get 2 different dates
name|Date
name|date1
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|date2
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|date1
operator|.
name|equals
argument_list|(
name|date2
argument_list|)
condition|)
block|{
name|date2
operator|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DateWritableV2
name|dw1
init|=
operator|new
name|DateWritableV2
argument_list|(
name|date1
argument_list|)
decl_stmt|;
name|DateWritableV2
name|dw2
init|=
operator|new
name|DateWritableV2
argument_list|(
name|date2
argument_list|)
decl_stmt|;
name|DateWritableV2
name|dw3
init|=
operator|new
name|DateWritableV2
argument_list|(
name|date1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Dates should be equal"
argument_list|,
name|dw1
operator|.
name|equals
argument_list|(
name|dw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dates should be equal"
argument_list|,
name|dw1
operator|.
name|equals
argument_list|(
name|dw3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dates should be equal"
argument_list|,
name|dw3
operator|.
name|equals
argument_list|(
name|dw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Dates should be equal"
argument_list|,
literal|0
argument_list|,
name|dw1
operator|.
name|compareTo
argument_list|(
name|dw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Dates should be equal"
argument_list|,
literal|0
argument_list|,
name|dw1
operator|.
name|compareTo
argument_list|(
name|dw3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Dates should be equal"
argument_list|,
literal|0
argument_list|,
name|dw3
operator|.
name|compareTo
argument_list|(
name|dw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Dates not should be equal"
argument_list|,
name|dw1
operator|.
name|equals
argument_list|(
name|dw2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Dates not should be equal"
argument_list|,
name|dw2
operator|.
name|equals
argument_list|(
name|dw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dates not should be equal"
argument_list|,
literal|0
operator|!=
name|dw1
operator|.
name|compareTo
argument_list|(
name|dw2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dates not should be equal"
argument_list|,
literal|0
operator|!=
name|dw2
operator|.
name|compareTo
argument_list|(
name|dw1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testGettersSetters
parameter_list|()
block|{
name|Date
name|date1
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|date2
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|date3
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
decl_stmt|;
name|DateWritableV2
name|dw1
init|=
operator|new
name|DateWritableV2
argument_list|(
name|date1
argument_list|)
decl_stmt|;
name|DateWritableV2
name|dw2
init|=
operator|new
name|DateWritableV2
argument_list|(
name|date2
argument_list|)
decl_stmt|;
name|DateWritableV2
name|dw3
init|=
operator|new
name|DateWritableV2
argument_list|(
name|date3
argument_list|)
decl_stmt|;
name|DateWritableV2
name|dw4
init|=
operator|new
name|DateWritableV2
argument_list|()
decl_stmt|;
comment|// Getters
name|assertEquals
argument_list|(
name|date1
argument_list|,
name|dw1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|date1
operator|.
name|toEpochSecond
argument_list|()
argument_list|,
name|dw1
operator|.
name|getTimeInSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|dw4
operator|.
name|set
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1970-01-02"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dw4
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|dw4
operator|.
name|set
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1971-01-01"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|365
argument_list|,
name|dw4
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setters
name|dw4
operator|.
name|set
argument_list|(
name|dw1
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dw1
argument_list|,
name|dw4
argument_list|)
expr_stmt|;
name|dw4
operator|.
name|set
argument_list|(
name|dw2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dw2
argument_list|,
name|dw4
argument_list|)
expr_stmt|;
name|dw4
operator|.
name|set
argument_list|(
name|dw3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dw3
argument_list|,
name|dw4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testWritableMethods
parameter_list|()
throws|throws
name|Throwable
block|{
name|DateWritableV2
name|dw1
init|=
operator|new
name|DateWritableV2
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DateWritableV2
name|dw2
init|=
operator|new
name|DateWritableV2
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|byteStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutput
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|byteStream
argument_list|)
decl_stmt|;
name|dw1
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|dw2
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|byteStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Dates should be equal"
argument_list|,
name|dw1
argument_list|,
name|dw2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testDateValueOf
parameter_list|()
block|{
comment|// Just making sure Date.valueOf() works ok
name|String
name|dateStr
init|=
name|getRandomDateString
argument_list|()
decl_stmt|;
name|Date
name|date
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|dateStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateStr
argument_list|,
name|date
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|dateStrings
init|=
operator|new
name|String
index|[
literal|365
index|]
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupDateStrings
parameter_list|()
block|{
name|Date
name|initialDate
init|=
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2014-01-01"
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTimeInMillis
argument_list|(
name|initialDate
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|365
condition|;
operator|++
name|idx
control|)
block|{
name|dateStrings
index|[
name|idx
index|]
operator|=
name|Date
operator|.
name|ofEpochMilli
argument_list|(
name|cal
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getRandomDateString
parameter_list|()
block|{
return|return
name|dateStrings
index|[
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|365
argument_list|)
index|]
return|;
block|}
specifier|public
specifier|static
class|class
name|DateTestCallable
implements|implements
name|Callable
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
name|LinkedList
argument_list|<
name|DtMismatch
argument_list|>
name|bad
decl_stmt|;
specifier|private
name|String
name|tz
decl_stmt|;
specifier|public
name|DateTestCallable
parameter_list|(
name|LinkedList
argument_list|<
name|DtMismatch
argument_list|>
name|bad
parameter_list|,
name|String
name|tz
parameter_list|)
block|{
name|this
operator|.
name|bad
operator|=
name|bad
expr_stmt|;
name|this
operator|.
name|tz
operator|=
name|tz
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Iterate through each day of the year, make sure Date/DateWritableV2 match
name|Date
name|originalDate
init|=
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1900-01-01"
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTimeInMillis
argument_list|(
name|originalDate
operator|.
name|toEpochMilli
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|365
operator|*
literal|200
condition|;
operator|++
name|idx
control|)
block|{
name|originalDate
operator|=
name|Date
operator|.
name|ofEpochMilli
argument_list|(
name|cal
operator|.
name|getTimeInMillis
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make sure originalDate is at midnight in the local time zone,
comment|// since DateWritableV2 will generate dates at that time.
name|originalDate
operator|=
name|Date
operator|.
name|valueOf
argument_list|(
name|originalDate
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|DateWritableV2
name|dateWritable
init|=
operator|new
name|DateWritableV2
argument_list|(
name|originalDate
argument_list|)
decl_stmt|;
name|Date
name|actual
init|=
name|dateWritable
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|originalDate
operator|.
name|equals
argument_list|(
name|actual
argument_list|)
condition|)
block|{
name|String
name|originalStr
init|=
name|originalDate
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|actualStr
init|=
name|actual
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|originalStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|equals
argument_list|(
name|actualStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
argument_list|)
condition|)
continue|continue;
name|bad
operator|.
name|add
argument_list|(
operator|new
name|DtMismatch
argument_list|(
name|originalStr
argument_list|,
name|actualStr
argument_list|,
name|tz
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|cal
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Success!
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DtMismatch
block|{
name|String
name|expected
decl_stmt|,
name|found
decl_stmt|,
name|tz
decl_stmt|;
specifier|public
name|DtMismatch
parameter_list|(
name|String
name|originalStr
parameter_list|,
name|String
name|actualStr
parameter_list|,
name|String
name|tz
parameter_list|)
block|{
name|this
operator|.
name|expected
operator|=
name|originalStr
expr_stmt|;
name|this
operator|.
name|found
operator|=
name|actualStr
expr_stmt|;
name|this
operator|.
name|tz
operator|=
name|tz
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDaylightSavingsTime
parameter_list|()
throws|throws
name|Exception
block|{
name|LinkedList
argument_list|<
name|DtMismatch
argument_list|>
name|bad
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|timeZone
range|:
name|TimeZone
operator|.
name|getAvailableIDs
argument_list|()
control|)
block|{
name|TimeZone
name|previousDefault
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
name|timeZone
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Default timezone should now be "
operator|+
name|timeZone
argument_list|,
name|timeZone
argument_list|,
name|TimeZone
operator|.
name|getDefault
argument_list|()
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|ExecutorService
name|threadPool
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
comment|// TODO: pointless
name|threadPool
operator|.
name|submit
argument_list|(
operator|new
name|DateTestCallable
argument_list|(
name|bad
argument_list|,
name|timeZone
argument_list|)
argument_list|)
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|threadPool
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|previousDefault
argument_list|)
expr_stmt|;
block|}
block|}
name|StringBuilder
name|errors
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"\nDATE MISMATCH:\n"
argument_list|)
decl_stmt|;
for|for
control|(
name|DtMismatch
name|dm
range|:
name|bad
control|)
block|{
name|errors
operator|.
name|append
argument_list|(
literal|"E "
argument_list|)
operator|.
name|append
argument_list|(
name|dm
operator|.
name|tz
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|dm
operator|.
name|expected
argument_list|)
operator|.
name|append
argument_list|(
literal|" != "
argument_list|)
operator|.
name|append
argument_list|(
name|dm
operator|.
name|found
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
name|errors
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bad
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|Exception
argument_list|(
name|bad
operator|.
name|size
argument_list|()
operator|+
literal|" mismatches, see logs"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

