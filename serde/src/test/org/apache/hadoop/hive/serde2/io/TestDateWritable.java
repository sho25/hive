begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|annotations
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_class
specifier|public
class|class
name|TestDateWritable
block|{
annotation|@
name|Rule
specifier|public
name|ConcurrentRule
name|concurrentRule
init|=
operator|new
name|ConcurrentRule
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|RepeatingRule
name|repeatingRule
init|=
operator|new
name|RepeatingRule
argument_list|()
decl_stmt|;
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testConstructor
parameter_list|()
block|{
name|Date
name|date
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
decl_stmt|;
name|DateWritable
name|dw1
init|=
operator|new
name|DateWritable
argument_list|(
name|date
argument_list|)
decl_stmt|;
name|DateWritable
name|dw2
init|=
operator|new
name|DateWritable
argument_list|(
name|dw1
argument_list|)
decl_stmt|;
name|DateWritable
name|dw3
init|=
operator|new
name|DateWritable
argument_list|(
name|dw1
operator|.
name|getDays
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dw1
argument_list|,
name|dw1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dw1
argument_list|,
name|dw2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dw2
argument_list|,
name|dw3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|date
argument_list|,
name|dw1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|date
argument_list|,
name|dw2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|date
argument_list|,
name|dw3
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testComparison
parameter_list|()
block|{
comment|// Get 2 different dates
name|Date
name|date1
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|date2
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|date1
operator|.
name|equals
argument_list|(
name|date2
argument_list|)
condition|)
block|{
name|date2
operator|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DateWritable
name|dw1
init|=
operator|new
name|DateWritable
argument_list|(
name|date1
argument_list|)
decl_stmt|;
name|DateWritable
name|dw2
init|=
operator|new
name|DateWritable
argument_list|(
name|date2
argument_list|)
decl_stmt|;
name|DateWritable
name|dw3
init|=
operator|new
name|DateWritable
argument_list|(
name|date1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Dates should be equal"
argument_list|,
name|dw1
operator|.
name|equals
argument_list|(
name|dw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dates should be equal"
argument_list|,
name|dw1
operator|.
name|equals
argument_list|(
name|dw3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dates should be equal"
argument_list|,
name|dw3
operator|.
name|equals
argument_list|(
name|dw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Dates should be equal"
argument_list|,
literal|0
argument_list|,
name|dw1
operator|.
name|compareTo
argument_list|(
name|dw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Dates should be equal"
argument_list|,
literal|0
argument_list|,
name|dw1
operator|.
name|compareTo
argument_list|(
name|dw3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Dates should be equal"
argument_list|,
literal|0
argument_list|,
name|dw3
operator|.
name|compareTo
argument_list|(
name|dw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Dates not should be equal"
argument_list|,
name|dw1
operator|.
name|equals
argument_list|(
name|dw2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Dates not should be equal"
argument_list|,
name|dw2
operator|.
name|equals
argument_list|(
name|dw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dates not should be equal"
argument_list|,
literal|0
operator|!=
name|dw1
operator|.
name|compareTo
argument_list|(
name|dw2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Dates not should be equal"
argument_list|,
literal|0
operator|!=
name|dw2
operator|.
name|compareTo
argument_list|(
name|dw1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testGettersSetters
parameter_list|()
block|{
name|Date
name|date1
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|date2
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
decl_stmt|;
name|Date
name|date3
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
decl_stmt|;
name|DateWritable
name|dw1
init|=
operator|new
name|DateWritable
argument_list|(
name|date1
argument_list|)
decl_stmt|;
name|DateWritable
name|dw2
init|=
operator|new
name|DateWritable
argument_list|(
name|date2
argument_list|)
decl_stmt|;
name|DateWritable
name|dw3
init|=
operator|new
name|DateWritable
argument_list|(
name|date3
argument_list|)
decl_stmt|;
name|DateWritable
name|dw4
init|=
operator|new
name|DateWritable
argument_list|()
decl_stmt|;
comment|// Getters
name|assertEquals
argument_list|(
name|date1
argument_list|,
name|dw1
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|date1
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
argument_list|,
name|dw1
operator|.
name|getTimeInSeconds
argument_list|()
argument_list|)
expr_stmt|;
name|dw4
operator|.
name|set
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1970-01-02"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|dw4
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|dw4
operator|.
name|set
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
literal|"1971-01-01"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|365
argument_list|,
name|dw4
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setters
name|dw4
operator|.
name|set
argument_list|(
name|dw1
operator|.
name|getDays
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dw1
argument_list|,
name|dw4
argument_list|)
expr_stmt|;
name|dw4
operator|.
name|set
argument_list|(
name|dw2
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dw2
argument_list|,
name|dw4
argument_list|)
expr_stmt|;
name|dw4
operator|.
name|set
argument_list|(
name|dw3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|dw3
argument_list|,
name|dw4
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testWritableMethods
parameter_list|()
throws|throws
name|Throwable
block|{
name|DateWritable
name|dw1
init|=
operator|new
name|DateWritable
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
name|getRandomDateString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|DateWritable
name|dw2
init|=
operator|new
name|DateWritable
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|byteStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutput
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|byteStream
argument_list|)
decl_stmt|;
name|dw1
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|dw2
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|byteStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Dates should be equal"
argument_list|,
name|dw1
argument_list|,
name|dw2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testDateValueOf
parameter_list|()
block|{
comment|// Just making sure Date.valueOf() works ok
name|String
name|dateStr
init|=
name|getRandomDateString
argument_list|()
decl_stmt|;
name|Date
name|date
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|dateStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|dateStr
argument_list|,
name|date
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|dateStrings
init|=
operator|new
name|String
index|[
literal|365
index|]
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupDateStrings
parameter_list|()
block|{
name|DateFormat
name|format
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
name|Date
name|initialDate
init|=
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2014-01-01"
argument_list|)
decl_stmt|;
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTime
argument_list|(
name|initialDate
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
literal|365
condition|;
operator|++
name|idx
control|)
block|{
name|dateStrings
index|[
name|idx
index|]
operator|=
name|format
operator|.
name|format
argument_list|(
name|cal
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|cal
operator|.
name|add
argument_list|(
literal|1
argument_list|,
name|Calendar
operator|.
name|DAY_OF_YEAR
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getRandomDateString
parameter_list|()
block|{
return|return
name|dateStrings
index|[
call|(
name|int
call|)
argument_list|(
name|Math
operator|.
name|random
argument_list|()
operator|*
literal|365
argument_list|)
index|]
return|;
block|}
block|}
end_class

end_unit

