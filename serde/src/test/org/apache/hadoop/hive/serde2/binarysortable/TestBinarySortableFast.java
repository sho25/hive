begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
operator|.
name|Output
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|VerifyFast
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|MyTestPrimitiveClass
operator|.
name|ExtraTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableDeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|fast
operator|.
name|BinarySortableSerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|TestBinarySortableFast
extends|extends
name|TestCase
block|{
specifier|private
name|void
name|testBinarySortableFast
parameter_list|(
name|MyTestPrimitiveClass
index|[]
name|myTestPrimitiveClasses
parameter_list|,
name|boolean
index|[]
name|columnSortOrderIsDesc
parameter_list|,
name|byte
index|[]
name|columnNullMarker
parameter_list|,
name|byte
index|[]
name|columnNotNullMarker
parameter_list|,
name|SerDe
name|serde
parameter_list|,
name|StructObjectInspector
name|rowOI
parameter_list|,
name|boolean
name|ascending
parameter_list|,
name|Map
argument_list|<
name|Object
argument_list|,
name|PrimitiveTypeInfo
index|[]
argument_list|>
name|primitiveTypeInfoMap
parameter_list|)
throws|throws
name|Throwable
block|{
name|BinarySortableSerializeWrite
name|binarySortableSerializeWrite
init|=
operator|new
name|BinarySortableSerializeWrite
argument_list|(
name|columnSortOrderIsDesc
argument_list|,
name|columnNullMarker
argument_list|,
name|columnNotNullMarker
argument_list|)
decl_stmt|;
comment|// Try to serialize
comment|// One Writable per row.
name|BytesWritable
name|serializeWriteBytes
index|[]
init|=
operator|new
name|BytesWritable
index|[
name|myTestPrimitiveClasses
operator|.
name|length
index|]
decl_stmt|;
name|int
index|[]
index|[]
name|perFieldWriteLengthsArray
init|=
operator|new
name|int
index|[
name|myTestPrimitiveClasses
operator|.
name|length
index|]
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myTestPrimitiveClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|MyTestPrimitiveClass
name|t
init|=
name|myTestPrimitiveClasses
index|[
name|i
index|]
decl_stmt|;
name|Output
name|output
init|=
operator|new
name|Output
argument_list|()
decl_stmt|;
name|binarySortableSerializeWrite
operator|.
name|set
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|int
index|[]
name|perFieldWriteLengths
init|=
operator|new
name|int
index|[
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
condition|;
name|index
operator|++
control|)
block|{
name|Object
name|object
init|=
name|t
operator|.
name|getPrimitiveObject
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|VerifyFast
operator|.
name|serializeWrite
argument_list|(
name|binarySortableSerializeWrite
argument_list|,
name|primitiveTypeInfoMap
operator|.
name|get
argument_list|(
name|t
argument_list|)
index|[
name|index
index|]
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|perFieldWriteLengths
index|[
name|index
index|]
operator|=
name|output
operator|.
name|getLength
argument_list|()
expr_stmt|;
block|}
name|perFieldWriteLengthsArray
index|[
name|i
index|]
operator|=
name|perFieldWriteLengths
expr_stmt|;
name|BytesWritable
name|bytesWritable
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|bytesWritable
operator|.
name|set
argument_list|(
name|output
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|output
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|serializeWriteBytes
index|[
name|i
index|]
operator|=
name|bytesWritable
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|int
name|compareResult
init|=
name|serializeWriteBytes
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|compareTo
argument_list|(
name|serializeWriteBytes
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|compareResult
operator|<
literal|0
operator|&&
operator|!
name|ascending
operator|)
operator|||
operator|(
name|compareResult
operator|>
literal|0
operator|&&
name|ascending
operator|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test failed in "
operator|+
operator|(
name|ascending
condition|?
literal|"ascending"
else|:
literal|"descending"
operator|)
operator|+
literal|" order with "
operator|+
operator|(
name|i
operator|-
literal|1
operator|)
operator|+
literal|" and "
operator|+
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"serialized data ["
operator|+
operator|(
name|i
operator|-
literal|1
operator|)
operator|+
literal|"] = "
operator|+
name|TestBinarySortableSerDe
operator|.
name|hexString
argument_list|(
name|serializeWriteBytes
index|[
name|i
operator|-
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"serialized data ["
operator|+
name|i
operator|+
literal|"] = "
operator|+
name|TestBinarySortableSerDe
operator|.
name|hexString
argument_list|(
name|serializeWriteBytes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Sort order of serialized "
operator|+
operator|(
name|i
operator|-
literal|1
operator|)
operator|+
literal|" and "
operator|+
name|i
operator|+
literal|" are reversed!"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Try to deserialize using DeserializeRead our Writable row objects created by SerializeWrite.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myTestPrimitiveClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|MyTestPrimitiveClass
name|t
init|=
name|myTestPrimitiveClasses
index|[
name|i
index|]
decl_stmt|;
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
init|=
name|primitiveTypeInfoMap
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|BinarySortableDeserializeRead
name|binarySortableDeserializeRead
init|=
operator|new
name|BinarySortableDeserializeRead
argument_list|(
name|primitiveTypeInfos
argument_list|,
name|columnSortOrderIsDesc
argument_list|)
decl_stmt|;
name|BytesWritable
name|bytesWritable
init|=
name|serializeWriteBytes
index|[
name|i
index|]
decl_stmt|;
name|binarySortableDeserializeRead
operator|.
name|set
argument_list|(
name|bytesWritable
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytesWritable
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
condition|;
name|index
operator|++
control|)
block|{
name|Object
name|object
init|=
name|t
operator|.
name|getPrimitiveObject
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|VerifyFast
operator|.
name|verifyDeserializeRead
argument_list|(
name|binarySortableDeserializeRead
argument_list|,
name|primitiveTypeInfos
index|[
name|index
index|]
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
name|binarySortableDeserializeRead
operator|.
name|extraFieldsCheck
argument_list|()
expr_stmt|;
name|TestCase
operator|.
name|assertTrue
argument_list|(
operator|!
name|binarySortableDeserializeRead
operator|.
name|readBeyondConfiguredFieldsWarned
argument_list|()
argument_list|)
expr_stmt|;
name|TestCase
operator|.
name|assertTrue
argument_list|(
operator|!
name|binarySortableDeserializeRead
operator|.
name|readBeyondBufferRangeWarned
argument_list|()
argument_list|)
expr_stmt|;
name|TestCase
operator|.
name|assertTrue
argument_list|(
operator|!
name|binarySortableDeserializeRead
operator|.
name|bufferRangeHasExtraDataWarned
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Try to deserialize using SerDe class our Writable row objects created by SerializeWrite.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myTestPrimitiveClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BytesWritable
name|bytesWritable
init|=
name|serializeWriteBytes
index|[
name|i
index|]
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|deserializedRow
init|=
operator|(
name|List
argument_list|<
name|Object
argument_list|>
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
name|bytesWritable
argument_list|)
decl_stmt|;
name|MyTestPrimitiveClass
name|t
init|=
name|myTestPrimitiveClasses
index|[
name|i
index|]
decl_stmt|;
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
init|=
name|primitiveTypeInfoMap
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
condition|;
name|index
operator|++
control|)
block|{
name|Object
name|expected
init|=
name|t
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|index
argument_list|,
name|primitiveTypeInfos
index|[
name|index
index|]
argument_list|)
decl_stmt|;
name|Object
name|object
init|=
name|deserializedRow
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
operator|||
name|object
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|expected
operator|!=
literal|null
operator|||
name|object
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"SerDe deserialized NULL column mismatch"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|object
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"SerDe deserialized value does not match"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// One Writable per row.
name|BytesWritable
name|serdeBytes
index|[]
init|=
operator|new
name|BytesWritable
index|[
name|myTestPrimitiveClasses
operator|.
name|length
index|]
decl_stmt|;
comment|// Serialize using the SerDe, then below deserialize using DeserializeRead.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myTestPrimitiveClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|MyTestPrimitiveClass
name|t
init|=
name|myTestPrimitiveClasses
index|[
name|i
index|]
decl_stmt|;
comment|// Since SerDe reuses memory, we will need to make a copy.
name|BytesWritable
name|serialized
init|=
operator|(
name|BytesWritable
operator|)
name|serde
operator|.
name|serialize
argument_list|(
name|t
argument_list|,
name|rowOI
argument_list|)
decl_stmt|;
name|BytesWritable
name|bytesWritable
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|bytesWritable
operator|.
name|set
argument_list|(
name|serialized
argument_list|)
expr_stmt|;
name|byte
index|[]
name|serDeOutput
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bytesWritable
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytesWritable
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|serializeWriteExpected
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|serializeWriteBytes
index|[
name|i
index|]
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|serializeWriteBytes
index|[
name|i
index|]
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Arrays
operator|.
name|equals
argument_list|(
name|serDeOutput
argument_list|,
name|serializeWriteExpected
argument_list|)
condition|)
block|{
name|int
name|mismatchPos
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|serDeOutput
operator|.
name|length
operator|!=
name|serializeWriteExpected
operator|.
name|length
condition|)
block|{
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
name|Math
operator|.
name|min
argument_list|(
name|serDeOutput
operator|.
name|length
argument_list|,
name|serializeWriteExpected
operator|.
name|length
argument_list|)
condition|;
name|b
operator|++
control|)
block|{
if|if
condition|(
name|serDeOutput
index|[
name|b
index|]
operator|!=
name|serializeWriteExpected
index|[
name|b
index|]
condition|)
block|{
name|mismatchPos
operator|=
name|b
expr_stmt|;
break|break;
block|}
block|}
name|fail
argument_list|(
literal|"Different byte array lengths: serDeOutput.length "
operator|+
name|serDeOutput
operator|.
name|length
operator|+
literal|", serializeWriteExpected.length "
operator|+
name|serializeWriteExpected
operator|.
name|length
operator|+
literal|" mismatchPos "
operator|+
name|mismatchPos
operator|+
literal|" perFieldWriteLengths "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|perFieldWriteLengthsArray
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
name|serDeOutput
operator|.
name|length
condition|;
name|b
operator|++
control|)
block|{
if|if
condition|(
name|serDeOutput
index|[
name|b
index|]
operator|!=
name|serializeWriteExpected
index|[
name|b
index|]
condition|)
block|{
name|fail
argument_list|(
literal|"SerializeWrite and SerDe serialization does not match at position "
operator|+
name|b
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|serdeBytes
index|[
name|i
index|]
operator|=
name|bytesWritable
expr_stmt|;
block|}
comment|// Try to deserialize using DeserializeRead our Writable row objects created by SerDe.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myTestPrimitiveClasses
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|MyTestPrimitiveClass
name|t
init|=
name|myTestPrimitiveClasses
index|[
name|i
index|]
decl_stmt|;
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
init|=
name|primitiveTypeInfoMap
operator|.
name|get
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|BinarySortableDeserializeRead
name|binarySortableDeserializeRead
init|=
operator|new
name|BinarySortableDeserializeRead
argument_list|(
name|primitiveTypeInfos
argument_list|,
name|columnSortOrderIsDesc
argument_list|)
decl_stmt|;
name|BytesWritable
name|bytesWritable
init|=
name|serdeBytes
index|[
name|i
index|]
decl_stmt|;
name|binarySortableDeserializeRead
operator|.
name|set
argument_list|(
name|bytesWritable
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytesWritable
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
condition|;
name|index
operator|++
control|)
block|{
name|Object
name|object
init|=
name|t
operator|.
name|getPrimitiveObject
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|VerifyFast
operator|.
name|verifyDeserializeRead
argument_list|(
name|binarySortableDeserializeRead
argument_list|,
name|primitiveTypeInfos
index|[
name|index
index|]
argument_list|,
name|object
argument_list|)
expr_stmt|;
block|}
name|binarySortableDeserializeRead
operator|.
name|extraFieldsCheck
argument_list|()
expr_stmt|;
name|TestCase
operator|.
name|assertTrue
argument_list|(
operator|!
name|binarySortableDeserializeRead
operator|.
name|readBeyondConfiguredFieldsWarned
argument_list|()
argument_list|)
expr_stmt|;
name|TestCase
operator|.
name|assertTrue
argument_list|(
operator|!
name|binarySortableDeserializeRead
operator|.
name|readBeyondBufferRangeWarned
argument_list|()
argument_list|)
expr_stmt|;
name|TestCase
operator|.
name|assertTrue
argument_list|(
operator|!
name|binarySortableDeserializeRead
operator|.
name|bufferRangeHasExtraDataWarned
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testBinarySortableFast
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|int
name|num
init|=
literal|1000
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|MyTestPrimitiveClass
name|myTestPrimitiveClasses
index|[]
init|=
operator|new
name|MyTestPrimitiveClass
index|[
name|num
index|]
decl_stmt|;
comment|// Need a map because we sort.
name|Map
argument_list|<
name|Object
argument_list|,
name|PrimitiveTypeInfo
index|[]
argument_list|>
name|primitiveTypeInfoMap
init|=
operator|new
name|HashMap
argument_list|<
name|Object
argument_list|,
name|PrimitiveTypeInfo
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
decl_stmt|;
comment|// First try non-random values
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|MyTestClass
operator|.
name|nrDecimal
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|MyTestPrimitiveClass
name|t
init|=
operator|new
name|MyTestPrimitiveClass
argument_list|()
decl_stmt|;
name|ExtraTypeInfo
name|extraTypeInfo
init|=
operator|new
name|ExtraTypeInfo
argument_list|()
decl_stmt|;
name|t
operator|.
name|nonRandomFill
argument_list|(
name|i
argument_list|,
name|extraTypeInfo
argument_list|)
expr_stmt|;
name|myTestPrimitiveClasses
index|[
name|i
index|]
operator|=
name|t
expr_stmt|;
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
init|=
name|MyTestPrimitiveClass
operator|.
name|getPrimitiveTypeInfos
argument_list|(
name|extraTypeInfo
argument_list|)
decl_stmt|;
name|primitiveTypeInfoMap
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|primitiveTypeInfos
argument_list|)
expr_stmt|;
block|}
for|for
control|(
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|int
name|randField
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
argument_list|)
decl_stmt|;
name|MyTestPrimitiveClass
name|t
init|=
operator|new
name|MyTestPrimitiveClass
argument_list|()
decl_stmt|;
name|int
name|field
init|=
literal|0
decl_stmt|;
name|ExtraTypeInfo
name|extraTypeInfo
init|=
operator|new
name|ExtraTypeInfo
argument_list|()
decl_stmt|;
name|t
operator|.
name|randomFill
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
argument_list|,
name|extraTypeInfo
argument_list|)
expr_stmt|;
name|myTestPrimitiveClasses
index|[
name|i
index|]
operator|=
name|t
expr_stmt|;
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
init|=
name|MyTestPrimitiveClass
operator|.
name|getPrimitiveTypeInfos
argument_list|(
name|extraTypeInfo
argument_list|)
decl_stmt|;
name|primitiveTypeInfoMap
operator|.
name|put
argument_list|(
name|t
argument_list|,
name|primitiveTypeInfos
argument_list|)
expr_stmt|;
block|}
name|StructObjectInspector
name|rowOI
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyTestPrimitiveClass
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|TestBinarySortableSerDe
operator|.
name|sort
argument_list|(
name|myTestPrimitiveClasses
argument_list|,
name|rowOI
argument_list|)
expr_stmt|;
name|String
name|fieldNames
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowOI
argument_list|)
decl_stmt|;
name|String
name|fieldTypes
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowOI
argument_list|)
decl_stmt|;
name|String
name|order
decl_stmt|;
name|order
operator|=
name|StringUtils
operator|.
name|leftPad
argument_list|(
literal|""
argument_list|,
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
argument_list|,
literal|'+'
argument_list|)
expr_stmt|;
name|String
name|nullOrder
decl_stmt|;
name|nullOrder
operator|=
name|StringUtils
operator|.
name|leftPad
argument_list|(
literal|""
argument_list|,
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|SerDe
name|serde_ascending
init|=
name|TestBinarySortableSerDe
operator|.
name|getSerDe
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypes
argument_list|,
name|order
argument_list|,
name|nullOrder
argument_list|)
decl_stmt|;
name|order
operator|=
name|StringUtils
operator|.
name|leftPad
argument_list|(
literal|""
argument_list|,
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
argument_list|,
literal|'-'
argument_list|)
expr_stmt|;
name|nullOrder
operator|=
name|StringUtils
operator|.
name|leftPad
argument_list|(
literal|""
argument_list|,
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
name|SerDe
name|serde_descending
init|=
name|TestBinarySortableSerDe
operator|.
name|getSerDe
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypes
argument_list|,
name|order
argument_list|,
name|nullOrder
argument_list|)
decl_stmt|;
name|boolean
index|[]
name|columnSortOrderIsDesc
init|=
operator|new
name|boolean
index|[
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|columnSortOrderIsDesc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|byte
index|[]
name|columnNullMarker
init|=
operator|new
name|byte
index|[
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|columnNullMarker
argument_list|,
name|BinarySortableSerDe
operator|.
name|ZERO
argument_list|)
expr_stmt|;
name|byte
index|[]
name|columnNotNullMarker
init|=
operator|new
name|byte
index|[
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|columnNotNullMarker
argument_list|,
name|BinarySortableSerDe
operator|.
name|ONE
argument_list|)
expr_stmt|;
name|testBinarySortableFast
argument_list|(
name|myTestPrimitiveClasses
argument_list|,
name|columnSortOrderIsDesc
argument_list|,
name|columnNullMarker
argument_list|,
name|columnNotNullMarker
argument_list|,
name|serde_ascending
argument_list|,
name|rowOI
argument_list|,
literal|true
argument_list|,
name|primitiveTypeInfoMap
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|columnSortOrderIsDesc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testBinarySortableFast
argument_list|(
name|myTestPrimitiveClasses
argument_list|,
name|columnSortOrderIsDesc
argument_list|,
name|columnNullMarker
argument_list|,
name|columnNotNullMarker
argument_list|,
name|serde_descending
argument_list|,
name|rowOI
argument_list|,
literal|false
argument_list|,
name|primitiveTypeInfoMap
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

