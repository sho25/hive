begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|TimestampTZ
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test suite for the JSON SerDe class.  */
end_comment

begin_class
specifier|public
class|class
name|TestJsonSerDe
block|{
annotation|@
name|Test
specifier|public
name|void
name|testPrimativeDataTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"name,height,weight,endangered,born"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,float,int,boolean,timestamp"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
argument_list|,
literal|"millis"
argument_list|)
expr_stmt|;
name|JsonSerDe
name|serde
init|=
operator|new
name|JsonSerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|String
name|jsonText
init|=
name|loadJson
argument_list|(
literal|"simple.json"
argument_list|)
decl_stmt|;
specifier|final
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|jsonText
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"giraffe"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5.5f
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1360
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|ofEpochMilli
argument_list|(
literal|1549751270013L
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testArray
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"list,items"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,array<string>"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
argument_list|,
literal|"millis"
argument_list|)
expr_stmt|;
name|JsonSerDe
name|serde
init|=
operator|new
name|JsonSerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|String
name|jsonText
init|=
name|loadJson
argument_list|(
literal|"array.json"
argument_list|)
decl_stmt|;
specifier|final
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|jsonText
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"grocery"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"milk"
argument_list|,
literal|"eggs"
argument_list|,
literal|"bread"
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test when a map has a key defined as a numeric value. Technically, JSON    * does not support this because each key in a map must be a quoted string.    * Unquoted strings (hence an int value) is allowed by Javascript, but not by    * JSON specification. For Hive, the int map key type is stored as a string    * and must be converted back into an int type.    */
annotation|@
name|Test
specifier|public
name|void
name|testMapNumericKey
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"map"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"map<int,string>"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
argument_list|,
literal|"millis"
argument_list|)
expr_stmt|;
name|JsonSerDe
name|serde
init|=
operator|new
name|JsonSerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|String
name|jsonText
init|=
name|loadJson
argument_list|(
literal|"map_int_key.json"
argument_list|)
decl_stmt|;
specifier|final
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|jsonText
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|resultMap
init|=
operator|(
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
operator|)
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Object
name|value1
init|=
name|resultMap
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|Object
name|value2
init|=
name|resultMap
operator|.
name|get
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|resultMap
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2001-01-01"
argument_list|,
name|value1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|value2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBlankLineAllowed
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"a,b,c"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"int,int,int"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
argument_list|,
literal|"millis"
argument_list|)
expr_stmt|;
comment|// This is the test parameter
name|props
operator|.
name|setProperty
argument_list|(
name|JsonSerDe
operator|.
name|NULL_EMPTY_LINES
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|JsonSerDe
name|serde
init|=
operator|new
name|JsonSerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|?
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|results
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|SerDeException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testBlankLineException
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"a,b,c"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"int,int,int"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
argument_list|,
literal|"millis"
argument_list|)
expr_stmt|;
comment|// This is the test parameter
name|props
operator|.
name|setProperty
argument_list|(
name|JsonSerDe
operator|.
name|NULL_EMPTY_LINES
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|JsonSerDe
name|serde
init|=
operator|new
name|JsonSerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|serde
operator|.
name|deserialize
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChar
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"char(5)"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
argument_list|,
literal|"millis"
argument_list|)
expr_stmt|;
name|JsonSerDe
name|serde
init|=
operator|new
name|JsonSerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|props
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
operator|new
name|Text
argument_list|(
literal|"{\"a\":\"xxx\"}"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"xxx  "
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * When parsing the JSON object, a cache is kept for the definition of each    * field and it index in its most immediate struct. Check that if two names    * have the same name, in the same index of their respective structs, that    * they are not confused with one-another.    */
annotation|@
name|Test
specifier|public
name|void
name|testCacheIndexSameFieldName
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"a,b"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"int,struct<a:boolean>"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
argument_list|,
literal|"millis"
argument_list|)
expr_stmt|;
name|JsonSerDe
name|serde
init|=
operator|new
name|JsonSerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
operator|new
name|Text
argument_list|(
literal|"{\"a\":5,\"b\":{\"a\":true}}"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|true
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSerialize
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"a,b,c,d,e,f"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"int,int,struct<c:int,d:int>,string,array<int>,map<int,float>"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
argument_list|,
literal|"millis"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|jsonText
init|=
name|loadJson
argument_list|(
literal|"complex_write.json"
argument_list|)
decl_stmt|;
name|JsonSerDe
name|serde
init|=
operator|new
name|JsonSerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ObjectInspector
name|oi
init|=
name|serde
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|IntWritable
argument_list|,
name|FloatWritable
argument_list|>
name|map
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|666
argument_list|)
argument_list|,
operator|new
name|FloatWritable
argument_list|(
literal|0.12345f
argument_list|)
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|999
argument_list|)
argument_list|,
operator|new
name|FloatWritable
argument_list|(
literal|0.6789f
argument_list|)
argument_list|)
expr_stmt|;
name|Object
name|testStructure
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|3
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|,
operator|new
name|Text
argument_list|(
literal|"SomeData"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|101
argument_list|)
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|102
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|serde
operator|.
name|serialize
argument_list|(
name|testStructure
argument_list|,
name|oi
argument_list|)
decl_stmt|;
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|result
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|jsonText
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test serializing a information about a file to JSON. The name of the file    * is a "single_pixel.png" and the binary data of the PNG file are stored in    * JSON. By default, the writer uses base-64 mime encoding.    */
annotation|@
name|Test
specifier|public
name|void
name|testSerializeBinaryData
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"name,content"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,binary"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
argument_list|,
literal|"millis"
argument_list|)
expr_stmt|;
specifier|final
name|String
name|jsonText
init|=
name|loadJson
argument_list|(
literal|"single_pixel.json"
argument_list|)
decl_stmt|;
name|JsonSerDe
name|serde
init|=
operator|new
name|JsonSerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|ObjectInspector
name|oi
init|=
name|serde
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|buf
init|=
name|Base64
operator|.
name|getMimeDecoder
argument_list|()
operator|.
name|decode
argument_list|(
literal|"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAf"
operator|+
literal|"FcSJAAAADUlEQVR42mNUuXDhPwAFqQLFTWHXeAAAAABJRU5ErkJggg=="
argument_list|)
decl_stmt|;
name|Object
name|testObject
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Text
argument_list|(
literal|"single_pixel.png"
argument_list|)
argument_list|,
operator|new
name|BytesWritable
argument_list|(
name|buf
argument_list|)
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|serde
operator|.
name|serialize
argument_list|(
name|testObject
argument_list|,
name|oi
argument_list|)
decl_stmt|;
name|Text
name|text
init|=
operator|(
name|Text
operator|)
name|result
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|jsonText
argument_list|,
name|text
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test serializing "timestamp with local time zone". Take a time in GMT and    * have it convert it to the local time.    */
annotation|@
name|Test
specifier|public
name|void
name|testTimestampWithLocalTimeZone
parameter_list|()
throws|throws
name|Exception
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"__time"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"timestamp with local time zone"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|TIMESTAMP_FORMATS
argument_list|,
literal|"yyyy-MM-dd'T'HH:mm:ss'Z"
argument_list|)
expr_stmt|;
specifier|final
name|TimeZone
name|localTz
init|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
decl_stmt|;
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|TimeZone
operator|.
name|getTimeZone
argument_list|(
literal|"US/Pacific"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|JsonSerDe
name|serde
init|=
operator|new
name|JsonSerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
literal|null
argument_list|,
name|props
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
argument_list|>
name|results
init|=
operator|(
name|List
argument_list|<
name|?
argument_list|>
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
operator|new
name|Text
argument_list|(
literal|"{\"__time\":\"2013-08-31T01:02:33Z\"}"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|results
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|instanceof
name|TimestampTZ
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"2013-08-30 18:02:33.0 US/Pacific"
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|TimeZone
operator|.
name|setDefault
argument_list|(
name|localTz
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Accepts a file name and loads it from /src/test/resource/json    *    * @param resourceName The name of the file to load    * @return A JSON string, all whitespace removed    * @throws IOException Failed to load the file    */
specifier|private
name|String
name|loadJson
parameter_list|(
specifier|final
name|String
name|resourceName
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|String
name|path
init|=
literal|"/json/"
operator|+
name|resourceName
decl_stmt|;
specifier|final
name|URL
name|url
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|File
name|testJson
init|=
operator|new
name|File
argument_list|(
name|url
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|String
name|jsonText
init|=
name|FileUtils
operator|.
name|readFileToString
argument_list|(
name|testJson
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
decl_stmt|;
return|return
name|jsonText
operator|.
name|replaceAll
argument_list|(
literal|"\\s+"
argument_list|,
literal|""
argument_list|)
return|;
block|}
block|}
end_class

end_unit

