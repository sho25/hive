begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|MyTestClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|MyTestInnerStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|TestBinarySortableSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|AbstractPrimitiveLazyObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyPrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|objectinspector
operator|.
name|LazyBinaryMapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|JavaBinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableBinaryObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_comment
comment|/**  * TestLazyBinarySerDe.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestLazyBinarySerDe
extends|extends
name|TestCase
block|{
comment|/**    * Generate a random struct array.    *    * @param r    *          random number generator    * @return an struct array    */
specifier|static
name|List
argument_list|<
name|MyTestInnerStruct
argument_list|>
name|getRandStructArray
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|int
name|length
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|MyTestInnerStruct
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|MyTestInnerStruct
argument_list|>
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|MyTestInnerStruct
name|ti
init|=
operator|new
name|MyTestInnerStruct
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|,
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|ti
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**    * Initialize the LazyBinarySerDe.    *    * @param fieldNames    *          table field names    * @param fieldTypes    *          table field types    * @return the initialized LazyBinarySerDe    * @throws Throwable    */
specifier|private
name|SerDe
name|getSerDe
parameter_list|(
name|String
name|fieldNames
parameter_list|,
name|String
name|fieldTypes
parameter_list|)
throws|throws
name|Throwable
block|{
name|Properties
name|schema
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|schema
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|fieldNames
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|fieldTypes
argument_list|)
expr_stmt|;
name|LazyBinarySerDe
name|serde
init|=
operator|new
name|LazyBinarySerDe
argument_list|()
decl_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|schema
argument_list|)
expr_stmt|;
return|return
name|serde
return|;
block|}
comment|/**    * Test the LazyBinarySerDe.    *    * @param rows    *          array of structs to be serialized    * @param rowOI    *          array of struct object inspectors    * @param serde    *          the serde    * @throws Throwable    */
specifier|private
name|void
name|testLazyBinarySerDe
parameter_list|(
name|Object
index|[]
name|rows
parameter_list|,
name|ObjectInspector
name|rowOI
parameter_list|,
name|SerDe
name|serde
parameter_list|)
throws|throws
name|Throwable
block|{
name|ObjectInspector
name|serdeOI
init|=
name|serde
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
comment|// Try to serialize
name|BytesWritable
name|bytes
index|[]
init|=
operator|new
name|BytesWritable
index|[
name|rows
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|BytesWritable
name|s
init|=
operator|(
name|BytesWritable
operator|)
name|serde
operator|.
name|serialize
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|,
name|rowOI
argument_list|)
decl_stmt|;
name|bytes
index|[
name|i
index|]
operator|=
operator|new
name|BytesWritable
argument_list|()
expr_stmt|;
name|bytes
index|[
name|i
index|]
operator|.
name|set
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
comment|// Try to deserialize
name|Object
index|[]
name|deserialized
init|=
operator|new
name|Object
index|[
name|rows
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|deserialized
index|[
name|i
index|]
operator|=
name|serde
operator|.
name|deserialize
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|,
name|rowOI
argument_list|,
name|deserialized
index|[
name|i
index|]
argument_list|,
name|serdeOI
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"structs["
operator|+
name|i
operator|+
literal|"] = "
operator|+
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|,
name|rowOI
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"deserialized["
operator|+
name|i
operator|+
literal|"] = "
operator|+
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|deserialized
index|[
name|i
index|]
argument_list|,
name|serdeOI
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"serialized["
operator|+
name|i
operator|+
literal|"] = "
operator|+
name|TestBinarySortableSerDe
operator|.
name|hexString
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rows
index|[
name|i
index|]
argument_list|,
name|deserialized
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Compare two structs that have different number of fields. We just compare    * the first few common fields, ignoring the fields existing in one struct but    * not the other.    *    * @see ObjectInspectorUtils#compare(Object, ObjectInspector, Object,    *      ObjectInspector)    */
name|int
name|compareDiffSizedStructs
parameter_list|(
name|Object
name|o1
parameter_list|,
name|ObjectInspector
name|oi1
parameter_list|,
name|Object
name|o2
parameter_list|,
name|ObjectInspector
name|oi2
parameter_list|)
block|{
name|StructObjectInspector
name|soi1
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi1
decl_stmt|;
name|StructObjectInspector
name|soi2
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi2
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields1
init|=
name|soi1
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields2
init|=
name|soi2
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|int
name|minimum
init|=
name|Math
operator|.
name|min
argument_list|(
name|fields1
operator|.
name|size
argument_list|()
argument_list|,
name|fields2
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minimum
condition|;
name|i
operator|++
control|)
block|{
name|int
name|result
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|soi1
operator|.
name|getStructFieldData
argument_list|(
name|o1
argument_list|,
name|fields1
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|fields1
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|,
name|soi2
operator|.
name|getStructFieldData
argument_list|(
name|o2
argument_list|,
name|fields2
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|fields2
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
comment|/**    * Test shorter schema deserialization where a bigger struct is serialized and    * it is then deserialized with a smaller struct. Here the serialized struct    * has 10 fields and we deserialized to a struct of 9 fields.    */
specifier|private
name|void
name|testShorterSchemaDeserialization
parameter_list|(
name|Random
name|r
parameter_list|)
throws|throws
name|Throwable
block|{
name|StructObjectInspector
name|rowOI1
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyTestClassBigger
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|String
name|fieldNames1
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowOI1
argument_list|)
decl_stmt|;
name|String
name|fieldTypes1
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowOI1
argument_list|)
decl_stmt|;
name|SerDe
name|serde1
init|=
name|getSerDe
argument_list|(
name|fieldNames1
argument_list|,
name|fieldTypes1
argument_list|)
decl_stmt|;
name|serde1
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|StructObjectInspector
name|rowOI2
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyTestClass
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|String
name|fieldNames2
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowOI2
argument_list|)
decl_stmt|;
name|String
name|fieldTypes2
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowOI2
argument_list|)
decl_stmt|;
name|SerDe
name|serde2
init|=
name|getSerDe
argument_list|(
name|fieldNames2
argument_list|,
name|fieldTypes2
argument_list|)
decl_stmt|;
name|ObjectInspector
name|serdeOI2
init|=
name|serde2
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|int
name|num
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|itest
init|=
literal|0
init|;
name|itest
operator|<
name|num
condition|;
name|itest
operator|++
control|)
block|{
name|int
name|randField
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|Byte
name|b
init|=
name|randField
operator|>
literal|0
condition|?
literal|null
else|:
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Short
name|s
init|=
name|randField
operator|>
literal|1
condition|?
literal|null
else|:
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|n
init|=
name|randField
operator|>
literal|2
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|l
init|=
name|randField
operator|>
literal|3
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|Float
name|f
init|=
name|randField
operator|>
literal|4
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|d
init|=
name|randField
operator|>
literal|5
condition|?
literal|null
else|:
name|Double
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|st
init|=
name|randField
operator|>
literal|6
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|HiveDecimal
name|bd
init|=
name|randField
operator|>
literal|7
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandHiveDecimal
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Date
name|date
init|=
name|randField
operator|>
literal|8
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandDate
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|MyTestInnerStruct
name|is
init|=
name|randField
operator|>
literal|9
condition|?
literal|null
else|:
operator|new
name|MyTestInnerStruct
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|-
literal|2
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|-
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|li
init|=
name|randField
operator|>
literal|10
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandIntegerArray
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ba
init|=
name|TestBinarySortableSerDe
operator|.
name|getRandBA
argument_list|(
name|r
argument_list|,
name|itest
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MyTestInnerStruct
argument_list|>
argument_list|>
name|mp
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MyTestInnerStruct
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|TestBinarySortableSerDe
operator|.
name|getRandString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MyTestInnerStruct
argument_list|>
name|value
init|=
name|randField
operator|>
literal|9
condition|?
literal|null
else|:
name|getRandStructArray
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|mp
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|String
name|key1
init|=
name|TestBinarySortableSerDe
operator|.
name|getRandString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|mp
operator|.
name|put
argument_list|(
name|key1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|key2
init|=
name|TestBinarySortableSerDe
operator|.
name|getRandString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MyTestInnerStruct
argument_list|>
name|value2
init|=
name|getRandStructArray
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|mp
operator|.
name|put
argument_list|(
name|key2
argument_list|,
name|value2
argument_list|)
expr_stmt|;
name|MyTestClassBigger
name|input
init|=
operator|new
name|MyTestClassBigger
argument_list|(
name|b
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|l
argument_list|,
name|f
argument_list|,
name|d
argument_list|,
name|st
argument_list|,
name|bd
argument_list|,
name|date
argument_list|,
name|is
argument_list|,
name|li
argument_list|,
name|ba
argument_list|,
name|mp
argument_list|)
decl_stmt|;
name|BytesWritable
name|bw
init|=
operator|(
name|BytesWritable
operator|)
name|serde1
operator|.
name|serialize
argument_list|(
name|input
argument_list|,
name|rowOI1
argument_list|)
decl_stmt|;
name|Object
name|output
init|=
name|serde2
operator|.
name|deserialize
argument_list|(
name|bw
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|compareDiffSizedStructs
argument_list|(
name|input
argument_list|,
name|rowOI1
argument_list|,
name|output
argument_list|,
name|serdeOI2
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"structs      = "
operator|+
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|input
argument_list|,
name|rowOI1
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"deserialized = "
operator|+
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|output
argument_list|,
name|serdeOI2
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"serialized   = "
operator|+
name|TestBinarySortableSerDe
operator|.
name|hexString
argument_list|(
name|bw
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test shorter schema deserialization where a bigger struct is serialized and    * it is then deserialized with a smaller struct. Here the serialized struct    * has 9 fields and we deserialized to a struct of 8 fields.    */
specifier|private
name|void
name|testShorterSchemaDeserialization1
parameter_list|(
name|Random
name|r
parameter_list|)
throws|throws
name|Throwable
block|{
name|StructObjectInspector
name|rowOI1
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyTestClass
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|String
name|fieldNames1
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowOI1
argument_list|)
decl_stmt|;
name|String
name|fieldTypes1
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowOI1
argument_list|)
decl_stmt|;
name|SerDe
name|serde1
init|=
name|getSerDe
argument_list|(
name|fieldNames1
argument_list|,
name|fieldTypes1
argument_list|)
decl_stmt|;
name|serde1
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|StructObjectInspector
name|rowOI2
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyTestClassSmaller
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|String
name|fieldNames2
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowOI2
argument_list|)
decl_stmt|;
name|String
name|fieldTypes2
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowOI2
argument_list|)
decl_stmt|;
name|SerDe
name|serde2
init|=
name|getSerDe
argument_list|(
name|fieldNames2
argument_list|,
name|fieldTypes2
argument_list|)
decl_stmt|;
name|ObjectInspector
name|serdeOI2
init|=
name|serde2
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|int
name|num
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|itest
init|=
literal|0
init|;
name|itest
operator|<
name|num
condition|;
name|itest
operator|++
control|)
block|{
name|int
name|randField
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|Byte
name|b
init|=
name|randField
operator|>
literal|0
condition|?
literal|null
else|:
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Short
name|s
init|=
name|randField
operator|>
literal|1
condition|?
literal|null
else|:
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|n
init|=
name|randField
operator|>
literal|2
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|l
init|=
name|randField
operator|>
literal|3
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|Float
name|f
init|=
name|randField
operator|>
literal|4
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|d
init|=
name|randField
operator|>
literal|5
condition|?
literal|null
else|:
name|Double
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|st
init|=
name|randField
operator|>
literal|6
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|HiveDecimal
name|bd
init|=
name|randField
operator|>
literal|7
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandHiveDecimal
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Date
name|date
init|=
name|randField
operator|>
literal|8
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandDate
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|MyTestInnerStruct
name|is
init|=
name|randField
operator|>
literal|9
condition|?
literal|null
else|:
operator|new
name|MyTestInnerStruct
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|-
literal|2
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|-
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|li
init|=
name|randField
operator|>
literal|10
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandIntegerArray
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ba
init|=
name|TestBinarySortableSerDe
operator|.
name|getRandBA
argument_list|(
name|r
argument_list|,
name|itest
argument_list|)
decl_stmt|;
name|MyTestClass
name|input
init|=
operator|new
name|MyTestClass
argument_list|(
name|b
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|l
argument_list|,
name|f
argument_list|,
name|d
argument_list|,
name|st
argument_list|,
name|bd
argument_list|,
name|date
argument_list|,
name|is
argument_list|,
name|li
argument_list|,
name|ba
argument_list|)
decl_stmt|;
name|BytesWritable
name|bw
init|=
operator|(
name|BytesWritable
operator|)
name|serde1
operator|.
name|serialize
argument_list|(
name|input
argument_list|,
name|rowOI1
argument_list|)
decl_stmt|;
name|Object
name|output
init|=
name|serde2
operator|.
name|deserialize
argument_list|(
name|bw
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|compareDiffSizedStructs
argument_list|(
name|input
argument_list|,
name|rowOI1
argument_list|,
name|output
argument_list|,
name|serdeOI2
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"structs      = "
operator|+
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|input
argument_list|,
name|rowOI1
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"deserialized = "
operator|+
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|output
argument_list|,
name|serdeOI2
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"serialized   = "
operator|+
name|TestBinarySortableSerDe
operator|.
name|hexString
argument_list|(
name|bw
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test longer schema deserialization where a smaller struct is serialized and    * it is then deserialized with a bigger struct Here the serialized struct has    * 9 fields and we deserialized to a struct of 10 fields.    */
name|void
name|testLongerSchemaDeserialization
parameter_list|(
name|Random
name|r
parameter_list|)
throws|throws
name|Throwable
block|{
name|StructObjectInspector
name|rowOI1
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyTestClass
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|String
name|fieldNames1
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowOI1
argument_list|)
decl_stmt|;
name|String
name|fieldTypes1
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowOI1
argument_list|)
decl_stmt|;
name|SerDe
name|serde1
init|=
name|getSerDe
argument_list|(
name|fieldNames1
argument_list|,
name|fieldTypes1
argument_list|)
decl_stmt|;
name|serde1
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|StructObjectInspector
name|rowOI2
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyTestClassBigger
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|String
name|fieldNames2
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowOI2
argument_list|)
decl_stmt|;
name|String
name|fieldTypes2
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowOI2
argument_list|)
decl_stmt|;
name|SerDe
name|serde2
init|=
name|getSerDe
argument_list|(
name|fieldNames2
argument_list|,
name|fieldTypes2
argument_list|)
decl_stmt|;
name|ObjectInspector
name|serdeOI2
init|=
name|serde2
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|int
name|num
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|itest
init|=
literal|0
init|;
name|itest
operator|<
name|num
condition|;
name|itest
operator|++
control|)
block|{
name|int
name|randField
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|Byte
name|b
init|=
name|randField
operator|>
literal|0
condition|?
literal|null
else|:
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Short
name|s
init|=
name|randField
operator|>
literal|1
condition|?
literal|null
else|:
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|n
init|=
name|randField
operator|>
literal|2
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|l
init|=
name|randField
operator|>
literal|3
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|Float
name|f
init|=
name|randField
operator|>
literal|4
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|d
init|=
name|randField
operator|>
literal|5
condition|?
literal|null
else|:
name|Double
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|st
init|=
name|randField
operator|>
literal|6
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|HiveDecimal
name|bd
init|=
name|randField
operator|>
literal|7
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandHiveDecimal
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Date
name|date
init|=
name|randField
operator|>
literal|8
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandDate
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|MyTestInnerStruct
name|is
init|=
name|randField
operator|>
literal|9
condition|?
literal|null
else|:
operator|new
name|MyTestInnerStruct
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|-
literal|2
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|-
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|li
init|=
name|randField
operator|>
literal|10
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandIntegerArray
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ba
init|=
name|TestBinarySortableSerDe
operator|.
name|getRandBA
argument_list|(
name|r
argument_list|,
name|itest
argument_list|)
decl_stmt|;
name|MyTestClass
name|input
init|=
operator|new
name|MyTestClass
argument_list|(
name|b
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|l
argument_list|,
name|f
argument_list|,
name|d
argument_list|,
name|st
argument_list|,
name|bd
argument_list|,
name|date
argument_list|,
name|is
argument_list|,
name|li
argument_list|,
name|ba
argument_list|)
decl_stmt|;
name|BytesWritable
name|bw
init|=
operator|(
name|BytesWritable
operator|)
name|serde1
operator|.
name|serialize
argument_list|(
name|input
argument_list|,
name|rowOI1
argument_list|)
decl_stmt|;
name|Object
name|output
init|=
name|serde2
operator|.
name|deserialize
argument_list|(
name|bw
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|compareDiffSizedStructs
argument_list|(
name|input
argument_list|,
name|rowOI1
argument_list|,
name|output
argument_list|,
name|serdeOI2
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"structs      = "
operator|+
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|input
argument_list|,
name|rowOI1
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"deserialized = "
operator|+
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|output
argument_list|,
name|serdeOI2
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"serialized   = "
operator|+
name|TestBinarySortableSerDe
operator|.
name|hexString
argument_list|(
name|bw
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * Test longer schema deserialization where a smaller struct is serialized and    * it is then deserialized with a bigger struct Here the serialized struct has    * 8 fields and we deserialized to a struct of 9 fields.    */
name|void
name|testLongerSchemaDeserialization1
parameter_list|(
name|Random
name|r
parameter_list|)
throws|throws
name|Throwable
block|{
name|StructObjectInspector
name|rowOI1
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyTestClassSmaller
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|String
name|fieldNames1
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowOI1
argument_list|)
decl_stmt|;
name|String
name|fieldTypes1
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowOI1
argument_list|)
decl_stmt|;
name|SerDe
name|serde1
init|=
name|getSerDe
argument_list|(
name|fieldNames1
argument_list|,
name|fieldTypes1
argument_list|)
decl_stmt|;
name|serde1
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
name|StructObjectInspector
name|rowOI2
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyTestClass
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|String
name|fieldNames2
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowOI2
argument_list|)
decl_stmt|;
name|String
name|fieldTypes2
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowOI2
argument_list|)
decl_stmt|;
name|SerDe
name|serde2
init|=
name|getSerDe
argument_list|(
name|fieldNames2
argument_list|,
name|fieldTypes2
argument_list|)
decl_stmt|;
name|ObjectInspector
name|serdeOI2
init|=
name|serde2
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|int
name|num
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|itest
init|=
literal|0
init|;
name|itest
operator|<
name|num
condition|;
name|itest
operator|++
control|)
block|{
name|int
name|randField
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|9
argument_list|)
decl_stmt|;
name|Byte
name|b
init|=
name|randField
operator|>
literal|0
condition|?
literal|null
else|:
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Short
name|s
init|=
name|randField
operator|>
literal|1
condition|?
literal|null
else|:
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|n
init|=
name|randField
operator|>
literal|2
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|l
init|=
name|randField
operator|>
literal|3
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|Float
name|f
init|=
name|randField
operator|>
literal|4
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|d
init|=
name|randField
operator|>
literal|5
condition|?
literal|null
else|:
name|Double
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|st
init|=
name|randField
operator|>
literal|6
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|HiveDecimal
name|bd
init|=
name|randField
operator|>
literal|7
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandHiveDecimal
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Date
name|date
init|=
name|randField
operator|>
literal|7
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandDate
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|MyTestInnerStruct
name|is
init|=
name|randField
operator|>
literal|7
condition|?
literal|null
else|:
operator|new
name|MyTestInnerStruct
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|-
literal|2
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|-
literal|2
argument_list|)
decl_stmt|;
name|MyTestClassSmaller
name|input
init|=
operator|new
name|MyTestClassSmaller
argument_list|(
name|b
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|l
argument_list|,
name|f
argument_list|,
name|d
argument_list|,
name|st
argument_list|,
name|bd
argument_list|,
name|date
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|BytesWritable
name|bw
init|=
operator|(
name|BytesWritable
operator|)
name|serde1
operator|.
name|serialize
argument_list|(
name|input
argument_list|,
name|rowOI1
argument_list|)
decl_stmt|;
name|Object
name|output
init|=
name|serde2
operator|.
name|deserialize
argument_list|(
name|bw
argument_list|)
decl_stmt|;
if|if
condition|(
literal|0
operator|!=
name|compareDiffSizedStructs
argument_list|(
name|input
argument_list|,
name|rowOI1
argument_list|,
name|output
argument_list|,
name|serdeOI2
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"structs      = "
operator|+
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|input
argument_list|,
name|rowOI1
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"deserialized = "
operator|+
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|output
argument_list|,
name|serdeOI2
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"serialized   = "
operator|+
name|TestBinarySortableSerDe
operator|.
name|hexString
argument_list|(
name|bw
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|input
argument_list|,
name|output
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|testLazyBinaryMap
parameter_list|(
name|Random
name|r
parameter_list|)
throws|throws
name|Throwable
block|{
name|StructObjectInspector
name|rowOI
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyTestClassBigger
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|String
name|fieldNames
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowOI
argument_list|)
decl_stmt|;
name|String
name|fieldTypes
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowOI
argument_list|)
decl_stmt|;
name|SerDe
name|serde
init|=
name|getSerDe
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypes
argument_list|)
decl_stmt|;
name|ObjectInspector
name|serdeOI
init|=
name|serde
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|soi1
init|=
operator|(
name|StructObjectInspector
operator|)
name|serdeOI
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields1
init|=
name|soi1
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|LazyBinaryMapObjectInspector
name|lazympoi
init|=
operator|(
name|LazyBinaryMapObjectInspector
operator|)
name|fields1
operator|.
name|get
argument_list|(
literal|12
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|lazympkeyoi
init|=
name|lazympoi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|lazympvalueoi
init|=
name|lazympoi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|soi2
init|=
name|rowOI
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields2
init|=
name|soi2
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|MapObjectInspector
name|inputmpoi
init|=
operator|(
name|MapObjectInspector
operator|)
name|fields2
operator|.
name|get
argument_list|(
literal|12
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|inputmpkeyoi
init|=
name|inputmpoi
operator|.
name|getMapKeyObjectInspector
argument_list|()
decl_stmt|;
name|ObjectInspector
name|inputmpvalueoi
init|=
name|inputmpoi
operator|.
name|getMapValueObjectInspector
argument_list|()
decl_stmt|;
name|int
name|num
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|testi
init|=
literal|0
init|;
name|testi
operator|<
name|num
condition|;
name|testi
operator|++
control|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MyTestInnerStruct
argument_list|>
argument_list|>
name|mp
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|MyTestInnerStruct
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|randFields
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|randFields
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|TestBinarySortableSerDe
operator|.
name|getRandString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|int
name|randField
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MyTestInnerStruct
argument_list|>
name|value
init|=
name|randField
operator|>
literal|4
condition|?
literal|null
else|:
name|getRandStructArray
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|mp
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
name|MyTestClassBigger
name|input
init|=
operator|new
name|MyTestClassBigger
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mp
argument_list|)
decl_stmt|;
name|BytesWritable
name|bw
init|=
operator|(
name|BytesWritable
operator|)
name|serde
operator|.
name|serialize
argument_list|(
name|input
argument_list|,
name|rowOI
argument_list|)
decl_stmt|;
name|Object
name|output
init|=
name|serde
operator|.
name|deserialize
argument_list|(
name|bw
argument_list|)
decl_stmt|;
name|Object
name|lazyobj
init|=
name|soi1
operator|.
name|getStructFieldData
argument_list|(
name|output
argument_list|,
name|fields1
operator|.
name|get
argument_list|(
literal|12
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|outputmp
init|=
name|lazympoi
operator|.
name|getMap
argument_list|(
name|lazyobj
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputmp
operator|.
name|size
argument_list|()
operator|!=
name|mp
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Map size changed from "
operator|+
name|mp
operator|.
name|size
argument_list|()
operator|+
literal|" to "
operator|+
name|outputmp
operator|.
name|size
argument_list|()
operator|+
literal|" after serialization!"
argument_list|)
throw|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entryinput
range|:
name|mp
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|boolean
name|bEqual
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|entryoutput
range|:
name|outputmp
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// find the same key
if|if
condition|(
literal|0
operator|==
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|entryoutput
operator|.
name|getKey
argument_list|()
argument_list|,
name|lazympkeyoi
argument_list|,
name|entryinput
operator|.
name|getKey
argument_list|()
argument_list|,
name|inputmpkeyoi
argument_list|)
condition|)
block|{
if|if
condition|(
literal|0
operator|!=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|entryoutput
operator|.
name|getValue
argument_list|()
argument_list|,
name|lazympvalueoi
argument_list|,
name|entryinput
operator|.
name|getValue
argument_list|()
argument_list|,
name|inputmpvalueoi
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|entryoutput
operator|.
name|getValue
argument_list|()
argument_list|,
name|entryinput
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bEqual
operator|=
literal|true
expr_stmt|;
block|}
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|bEqual
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Could not find matched key in deserialized map : "
operator|+
name|entryinput
operator|.
name|getKey
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**    * The test entrance function.    *    * @throws Throwable    */
specifier|public
name|void
name|testLazyBinarySerDe
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Beginning Test TestLazyBinarySerDe:"
argument_list|)
expr_stmt|;
comment|// generate the data
name|int
name|num
init|=
literal|1000
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
decl_stmt|;
name|MyTestClass
name|rows
index|[]
init|=
operator|new
name|MyTestClass
index|[
name|num
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num
condition|;
name|i
operator|++
control|)
block|{
name|int
name|randField
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|12
argument_list|)
decl_stmt|;
name|Byte
name|b
init|=
name|randField
operator|>
literal|0
condition|?
literal|null
else|:
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Short
name|s
init|=
name|randField
operator|>
literal|1
condition|?
literal|null
else|:
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Integer
name|n
init|=
name|randField
operator|>
literal|2
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
name|Long
name|l
init|=
name|randField
operator|>
literal|3
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
decl_stmt|;
name|Float
name|f
init|=
name|randField
operator|>
literal|4
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextFloat
argument_list|()
argument_list|)
decl_stmt|;
name|Double
name|d
init|=
name|randField
operator|>
literal|5
condition|?
literal|null
else|:
name|Double
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|st
init|=
name|randField
operator|>
literal|6
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandString
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|HiveDecimal
name|bd
init|=
name|randField
operator|>
literal|7
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandHiveDecimal
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Date
name|date
init|=
name|randField
operator|>
literal|8
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandDate
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|MyTestInnerStruct
name|is
init|=
name|randField
operator|>
literal|9
condition|?
literal|null
else|:
operator|new
name|MyTestInnerStruct
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|-
literal|2
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|-
literal|2
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|li
init|=
name|randField
operator|>
literal|10
condition|?
literal|null
else|:
name|TestBinarySortableSerDe
operator|.
name|getRandIntegerArray
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ba
init|=
name|TestBinarySortableSerDe
operator|.
name|getRandBA
argument_list|(
name|r
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|MyTestClass
name|t
init|=
operator|new
name|MyTestClass
argument_list|(
name|b
argument_list|,
name|s
argument_list|,
name|n
argument_list|,
name|l
argument_list|,
name|f
argument_list|,
name|d
argument_list|,
name|st
argument_list|,
name|bd
argument_list|,
name|date
argument_list|,
name|is
argument_list|,
name|li
argument_list|,
name|ba
argument_list|)
decl_stmt|;
name|rows
index|[
name|i
index|]
operator|=
name|t
expr_stmt|;
block|}
name|StructObjectInspector
name|rowOI
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyTestClass
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|String
name|fieldNames
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|rowOI
argument_list|)
decl_stmt|;
name|String
name|fieldTypes
init|=
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|rowOI
argument_list|)
decl_stmt|;
comment|// call the tests
comment|// 1/ test LazyBinarySerDe
name|testLazyBinarySerDe
argument_list|(
name|rows
argument_list|,
name|rowOI
argument_list|,
name|getSerDe
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypes
argument_list|)
argument_list|)
expr_stmt|;
comment|// 2/ test LazyBinaryMap
name|testLazyBinaryMap
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// 3/ test serialization and deserialization with different schemas
name|testShorterSchemaDeserialization
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// 4/ test serialization and deserialization with different schemas
name|testLongerSchemaDeserialization
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// 5/ test serialization and deserialization with different schemas
name|testShorterSchemaDeserialization1
argument_list|(
name|r
argument_list|)
expr_stmt|;
comment|// 6/ test serialization and deserialization with different schemas
name|testLongerSchemaDeserialization1
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Test TestLazyBinarySerDe passed!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
specifier|final
name|byte
index|[]
name|inpBArray
init|=
block|{
literal|'1'
block|,
literal|'\u0001'
block|,
literal|'3'
block|,
literal|'4'
block|}
decl_stmt|;
specifier|private
name|BytesWritable
name|getInputBytesWritable
parameter_list|()
block|{
comment|//create input BytesWritable. This would have capacity greater than length)
name|BytesWritable
name|bW
init|=
operator|new
name|BytesWritable
argument_list|()
decl_stmt|;
name|bW
operator|.
name|set
argument_list|(
name|inpBArray
argument_list|,
literal|0
argument_list|,
name|inpBArray
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|bW
return|;
block|}
comment|/**    * Test to see if byte[] with correct contents is generated by    * JavaBinaryObjectInspector from input BytesWritable    * @throws Throwable    */
specifier|public
name|void
name|testJavaBinaryObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
name|BytesWritable
name|bW
init|=
name|getInputBytesWritable
argument_list|()
decl_stmt|;
comment|//create JavaBinaryObjectInspector
name|JavaBinaryObjectInspector
name|binInspector
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|javaByteArrayObjectInspector
decl_stmt|;
comment|//convert BytesWritable to byte][
name|byte
index|[]
name|outBARef
init|=
name|binInspector
operator|.
name|set
argument_list|(
literal|null
argument_list|,
name|bW
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"compare input and output BAs"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|inpBArray
argument_list|,
name|outBARef
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to see if byte[] with correct contents is generated by    * WritableBinaryObjectInspector from input BytesWritable    * @throws Throwable    */
specifier|public
name|void
name|testWritableBinaryObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
name|BytesWritable
name|bW
init|=
name|getInputBytesWritable
argument_list|()
decl_stmt|;
comment|//test WritableBinaryObjectInspector
name|WritableBinaryObjectInspector
name|writableBinInsp
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
decl_stmt|;
comment|//convert BytesWritable to byte[]
name|byte
index|[]
name|outBARef
init|=
name|writableBinInsp
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|bW
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"compare input and output BAs"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|inpBArray
argument_list|,
name|outBARef
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to see if byte[] with correct contents is generated by    * LazyBinaryObjectInspector from input BytesWritable    * @throws Throwable    */
specifier|public
name|void
name|testLazyBinaryObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
comment|//create input ByteArrayRef
name|ByteArrayRef
name|inpBARef
init|=
operator|new
name|ByteArrayRef
argument_list|()
decl_stmt|;
name|inpBARef
operator|.
name|setData
argument_list|(
name|inpBArray
argument_list|)
expr_stmt|;
name|AbstractPrimitiveLazyObjectInspector
argument_list|<
name|?
argument_list|>
name|binInspector
init|=
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|getLazyObjectInspector
argument_list|(
name|PrimitiveCategory
operator|.
name|BINARY
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
comment|//create LazyBinary initialed with inputBA
name|LazyBinary
name|lazyBin
init|=
operator|(
name|LazyBinary
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|binInspector
argument_list|)
decl_stmt|;
name|lazyBin
operator|.
name|init
argument_list|(
name|inpBARef
argument_list|,
literal|0
argument_list|,
name|inpBArray
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//use inspector to get a byte[] out of LazyBinary
name|byte
index|[]
name|outBARef
init|=
operator|(
name|byte
index|[]
operator|)
name|binInspector
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|lazyBin
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"compare input and output BAs"
argument_list|,
name|Arrays
operator|.
name|equals
argument_list|(
name|inpBArray
argument_list|,
name|outBARef
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

