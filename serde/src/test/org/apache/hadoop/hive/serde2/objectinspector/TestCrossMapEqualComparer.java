begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|TestCrossMapEqualComparer
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
class|class
name|IntegerStringMapHolder
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|mMap
decl_stmt|;
specifier|public
name|IntegerStringMapHolder
parameter_list|()
block|{
name|mMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSameType
parameter_list|()
block|{
comment|// empty maps
name|IntegerStringMapHolder
name|o1
init|=
operator|new
name|IntegerStringMapHolder
argument_list|()
decl_stmt|;
name|IntegerStringMapHolder
name|o2
init|=
operator|new
name|IntegerStringMapHolder
argument_list|()
decl_stmt|;
name|ObjectInspector
name|oi1
init|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|IntegerStringMapHolder
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|int
name|rc
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|o2
argument_list|,
name|oi1
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// equal maps
name|o1
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|42
argument_list|,
literal|"The answer to Life, Universe And Everything"
argument_list|)
expr_stmt|;
name|o2
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|42
argument_list|,
literal|"The answer to Life, Universe And Everything"
argument_list|)
expr_stmt|;
name|o1
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|1729
argument_list|,
literal|"A taxi cab number"
argument_list|)
expr_stmt|;
name|o2
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|1729
argument_list|,
literal|"A taxi cab number"
argument_list|)
expr_stmt|;
name|rc
operator|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|o2
argument_list|,
name|oi1
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// unequal maps
name|o2
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|1729
argument_list|,
literal|"Hardy-Ramanujan Number"
argument_list|)
expr_stmt|;
name|rc
operator|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|o2
argument_list|,
name|oi1
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|rc
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TextStringMapHolder
block|{
name|Map
argument_list|<
name|Text
argument_list|,
name|String
argument_list|>
name|mMap
decl_stmt|;
specifier|public
name|TextStringMapHolder
parameter_list|()
block|{
name|mMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|Text
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
name|Object
name|serializeAndDeserialize
parameter_list|(
name|TextStringMapHolder
name|o1
parameter_list|,
name|StructObjectInspector
name|oi1
parameter_list|,
name|LazySimpleSerDe
name|serde
parameter_list|,
name|LazySerDeParameters
name|serdeParams
parameter_list|)
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
name|ByteStream
operator|.
name|Output
name|serializeStream
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
name|LazySimpleSerDe
operator|.
name|serialize
argument_list|(
name|serializeStream
argument_list|,
name|o1
argument_list|,
name|oi1
argument_list|,
name|serdeParams
operator|.
name|getSeparators
argument_list|()
argument_list|,
literal|0
argument_list|,
name|serdeParams
operator|.
name|getNullSequence
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|isEscaped
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getEscapeChar
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getNeedsEscape
argument_list|()
argument_list|)
expr_stmt|;
name|Text
name|t
init|=
operator|new
name|Text
argument_list|(
name|serializeStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|serde
operator|.
name|deserialize
argument_list|(
name|t
argument_list|)
return|;
block|}
specifier|public
name|void
name|testCompatibleType
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
comment|// empty maps
name|TextStringMapHolder
name|o1
init|=
operator|new
name|TextStringMapHolder
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|oi1
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|TextStringMapHolder
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|LazySimpleSerDe
name|serde
init|=
operator|new
name|LazySimpleSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|oi1
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|oi1
argument_list|)
argument_list|)
expr_stmt|;
name|LazySerDeParameters
name|serdeParams
init|=
operator|new
name|LazySerDeParameters
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|,
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ObjectInspector
name|oi2
init|=
name|serde
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|Object
name|o2
init|=
name|serializeAndDeserialize
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|serde
argument_list|,
name|serdeParams
argument_list|)
decl_stmt|;
name|int
name|rc
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|o2
argument_list|,
name|oi2
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// equal maps
name|o1
operator|.
name|mMap
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
literal|"42"
argument_list|)
argument_list|,
literal|"The answer to Life, Universe And Everything"
argument_list|)
expr_stmt|;
name|o1
operator|.
name|mMap
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
literal|"1729"
argument_list|)
argument_list|,
literal|"A taxi cab number"
argument_list|)
expr_stmt|;
name|o2
operator|=
name|serializeAndDeserialize
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|serde
argument_list|,
name|serdeParams
argument_list|)
expr_stmt|;
name|rc
operator|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|o2
argument_list|,
name|oi2
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// unequal maps
name|o1
operator|.
name|mMap
operator|.
name|put
argument_list|(
operator|new
name|Text
argument_list|(
literal|"1729"
argument_list|)
argument_list|,
literal|"Hardy-Ramanujan Number"
argument_list|)
expr_stmt|;
name|rc
operator|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|o2
argument_list|,
name|oi2
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|rc
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|StringTextMapHolder
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Text
argument_list|>
name|mMap
decl_stmt|;
specifier|public
name|StringTextMapHolder
parameter_list|()
block|{
name|mMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Text
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
name|Object
name|serializeAndDeserialize
parameter_list|(
name|StringTextMapHolder
name|o1
parameter_list|,
name|StructObjectInspector
name|oi1
parameter_list|,
name|LazySimpleSerDe
name|serde
parameter_list|,
name|LazySerDeParameters
name|serdeParams
parameter_list|)
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
name|ByteStream
operator|.
name|Output
name|serializeStream
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
name|LazySimpleSerDe
operator|.
name|serialize
argument_list|(
name|serializeStream
argument_list|,
name|o1
argument_list|,
name|oi1
argument_list|,
name|serdeParams
operator|.
name|getSeparators
argument_list|()
argument_list|,
literal|0
argument_list|,
name|serdeParams
operator|.
name|getNullSequence
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|isEscaped
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getEscapeChar
argument_list|()
argument_list|,
name|serdeParams
operator|.
name|getNeedsEscape
argument_list|()
argument_list|)
expr_stmt|;
name|Text
name|t
init|=
operator|new
name|Text
argument_list|(
name|serializeStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|serde
operator|.
name|deserialize
argument_list|(
name|t
argument_list|)
return|;
block|}
specifier|public
name|void
name|testIncompatibleType
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
comment|// empty maps
name|StringTextMapHolder
name|o1
init|=
operator|new
name|StringTextMapHolder
argument_list|()
decl_stmt|;
name|StructObjectInspector
name|oi1
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|StringTextMapHolder
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|LazySimpleSerDe
name|serde
init|=
operator|new
name|LazySimpleSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|Properties
name|tbl
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
name|ObjectInspectorUtils
operator|.
name|getFieldNames
argument_list|(
name|oi1
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
name|ObjectInspectorUtils
operator|.
name|getFieldTypes
argument_list|(
name|oi1
argument_list|)
argument_list|)
expr_stmt|;
name|LazySerDeParameters
name|serdeParams
init|=
operator|new
name|LazySerDeParameters
argument_list|(
name|conf
argument_list|,
name|tbl
argument_list|,
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serde
argument_list|,
name|conf
argument_list|,
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ObjectInspector
name|oi2
init|=
name|serde
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|Object
name|o2
init|=
name|serializeAndDeserialize
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|serde
argument_list|,
name|serdeParams
argument_list|)
decl_stmt|;
name|int
name|rc
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|o2
argument_list|,
name|oi2
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// equal maps
name|o1
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|"42"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"The answer to Life, Universe And Everything"
argument_list|)
argument_list|)
expr_stmt|;
name|o1
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|"1729"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"A taxi cab number"
argument_list|)
argument_list|)
expr_stmt|;
name|o2
operator|=
name|serializeAndDeserialize
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|serde
argument_list|,
name|serdeParams
argument_list|)
expr_stmt|;
name|rc
operator|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|o2
argument_list|,
name|oi2
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rc
argument_list|)
expr_stmt|;
comment|// unequal maps
name|o1
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|"1729"
argument_list|,
operator|new
name|Text
argument_list|(
literal|"Hardy-Ramanujan Number"
argument_list|)
argument_list|)
expr_stmt|;
name|rc
operator|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi1
argument_list|,
name|o2
argument_list|,
name|oi2
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|rc
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

