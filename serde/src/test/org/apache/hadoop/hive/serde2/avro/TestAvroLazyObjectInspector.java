begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|ByteArrayRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazyStruct
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|LazyObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyPrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestAvroLazyObjectInspector
block|{
annotation|@
name|Test
specifier|public
name|void
name|testEmptyData
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"myField"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|ois
operator|.
name|add
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|getLazyStringObjectInspector
argument_list|(
literal|false
argument_list|,
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AvroLazyObjectInspector
name|aloi
init|=
operator|new
name|AvroLazyObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|ois
argument_list|,
literal|null
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyStruct
name|lazyStruct
init|=
operator|new
name|LazyStruct
argument_list|(
name|LazyObjectInspectorFactory
operator|.
name|getLazySimpleStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|ois
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|,
operator|new
name|Text
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|ByteArrayRef
name|byteArrayRef
init|=
operator|new
name|ByteArrayRef
argument_list|()
decl_stmt|;
name|byteArrayRef
operator|.
name|setData
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// set data to empty explicitly
name|lazyStruct
operator|.
name|init
argument_list|(
name|byteArrayRef
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|aloi
operator|.
name|getStructFieldData
argument_list|(
name|lazyStruct
argument_list|,
operator|new
name|TestStructField
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
class|class
name|TestStructField
implements|implements
name|StructField
block|{
annotation|@
name|Override
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
literal|"testfield"
return|;
block|}
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|getFieldObjectInspector
parameter_list|()
block|{
return|return
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|getLazyStringObjectInspector
argument_list|(
literal|false
argument_list|,
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getFieldID
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getFieldComment
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

