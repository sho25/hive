begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|LazyBinaryMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazybinary
operator|.
name|objectinspector
operator|.
name|LazyBinaryObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests LazyArray, LazyMap, LazyStruct and LazyUnion  *  */
end_comment

begin_class
specifier|public
class|class
name|TestLazyArrayMapStruct
block|{
comment|// nesting level limits
specifier|static
specifier|final
name|int
name|EXTENDED_LEVEL_THRESHOLD
init|=
literal|24
decl_stmt|;
specifier|static
specifier|final
name|int
name|DEFAULT_LEVEL_THRESHOLD
init|=
literal|8
decl_stmt|;
comment|/**    * Test the LazyArray class.    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyArray
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
comment|// Array of Byte
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"array<tinyint>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyArray
name|b
init|=
operator|(
name|LazyArray
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|1
block|,
literal|'\\'
block|,
literal|'N'
block|,
literal|1
block|,
literal|'8'
block|}
decl_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getListElementObject
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyByte
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyByte
operator|)
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getListElementObject
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyByte
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyByte
operator|)
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getListElementObject
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|b
operator|.
name|getList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Array of String
name|oi
operator|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"array<string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'\t'
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|b
operator|=
operator|(
name|LazyArray
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'\t'
block|,
literal|'c'
block|,
literal|'\t'
block|,
literal|'\\'
block|,
literal|'N'
block|,
literal|'\t'
block|,
literal|'\t'
block|,
literal|'d'
block|}
expr_stmt|;
comment|// Note: the first and last element of the byte[] are NOT used
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|1
argument_list|,
name|data
operator|.
name|length
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getListElementObject
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"b"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"b"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"c"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"c"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
name|b
operator|.
name|getListElementObject
argument_list|(
literal|2
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|4
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
name|b
operator|.
name|getListElementObject
argument_list|(
literal|5
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|b
operator|.
name|getList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// -- HIVE-4149
name|b
operator|=
operator|(
name|LazyArray
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'\t'
block|,
literal|'\\'
block|,
literal|'N'
block|}
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"a"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getListElementObject
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[]
block|{
literal|'\\'
block|,
literal|'N'
block|,
literal|'\t'
block|,
literal|'a'
block|}
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// twice (returns not cleaned cache)
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"a"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test the LazyMap class.    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyMap
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
block|{
comment|// Map of Integer to String
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<int,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyMap
name|b
init|=
operator|(
name|LazyMap
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
literal|'2'
block|,
literal|2
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|1
block|,
literal|'-'
block|,
literal|'1'
block|,
literal|2
block|,
literal|'\\'
block|,
literal|'N'
block|,
literal|1
block|,
literal|'0'
block|,
literal|2
block|,
literal|'0'
block|,
literal|1
block|,
literal|'8'
block|,
literal|2
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
decl_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"def"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|8
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|12345
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{2:'def',-1:null,0:'0',8:'abc'}"
operator|.
name|replace
argument_list|(
literal|'\''
argument_list|,
literal|'\"'
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|b
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|b
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Map of String to String
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<string,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'#'
block|,
operator|(
name|byte
operator|)
literal|'\t'
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyMap
name|b
init|=
operator|(
name|LazyMap
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
literal|'2'
block|,
literal|'\t'
block|,
literal|'d'
block|,
literal|'\t'
block|,
literal|'f'
block|,
literal|'#'
block|,
literal|'2'
block|,
literal|'\t'
block|,
literal|'d'
block|,
literal|'#'
block|,
literal|'-'
block|,
literal|'1'
block|,
literal|'#'
block|,
literal|'0'
block|,
literal|'\t'
block|,
literal|'0'
block|,
literal|'#'
block|,
literal|'8'
block|,
literal|'\t'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
decl_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"d\tf"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"8"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'2':'d\\tf','-1':null,'0':'0','8':'abc'}"
operator|.
name|replace
argument_list|(
literal|'\''
argument_list|,
literal|'\"'
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|b
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|b
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/*    * test LazyMap with bad entries, e.g., empty key or empty entries    * where '[' and  ']' don't exist, only for notation purpose,    * STX with value of 2 as entry separator, ETX with 3 as key/value separator    * */
annotation|@
name|Test
specifier|public
name|void
name|testLazyMapWithBadEntries
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
block|{
comment|// Map of String to String
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<string,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'\2'
block|,
literal|'\3'
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyMap
name|b
init|=
operator|(
name|LazyMap
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
comment|//read friendly string: ak[EXT]av[STX]bk[ETX]bv[STX]ck[ETX]cv[STX]dk[ETX]dv
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'k'
block|,
literal|'\3'
block|,
literal|'a'
block|,
literal|'v'
block|,
literal|'\02'
block|,
literal|'b'
block|,
literal|'k'
block|,
literal|'\3'
block|,
literal|'b'
block|,
literal|'v'
block|,
literal|'\02'
block|,
literal|'c'
block|,
literal|'k'
block|,
literal|'\3'
block|,
literal|'c'
block|,
literal|'v'
block|,
literal|'\02'
block|,
literal|'d'
block|,
literal|'k'
block|,
literal|'\3'
block|,
literal|'d'
block|,
literal|'v'
block|}
decl_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"av"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"ak"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bv"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bk"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cv"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"ck"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"dv"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"dk"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|b
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Map of String to String, LazyMap allows empty-string style key, e.g., {"" : null}
comment|// or {"", ""}, but not null style key, e.g., {null:""}
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<string,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'\2'
block|,
literal|'\3'
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyMap
name|b
init|=
operator|(
name|LazyMap
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
comment|//read friendly string: [STX]ak[EXT]av[STX]bk[ETX]bv[STX]ck[ETX]cv[STX]dk[ETX]dv
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
literal|'\02'
block|,
literal|'a'
block|,
literal|'k'
block|,
literal|'\3'
block|,
literal|'a'
block|,
literal|'v'
block|,
literal|'\02'
block|,
literal|'b'
block|,
literal|'k'
block|,
literal|'\3'
block|,
literal|'b'
block|,
literal|'v'
block|,
literal|'\02'
block|,
literal|'c'
block|,
literal|'k'
block|,
literal|'\3'
block|,
literal|'c'
block|,
literal|'v'
block|,
literal|'\02'
block|,
literal|'d'
block|,
literal|'k'
block|,
literal|'\3'
block|,
literal|'d'
block|,
literal|'v'
block|}
decl_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//{"" : null}
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"av"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"ak"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bv"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bk"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cv"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"ck"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"dv"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"dk"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|b
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Map of String to String, LazyMap allows empty-string style key, e.g., {"" : null}
comment|// or {"", ""}, but not null style key, e.g., {null:""}
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<string,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'\2'
block|,
literal|'\3'
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyMap
name|b
init|=
operator|(
name|LazyMap
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
comment|//read friendly string: [ETX][STX]ak[EXT]av[STX]bk[ETX]bv[STX]ck[ETX]cv[STX]dk[ETX]dv
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
literal|'\03'
block|,
literal|'\02'
block|,
literal|'a'
block|,
literal|'k'
block|,
literal|'\3'
block|,
literal|'a'
block|,
literal|'v'
block|,
literal|'\02'
block|,
literal|'b'
block|,
literal|'k'
block|,
literal|'\3'
block|,
literal|'b'
block|,
literal|'v'
block|,
literal|'\02'
block|,
literal|'c'
block|,
literal|'k'
block|,
literal|'\3'
block|,
literal|'c'
block|,
literal|'v'
block|,
literal|'\02'
block|,
literal|'d'
block|,
literal|'k'
block|,
literal|'\3'
block|,
literal|'d'
block|,
literal|'v'
block|}
decl_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//{"" : null}
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"av"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"ak"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bv"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"bk"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"cv"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"ck"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"dv"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"dk"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|b
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test the LazyMap class.    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyMapWithDuplicateKeys
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
block|{
comment|// Map of Integer to String
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<int,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyMap
name|b
init|=
operator|(
name|LazyMap
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
literal|'2'
block|,
literal|2
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|1
block|,
literal|'-'
block|,
literal|'1'
block|,
literal|2
block|,
literal|'\\'
block|,
literal|'N'
block|,
literal|1
block|,
literal|'0'
block|,
literal|2
block|,
literal|'0'
block|,
literal|1
block|,
literal|'2'
block|,
literal|2
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
decl_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"def"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|12345
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{2:'def',-1:null,0:'0'}"
operator|.
name|replace
argument_list|(
literal|'\''
argument_list|,
literal|'\"'
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|b
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|b
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|b
operator|.
name|getMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Map of String to String
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<string,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'#'
block|,
operator|(
name|byte
operator|)
literal|'\t'
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyMap
name|b
init|=
operator|(
name|LazyMap
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
literal|'2'
block|,
literal|'\t'
block|,
literal|'d'
block|,
literal|'\t'
block|,
literal|'f'
block|,
literal|'#'
block|,
literal|'2'
block|,
literal|'\t'
block|,
literal|'d'
block|,
literal|'#'
block|,
literal|'-'
block|,
literal|'1'
block|,
literal|'#'
block|,
literal|'0'
block|,
literal|'\t'
block|,
literal|'0'
block|,
literal|'#'
block|,
literal|'2'
block|,
literal|'\t'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
decl_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"d\tf"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'2':'d\\tf','-1':null,'0':'0'}"
operator|.
name|replace
argument_list|(
literal|'\''
argument_list|,
literal|'\"'
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|b
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|b
operator|.
name|getMapSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|b
operator|.
name|getMap
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test the LazyStruct class.    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyStruct
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
block|{
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"int,array<string>,map<string,string>,string"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|)
decl_stmt|;
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyStructInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypeInfos
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|' '
block|,
literal|':'
block|,
literal|'='
block|}
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyStruct
name|o
init|=
operator|(
name|LazyStruct
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|Text
name|data
decl_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"123 a:b:c d=e:f=g hi"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':123,'b':['a','b','c'],'c':{'d':'e','f':'g'},'d':'hi'}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"123 \\N d=e:f=g \\N"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':123,'b':null,'c':{'d':'e','f':'g'},'d':null}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"\\N a d=\\N:f=g:h no tail"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':null,'b':['a'],'c':{'d':null,'f':'g','h':null},'d':'no'}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"\\N :a:: \\N no tail"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':null,'b':['','a','',''],'c':null,'d':'no'}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"123   "
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':123,'b':[],'c':{},'d':''}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|": : : :"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':null,'b':['',''],'c':{'':null},'d':':'}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"= = = ="
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':null,'b':['='],'c':{'':''},'d':'='}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
comment|// test LastColumnTakesRest
name|oi
operator|=
name|LazyFactory
operator|.
name|createLazyStructInspector
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|)
argument_list|,
name|fieldTypeInfos
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|' '
block|,
literal|':'
block|,
literal|'='
block|}
argument_list|,
name|nullSequence
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|o
operator|=
operator|(
name|LazyStruct
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"\\N a d=\\N:f=g:h has tail"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':null,'b':['a'],'c':{'d':null,'f':'g','h':null},'d':'has tail'}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test the LazyUnion class.    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyUnion
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
block|{
name|TypeInfo
name|typeInfo
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
literal|"uniontype<int,array<string>,map<string,string>,string>"
argument_list|)
decl_stmt|;
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|typeInfo
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'^'
block|,
literal|':'
block|,
literal|'='
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyUnion
name|o
init|=
operator|(
name|LazyUnion
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|Text
name|data
decl_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"0^123"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{0:123}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"1^a:b:c"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{1:[\"a\",\"b\",\"c\"]}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"2^d=e:f=g"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{2:{\"d\":\"e\",\"f\":\"g\"}}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"3^hi"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{3:\"hi\"}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"0^\\N"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{0:null}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"1^ :a::"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{1:[\" \",\"a\",\"\",\"\"]}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"2^d=\\N:f=g:h"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{2:{\"d\":null,\"f\":\"g\",\"h\":null}}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"2^= "
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{2:{\"\":\" \"}}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test the LazyArray class with multiple levels of nesting    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyArrayNested
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|EXTENDED_LEVEL_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|testNestedinArrayAtLevelExtended
argument_list|(
name|i
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|LIST
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the LazyArray class with multiple levels of nesting    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyArrayNestedExceedLimit
parameter_list|()
throws|throws
name|Throwable
block|{
name|checkExtendedLimitExceeded
argument_list|(
name|EXTENDED_LEVEL_THRESHOLD
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|LIST
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkExtendedLimitExceeded
parameter_list|(
name|int
name|maxLevel
parameter_list|,
name|Category
name|type
parameter_list|)
block|{
name|boolean
name|foundException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|testNestedinArrayAtLevelExtended
argument_list|(
name|maxLevel
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|serdeEx
parameter_list|)
block|{
name|foundException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Got exception for exceeding nesting limit"
argument_list|,
name|foundException
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyArray class with multiple levels of nesting, when nesting    * levels are not extended    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyArrayNestedExceedLimitNotExtended
parameter_list|()
throws|throws
name|Throwable
block|{
name|checkNotExtendedLimitExceeded
argument_list|(
name|DEFAULT_LEVEL_THRESHOLD
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|LIST
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyMap class with multiple levels of nesting, when nesting    * levels are not extended    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyMapNestedExceedLimitNotExtended
parameter_list|()
throws|throws
name|Throwable
block|{
name|checkNotExtendedLimitExceeded
argument_list|(
name|DEFAULT_LEVEL_THRESHOLD
operator|-
literal|1
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|MAP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyMap class with multiple levels of nesting, when nesting    * levels are not extended    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyStructNestedExceedLimitNotExtended
parameter_list|()
throws|throws
name|Throwable
block|{
name|checkNotExtendedLimitExceeded
argument_list|(
name|DEFAULT_LEVEL_THRESHOLD
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyMap class with multiple levels of nesting, when nesting    * levels are not extended    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyUnionNestedExceedLimitNotExtended
parameter_list|()
throws|throws
name|Throwable
block|{
name|checkNotExtendedLimitExceeded
argument_list|(
name|DEFAULT_LEVEL_THRESHOLD
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|UNION
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkNotExtendedLimitExceeded
parameter_list|(
name|int
name|maxLevel
parameter_list|,
name|Category
name|type
parameter_list|)
block|{
name|boolean
name|foundException
init|=
literal|false
decl_stmt|;
try|try
block|{
name|testNestedinArrayAtLevel
argument_list|(
name|maxLevel
argument_list|,
name|type
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|serdeEx
parameter_list|)
block|{
name|foundException
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected exception for exceeding nesting limit"
argument_list|,
name|foundException
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyMap class with multiple levels of nesting    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyMapNested
parameter_list|()
throws|throws
name|Throwable
block|{
comment|//map max nesting level is one less because it uses an additional separator
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|EXTENDED_LEVEL_THRESHOLD
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|testNestedinArrayAtLevelExtended
argument_list|(
name|i
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|MAP
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the LazyMap class with multiple levels of nesting    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyMapNestedExceedLimit
parameter_list|()
throws|throws
name|Throwable
block|{
comment|//map max nesting level is one less because it uses an additional separator
name|checkExtendedLimitExceeded
argument_list|(
name|EXTENDED_LEVEL_THRESHOLD
operator|-
literal|1
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|MAP
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyUnion class with multiple levels of nesting    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyUnionNested
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|EXTENDED_LEVEL_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|testNestedinArrayAtLevelExtended
argument_list|(
name|i
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|UNION
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test the LazyUnion class with multiple levels of nesting    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyUnionNestedExceedLimit
parameter_list|()
throws|throws
name|Throwable
block|{
name|checkExtendedLimitExceeded
argument_list|(
name|EXTENDED_LEVEL_THRESHOLD
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|UNION
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyStruct class with multiple levels of nesting    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyStructNested
parameter_list|()
throws|throws
name|Throwable
block|{
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|EXTENDED_LEVEL_THRESHOLD
condition|;
name|i
operator|++
control|)
block|{
name|testNestedinArrayAtLevelExtended
argument_list|(
name|i
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Verify the serialized format for given type dtype, when it is nested in an    * array with nestingLevel levels. with extended nesting enabled.    * @param nestingLevel    * @param dtype    * @throws SerDeException    */
specifier|private
name|void
name|testNestedinArrayAtLevelExtended
parameter_list|(
name|int
name|nestingLevel
parameter_list|,
name|ObjectInspector
operator|.
name|Category
name|dtype
parameter_list|)
throws|throws
name|SerDeException
block|{
name|Properties
name|tableProp
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|tableProp
operator|.
name|setProperty
argument_list|(
name|LazySerDeParameters
operator|.
name|SERIALIZATION_EXTEND_NESTING_LEVELS
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|testNestedinArrayAtLevel
argument_list|(
name|nestingLevel
argument_list|,
name|dtype
argument_list|,
name|tableProp
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyStruct class with multiple levels of nesting    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyStructNestedExceedLimit
parameter_list|()
throws|throws
name|Throwable
block|{
name|checkExtendedLimitExceeded
argument_list|(
name|EXTENDED_LEVEL_THRESHOLD
argument_list|,
name|ObjectInspector
operator|.
name|Category
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param nestingLevel    * @param dtype    * @param tableProp    * @throws SerDeException    */
specifier|private
name|void
name|testNestedinArrayAtLevel
parameter_list|(
name|int
name|nestingLevel
parameter_list|,
name|ObjectInspector
operator|.
name|Category
name|dtype
parameter_list|,
name|Properties
name|tableProp
parameter_list|)
throws|throws
name|SerDeException
block|{
comment|//create type with nestingLevel levels of nesting
comment|//set inner schema for dtype
name|String
name|inSchema
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|dtype
condition|)
block|{
case|case
name|LIST
case|:
name|inSchema
operator|=
literal|"array<tinyint>"
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|inSchema
operator|=
literal|"map<string,int>"
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|inSchema
operator|=
literal|"struct<s:string,i:tinyint>"
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|inSchema
operator|=
literal|"uniontype<string,tinyint>"
expr_stmt|;
break|break;
default|default :
name|fail
argument_list|(
literal|"type not supported by test case"
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|schema
init|=
operator|new
name|StringBuilder
argument_list|(
name|inSchema
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nestingLevel
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|schema
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
literal|"array<"
argument_list|)
expr_stmt|;
name|schema
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Testing nesting level "
operator|+
name|nestingLevel
operator|+
literal|". Using schema "
operator|+
name|schema
argument_list|)
expr_stmt|;
comment|// Create the SerDe
name|LazySimpleSerDe
name|serDe
init|=
operator|new
name|LazySimpleSerDe
argument_list|()
decl_stmt|;
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|tableProp
operator|.
name|setProperty
argument_list|(
literal|"columns"
argument_list|,
literal|"narray"
argument_list|)
expr_stmt|;
name|tableProp
operator|.
name|setProperty
argument_list|(
literal|"columns.types"
argument_list|,
name|schema
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|serDe
argument_list|,
name|conf
argument_list|,
name|tableProp
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|LazySerDeParameters
name|serdeParams
init|=
operator|new
name|LazySerDeParameters
argument_list|(
name|conf
argument_list|,
name|tableProp
argument_list|,
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//create the serialized string for type
name|byte
index|[]
name|separators
init|=
name|serdeParams
operator|.
name|getSeparators
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Using separator "
operator|+
operator|(
name|char
operator|)
name|separators
index|[
name|nestingLevel
index|]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|serializedRow
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|dtype
condition|)
block|{
case|case
name|LIST
case|:
name|serializedRow
operator|=
operator|new
name|byte
index|[]
block|{
literal|'8'
block|,
name|separators
index|[
name|nestingLevel
index|]
block|,
literal|'9'
block|}
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|byte
name|kvSep
init|=
name|separators
index|[
name|nestingLevel
operator|+
literal|1
index|]
decl_stmt|;
name|byte
name|kvPairSep
init|=
name|separators
index|[
name|nestingLevel
index|]
decl_stmt|;
name|serializedRow
operator|=
operator|new
name|byte
index|[]
block|{
literal|'1'
block|,
name|kvSep
block|,
literal|'1'
block|,
name|kvPairSep
block|,
literal|'2'
block|,
name|kvSep
block|,
literal|'2'
block|}
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|serializedRow
operator|=
operator|new
name|byte
index|[]
block|{
literal|'8'
block|,
name|separators
index|[
name|nestingLevel
index|]
block|,
literal|'9'
block|}
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|serializedRow
operator|=
operator|new
name|byte
index|[]
block|{
literal|'0'
block|,
name|separators
index|[
name|nestingLevel
index|]
block|,
literal|'9'
block|}
expr_stmt|;
break|break;
default|default :
name|fail
argument_list|(
literal|"type not supported by test case"
argument_list|)
expr_stmt|;
block|}
comment|//create LazyStruct with serialized string with expected separators
name|StructObjectInspector
name|oi
init|=
operator|(
name|StructObjectInspector
operator|)
name|serDe
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|LazyStruct
name|struct
init|=
operator|(
name|LazyStruct
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|struct
argument_list|,
name|serializedRow
argument_list|,
literal|0
argument_list|,
name|serializedRow
operator|.
name|length
argument_list|)
expr_stmt|;
comment|//Get fields out of the lazy struct and check if they match expected
comment|// results
comment|//Get first level array
name|LazyArray
name|array
init|=
operator|(
name|LazyArray
operator|)
name|struct
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//Peel off the n-1 levels to get to the underlying array
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nestingLevel
operator|-
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|array
operator|=
operator|(
name|LazyArray
operator|)
name|array
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|//verify the serialized format for dtype
switch|switch
condition|(
name|dtype
condition|)
block|{
case|case
name|LIST
case|:
name|LazyArray
name|array1
init|=
operator|(
name|LazyArray
operator|)
name|array
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//check elements of the innermost array
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|array1
operator|.
name|getListLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyByte
operator|)
name|array1
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|9
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyByte
operator|)
name|array1
operator|.
name|getListElementObject
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MAP
case|:
name|LazyMap
name|lazyMap
init|=
operator|(
name|LazyMap
operator|)
name|array
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Map
name|map
init|=
name|lazyMap
operator|.
name|getMap
argument_list|()
decl_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|LazyString
argument_list|,
name|LazyInteger
argument_list|>
argument_list|>
name|it
init|=
name|map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Entry
argument_list|<
name|LazyString
argument_list|,
name|LazyInteger
argument_list|>
name|e1
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|e1
operator|.
name|getKey
argument_list|()
operator|.
name|getWritableObject
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'1'
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e1
operator|.
name|getValue
argument_list|()
operator|.
name|getWritableObject
argument_list|()
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Entry
argument_list|<
name|LazyString
argument_list|,
name|LazyInteger
argument_list|>
name|e2
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|e2
operator|.
name|getKey
argument_list|()
operator|.
name|getWritableObject
argument_list|()
argument_list|,
operator|new
name|Text
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'2'
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|e2
operator|.
name|getValue
argument_list|()
operator|.
name|getWritableObject
argument_list|()
argument_list|,
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRUCT
case|:
name|LazyStruct
name|innerStruct
init|=
operator|(
name|LazyStruct
operator|)
name|array
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//check elements of the innermost struct
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|innerStruct
operator|.
name|getFieldsAsList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'8'
block|}
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|innerStruct
operator|.
name|getField
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|9
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyByte
operator|)
name|innerStruct
operator|.
name|getField
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|UNION
case|:
name|LazyUnion
name|lazyUnion
init|=
operator|(
name|LazyUnion
operator|)
name|array
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|//check elements of the innermost union
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'9'
block|}
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|lazyUnion
operator|.
name|getField
argument_list|()
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default :
name|fail
argument_list|(
literal|"type not supported by test case"
argument_list|)
expr_stmt|;
block|}
comment|//test serialization
name|Text
name|serializedText
init|=
operator|(
name|Text
operator|)
name|serDe
operator|.
name|serialize
argument_list|(
name|struct
operator|.
name|getObject
argument_list|()
argument_list|,
name|serDe
operator|.
name|getObjectInspector
argument_list|()
argument_list|)
decl_stmt|;
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|serializedRow
argument_list|,
name|serializedText
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

