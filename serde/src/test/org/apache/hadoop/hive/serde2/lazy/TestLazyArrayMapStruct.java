begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_class
specifier|public
class|class
name|TestLazyArrayMapStruct
extends|extends
name|TestCase
block|{
comment|/**    * Test the LazyArray class.    */
specifier|public
name|void
name|testLazyArray
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
comment|// Array of Byte
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"array<tinyint>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyArray
name|b
init|=
operator|(
name|LazyArray
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|1
block|,
literal|'\\'
block|,
literal|'N'
block|,
literal|1
block|,
literal|'8'
block|}
decl_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getListElementObject
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyByte
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyByte
operator|)
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getListElementObject
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyByte
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|8
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyByte
operator|)
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getListElementObject
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|b
operator|.
name|getList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Array of String
name|oi
operator|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"array<string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'\t'
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|b
operator|=
operator|(
name|LazyArray
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'b'
block|,
literal|'\t'
block|,
literal|'c'
block|,
literal|'\t'
block|,
literal|'\\'
block|,
literal|'N'
block|,
literal|'\t'
block|,
literal|'\t'
block|,
literal|'d'
block|}
expr_stmt|;
comment|// Note: the first and last element of the byte[] are NOT used
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|1
argument_list|,
name|data
operator|.
name|length
operator|-
literal|2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getListElementObject
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"b"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"b"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"c"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"c"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
name|b
operator|.
name|getListElementObject
argument_list|(
literal|2
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getListElementObject
argument_list|(
literal|4
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getList
argument_list|()
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
name|b
operator|.
name|getListElementObject
argument_list|(
literal|5
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|b
operator|.
name|getList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test the LazyMap class.    */
specifier|public
name|void
name|testLazyMap
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
block|{
comment|// Map of Integer to String
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<int,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|1
block|,
operator|(
name|byte
operator|)
literal|2
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyMap
name|b
init|=
operator|(
name|LazyMap
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
literal|'2'
block|,
literal|2
block|,
literal|'d'
block|,
literal|'e'
block|,
literal|'f'
block|,
literal|1
block|,
literal|'-'
block|,
literal|'1'
block|,
literal|2
block|,
literal|'\\'
block|,
literal|'N'
block|,
literal|1
block|,
literal|'0'
block|,
literal|2
block|,
literal|'0'
block|,
literal|1
block|,
literal|'8'
block|,
literal|2
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
decl_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"def"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|8
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|12345
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{2:'def',-1:null,0:'0',8:'abc'}"
operator|.
name|replace
argument_list|(
literal|'\''
argument_list|,
literal|'\"'
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|b
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Map of String to String
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyObjectInspector
argument_list|(
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"map<string,string>"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
literal|'#'
block|,
operator|(
name|byte
operator|)
literal|'\t'
block|}
argument_list|,
literal|0
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyMap
name|b
init|=
operator|(
name|LazyMap
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[]
block|{
literal|'2'
block|,
literal|'\t'
block|,
literal|'d'
block|,
literal|'\t'
block|,
literal|'f'
block|,
literal|'#'
block|,
literal|'2'
block|,
literal|'\t'
block|,
literal|'d'
block|,
literal|'#'
block|,
literal|'-'
block|,
literal|'1'
block|,
literal|'#'
block|,
literal|'0'
block|,
literal|'\t'
block|,
literal|'0'
block|,
literal|'#'
block|,
literal|'8'
block|,
literal|'\t'
block|,
literal|'a'
block|,
literal|'b'
block|,
literal|'c'
block|}
decl_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|b
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"d\tf"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"2"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
operator|(
operator|(
name|LazyString
operator|)
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"8"
argument_list|)
argument_list|)
operator|)
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getMapValueElement
argument_list|(
operator|new
name|Text
argument_list|(
literal|"-"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'2':'d\\tf','2':'d','-1':null,'0':'0','8':'abc'}"
operator|.
name|replace
argument_list|(
literal|'\''
argument_list|,
literal|'\"'
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|b
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test the LazyStruct class.    */
specifier|public
name|void
name|testLazyStruct
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
block|{
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|fieldTypeInfos
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfosFromTypeString
argument_list|(
literal|"int,array<string>,map<string,string>,string"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|)
decl_stmt|;
name|Text
name|nullSequence
init|=
operator|new
name|Text
argument_list|(
literal|"\\N"
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|LazyFactory
operator|.
name|createLazyStructInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldTypeInfos
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|' '
block|,
literal|':'
block|,
literal|'='
block|}
argument_list|,
name|nullSequence
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
decl_stmt|;
name|LazyStruct
name|o
init|=
operator|(
name|LazyStruct
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
decl_stmt|;
name|Text
name|data
decl_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"123 a:b:c d=e:f=g hi"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':123,'b':['a','b','c'],'c':{'d':'e','f':'g'},'d':'hi'}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"123 \\N d=e:f=g \\N"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':123,'b':null,'c':{'d':'e','f':'g'},'d':null}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"\\N a d=\\N:f=g:h no tail"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':null,'b':['a'],'c':{'d':null,'f':'g','h':null},'d':'no'}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"\\N :a:: \\N no tail"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':null,'b':['','a','',''],'c':null,'d':'no'}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"123   "
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':123,'b':[],'c':{},'d':''}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|": : : :"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':null,'b':['',''],'c':{'':null,'':null},'d':':'}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"= = = ="
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':null,'b':['='],'c':{'':''},'d':'='}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
comment|// test LastColumnTakesRest
name|oi
operator|=
name|LazyFactory
operator|.
name|createLazyStructInspector
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|)
argument_list|,
name|fieldTypeInfos
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|' '
block|,
literal|':'
block|,
literal|'='
block|}
argument_list|,
name|nullSequence
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
expr_stmt|;
name|o
operator|=
operator|(
name|LazyStruct
operator|)
name|LazyFactory
operator|.
name|createLazyObject
argument_list|(
name|oi
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|Text
argument_list|(
literal|"\\N a d=\\N:f=g:h has tail"
argument_list|)
expr_stmt|;
name|TestLazyPrimitive
operator|.
name|initLazyObject
argument_list|(
name|o
argument_list|,
name|data
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{'a':null,'b':['a'],'c':{'d':null,'f':'g','h':null},'d':'has tail'}"
operator|.
name|replace
argument_list|(
literal|"'"
argument_list|,
literal|"\""
argument_list|)
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|o
argument_list|,
name|oi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

