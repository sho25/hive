begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|RandomTypeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|MyTestPrimitiveClass
operator|.
name|ExtraTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableBooleanObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableByteObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableDateObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableDoubleObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableFloatObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveCharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveIntervalDayTimeObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveIntervalYearMonthObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableIntObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableLongObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableShortObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableTimestampObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|jdi
operator|.
name|PrimitiveType
import|;
end_import

begin_class
specifier|public
class|class
name|MyTestClass
block|{
specifier|public
name|Boolean
name|myBool
decl_stmt|;
specifier|public
name|Byte
name|myByte
decl_stmt|;
specifier|public
name|Short
name|myShort
decl_stmt|;
specifier|public
name|Integer
name|myInt
decl_stmt|;
specifier|public
name|Long
name|myLong
decl_stmt|;
specifier|public
name|Float
name|myFloat
decl_stmt|;
specifier|public
name|Double
name|myDouble
decl_stmt|;
specifier|public
name|String
name|myString
decl_stmt|;
specifier|public
name|HiveChar
name|myHiveChar
decl_stmt|;
specifier|public
name|HiveVarchar
name|myHiveVarchar
decl_stmt|;
specifier|public
name|byte
index|[]
name|myBinary
decl_stmt|;
specifier|public
name|HiveDecimal
name|myDecimal
decl_stmt|;
specifier|public
name|Date
name|myDate
decl_stmt|;
specifier|public
name|Timestamp
name|myTimestamp
decl_stmt|;
specifier|public
name|HiveIntervalYearMonth
name|myIntervalYearMonth
decl_stmt|;
specifier|public
name|HiveIntervalDayTime
name|myIntervalDayTime
decl_stmt|;
comment|// Add more complex types.
specifier|public
name|MyTestInnerStruct
name|myStruct
decl_stmt|;
specifier|public
name|List
argument_list|<
name|Integer
argument_list|>
name|myList
decl_stmt|;
specifier|public
name|MyTestClass
parameter_list|()
block|{     }
specifier|public
specifier|final
specifier|static
name|int
name|fieldCount
init|=
literal|18
decl_stmt|;
specifier|public
name|int
name|randomFill
parameter_list|(
name|Random
name|r
parameter_list|,
name|ExtraTypeInfo
name|extraTypeInfo
parameter_list|)
block|{
name|int
name|randField
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|MyTestClass
operator|.
name|fieldCount
argument_list|)
decl_stmt|;
name|int
name|field
init|=
literal|0
decl_stmt|;
name|myBool
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
operator|(
name|r
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|)
operator|==
literal|1
operator|)
expr_stmt|;
name|myByte
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|myShort
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|myInt
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|myLong
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|myFloat
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextFloat
argument_list|()
operator|*
literal|10
operator|-
literal|5
argument_list|)
expr_stmt|;
name|myDouble
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|Double
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
operator|*
literal|10
operator|-
literal|5
argument_list|)
expr_stmt|;
name|myString
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|MyTestPrimitiveClass
operator|.
name|getRandString
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|myHiveChar
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|MyTestPrimitiveClass
operator|.
name|getRandHiveChar
argument_list|(
name|r
argument_list|,
name|extraTypeInfo
argument_list|)
expr_stmt|;
name|myHiveVarchar
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|MyTestPrimitiveClass
operator|.
name|getRandHiveVarchar
argument_list|(
name|r
argument_list|,
name|extraTypeInfo
argument_list|)
expr_stmt|;
name|myBinary
operator|=
name|MyTestPrimitiveClass
operator|.
name|getRandBinary
argument_list|(
name|r
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|myDecimal
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|MyTestPrimitiveClass
operator|.
name|getRandHiveDecimal
argument_list|(
name|r
argument_list|,
name|extraTypeInfo
argument_list|)
expr_stmt|;
name|myDate
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|MyTestPrimitiveClass
operator|.
name|getRandDate
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|myTimestamp
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|RandomTypeUtil
operator|.
name|getRandTimestamp
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|myIntervalYearMonth
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|MyTestPrimitiveClass
operator|.
name|getRandIntervalYearMonth
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|myIntervalDayTime
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|MyTestPrimitiveClass
operator|.
name|getRandIntervalDayTime
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|myStruct
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
operator|new
name|MyTestInnerStruct
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|-
literal|2
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|-
literal|2
argument_list|)
expr_stmt|;
name|myList
operator|=
operator|(
name|randField
operator|==
name|field
operator|++
operator|)
condition|?
literal|null
else|:
name|getRandIntegerArray
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|Integer
argument_list|>
name|getRandIntegerArray
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|int
name|length
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|128
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|nonRandomFill
parameter_list|(
name|int
name|idx
parameter_list|)
block|{
name|myByte
operator|=
operator|(
name|Byte
operator|)
name|getNonRandValue
argument_list|(
name|nrByte
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myShort
operator|=
operator|(
name|Short
operator|)
name|getNonRandValue
argument_list|(
name|nrShort
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myInt
operator|=
operator|(
name|Integer
operator|)
name|getNonRandValue
argument_list|(
name|nrInt
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myLong
operator|=
operator|(
name|Long
operator|)
name|getNonRandValue
argument_list|(
name|nrLong
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myFloat
operator|=
operator|(
name|Float
operator|)
name|getNonRandValue
argument_list|(
name|nrFloat
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myDouble
operator|=
operator|(
name|Double
operator|)
name|getNonRandValue
argument_list|(
name|nrDouble
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myString
operator|=
operator|(
name|String
operator|)
name|getNonRandValue
argument_list|(
name|nrString
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myHiveChar
operator|=
operator|new
name|HiveChar
argument_list|(
name|myString
argument_list|,
name|myString
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|myHiveVarchar
operator|=
operator|new
name|HiveVarchar
argument_list|(
name|myString
argument_list|,
name|myString
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|myDecimal
operator|=
operator|(
name|HiveDecimal
operator|)
name|getNonRandValue
argument_list|(
name|nrDecimal
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myDate
operator|=
operator|(
name|Date
operator|)
name|getNonRandValue
argument_list|(
name|nrDate
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myIntervalYearMonth
operator|=
operator|(
name|HiveIntervalYearMonth
operator|)
name|getNonRandValue
argument_list|(
name|nrIntervalYearMonth
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myIntervalDayTime
operator|=
operator|(
name|HiveIntervalDayTime
operator|)
name|getNonRandValue
argument_list|(
name|nrIntervalDayTime
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myStruct
operator|=
literal|null
expr_stmt|;
name|myList
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
specifier|static
name|Object
name|getNonRandValue
parameter_list|(
name|Object
index|[]
name|nrArray
parameter_list|,
name|int
name|index
parameter_list|)
block|{
return|return
name|nrArray
index|[
name|index
operator|%
name|nrArray
operator|.
name|length
index|]
return|;
block|}
specifier|static
name|Object
index|[]
name|nrByte
init|=
block|{
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
block|}
decl_stmt|;
specifier|static
name|Object
index|[]
name|nrShort
init|=
block|{
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
block|}
decl_stmt|;
specifier|static
name|Object
index|[]
name|nrInt
init|=
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
block|}
decl_stmt|;
specifier|static
name|Object
index|[]
name|nrLong
init|=
block|{
name|Long
operator|.
name|valueOf
argument_list|(
literal|1
argument_list|)
block|}
decl_stmt|;
specifier|static
name|Object
index|[]
name|nrFloat
init|=
block|{
name|Float
operator|.
name|valueOf
argument_list|(
literal|1.0f
argument_list|)
block|}
decl_stmt|;
specifier|static
name|Object
index|[]
name|nrDouble
init|=
block|{
name|Double
operator|.
name|valueOf
argument_list|(
literal|1.0
argument_list|)
block|}
decl_stmt|;
specifier|static
name|Object
index|[]
name|nrDecimal
init|=
block|{
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"100"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"10"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.1"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.01"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.001"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-100"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-10"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-1"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-0.1"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-0.01"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-0.001"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"12345678900"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1234567890"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"123456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"12345678.9"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1234567.89"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"123456.789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"12345.6789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1234.56789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"123.456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"1.23456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.123456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.0123456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.00123456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"0.000123456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-12345678900"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-1234567890"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-123456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-12345678.9"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-1234567.89"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-123456.789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-12345.6789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-1234.56789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-123.456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-1.23456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-0.123456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-0.0123456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-0.00123456789"
argument_list|)
block|,
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"-0.000123456789"
argument_list|)
block|,     }
decl_stmt|;
specifier|static
name|Object
index|[]
name|nrString
init|=
block|{
literal|"abcdefg"
block|}
decl_stmt|;
specifier|static
name|Object
index|[]
name|nrDate
init|=
block|{
name|Date
operator|.
name|valueOf
argument_list|(
literal|"2001-01-01"
argument_list|)
block|}
decl_stmt|;
specifier|static
name|Object
index|[]
name|nrIntervalYearMonth
init|=
block|{
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"1-0"
argument_list|)
block|}
decl_stmt|;
specifier|static
name|Object
index|[]
name|nrIntervalDayTime
init|=
block|{
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
literal|"1 0:0:0"
argument_list|)
block|}
decl_stmt|;
specifier|public
specifier|static
name|void
name|nonRandomRowFill
parameter_list|(
name|Object
index|[]
index|[]
name|rows
parameter_list|,
name|PrimitiveCategory
index|[]
name|primitiveCategories
parameter_list|)
block|{
name|int
name|minCount
init|=
name|Math
operator|.
name|min
argument_list|(
name|rows
operator|.
name|length
argument_list|,
name|nrDecimal
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|minCount
condition|;
name|i
operator|++
control|)
block|{
name|Object
index|[]
name|row
init|=
name|rows
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|primitiveCategories
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|Object
name|object
init|=
name|row
index|[
name|c
index|]
decl_stmt|;
comment|// Current value.
switch|switch
condition|(
name|primitiveCategories
index|[
name|c
index|]
condition|)
block|{
case|case
name|BOOLEAN
case|:
comment|// Use current for now.
break|break;
case|case
name|BYTE
case|:
name|object
operator|=
name|nrByte
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|object
operator|=
name|nrShort
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|object
operator|=
name|nrInt
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|object
operator|=
name|nrLong
expr_stmt|;
break|break;
case|case
name|DATE
case|:
name|object
operator|=
name|nrDate
expr_stmt|;
break|break;
case|case
name|FLOAT
case|:
name|object
operator|=
name|nrFloat
expr_stmt|;
break|break;
case|case
name|DOUBLE
case|:
name|object
operator|=
name|nrDouble
expr_stmt|;
break|break;
case|case
name|STRING
case|:
name|object
operator|=
name|nrString
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
comment|// Use current for now.
break|break;
case|case
name|VARCHAR
case|:
comment|// Use current for now.
break|break;
case|case
name|BINARY
case|:
comment|// Use current for now.
break|break;
case|case
name|TIMESTAMP
case|:
comment|// Use current for now.
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
name|object
operator|=
name|nrIntervalYearMonth
expr_stmt|;
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
name|object
operator|=
name|nrIntervalDayTime
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|object
operator|=
name|nrDecimal
index|[
name|i
index|]
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unknown primitive category "
operator|+
name|primitiveCategories
index|[
name|c
index|]
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

