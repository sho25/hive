begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|server
operator|.
name|UID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericData
import|;
end_import

begin_class
class|class
name|Utils
block|{
comment|// Force Avro to serialize and de-serialize the record to make sure it has a
comment|// chance to muck with the bytes and we're working against real Avro data.
specifier|public
specifier|static
name|AvroGenericRecordWritable
name|serializeAndDeserializeRecord
parameter_list|(
name|GenericData
operator|.
name|Record
name|record
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|serializeAndDeserializeRecord
argument_list|(
name|record
argument_list|,
name|record
operator|.
name|getSchema
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|AvroGenericRecordWritable
name|serializeAndDeserializeRecord
parameter_list|(
name|GenericData
operator|.
name|Record
name|record
parameter_list|,
name|Schema
name|fileSchema
parameter_list|)
throws|throws
name|IOException
block|{
name|AvroGenericRecordWritable
name|garw
init|=
operator|new
name|AvroGenericRecordWritable
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|garw
operator|.
name|setRecordReaderID
argument_list|(
operator|new
name|UID
argument_list|()
argument_list|)
expr_stmt|;
comment|// Assuming file schema is the same as record schema for testing purpose.
name|garw
operator|.
name|setFileSchema
argument_list|(
name|fileSchema
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|daos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|garw
operator|.
name|write
argument_list|(
name|daos
argument_list|)
expr_stmt|;
name|ByteArrayInputStream
name|bais
init|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
decl_stmt|;
name|DataInputStream
name|dais
init|=
operator|new
name|DataInputStream
argument_list|(
name|bais
argument_list|)
decl_stmt|;
name|AvroGenericRecordWritable
name|garw2
init|=
operator|new
name|AvroGenericRecordWritable
argument_list|()
decl_stmt|;
name|garw2
operator|.
name|setRecordReaderID
argument_list|(
operator|new
name|UID
argument_list|()
argument_list|)
expr_stmt|;
name|garw2
operator|.
name|readFields
argument_list|(
name|dais
argument_list|)
expr_stmt|;
return|return
name|garw2
return|;
block|}
block|}
end_class

end_unit

