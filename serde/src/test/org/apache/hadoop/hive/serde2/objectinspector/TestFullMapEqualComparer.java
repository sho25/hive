begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
import|;
end_import

begin_class
specifier|public
class|class
name|TestFullMapEqualComparer
extends|extends
name|TestCase
block|{
specifier|public
specifier|static
class|class
name|IntegerIntegerMapHolder
block|{
name|Map
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
name|mMap
decl_stmt|;
specifier|public
name|IntegerIntegerMapHolder
parameter_list|()
block|{
name|mMap
operator|=
operator|new
name|TreeMap
argument_list|<
name|Integer
argument_list|,
name|Integer
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testAntiSymmetry
parameter_list|()
block|{
name|IntegerIntegerMapHolder
name|o1
init|=
operator|new
name|IntegerIntegerMapHolder
argument_list|()
decl_stmt|;
name|IntegerIntegerMapHolder
name|o2
init|=
operator|new
name|IntegerIntegerMapHolder
argument_list|()
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|IntegerIntegerMapHolder
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|o1
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|o2
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|99
argument_list|)
expr_stmt|;
block|{
comment|// not anti-symmetric
name|int
name|rc12
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi
argument_list|,
name|o2
argument_list|,
name|oi
argument_list|,
operator|new
name|SimpleMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc12
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|rc21
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o2
argument_list|,
name|oi
argument_list|,
name|o1
argument_list|,
name|oi
argument_list|,
operator|new
name|SimpleMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc21
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
comment|// not anti-symmetric
name|int
name|rc12
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi
argument_list|,
name|o2
argument_list|,
name|oi
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc12
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|rc21
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o2
argument_list|,
name|oi
argument_list|,
name|o1
argument_list|,
name|oi
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc21
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
comment|// anti-symmetric
name|int
name|rc12
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi
argument_list|,
name|o2
argument_list|,
name|oi
argument_list|,
operator|new
name|FullMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc12
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|rc21
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o2
argument_list|,
name|oi
argument_list|,
name|o1
argument_list|,
name|oi
argument_list|,
operator|new
name|FullMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc21
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testTransitivity
parameter_list|()
block|{
name|IntegerIntegerMapHolder
name|o1
init|=
operator|new
name|IntegerIntegerMapHolder
argument_list|()
decl_stmt|;
name|IntegerIntegerMapHolder
name|o2
init|=
operator|new
name|IntegerIntegerMapHolder
argument_list|()
decl_stmt|;
name|IntegerIntegerMapHolder
name|o3
init|=
operator|new
name|IntegerIntegerMapHolder
argument_list|()
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|IntegerIntegerMapHolder
operator|.
name|class
argument_list|,
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|o1
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|o1
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|99
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|o2
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|o2
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|99
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|o3
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|o3
operator|.
name|mMap
operator|.
name|put
argument_list|(
literal|1
argument_list|,
literal|99
argument_list|)
expr_stmt|;
block|{
comment|// non-transitive
name|int
name|rc12
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi
argument_list|,
name|o2
argument_list|,
name|oi
argument_list|,
operator|new
name|SimpleMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc12
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|rc23
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o2
argument_list|,
name|oi
argument_list|,
name|o3
argument_list|,
name|oi
argument_list|,
operator|new
name|SimpleMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc23
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|rc13
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi
argument_list|,
name|o3
argument_list|,
name|oi
argument_list|,
operator|new
name|SimpleMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc13
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
comment|// non-transitive
name|int
name|rc12
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi
argument_list|,
name|o2
argument_list|,
name|oi
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc12
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|rc23
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o2
argument_list|,
name|oi
argument_list|,
name|o3
argument_list|,
name|oi
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc23
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|rc13
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi
argument_list|,
name|o3
argument_list|,
name|oi
argument_list|,
operator|new
name|CrossMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc13
operator|<
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
comment|// transitive
name|int
name|rc12
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi
argument_list|,
name|o2
argument_list|,
name|oi
argument_list|,
operator|new
name|FullMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc12
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|rc23
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o2
argument_list|,
name|oi
argument_list|,
name|o3
argument_list|,
name|oi
argument_list|,
operator|new
name|FullMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc23
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|rc13
init|=
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|o1
argument_list|,
name|oi
argument_list|,
name|o3
argument_list|,
name|oi
argument_list|,
operator|new
name|FullMapEqualComparer
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rc13
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

