begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Resources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|ListTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|MapTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|StructTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|TestTypeInfoToSchema
block|{
specifier|private
specifier|static
name|Logger
name|LOGGER
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|TestTypeInfoToSchema
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|COLUMN_NAMES
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"testCol"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|STRING
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"string"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|INT
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"int"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|BOOLEAN
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"boolean"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|LONG
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"bigint"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|FLOAT
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"float"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|DOUBLE
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"double"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|BINARY
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"binary"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|BYTE
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"tinyint"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|SHORT
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"smallint"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|VOID
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"void"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PRECISION
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SCALE
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|DECIMAL
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
operator|new
name|DecimalTypeInfo
argument_list|(
name|PRECISION
argument_list|,
name|SCALE
argument_list|)
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|CHAR_LEN
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|CHAR
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
operator|new
name|CharTypeInfo
argument_list|(
name|CHAR_LEN
argument_list|)
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TypeInfo
name|VARCHAR
init|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
operator|new
name|VarcharTypeInfo
argument_list|(
name|CHAR_LEN
argument_list|)
operator|.
name|getQualifiedName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|TypeInfoToSchema
name|typeInfoToSchema
decl_stmt|;
specifier|private
name|String
name|getAvroSchemaString
parameter_list|(
name|TypeInfo
name|columnType
parameter_list|)
block|{
return|return
name|typeInfoToSchema
operator|.
name|convert
argument_list|(
name|COLUMN_NAMES
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|columnType
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
argument_list|)
argument_list|,
literal|"org.apache.hive.avro.testing"
argument_list|,
literal|"avrotest"
argument_list|,
literal|"This is to test hive-avro"
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|genSchemaWithoutNull
parameter_list|(
name|String
name|specificSchema
parameter_list|)
block|{
return|return
literal|"{"
operator|+
literal|"\"type\":\"record\","
operator|+
literal|"\"name\":\"avrotest\","
operator|+
literal|"\"namespace\":\"org.apache.hive.avro.testing\","
operator|+
literal|"\"doc\":\"This is to test hive-avro\","
operator|+
literal|"\"fields\":["
operator|+
literal|"{\"name\":\"testCol\","
operator|+
literal|"\"type\":"
operator|+
name|specificSchema
operator|+
literal|","
operator|+
literal|"\"doc\":\"\"}"
operator|+
literal|"]}"
return|;
block|}
specifier|private
name|String
name|genSchema
parameter_list|(
name|String
name|specificSchema
parameter_list|)
block|{
name|specificSchema
operator|=
literal|"[\"null\","
operator|+
name|specificSchema
operator|+
literal|"]"
expr_stmt|;
return|return
name|genSchemaWithoutNull
argument_list|(
name|specificSchema
argument_list|)
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|typeInfoToSchema
operator|=
operator|new
name|TypeInfoToSchema
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroStringSchema
parameter_list|()
block|{
specifier|final
name|String
name|specificSchema
init|=
literal|"\"string\""
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for string's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroBinarySchema
parameter_list|()
block|{
specifier|final
name|String
name|specificSchema
init|=
literal|"\"bytes\""
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for binary's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|BINARY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroBytesSchema
parameter_list|()
block|{
specifier|final
name|String
name|specificSchema
init|=
literal|"\"int\""
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for bytes's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|BYTE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroShortSchema
parameter_list|()
block|{
specifier|final
name|String
name|specificSchema
init|=
literal|"\"int\""
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for short's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|SHORT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroIntSchema
parameter_list|()
block|{
specifier|final
name|String
name|specificSchema
init|=
literal|"\"int\""
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for int's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|INT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroLongSchema
parameter_list|()
block|{
specifier|final
name|String
name|specificSchema
init|=
literal|"\"long\""
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for long's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|LONG
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroFloatSchema
parameter_list|()
block|{
specifier|final
name|String
name|specificSchema
init|=
literal|"\"float\""
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for float's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|FLOAT
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroDoubleSchema
parameter_list|()
block|{
specifier|final
name|String
name|specificSchema
init|=
literal|"\"double\""
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for double's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|DOUBLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroBooleanSchema
parameter_list|()
block|{
specifier|final
name|String
name|specificSchema
init|=
literal|"\"boolean\""
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for boolean's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|BOOLEAN
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroVoidSchema
parameter_list|()
block|{
specifier|final
name|String
name|specificSchema
init|=
literal|"\"null\""
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchemaWithoutNull
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for void's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|VOID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroDecimalSchema
parameter_list|()
block|{
specifier|final
name|String
name|specificSchema
init|=
literal|"{"
operator|+
literal|"\"type\":\"bytes\","
operator|+
literal|"\"logicalType\":\"decimal\","
operator|+
literal|"\"precision\":"
operator|+
name|PRECISION
operator|+
literal|","
operator|+
literal|"\"scale\":"
operator|+
name|SCALE
operator|+
literal|"}"
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for decimal's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|DECIMAL
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroListSchema
parameter_list|()
block|{
name|ListTypeInfo
name|listTypeInfo
init|=
operator|new
name|ListTypeInfo
argument_list|()
decl_stmt|;
name|listTypeInfo
operator|.
name|setListElementTypeInfo
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
specifier|final
name|String
name|specificSchema
init|=
name|Schema
operator|.
name|createArray
argument_list|(
name|Schema
operator|.
name|createUnion
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|NULL
argument_list|)
argument_list|,
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for list's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|listTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroMapSchema
parameter_list|()
block|{
name|MapTypeInfo
name|mapTypeInfo
init|=
operator|new
name|MapTypeInfo
argument_list|()
decl_stmt|;
name|mapTypeInfo
operator|.
name|setMapKeyTypeInfo
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|mapTypeInfo
operator|.
name|setMapValueTypeInfo
argument_list|(
name|INT
argument_list|)
expr_stmt|;
specifier|final
name|String
name|specificSchema
init|=
name|Schema
operator|.
name|createMap
argument_list|(
name|Schema
operator|.
name|createUnion
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|NULL
argument_list|)
argument_list|,
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for map's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|mapTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroUnionSchema
parameter_list|()
block|{
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|new
name|UnionTypeInfo
argument_list|()
decl_stmt|;
name|unionTypeInfo
operator|.
name|setAllUnionObjectTypeInfos
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|INT
argument_list|,
name|FLOAT
argument_list|,
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|specificSchema
init|=
name|Schema
operator|.
name|createUnion
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|NULL
argument_list|)
argument_list|,
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|,
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|,
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchemaWithoutNull
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for union's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|unionTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroUnionSchemaOfNull
parameter_list|()
block|{
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|new
name|UnionTypeInfo
argument_list|()
decl_stmt|;
name|unionTypeInfo
operator|.
name|setAllUnionObjectTypeInfos
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|VOID
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|specificSchema
init|=
name|Schema
operator|.
name|createUnion
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|NULL
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchemaWithoutNull
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for union's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|unionTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroUnionSchemaOfOne
parameter_list|()
block|{
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|new
name|UnionTypeInfo
argument_list|()
decl_stmt|;
name|unionTypeInfo
operator|.
name|setAllUnionObjectTypeInfos
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|specificSchema
init|=
name|Schema
operator|.
name|createUnion
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|NULL
argument_list|)
argument_list|,
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchemaWithoutNull
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for union's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|unionTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroUnionSchemaWithNull
parameter_list|()
block|{
name|UnionTypeInfo
name|unionTypeInfo
init|=
operator|new
name|UnionTypeInfo
argument_list|()
decl_stmt|;
name|unionTypeInfo
operator|.
name|setAllUnionObjectTypeInfos
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|INT
argument_list|,
name|FLOAT
argument_list|,
name|STRING
argument_list|,
name|VOID
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|specificSchema
init|=
name|Schema
operator|.
name|createUnion
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|NULL
argument_list|)
argument_list|,
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|INT
argument_list|)
argument_list|,
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|FLOAT
argument_list|)
argument_list|,
name|Schema
operator|.
name|create
argument_list|(
name|Schema
operator|.
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchemaWithoutNull
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for union's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|unionTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroStructSchema
parameter_list|()
throws|throws
name|IOException
block|{
name|StructTypeInfo
name|structTypeInfo
init|=
operator|new
name|StructTypeInfo
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field1"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field2"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field3"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field4"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field5"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field6"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field7"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field8"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field9"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field10"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field11"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field12"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field13"
argument_list|)
expr_stmt|;
name|structTypeInfo
operator|.
name|setAllStructFieldNames
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|CHAR
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|VARCHAR
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|BINARY
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|BYTE
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|SHORT
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|INT
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|LONG
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|FLOAT
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|DOUBLE
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|BOOLEAN
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|DECIMAL
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|VOID
argument_list|)
expr_stmt|;
name|structTypeInfo
operator|.
name|setAllStructFieldTypeInfos
argument_list|(
name|typeInfos
argument_list|)
expr_stmt|;
name|LOGGER
operator|.
name|info
argument_list|(
literal|"structTypeInfo is "
operator|+
name|structTypeInfo
argument_list|)
expr_stmt|;
specifier|final
name|String
name|specificSchema
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|Resources
operator|.
name|getResource
argument_list|(
literal|"avro-struct.avsc"
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for struct's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|structTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createAvroNestedStructSchema
parameter_list|()
throws|throws
name|IOException
block|{
name|StructTypeInfo
name|structTypeInfo
init|=
operator|new
name|StructTypeInfo
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field1"
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
literal|"field2"
argument_list|)
expr_stmt|;
name|structTypeInfo
operator|.
name|setAllStructFieldNames
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|typeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|INT
argument_list|)
expr_stmt|;
name|structTypeInfo
operator|.
name|setAllStructFieldTypeInfos
argument_list|(
name|typeInfos
argument_list|)
expr_stmt|;
name|StructTypeInfo
name|superStructTypeInfo
init|=
operator|new
name|StructTypeInfo
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|superNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|superNames
operator|.
name|add
argument_list|(
literal|"superfield1"
argument_list|)
expr_stmt|;
name|superNames
operator|.
name|add
argument_list|(
literal|"superfield2"
argument_list|)
expr_stmt|;
name|superStructTypeInfo
operator|.
name|setAllStructFieldNames
argument_list|(
name|superNames
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
name|superTypeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|TypeInfo
argument_list|>
argument_list|()
decl_stmt|;
name|superTypeInfos
operator|.
name|add
argument_list|(
name|STRING
argument_list|)
expr_stmt|;
name|superTypeInfos
operator|.
name|add
argument_list|(
name|structTypeInfo
argument_list|)
expr_stmt|;
name|superStructTypeInfo
operator|.
name|setAllStructFieldTypeInfos
argument_list|(
name|superTypeInfos
argument_list|)
expr_stmt|;
specifier|final
name|String
name|specificSchema
init|=
name|IOUtils
operator|.
name|toString
argument_list|(
name|Resources
operator|.
name|getResource
argument_list|(
literal|"avro-nested-struct.avsc"
argument_list|)
operator|.
name|openStream
argument_list|()
argument_list|)
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|String
name|expectedSchema
init|=
name|genSchema
argument_list|(
name|specificSchema
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Test for nested struct's avro schema failed"
argument_list|,
name|expectedSchema
argument_list|,
name|getAvroSchemaString
argument_list|(
name|superStructTypeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

