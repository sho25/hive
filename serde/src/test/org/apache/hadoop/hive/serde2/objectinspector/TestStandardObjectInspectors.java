begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritableV2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardUnionObjectInspector
operator|.
name|StandardUnion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|UnionTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|NullWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestStandardObjectInspectors.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestStandardObjectInspectors
block|{
name|void
name|doTestStandardPrimitiveObjectInspector
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|writableClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|javaClass
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
name|PrimitiveObjectInspector
name|oi1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveWritableClass
argument_list|(
name|writableClass
argument_list|)
operator|.
name|primitiveCategory
argument_list|)
decl_stmt|;
name|PrimitiveObjectInspector
name|oi2
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveWritableClass
argument_list|(
name|writableClass
argument_list|)
operator|.
name|primitiveCategory
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|oi1
argument_list|,
name|oi2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|,
name|oi1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writableClass
argument_list|,
name|oi1
operator|.
name|getPrimitiveWritableClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|javaClass
argument_list|,
name|oi1
operator|.
name|getJavaPrimitiveClass
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cannot create NullWritable instances
if|if
condition|(
operator|!
name|NullWritable
operator|.
name|class
operator|.
name|equals
argument_list|(
name|writableClass
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
name|writableClass
argument_list|,
name|oi1
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|writableClass
operator|.
name|newInstance
argument_list|()
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|javaClass
argument_list|,
name|oi1
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|writableClass
operator|.
name|newInstance
argument_list|()
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeNameFromPrimitiveWritable
argument_list|(
name|writableClass
argument_list|)
argument_list|,
name|oi1
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStandardPrimitiveObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|,
name|Void
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|BooleanWritable
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|ByteWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|ShortWritable
operator|.
name|class
argument_list|,
name|Short
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|FloatWritable
operator|.
name|class
argument_list|,
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|DoubleWritable
operator|.
name|class
argument_list|,
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|Text
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|TimestampWritableV2
operator|.
name|class
argument_list|,
name|Timestamp
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
name|void
name|doTestJavaPrimitiveObjectInspector
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|writableClass
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|javaClass
parameter_list|,
name|Object
name|javaObject
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
name|PrimitiveObjectInspector
name|oi1
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveJavaClass
argument_list|(
name|javaClass
argument_list|)
operator|.
name|primitiveCategory
argument_list|)
decl_stmt|;
name|PrimitiveObjectInspector
name|oi2
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeEntryFromPrimitiveJavaClass
argument_list|(
name|javaClass
argument_list|)
operator|.
name|primitiveCategory
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|oi1
argument_list|,
name|oi2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|,
name|oi1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|javaClass
argument_list|,
name|oi1
operator|.
name|getJavaPrimitiveClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writableClass
argument_list|,
name|oi1
operator|.
name|getPrimitiveWritableClass
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|javaObject
operator|!=
literal|null
condition|)
block|{
name|assertEquals
argument_list|(
name|javaClass
argument_list|,
name|oi1
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|javaObject
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|writableClass
argument_list|,
name|oi1
operator|.
name|getPrimitiveWritableObject
argument_list|(
name|javaObject
argument_list|)
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|javaClass
operator|==
name|HiveVarchar
operator|.
name|class
condition|)
block|{
name|assertEquals
argument_list|(
literal|"varchar(65535)"
argument_list|,
name|oi1
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|javaClass
operator|==
name|HiveChar
operator|.
name|class
condition|)
block|{
name|assertEquals
argument_list|(
literal|"char(255)"
argument_list|,
name|oi1
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|PrimitiveObjectInspectorUtils
operator|.
name|getTypeNameFromPrimitiveJava
argument_list|(
name|javaClass
argument_list|)
argument_list|,
name|oi1
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testJavaPrimitiveObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|doTestJavaPrimitiveObjectInspector
argument_list|(
name|NullWritable
operator|.
name|class
argument_list|,
name|Void
operator|.
name|class
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|doTestJavaPrimitiveObjectInspector
argument_list|(
name|BooleanWritable
operator|.
name|class
argument_list|,
name|Boolean
operator|.
name|class
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|doTestJavaPrimitiveObjectInspector
argument_list|(
name|ByteWritable
operator|.
name|class
argument_list|,
name|Byte
operator|.
name|class
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|doTestJavaPrimitiveObjectInspector
argument_list|(
name|ShortWritable
operator|.
name|class
argument_list|,
name|Short
operator|.
name|class
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
expr_stmt|;
name|doTestJavaPrimitiveObjectInspector
argument_list|(
name|IntWritable
operator|.
name|class
argument_list|,
name|Integer
operator|.
name|class
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|doTestJavaPrimitiveObjectInspector
argument_list|(
name|LongWritable
operator|.
name|class
argument_list|,
name|Long
operator|.
name|class
argument_list|,
operator|(
name|long
operator|)
literal|1
argument_list|)
expr_stmt|;
name|doTestJavaPrimitiveObjectInspector
argument_list|(
name|FloatWritable
operator|.
name|class
argument_list|,
name|Float
operator|.
name|class
argument_list|,
operator|(
name|float
operator|)
literal|1
argument_list|)
expr_stmt|;
name|doTestJavaPrimitiveObjectInspector
argument_list|(
name|DoubleWritable
operator|.
name|class
argument_list|,
name|Double
operator|.
name|class
argument_list|,
operator|(
name|double
operator|)
literal|1
argument_list|)
expr_stmt|;
name|doTestJavaPrimitiveObjectInspector
argument_list|(
name|Text
operator|.
name|class
argument_list|,
name|String
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|doTestJavaPrimitiveObjectInspector
argument_list|(
name|HiveVarcharWritable
operator|.
name|class
argument_list|,
name|HiveVarchar
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|doTestJavaPrimitiveObjectInspector
argument_list|(
name|HiveCharWritable
operator|.
name|class
argument_list|,
name|HiveChar
operator|.
name|class
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|doTestJavaPrimitiveObjectInspector
argument_list|(
name|BytesWritable
operator|.
name|class
argument_list|,
name|byte
index|[]
operator|.
expr|class
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'3'
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStandardListObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|StandardListObjectInspector
name|loi1
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|)
decl_stmt|;
name|StandardListObjectInspector
name|loi2
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|loi1
argument_list|,
name|loi2
argument_list|)
expr_stmt|;
comment|// metadata
name|assertEquals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|,
name|loi1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|,
name|loi1
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
comment|// null
name|assertNull
argument_list|(
literal|"loi1.getList(null) should be null."
argument_list|,
name|loi1
operator|.
name|getList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"loi1.getListLength(null) should be -1."
argument_list|,
name|loi1
operator|.
name|getListLength
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"loi1.getListElement(null, 0) should be null"
argument_list|,
name|loi1
operator|.
name|getListElement
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"loi1.getListElement(null, 100) should be null"
argument_list|,
name|loi1
operator|.
name|getListElement
argument_list|(
literal|null
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// ArrayList
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|loi1
operator|.
name|getList
argument_list|(
name|list
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|loi1
operator|.
name|getListLength
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loi1
operator|.
name|getListElement
argument_list|(
name|list
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|loi1
operator|.
name|getListElement
argument_list|(
name|list
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|loi1
operator|.
name|getListElement
argument_list|(
name|list
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|loi1
operator|.
name|getListElement
argument_list|(
name|list
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
comment|// Settable
name|Object
name|list4
init|=
name|loi1
operator|.
name|create
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|loi1
operator|.
name|set
argument_list|(
name|list4
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|loi1
operator|.
name|set
argument_list|(
name|list4
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|loi1
operator|.
name|set
argument_list|(
name|list4
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|loi1
operator|.
name|set
argument_list|(
name|list4
argument_list|,
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|list4
argument_list|)
expr_stmt|;
name|loi1
operator|.
name|resize
argument_list|(
name|list4
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|loi1
operator|.
name|set
argument_list|(
name|list4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|loi1
operator|.
name|resize
argument_list|(
name|list4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|list
argument_list|,
name|list4
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testStandardMapObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|StandardMapObjectInspector
name|moi1
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|)
decl_stmt|;
name|StandardMapObjectInspector
name|moi2
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|moi1
argument_list|,
name|moi2
argument_list|)
expr_stmt|;
comment|// metadata
name|assertEquals
argument_list|(
name|Category
operator|.
name|MAP
argument_list|,
name|moi1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|moi1
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|moi2
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|)
expr_stmt|;
comment|// null
name|assertNull
argument_list|(
name|moi1
operator|.
name|getMap
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moi1
operator|.
name|getMapValueElement
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moi1
operator|.
name|getMapValueElement
argument_list|(
literal|null
argument_list|,
literal|"nokey"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|moi1
operator|.
name|getMapSize
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map<"
operator|+
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
operator|.
name|getTypeName
argument_list|()
operator|+
literal|","
operator|+
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
operator|.
name|getTypeName
argument_list|()
operator|+
literal|">"
argument_list|,
name|moi1
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
comment|// HashMap
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
argument_list|,
name|moi1
operator|.
name|getMap
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|moi1
operator|.
name|getMapSize
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|moi1
operator|.
name|getMapValueElement
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|moi1
operator|.
name|getMapValueElement
argument_list|(
name|map
argument_list|,
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|moi1
operator|.
name|getMapValueElement
argument_list|(
name|map
argument_list|,
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moi1
operator|.
name|getMapValueElement
argument_list|(
name|map
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moi1
operator|.
name|getMapValueElement
argument_list|(
name|map
argument_list|,
literal|"null"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Settable
name|Object
name|map3
init|=
name|moi1
operator|.
name|create
argument_list|()
decl_stmt|;
name|moi1
operator|.
name|put
argument_list|(
name|map3
argument_list|,
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|moi1
operator|.
name|put
argument_list|(
name|map3
argument_list|,
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|moi1
operator|.
name|put
argument_list|(
name|map3
argument_list|,
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
argument_list|,
name|map3
argument_list|)
expr_stmt|;
name|moi1
operator|.
name|clear
argument_list|(
name|map3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|moi1
operator|.
name|getMapSize
argument_list|(
name|map3
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testStandardStructObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
comment|// Test StandardObjectInspector both with field comments and without
name|doStandardObjectInspectorTest
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|doStandardObjectInspectorTest
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|doStandardObjectInspectorTest
parameter_list|(
name|boolean
name|testComments
parameter_list|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"firstInteger"
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"secondString"
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"thirdBoolean"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|)
expr_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
expr_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaBooleanObjectInspector
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldComments
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|testComments
condition|)
block|{
name|fieldComments
operator|.
name|add
argument_list|(
literal|"firstInteger comment"
argument_list|)
expr_stmt|;
name|fieldComments
operator|.
name|add
argument_list|(
literal|"secondString comment"
argument_list|)
expr_stmt|;
name|fieldComments
operator|.
name|add
argument_list|(
literal|"thirdBoolean comment"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// should have null for non-specified comments
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|fieldComments
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
name|StandardStructObjectInspector
name|soi1
init|=
name|testComments
condition|?
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldObjectInspectors
argument_list|,
name|fieldComments
argument_list|)
else|:
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldObjectInspectors
argument_list|)
decl_stmt|;
name|StandardStructObjectInspector
name|soi2
init|=
name|testComments
condition|?
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|fieldNames
operator|.
name|clone
argument_list|()
argument_list|,
operator|(
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
operator|)
name|fieldObjectInspectors
operator|.
name|clone
argument_list|()
argument_list|,
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|fieldComments
operator|.
name|clone
argument_list|()
argument_list|)
else|:
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|fieldNames
operator|.
name|clone
argument_list|()
argument_list|,
operator|(
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
operator|)
name|fieldObjectInspectors
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|soi1
argument_list|,
name|soi2
argument_list|)
expr_stmt|;
comment|// metadata
name|assertEquals
argument_list|(
name|Category
operator|.
name|STRUCT
argument_list|,
name|soi1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi1
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldObjectInspectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldComments
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|soi1
operator|.
name|getStructFieldRef
argument_list|(
literal|"secondString"
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|structTypeName
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|structTypeName
operator|.
name|append
argument_list|(
literal|"struct<"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|structTypeName
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|structTypeName
operator|.
name|append
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|structTypeName
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|structTypeName
operator|.
name|append
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|structTypeName
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|structTypeName
operator|.
name|toString
argument_list|()
argument_list|,
name|soi1
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
comment|// null
name|assertNull
argument_list|(
name|soi1
operator|.
name|getStructFieldData
argument_list|(
literal|null
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|soi1
operator|.
name|getStructFieldData
argument_list|(
literal|null
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|soi1
operator|.
name|getStructFieldData
argument_list|(
literal|null
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|soi1
operator|.
name|getStructFieldsDataAsList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// HashStruct
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|struct
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|struct
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|struct
operator|.
name|add
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|struct
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soi1
operator|.
name|getStructFieldData
argument_list|(
name|struct
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|soi1
operator|.
name|getStructFieldData
argument_list|(
name|struct
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|soi1
operator|.
name|getStructFieldData
argument_list|(
name|struct
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Settable
name|Object
name|struct3
init|=
name|soi1
operator|.
name|create
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|struct3
argument_list|)
expr_stmt|;
name|soi1
operator|.
name|setStructFieldData
argument_list|(
name|struct3
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|soi1
operator|.
name|setStructFieldData
argument_list|(
name|struct3
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|soi1
operator|.
name|setStructFieldData
argument_list|(
name|struct3
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|struct
argument_list|,
name|struct3
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testStandardUnionObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|objectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
comment|// add primitive types
name|objectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|)
expr_stmt|;
name|objectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
expr_stmt|;
name|objectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaBooleanObjectInspector
argument_list|)
expr_stmt|;
comment|// add a list
name|objectInspectors
operator|.
name|add
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a map
name|objectInspectors
operator|.
name|add
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a struct
name|List
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"myDouble"
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"myLong"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaDoubleObjectInspector
argument_list|)
expr_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaLongObjectInspector
argument_list|)
expr_stmt|;
name|objectInspectors
operator|.
name|add
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldObjectInspectors
argument_list|)
argument_list|)
expr_stmt|;
name|StandardUnionObjectInspector
name|uoi1
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardUnionObjectInspector
argument_list|(
name|objectInspectors
argument_list|)
decl_stmt|;
name|StandardUnionObjectInspector
name|uoi2
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardUnionObjectInspector
argument_list|(
operator|(
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
operator|)
name|objectInspectors
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|uoi1
argument_list|,
name|uoi2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspectorUtils
operator|.
name|getObjectInspectorName
argument_list|(
name|uoi1
argument_list|)
argument_list|,
name|ObjectInspectorUtils
operator|.
name|getObjectInspectorName
argument_list|(
name|uoi2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compareTypes
argument_list|(
name|uoi1
argument_list|,
name|uoi2
argument_list|)
argument_list|)
expr_stmt|;
comment|// compareSupported returns false because Union can contain
comment|// an object of Map
name|assertFalse
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compareSupported
argument_list|(
name|uoi1
argument_list|)
argument_list|)
expr_stmt|;
comment|// construct unionObjectInspector without Map field.
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|ois
init|=
operator|(
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
operator|)
name|objectInspectors
operator|.
name|clone
argument_list|()
decl_stmt|;
name|ois
operator|.
name|set
argument_list|(
literal|4
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectInspectorUtils
operator|.
name|compareSupported
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardUnionObjectInspector
argument_list|(
name|ois
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// metadata
name|assertEquals
argument_list|(
name|Category
operator|.
name|UNION
argument_list|,
name|uoi1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|ObjectInspector
argument_list|>
name|uois
init|=
name|uoi1
operator|.
name|getObjectInspectors
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|uois
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|objectInspectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|uois
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StringBuilder
name|unionTypeName
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|unionTypeName
operator|.
name|append
argument_list|(
literal|"uniontype<"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|uois
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|unionTypeName
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
block|}
name|unionTypeName
operator|.
name|append
argument_list|(
name|uois
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|unionTypeName
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|unionTypeName
operator|.
name|toString
argument_list|()
argument_list|,
name|uoi1
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
comment|// TypeInfo
name|TypeInfo
name|typeInfo1
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|uoi1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Category
operator|.
name|UNION
argument_list|,
name|typeInfo1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|UnionTypeInfo
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|typeInfo1
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|typeInfo1
operator|.
name|getTypeName
argument_list|()
argument_list|,
name|uoi1
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|typeInfo1
argument_list|,
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|uoi1
operator|.
name|getTypeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|TypeInfo
name|typeInfo2
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromObjectInspector
argument_list|(
name|uoi2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|typeInfo1
argument_list|,
name|typeInfo2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeInfoUtils
operator|.
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo1
argument_list|)
argument_list|,
name|TypeInfoUtils
operator|.
name|getStandardJavaObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo1
argument_list|)
argument_list|,
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|typeInfo2
argument_list|)
argument_list|)
expr_stmt|;
comment|// null
name|assertNull
argument_list|(
name|uoi1
operator|.
name|getField
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|uoi1
operator|.
name|getTag
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// Union
name|UnionObject
name|union
init|=
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|uoi1
operator|.
name|getTag
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uoi1
operator|.
name|getField
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{0:1}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|,
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
name|uoi2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|)
operator|.
name|equals
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|union
operator|=
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|"two"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uoi1
operator|.
name|getTag
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|uoi1
operator|.
name|getField
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{1:\"two\"}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|,
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|,
literal|"two"
argument_list|)
argument_list|,
name|uoi2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|)
operator|.
name|equals
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|union
operator|=
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|uoi1
operator|.
name|getTag
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|uoi1
operator|.
name|getField
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{2:true}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|,
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
literal|2
argument_list|,
literal|true
argument_list|)
argument_list|,
name|uoi2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|)
operator|.
name|equals
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|iList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|iList
operator|.
name|add
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|iList
operator|.
name|add
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|union
operator|=
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|,
name|iList
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|uoi1
operator|.
name|getTag
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|iList
argument_list|,
name|uoi1
operator|.
name|getField
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{3:[4,5]}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|,
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
literal|3
argument_list|,
name|iList
operator|.
name|clone
argument_list|()
argument_list|)
argument_list|,
name|uoi2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|)
operator|.
name|equals
argument_list|(
name|iList
argument_list|)
argument_list|)
expr_stmt|;
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|6
argument_list|,
literal|"six"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|7
argument_list|,
literal|"seven"
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|8
argument_list|,
literal|"eight"
argument_list|)
expr_stmt|;
name|union
operator|=
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|,
name|map
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|uoi1
operator|.
name|getTag
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
argument_list|,
name|uoi1
operator|.
name|getField
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{4:{6:\"six\",7:\"seven\",8:\"eight\"}}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|)
argument_list|)
expr_stmt|;
name|Throwable
name|th
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|,
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
literal|4
argument_list|,
name|map
operator|.
name|clone
argument_list|()
argument_list|)
argument_list|,
name|uoi2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|th
operator|=
name|t
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|th
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Compare on map type not supported!"
argument_list|,
name|th
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|)
operator|.
name|equals
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|struct
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|struct
operator|.
name|add
argument_list|(
literal|9.0
argument_list|)
expr_stmt|;
name|struct
operator|.
name|add
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|union
operator|=
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
literal|5
argument_list|,
name|struct
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|uoi1
operator|.
name|getTag
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|struct
argument_list|,
name|uoi1
operator|.
name|getField
argument_list|(
name|union
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"{5:{\"mydouble\":9.0,\"mylong\":10}}"
argument_list|,
name|SerDeUtils
operator|.
name|getJSONString
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|,
operator|new
name|StandardUnion
argument_list|(
operator|(
name|byte
operator|)
literal|5
argument_list|,
name|struct
operator|.
name|clone
argument_list|()
argument_list|)
argument_list|,
name|uoi2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|union
argument_list|,
name|uoi1
argument_list|)
operator|.
name|equals
argument_list|(
name|struct
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

