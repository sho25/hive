begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|TestStandardObjectInspectors
extends|extends
name|TestCase
block|{
name|void
name|doTestStandardPrimitiveObjectInspector
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|c
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
name|StandardPrimitiveObjectInspector
name|oi1
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|StandardPrimitiveObjectInspector
name|oi2
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|c
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|oi1
argument_list|,
name|oi2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Category
operator|.
name|PRIMITIVE
argument_list|,
name|oi1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c
argument_list|,
name|oi1
operator|.
name|getPrimitiveClass
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspectorUtils
operator|.
name|getClassShortName
argument_list|(
name|c
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|oi1
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testStandardPrimitiveObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|Byte
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|Float
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|Double
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|doTestStandardPrimitiveObjectInspector
argument_list|(
name|java
operator|.
name|sql
operator|.
name|Date
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testStandardListObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|StandardListObjectInspector
name|loi1
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|StandardListObjectInspector
name|loi2
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|loi1
argument_list|,
name|loi2
argument_list|)
expr_stmt|;
comment|// metadata
name|assertEquals
argument_list|(
name|Category
operator|.
name|LIST
argument_list|,
name|loi1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|,
name|loi1
operator|.
name|getListElementObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
comment|// null
name|assertNull
argument_list|(
literal|"loi1.getList(null) should be null."
argument_list|,
name|loi1
operator|.
name|getList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"loi1.getListLength(null) should be -1."
argument_list|,
name|loi1
operator|.
name|getListLength
argument_list|(
literal|null
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"loi1.getListElement(null, 0) should be null"
argument_list|,
name|loi1
operator|.
name|getListElement
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"loi1.getListElement(null, 100) should be null"
argument_list|,
name|loi1
operator|.
name|getListElement
argument_list|(
literal|null
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// ArrayList
name|ArrayList
argument_list|<
name|Integer
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|loi1
operator|.
name|getList
argument_list|(
name|list
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|loi1
operator|.
name|getListLength
argument_list|(
name|list
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|loi1
operator|.
name|getListElement
argument_list|(
name|list
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|loi1
operator|.
name|getListElement
argument_list|(
name|list
argument_list|,
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|loi1
operator|.
name|getListElement
argument_list|(
name|list
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|loi1
operator|.
name|getListElement
argument_list|(
name|list
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testStandardMapObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|StandardMapObjectInspector
name|moi1
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|StandardMapObjectInspector
name|moi2
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|,
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|moi1
argument_list|,
name|moi2
argument_list|)
expr_stmt|;
comment|// metadata
name|assertEquals
argument_list|(
name|Category
operator|.
name|MAP
argument_list|,
name|moi1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|moi1
operator|.
name|getMapKeyObjectInspector
argument_list|()
argument_list|,
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|moi2
operator|.
name|getMapValueObjectInspector
argument_list|()
argument_list|,
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// null
name|assertNull
argument_list|(
name|moi1
operator|.
name|getMap
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moi1
operator|.
name|getMapValueElement
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moi1
operator|.
name|getMapValueElement
argument_list|(
literal|null
argument_list|,
literal|"nokey"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|moi1
operator|.
name|getMapSize
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"map<"
operator|+
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|String
operator|.
name|class
argument_list|)
operator|.
name|getTypeName
argument_list|()
operator|+
literal|","
operator|+
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|.
name|getTypeName
argument_list|()
operator|+
literal|">"
argument_list|,
name|moi1
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
comment|// HashMap
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|map
argument_list|,
name|moi1
operator|.
name|getMap
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|moi1
operator|.
name|getMapSize
argument_list|(
name|map
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|moi1
operator|.
name|getMapValueElement
argument_list|(
name|map
argument_list|,
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|moi1
operator|.
name|getMapValueElement
argument_list|(
name|map
argument_list|,
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|moi1
operator|.
name|getMapValueElement
argument_list|(
name|map
argument_list|,
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moi1
operator|.
name|getMapValueElement
argument_list|(
name|map
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|moi1
operator|.
name|getMapValueElement
argument_list|(
name|map
argument_list|,
literal|"null"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|testStandardStructObjectInspector
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"firstInteger"
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"secondString"
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"thirdBoolean"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|String
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardPrimitiveObjectInspector
argument_list|(
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|StandardStructObjectInspector
name|soi1
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldObjectInspectors
argument_list|)
decl_stmt|;
name|StandardStructObjectInspector
name|soi2
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
operator|(
name|ArrayList
argument_list|<
name|String
argument_list|>
operator|)
name|fieldNames
operator|.
name|clone
argument_list|()
argument_list|,
operator|(
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
operator|)
name|fieldObjectInspectors
operator|.
name|clone
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|soi1
argument_list|,
name|soi2
argument_list|)
expr_stmt|;
comment|// metadata
name|assertEquals
argument_list|(
name|Category
operator|.
name|STRUCT
argument_list|,
name|soi1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi1
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|fieldNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|toLowerCase
argument_list|()
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldObjectInspectors
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|soi1
operator|.
name|getStructFieldRef
argument_list|(
literal|"secondString"
argument_list|)
argument_list|)
expr_stmt|;
name|StringBuilder
name|structTypeName
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|structTypeName
operator|.
name|append
argument_list|(
literal|"struct{"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|structTypeName
operator|.
name|append
argument_list|(
literal|","
argument_list|)
expr_stmt|;
name|structTypeName
operator|.
name|append
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|structTypeName
operator|.
name|append
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
name|structTypeName
operator|.
name|append
argument_list|(
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|structTypeName
operator|.
name|append
argument_list|(
literal|"}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|structTypeName
operator|.
name|toString
argument_list|()
argument_list|,
name|soi1
operator|.
name|getTypeName
argument_list|()
argument_list|)
expr_stmt|;
comment|// null
name|assertNull
argument_list|(
name|soi1
operator|.
name|getStructFieldData
argument_list|(
literal|null
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|soi1
operator|.
name|getStructFieldData
argument_list|(
literal|null
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|soi1
operator|.
name|getStructFieldData
argument_list|(
literal|null
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|soi1
operator|.
name|getStructFieldsDataAsList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// HashStruct
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|struct
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|struct
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|struct
operator|.
name|add
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|struct
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soi1
operator|.
name|getStructFieldData
argument_list|(
name|struct
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"two"
argument_list|,
name|soi1
operator|.
name|getStructFieldData
argument_list|(
name|struct
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|soi1
operator|.
name|getStructFieldData
argument_list|(
name|struct
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
end_class

end_unit

