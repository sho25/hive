begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|ByteStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|LazyPrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestLazyPrimitive.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestLazyPrimitive
block|{
comment|/**    * Initialize the LazyObject with the parameters, wrapping the byte[]    * automatically.    */
specifier|public
specifier|static
name|void
name|initLazyObject
parameter_list|(
name|LazyObject
name|lo
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|ByteArrayRef
name|b
init|=
operator|new
name|ByteArrayRef
argument_list|()
decl_stmt|;
name|b
operator|.
name|setData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|lo
operator|.
name|init
argument_list|(
name|b
argument_list|,
name|start
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test the LazyByte class.    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyByte
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|LazyByte
name|b
init|=
operator|new
name|LazyByte
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_BYTE_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'1'
block|,
literal|'b'
block|}
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'-'
block|,
literal|'1'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'+'
block|,
literal|'1'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
operator|-
literal|128
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ByteWritable
argument_list|(
operator|(
name|byte
operator|)
literal|127
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'1'
block|,
literal|'b'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'9'
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test the LazyShort class.    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyShort
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|LazyShort
name|b
init|=
operator|new
name|LazyShort
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_SHORT_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'1'
block|,
literal|'b'
block|}
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'-'
block|,
literal|'1'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'+'
block|,
literal|'1'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|128
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|127
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'3'
block|,
literal|'2'
block|,
literal|'7'
block|,
literal|'6'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
operator|-
literal|32768
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'3'
block|,
literal|'2'
block|,
literal|'7'
block|,
literal|'6'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|ShortWritable
argument_list|(
operator|(
name|short
operator|)
literal|32767
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'1'
block|,
literal|'b'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'3'
block|,
literal|'2'
block|,
literal|'7'
block|,
literal|'6'
block|,
literal|'9'
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'3'
block|,
literal|'2'
block|,
literal|'7'
block|,
literal|'6'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test the LazyInteger class.    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyInteger
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|LazyInteger
name|b
init|=
operator|new
name|LazyInteger
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_INT_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'1'
block|,
literal|'b'
block|}
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'-'
block|,
literal|'1'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'+'
block|,
literal|'1'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
operator|-
literal|128
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|127
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'3'
block|,
literal|'2'
block|,
literal|'7'
block|,
literal|'6'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
operator|-
literal|32768
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'3'
block|,
literal|'2'
block|,
literal|'7'
block|,
literal|'6'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|32767
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'2'
block|,
literal|'1'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'4'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
operator|-
literal|2147483648
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'2'
block|,
literal|'1'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'4'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|IntWritable
argument_list|(
literal|2147483647
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'1'
block|,
literal|'b'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'2'
block|,
literal|'1'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'4'
block|,
literal|'9'
block|}
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'2'
block|,
literal|'1'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'4'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test the LazyLong class.    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyLong
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|LazyLong
name|b
init|=
operator|new
name|LazyLong
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_LONG_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'1'
block|,
literal|'b'
block|}
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'-'
block|,
literal|'1'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'+'
block|,
literal|'1'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
operator|-
literal|128
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
literal|127
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'3'
block|,
literal|'2'
block|,
literal|'7'
block|,
literal|'6'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
operator|-
literal|32768
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'3'
block|,
literal|'2'
block|,
literal|'7'
block|,
literal|'6'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
literal|32767
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'2'
block|,
literal|'1'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'4'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
operator|-
literal|2147483648
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'2'
block|,
literal|'1'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'4'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
literal|2147483647
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'9'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'7'
block|,
literal|'2'
block|,
literal|'0'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'8'
block|,
literal|'5'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'5'
block|,
literal|'8'
block|,
literal|'0'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
operator|-
literal|9223372036854775808L
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'9'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'7'
block|,
literal|'2'
block|,
literal|'0'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'8'
block|,
literal|'5'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'5'
block|,
literal|'8'
block|,
literal|'0'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|LongWritable
argument_list|(
literal|9223372036854775807L
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'1'
block|,
literal|'b'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'9'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'7'
block|,
literal|'2'
block|,
literal|'0'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'8'
block|,
literal|'5'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'5'
block|,
literal|'8'
block|,
literal|'0'
block|,
literal|'9'
block|}
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'9'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'7'
block|,
literal|'2'
block|,
literal|'0'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'8'
block|,
literal|'5'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'5'
block|,
literal|'8'
block|,
literal|'0'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test the LazyDouble class.    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyDouble
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|LazyDouble
name|b
init|=
operator|new
name|LazyDouble
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_DOUBLE_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|-
literal|0.0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'1'
block|,
literal|'b'
block|}
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'-'
block|,
literal|'1'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'+'
block|,
literal|'1'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|1
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|-
literal|128
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|127
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'3'
block|,
literal|'2'
block|,
literal|'7'
block|,
literal|'6'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|-
literal|32768
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'3'
block|,
literal|'2'
block|,
literal|'7'
block|,
literal|'6'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|32767
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'2'
block|,
literal|'1'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'4'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|-
literal|2147483648
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'2'
block|,
literal|'1'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'4'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|2147483647
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'9'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'7'
block|,
literal|'2'
block|,
literal|'0'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'8'
block|,
literal|'5'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'5'
block|,
literal|'8'
block|,
literal|'0'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|-
literal|9223372036854775808L
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'9'
block|,
literal|'2'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'7'
block|,
literal|'2'
block|,
literal|'0'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'8'
block|,
literal|'5'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'7'
block|,
literal|'5'
block|,
literal|'8'
block|,
literal|'0'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|9223372036854775807L
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'3'
block|,
literal|'.'
block|,
literal|'7'
block|,
literal|'6'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|-
literal|3.768
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'3'
block|,
literal|'.'
block|,
literal|'7'
block|,
literal|'6'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|3.767
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'2'
block|,
literal|'.'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'e'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|-
literal|2.474836e8
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'2'
block|,
literal|'.'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'E'
block|,
literal|'-'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|2.47483E
operator|-
literal|7
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'.'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'e'
block|,
literal|'8'
block|}
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|-
literal|.474836e8
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'.'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'E'
block|,
literal|'-'
block|,
literal|'7'
block|}
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|.47483E
operator|-
literal|7
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'2'
block|,
literal|'1'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'4'
block|,
literal|'.'
block|}
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|-
literal|214748364.
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'2'
block|,
literal|'1'
block|,
literal|'4'
block|,
literal|'7'
block|,
literal|'4'
block|,
literal|'8'
block|,
literal|'3'
block|,
literal|'6'
block|,
literal|'4'
block|,
literal|'.'
block|}
argument_list|,
literal|0
argument_list|,
literal|11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|+
literal|214748364.
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'.'
block|,
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|.0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|,
literal|'.'
block|}
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|0.
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'a'
block|,
literal|'1'
block|,
literal|'b'
block|}
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'.'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'e'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
name|Double
operator|.
name|NEGATIVE_INFINITY
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'e'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
name|Double
operator|.
name|POSITIVE_INFINITY
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'+'
block|,
literal|'1'
block|,
literal|'e'
block|,
literal|'-'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
literal|0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'-'
block|,
literal|'1'
block|,
literal|'e'
block|,
literal|'-'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|DoubleWritable
argument_list|(
operator|-
literal|0.0
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**    * Test the LazyString class.    */
annotation|@
name|Test
specifier|public
name|void
name|testLazyString
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|LazyString
name|b
init|=
operator|new
name|LazyString
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|getLazyStringObjectInspector
argument_list|(
literal|false
argument_list|,
operator|(
name|byte
operator|)
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|""
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"0"
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|b
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|}
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|Text
argument_list|(
literal|"1"
argument_list|)
argument_list|,
name|b
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLazyBinary
parameter_list|()
block|{
name|LazyBinary
name|ba
init|=
operator|new
name|LazyBinary
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_BINARY_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
name|initLazyObject
argument_list|(
name|ba
argument_list|,
operator|new
name|byte
index|[]
block|{}
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesWritable
argument_list|()
argument_list|,
name|ba
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|ba
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'%'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesWritable
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'%'
block|}
argument_list|)
argument_list|,
name|ba
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|ba
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'2'
block|,
literal|'>'
block|,
literal|'3'
block|}
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesWritable
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'>'
block|}
argument_list|)
argument_list|,
name|ba
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|ba
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'2'
block|,
literal|'?'
block|,
literal|'3'
block|}
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesWritable
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'2'
block|,
literal|'?'
block|,
literal|'3'
block|}
argument_list|)
argument_list|,
name|ba
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
name|initLazyObject
argument_list|(
name|ba
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|'\n'
block|}
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|BytesWritable
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|'\n'
block|}
argument_list|)
argument_list|,
name|ba
operator|.
name|getWritableObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLazyTimestamp
parameter_list|()
throws|throws
name|Throwable
block|{
name|LazyTimestamp
name|t
init|=
operator|new
name|LazyTimestamp
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_TIMESTAMP_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
name|String
name|nullDate
init|=
literal|"NULL"
decl_stmt|;
name|byte
index|[]
name|nullBytes
init|=
name|nullDate
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|initLazyObject
argument_list|(
name|t
argument_list|,
name|nullBytes
argument_list|,
literal|0
argument_list|,
name|nullBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|t
operator|.
name|isNull
argument_list|)
expr_stmt|;
name|String
name|sampleDate
init|=
literal|"2013-02-12 21:04:58"
decl_stmt|;
name|byte
index|[]
name|good2013
init|=
name|sampleDate
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|initLazyObject
argument_list|(
name|t
argument_list|,
name|good2013
argument_list|,
literal|0
argument_list|,
name|good2013
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|t
operator|.
name|isNull
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|sampleDate
argument_list|)
argument_list|,
name|t
operator|.
name|getWritableObject
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|badDate
init|=
literal|"2013-02-12 21:04:XX"
decl_stmt|;
name|byte
index|[]
name|bad2013
init|=
name|badDate
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|initLazyObject
argument_list|(
name|t
argument_list|,
name|bad2013
argument_list|,
literal|0
argument_list|,
name|bad2013
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|t
operator|.
name|isNull
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLazyDate
parameter_list|()
throws|throws
name|Throwable
block|{
name|LazyDate
name|t
init|=
operator|new
name|LazyDate
argument_list|(
name|LazyPrimitiveObjectInspectorFactory
operator|.
name|LAZY_DATE_OBJECT_INSPECTOR
argument_list|)
decl_stmt|;
name|String
name|nullDate
init|=
literal|"NULL"
decl_stmt|;
name|byte
index|[]
name|nullBytes
init|=
name|nullDate
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|initLazyObject
argument_list|(
name|t
argument_list|,
name|nullBytes
argument_list|,
literal|0
argument_list|,
name|nullBytes
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|t
operator|.
name|isNull
argument_list|)
expr_stmt|;
name|String
name|sampleDate
init|=
literal|"2013-02-12"
decl_stmt|;
name|byte
index|[]
name|good2013
init|=
name|sampleDate
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|initLazyObject
argument_list|(
name|t
argument_list|,
name|good2013
argument_list|,
literal|0
argument_list|,
name|good2013
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|t
operator|.
name|isNull
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Date
operator|.
name|valueOf
argument_list|(
name|sampleDate
argument_list|)
argument_list|,
name|t
operator|.
name|getWritableObject
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|badDate
init|=
literal|"X013-02-12"
decl_stmt|;
name|byte
index|[]
name|bad2013
init|=
name|badDate
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|initLazyObject
argument_list|(
name|t
argument_list|,
name|bad2013
argument_list|,
literal|0
argument_list|,
name|bad2013
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|t
operator|.
name|isNull
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLazyIntegerWrite
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|ByteStream
operator|.
name|Output
name|out
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
name|int
index|[]
name|tests
init|=
block|{
literal|0
block|,
operator|-
literal|1
block|,
literal|1
block|,
operator|-
literal|10
block|,
literal|10
block|,
operator|-
literal|123
block|,
literal|123
block|,
name|Integer
operator|.
name|MIN_VALUE
block|,
name|Integer
operator|.
name|MIN_VALUE
operator|+
literal|1
block|,
name|Integer
operator|.
name|MAX_VALUE
block|,
name|Integer
operator|.
name|MAX_VALUE
operator|-
literal|1
block|}
decl_stmt|;
for|for
control|(
name|int
name|v
range|:
name|tests
control|)
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LazyInteger
operator|.
name|writeUTF8
argument_list|(
name|out
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Text
name|t
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|t
operator|.
name|set
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
argument_list|,
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLazyLongWrite
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|ByteStream
operator|.
name|Output
name|out
init|=
operator|new
name|ByteStream
operator|.
name|Output
argument_list|()
decl_stmt|;
name|long
index|[]
name|tests
init|=
block|{
literal|0L
block|,
operator|-
literal|1
block|,
literal|1
block|,
operator|-
literal|10
block|,
literal|10
block|,
operator|-
literal|123
block|,
literal|123
block|,
name|Long
operator|.
name|MIN_VALUE
block|,
name|Long
operator|.
name|MIN_VALUE
operator|+
literal|1
block|,
name|Long
operator|.
name|MAX_VALUE
block|,
name|Long
operator|.
name|MAX_VALUE
operator|-
literal|1
block|}
decl_stmt|;
for|for
control|(
name|long
name|v
range|:
name|tests
control|)
block|{
name|out
operator|.
name|reset
argument_list|()
expr_stmt|;
name|LazyLong
operator|.
name|writeUTF8
argument_list|(
name|out
argument_list|,
name|v
argument_list|)
expr_stmt|;
name|Text
name|t
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|t
operator|.
name|set
argument_list|(
name|out
operator|.
name|getData
argument_list|()
argument_list|,
literal|0
argument_list|,
name|out
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|v
argument_list|)
argument_list|,
name|t
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|testIntCaseWithPass
parameter_list|(
name|String
name|strVal
parameter_list|,
name|int
name|intVal
parameter_list|,
name|boolean
name|trim
parameter_list|)
block|{
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|strVal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|intVal
argument_list|,
name|LazyInteger
operator|.
name|parseInt
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|getLength
argument_list|()
argument_list|,
literal|10
argument_list|,
name|trim
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testIntCaseWithFail
parameter_list|(
name|String
name|strVal
parameter_list|,
name|boolean
name|trim
parameter_list|)
block|{
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|strVal
argument_list|)
decl_stmt|;
try|try
block|{
name|LazyInteger
operator|.
name|parseInt
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|getLength
argument_list|()
argument_list|,
literal|10
argument_list|,
name|trim
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected to fail while parsing '"
operator|+
name|strVal
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|err
parameter_list|)
block|{
comment|// Error was expected
block|}
block|}
specifier|private
name|void
name|testLongCaseWithPass
parameter_list|(
name|String
name|strVal
parameter_list|,
name|long
name|longVal
parameter_list|,
name|boolean
name|trim
parameter_list|)
block|{
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|strVal
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|longVal
argument_list|,
name|LazyLong
operator|.
name|parseLong
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|getLength
argument_list|()
argument_list|,
literal|10
argument_list|,
name|trim
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testLongCaseWithFail
parameter_list|(
name|String
name|strVal
parameter_list|,
name|boolean
name|trim
parameter_list|)
block|{
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|strVal
argument_list|)
decl_stmt|;
try|try
block|{
name|LazyLong
operator|.
name|parseLong
argument_list|(
name|text
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|getLength
argument_list|()
argument_list|,
literal|10
argument_list|,
name|trim
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expected to fail while parsing '"
operator|+
name|strVal
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|err
parameter_list|)
block|{
comment|// Error was expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLazyIntWithSpaces
parameter_list|()
throws|throws
name|Throwable
block|{
name|Object
index|[]
index|[]
name|casesWithoutSpaces
init|=
block|{
block|{
literal|"0"
block|,
literal|0
block|}
block|,
block|{
literal|"-128"
block|,
operator|-
literal|128
block|}
block|,
block|{
literal|"128"
block|,
literal|128
block|}
block|,
block|{
literal|"+128"
block|,
literal|128
block|}
block|,
block|{
literal|"-2147483648"
block|,
operator|-
literal|2147483648
block|}
block|,
block|{
literal|"2147483647"
block|,
literal|2147483647
block|}
block|,
block|{
literal|"+2147483647"
block|,
literal|2147483647
block|}
block|,     }
decl_stmt|;
name|Object
index|[]
index|[]
name|casesWithSpaces
init|=
block|{
block|{
literal|" 0"
block|,
literal|0
block|}
block|,
block|{
literal|"0 "
block|,
literal|0
block|}
block|,
block|{
literal|" 0 "
block|,
literal|0
block|}
block|,
block|{
literal|" -128"
block|,
operator|-
literal|128
block|}
block|,
block|{
literal|"-128 "
block|,
operator|-
literal|128
block|}
block|,
block|{
literal|"   -128   "
block|,
operator|-
literal|128
block|}
block|,
block|{
literal|"  128"
block|,
literal|128
block|}
block|,
block|{
literal|"128  "
block|,
literal|128
block|}
block|,
block|{
literal|"  128  "
block|,
literal|128
block|}
block|,
block|{
literal|" +128"
block|,
literal|128
block|}
block|,
block|{
literal|"+128 "
block|,
literal|128
block|}
block|,
block|{
literal|"   +128    "
block|,
literal|128
block|}
block|,
block|{
literal|"   +128    "
block|,
literal|128
block|}
block|,
block|{
literal|"   -2147483648"
block|,
operator|-
literal|2147483648
block|}
block|,
block|{
literal|"-2147483648    "
block|,
operator|-
literal|2147483648
block|}
block|,
block|{
literal|"   -2147483648   "
block|,
operator|-
literal|2147483648
block|}
block|,
block|{
literal|"  2147483647"
block|,
literal|2147483647
block|}
block|,
block|{
literal|"2147483647  "
block|,
literal|2147483647
block|}
block|,
block|{
literal|"  2147483647  "
block|,
literal|2147483647
block|}
block|,
block|{
literal|"   +2147483647"
block|,
literal|2147483647
block|}
block|,
block|{
literal|"+2147483647   "
block|,
literal|2147483647
block|}
block|,
block|{
literal|"   +2147483647   "
block|,
literal|2147483647
block|}
block|,     }
decl_stmt|;
name|String
index|[]
name|casesWithErrors
init|=
block|{
literal|""
block|,
literal|"  "
block|,
literal|"one"
block|,
literal|" one "
block|,
literal|"123:"
block|,
literal|"123a"
block|,
literal|" 123a "
block|,
literal|"a123"
block|,
literal|" a123 "
block|,
comment|// Exceeds MAX_VALUE
literal|"2147483648"
block|,
literal|"-2147483649"
block|,     }
decl_stmt|;
comment|//
comment|// trim=false
comment|//
name|boolean
name|trim
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|testCase
range|:
name|casesWithoutSpaces
control|)
block|{
name|testIntCaseWithPass
argument_list|(
operator|(
name|String
operator|)
name|testCase
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|testCase
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|testCase
range|:
name|casesWithSpaces
control|)
block|{
comment|// With trim=false, parsing cannot handle spaces
name|testIntCaseWithFail
argument_list|(
operator|(
name|String
operator|)
name|testCase
index|[
literal|0
index|]
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|testCase
range|:
name|casesWithErrors
control|)
block|{
name|testIntCaseWithFail
argument_list|(
name|testCase
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// trim=true
comment|//
name|trim
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|testCase
range|:
name|casesWithoutSpaces
control|)
block|{
name|testIntCaseWithPass
argument_list|(
operator|(
name|String
operator|)
name|testCase
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|testCase
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|testCase
range|:
name|casesWithSpaces
control|)
block|{
comment|// With trim=true, parsing can handle spaces
name|testIntCaseWithPass
argument_list|(
operator|(
name|String
operator|)
name|testCase
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|testCase
index|[
literal|1
index|]
operator|)
operator|.
name|intValue
argument_list|()
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|testCase
range|:
name|casesWithErrors
control|)
block|{
name|testIntCaseWithFail
argument_list|(
name|testCase
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLazyLongWithSpaces
parameter_list|()
throws|throws
name|Throwable
block|{
name|Object
index|[]
index|[]
name|casesWithoutSpaces
init|=
block|{
block|{
literal|"0"
block|,
literal|0
block|}
block|,
block|{
literal|"-128"
block|,
operator|-
literal|128
block|}
block|,
block|{
literal|"128"
block|,
literal|128
block|}
block|,
block|{
literal|"+128"
block|,
literal|128
block|}
block|,
block|{
literal|"-9223372036854775808"
block|,
operator|-
literal|9223372036854775808L
block|}
block|,
block|{
literal|"9223372036854775807"
block|,
literal|9223372036854775807L
block|}
block|,
block|{
literal|"+9223372036854775807"
block|,
literal|9223372036854775807L
block|}
block|,     }
decl_stmt|;
name|Object
index|[]
index|[]
name|casesWithSpaces
init|=
block|{
block|{
literal|" 0"
block|,
literal|0
block|}
block|,
block|{
literal|"0 "
block|,
literal|0
block|}
block|,
block|{
literal|" 0 "
block|,
literal|0
block|}
block|,
block|{
literal|" -128"
block|,
operator|-
literal|128
block|}
block|,
block|{
literal|"-128 "
block|,
operator|-
literal|128
block|}
block|,
block|{
literal|"   -128   "
block|,
operator|-
literal|128
block|}
block|,
block|{
literal|"  128"
block|,
literal|128
block|}
block|,
block|{
literal|"128  "
block|,
literal|128
block|}
block|,
block|{
literal|"  128  "
block|,
literal|128
block|}
block|,
block|{
literal|" +128"
block|,
literal|128
block|}
block|,
block|{
literal|"+128 "
block|,
literal|128
block|}
block|,
block|{
literal|"   +128    "
block|,
literal|128
block|}
block|,
block|{
literal|"   +128    "
block|,
literal|128
block|}
block|,
block|{
literal|"   -9223372036854775808"
block|,
operator|-
literal|9223372036854775808L
block|}
block|,
block|{
literal|"-9223372036854775808    "
block|,
operator|-
literal|9223372036854775808L
block|}
block|,
block|{
literal|"   -9223372036854775808   "
block|,
operator|-
literal|9223372036854775808L
block|}
block|,
block|{
literal|"  9223372036854775807"
block|,
literal|9223372036854775807L
block|}
block|,
block|{
literal|"9223372036854775807  "
block|,
literal|9223372036854775807L
block|}
block|,
block|{
literal|"  9223372036854775807  "
block|,
literal|9223372036854775807L
block|}
block|,
block|{
literal|"   +9223372036854775807"
block|,
literal|9223372036854775807L
block|}
block|,
block|{
literal|"+9223372036854775807   "
block|,
literal|9223372036854775807L
block|}
block|,
block|{
literal|"   +9223372036854775807   "
block|,
literal|9223372036854775807L
block|}
block|,     }
decl_stmt|;
name|String
index|[]
name|casesWithErrors
init|=
block|{
literal|""
block|,
literal|"  "
block|,
literal|"one"
block|,
literal|" one "
block|,
literal|"123:"
block|,
literal|"123a"
block|,
literal|" 123a "
block|,
literal|"a123"
block|,
literal|" a123 "
block|,
comment|// Exceeds max value
literal|"9223372036854775808"
block|,
literal|"9223372036854775809"
block|,     }
decl_stmt|;
comment|//
comment|// trim=false
comment|//
name|boolean
name|trim
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Object
index|[]
name|testCase
range|:
name|casesWithoutSpaces
control|)
block|{
name|testLongCaseWithPass
argument_list|(
operator|(
name|String
operator|)
name|testCase
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|testCase
index|[
literal|1
index|]
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|testCase
range|:
name|casesWithSpaces
control|)
block|{
comment|// With trim=false, parsing cannot handle spaces
name|testLongCaseWithFail
argument_list|(
operator|(
name|String
operator|)
name|testCase
index|[
literal|0
index|]
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|testCase
range|:
name|casesWithErrors
control|)
block|{
name|testLongCaseWithFail
argument_list|(
name|testCase
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
comment|//
comment|// trim=true
comment|//
name|trim
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|Object
index|[]
name|testCase
range|:
name|casesWithoutSpaces
control|)
block|{
name|testLongCaseWithPass
argument_list|(
operator|(
name|String
operator|)
name|testCase
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|testCase
index|[
literal|1
index|]
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Object
index|[]
name|testCase
range|:
name|casesWithSpaces
control|)
block|{
comment|// With trim=true, parsing can handle spaces
name|testLongCaseWithPass
argument_list|(
operator|(
name|String
operator|)
name|testCase
index|[
literal|0
index|]
argument_list|,
operator|(
operator|(
name|Number
operator|)
name|testCase
index|[
literal|1
index|]
operator|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|testCase
range|:
name|casesWithErrors
control|)
block|{
name|testLongCaseWithFail
argument_list|(
name|testCase
argument_list|,
name|trim
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

