begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroSerdeUtils
operator|.
name|AVRO_SERDE_SCHEMA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
operator|.
name|AvroSerdeUtils
operator|.
name|SCHEMA_LITERAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|TestAvroSerde
block|{
specifier|static
specifier|final
name|String
name|originalSchemaString
init|=
literal|"{\n"
operator|+
literal|"    \"namespace\": \"org.apache.hadoop.hive\",\n"
operator|+
literal|"    \"name\": \"previous\",\n"
operator|+
literal|"    \"type\": \"record\",\n"
operator|+
literal|"    \"fields\": [\n"
operator|+
literal|"        {\n"
operator|+
literal|"            \"name\":\"text\",\n"
operator|+
literal|"            \"type\":\"string\"\n"
operator|+
literal|"        }\n"
operator|+
literal|"    ]\n"
operator|+
literal|"}"
decl_stmt|;
specifier|static
specifier|final
name|String
name|newSchemaString
init|=
literal|"{\n"
operator|+
literal|"    \"namespace\": \"org.apache.hadoop.hive\",\n"
operator|+
literal|"    \"name\": \"new\",\n"
operator|+
literal|"    \"type\": \"record\",\n"
operator|+
literal|"    \"fields\": [\n"
operator|+
literal|"        {\n"
operator|+
literal|"            \"name\":\"text\",\n"
operator|+
literal|"            \"type\":\"string\"\n"
operator|+
literal|"        }\n"
operator|+
literal|"    ]\n"
operator|+
literal|"}"
decl_stmt|;
specifier|static
specifier|final
name|Schema
name|originalSchema
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|originalSchemaString
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|Schema
name|newSchema
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|newSchemaString
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|initializeDoesNotReuseSchemasFromConf
parameter_list|()
throws|throws
name|SerDeException
block|{
comment|// Hive will re-use the Configuration object that it passes in to be
comment|// initialized.  Therefore we need to make sure we don't look for any
comment|// old schemas within it.
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|AVRO_SERDE_SCHEMA
argument_list|,
name|originalSchema
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|SCHEMA_LITERAL
argument_list|,
name|newSchemaString
argument_list|)
expr_stmt|;
name|AvroSerDe
name|asd
init|=
operator|new
name|AvroSerDe
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|asd
argument_list|,
name|conf
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// Verify that the schema now within the configuration is the one passed
comment|// in via the properties
name|assertEquals
argument_list|(
name|newSchema
argument_list|,
name|Schema
operator|.
name|parse
argument_list|(
name|conf
operator|.
name|get
argument_list|(
name|AVRO_SERDE_SCHEMA
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noSchemaProvidedReturnsErrorSchema
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|verifyErrorSchemaReturned
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|gibberishSchemaProvidedReturnsErrorSchema
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|AvroSerdeUtils
operator|.
name|SCHEMA_LITERAL
argument_list|,
literal|"blahblahblah"
argument_list|)
expr_stmt|;
name|verifyErrorSchemaReturned
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptySchemaProvidedReturnsErrorSchema
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|AvroSerdeUtils
operator|.
name|SCHEMA_LITERAL
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|verifyErrorSchemaReturned
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|badSchemaURLProvidedReturnsErrorSchema
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|AvroSerdeUtils
operator|.
name|SCHEMA_URL
argument_list|,
literal|"not://a/url"
argument_list|)
expr_stmt|;
name|verifyErrorSchemaReturned
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|emptySchemaURLProvidedReturnsErrorSchema
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|AvroSerdeUtils
operator|.
name|SCHEMA_URL
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|verifyErrorSchemaReturned
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|bothPropertiesSetToNoneReturnsErrorSchema
parameter_list|()
throws|throws
name|SerDeException
block|{
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|AvroSerdeUtils
operator|.
name|SCHEMA_URL
argument_list|,
name|AvroSerdeUtils
operator|.
name|SCHEMA_NONE
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|AvroSerdeUtils
operator|.
name|SCHEMA_LITERAL
argument_list|,
name|AvroSerdeUtils
operator|.
name|SCHEMA_NONE
argument_list|)
expr_stmt|;
name|verifyErrorSchemaReturned
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyErrorSchemaReturned
parameter_list|(
name|Properties
name|props
parameter_list|)
throws|throws
name|SerDeException
block|{
name|AvroSerDe
name|asd
init|=
operator|new
name|AvroSerDe
argument_list|()
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|asd
argument_list|,
operator|new
name|Configuration
argument_list|()
argument_list|,
name|props
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|asd
operator|.
name|getObjectInspector
argument_list|()
operator|instanceof
name|StandardStructObjectInspector
argument_list|)
expr_stmt|;
name|StandardStructObjectInspector
name|oi
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|asd
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|allStructFieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SchemaResolutionProblem
operator|.
name|SIGNAL_BAD_SCHEMA
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|allStructFieldRefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StructField
name|firstField
init|=
name|allStructFieldRefs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|firstField
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
literal|"error_error_error_error_error_error_error"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Writable
name|mock
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Writable
operator|.
name|class
argument_list|)
decl_stmt|;
name|asd
operator|.
name|deserialize
argument_list|(
name|mock
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a BadSchemaException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadSchemaException
name|bse
parameter_list|)
block|{
comment|// good
block|}
try|try
block|{
name|Object
name|o
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Object
operator|.
name|class
argument_list|)
decl_stmt|;
name|ObjectInspector
name|mockOI
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|ObjectInspector
operator|.
name|class
argument_list|)
decl_stmt|;
name|asd
operator|.
name|serialize
argument_list|(
name|o
argument_list|,
name|mockOI
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Should have thrown a BadSchemaException"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|BadSchemaException
name|bse
parameter_list|)
block|{
comment|// good
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|getSerializedClassReturnsCorrectType
parameter_list|()
block|{
name|AvroSerDe
name|asd
init|=
operator|new
name|AvroSerDe
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|AvroGenericRecordWritable
operator|.
name|class
argument_list|,
name|asd
operator|.
name|getSerializedClass
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

