begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|mutable
operator|.
name|MutableObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|tuple
operator|.
name|Pair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|JavaConstantStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|Complex
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * TestReflectionObjectInspectors.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestReflectionObjectInspectors
block|{
annotation|@
name|Test
specifier|public
name|void
name|testReflectionObjectInspectors
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|ObjectInspector
name|oi1
init|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyStruct
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi2
init|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|MyStruct
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|oi1
argument_list|,
name|oi2
argument_list|)
expr_stmt|;
comment|// metadata
name|assertEquals
argument_list|(
name|Category
operator|.
name|STRUCT
argument_list|,
name|oi1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi1
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"myString"
argument_list|)
argument_list|)
expr_stmt|;
comment|// null
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
literal|null
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertNull
argument_list|(
name|soi
operator|.
name|getStructFieldsDataAsList
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// non nulls
name|MyStruct
name|a
init|=
operator|new
name|MyStruct
argument_list|()
decl_stmt|;
name|a
operator|.
name|myInt
operator|=
literal|1
expr_stmt|;
name|a
operator|.
name|myInteger
operator|=
literal|2
expr_stmt|;
name|a
operator|.
name|myString
operator|=
literal|"test"
expr_stmt|;
name|a
operator|.
name|myStruct
operator|=
name|a
expr_stmt|;
name|a
operator|.
name|myListString
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|)
expr_stmt|;
name|a
operator|.
name|myMapStringString
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|a
operator|.
name|myMapStringString
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|a
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|a
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|a
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|a
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|myListString
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|a
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|myMapStringString
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|a
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|afields
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|afields
operator|.
name|add
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|a
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|afields
argument_list|,
name|soi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|a
argument_list|)
argument_list|)
expr_stmt|;
comment|// sub fields
name|assertEquals
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|soi
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectInspectorMaxCacheSize
parameter_list|()
block|{
name|int
name|maxSize
init|=
literal|10240
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxSize
condition|;
name|i
operator|++
control|)
block|{
name|ObjectInspectorFactory
operator|.
name|getStandardUnionObjectInspector
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|JavaConstantStringObjectInspector
argument_list|(
literal|""
operator|+
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Got: "
operator|+
name|ObjectInspectorFactory
operator|.
name|cachedStandardUnionObjectInspector
operator|.
name|size
argument_list|()
argument_list|,
name|ObjectInspectorFactory
operator|.
name|cachedStandardUnionObjectInspector
operator|.
name|size
argument_list|()
operator|<=
name|maxSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|++
control|)
block|{
name|ObjectInspectorFactory
operator|.
name|getStandardUnionObjectInspector
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
operator|new
name|JavaConstantStringObjectInspector
argument_list|(
literal|""
operator|+
operator|(
literal|10240
operator|+
name|i
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Got: "
operator|+
name|ObjectInspectorFactory
operator|.
name|cachedStandardUnionObjectInspector
operator|.
name|size
argument_list|()
argument_list|,
name|ObjectInspectorFactory
operator|.
name|cachedStandardUnionObjectInspector
operator|.
name|size
argument_list|()
operator|<=
name|maxSize
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testObjectInspectorThreadSafety
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|workerCount
init|=
literal|5
decl_stmt|;
comment|// 5 workers to run getReflectionObjectInspector concurrently
specifier|final
name|ScheduledExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
name|workerCount
argument_list|)
decl_stmt|;
specifier|final
name|MutableObject
name|exception
init|=
operator|new
name|MutableObject
argument_list|()
decl_stmt|;
name|Thread
name|runner
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|run
parameter_list|()
block|{
name|Future
argument_list|<
name|ObjectInspector
argument_list|>
index|[]
name|results
init|=
operator|(
name|Future
argument_list|<
name|ObjectInspector
argument_list|>
index|[]
operator|)
operator|new
name|Future
index|[
name|workerCount
index|]
decl_stmt|;
name|Pair
argument_list|<
name|Type
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
argument_list|>
index|[]
name|types
init|=
operator|(
name|Pair
argument_list|<
name|Type
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
argument_list|>
index|[]
operator|)
operator|new
name|Pair
index|[]
block|{
name|Pair
operator|.
name|of
argument_list|(
name|Complex
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|THRIFT
argument_list|)
block|,
name|Pair
operator|.
name|of
argument_list|(
name|MyStruct
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|JAVA
argument_list|)
block|,           }
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
name|i
operator|++
control|)
block|{
comment|// repeat 20 times
for|for
control|(
specifier|final
name|Pair
argument_list|<
name|Type
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
argument_list|>
name|t
range|:
name|types
control|)
block|{
name|ObjectInspectorFactory
operator|.
name|objectInspectorCache
operator|.
name|asMap
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|workerCount
condition|;
name|k
operator|++
control|)
block|{
name|results
index|[
name|k
index|]
operator|=
name|executorService
operator|.
name|schedule
argument_list|(
operator|new
name|Callable
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ObjectInspector
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|t
operator|.
name|getLeft
argument_list|()
argument_list|,
name|t
operator|.
name|getRight
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|,
literal|50
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|ObjectInspector
name|oi
init|=
name|results
index|[
literal|0
index|]
operator|.
name|get
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|1
init|;
name|k
operator|<
name|workerCount
condition|;
name|k
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|oi
argument_list|,
name|results
index|[
name|k
index|]
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|exception
operator|.
name|setValue
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|runner
operator|.
name|start
argument_list|()
expr_stmt|;
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|300000
decl_stmt|;
comment|// timeout in 5 minutes
while|while
condition|(
name|runner
operator|.
name|isAlive
argument_list|()
condition|)
block|{
if|if
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>
name|endTime
condition|)
block|{
name|runner
operator|.
name|interrupt
argument_list|()
expr_stmt|;
comment|// Interrupt the runner thread
name|fail
argument_list|(
literal|"Timed out waiting for the runner to finish"
argument_list|)
expr_stmt|;
block|}
name|runner
operator|.
name|join
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exception
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Got exception: "
operator|+
name|exception
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|executorService
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

