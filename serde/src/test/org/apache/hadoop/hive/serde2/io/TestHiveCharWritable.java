begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveCharWritable
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveCharWritable
name|hcw1
init|=
operator|new
name|HiveCharWritable
argument_list|(
operator|new
name|HiveChar
argument_list|(
literal|"abc"
argument_list|,
literal|5
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abc  "
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HiveCharWritable
name|hcw2
init|=
operator|new
name|HiveCharWritable
argument_list|(
name|hcw1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"abc  "
argument_list|,
name|hcw2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testSet
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveCharWritable
name|hcw1
init|=
operator|new
name|HiveCharWritable
argument_list|()
decl_stmt|;
name|HiveChar
name|hc1
init|=
operator|new
name|HiveChar
argument_list|(
literal|"abcd"
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|hcw1
operator|.
name|set
argument_list|(
name|hc1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcd    "
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hcw1
operator|.
name|set
argument_list|(
name|hc1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcd      "
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hcw1
operator|.
name|set
argument_list|(
name|hc1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab"
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// copy whole value for strings
name|hcw1
operator|.
name|set
argument_list|(
literal|"abcd"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcd"
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// whole value is copied, including spaces
name|hcw1
operator|.
name|set
argument_list|(
literal|"abcd "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcd "
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hcw1
operator|.
name|set
argument_list|(
literal|"abcd"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcd      "
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hcw1
operator|.
name|set
argument_list|(
literal|"abcd"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab"
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|HiveCharWritable
name|hcw2
init|=
operator|new
name|HiveCharWritable
argument_list|(
name|hc1
argument_list|)
decl_stmt|;
name|hcw1
operator|.
name|set
argument_list|(
name|hcw2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcd    "
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hcw1
operator|.
name|set
argument_list|(
name|hcw2
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcd      "
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcd      "
argument_list|,
name|hcw1
operator|.
name|getTextValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hcw1
operator|.
name|set
argument_list|(
name|hcw2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab"
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ab"
argument_list|,
name|hcw1
operator|.
name|getTextValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetHiveChar
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveCharWritable
name|hcw
init|=
operator|new
name|HiveCharWritable
argument_list|()
decl_stmt|;
name|hcw
operator|.
name|set
argument_list|(
literal|"abcd"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcd      "
argument_list|,
name|hcw
operator|.
name|getHiveChar
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetCharacterLength
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveCharWritable
name|hcw
init|=
operator|new
name|HiveCharWritable
argument_list|()
decl_stmt|;
name|hcw
operator|.
name|set
argument_list|(
literal|"abcd"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|hcw
operator|.
name|getCharacterLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testEnforceMaxLength
parameter_list|()
block|{
name|HiveCharWritable
name|hcw1
init|=
operator|new
name|HiveCharWritable
argument_list|()
decl_stmt|;
name|hcw1
operator|.
name|set
argument_list|(
literal|"abcdefghij"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcdefghij"
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hcw1
operator|.
name|enforceMaxLength
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcdefghij  "
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|hcw1
operator|.
name|enforceMaxLength
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcde"
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testComparison
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveCharWritable
name|hcw1
init|=
operator|new
name|HiveCharWritable
argument_list|()
decl_stmt|;
name|HiveCharWritable
name|hcw2
init|=
operator|new
name|HiveCharWritable
argument_list|()
decl_stmt|;
comment|// same string
name|hcw1
operator|.
name|set
argument_list|(
literal|"abcd"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|hcw2
operator|.
name|set
argument_list|(
literal|"abcd"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hcw1
argument_list|,
name|hcw2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hcw2
argument_list|,
name|hcw1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcw1
operator|.
name|compareTo
argument_list|(
name|hcw2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcw2
operator|.
name|compareTo
argument_list|(
name|hcw1
argument_list|)
argument_list|)
expr_stmt|;
comment|// unequal strings
name|hcw1
operator|.
name|set
argument_list|(
literal|"abcd"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|hcw2
operator|.
name|set
argument_list|(
literal|"abc"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hcw1
operator|.
name|equals
argument_list|(
name|hcw2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hcw2
operator|.
name|equals
argument_list|(
name|hcw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|hcw1
operator|.
name|compareTo
argument_list|(
name|hcw2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|hcw2
operator|.
name|compareTo
argument_list|(
name|hcw1
argument_list|)
argument_list|)
expr_stmt|;
comment|// trailing spaces are not significant
name|hcw1
operator|.
name|set
argument_list|(
literal|"abcd "
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|hcw2
operator|.
name|set
argument_list|(
literal|"abcd"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"abcd      "
argument_list|,
name|hcw1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hcw1
argument_list|,
name|hcw2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hcw2
argument_list|,
name|hcw1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcw1
operator|.
name|compareTo
argument_list|(
name|hcw2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|hcw2
operator|.
name|compareTo
argument_list|(
name|hcw1
argument_list|)
argument_list|)
expr_stmt|;
comment|// leading spaces are significant
name|hcw1
operator|.
name|set
argument_list|(
literal|" abcd"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|hcw2
operator|.
name|set
argument_list|(
literal|"abcd"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hcw1
operator|.
name|equals
argument_list|(
name|hcw2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hcw2
operator|.
name|equals
argument_list|(
name|hcw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|hcw1
operator|.
name|compareTo
argument_list|(
name|hcw2
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|0
operator|==
name|hcw2
operator|.
name|compareTo
argument_list|(
name|hcw1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

