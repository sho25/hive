begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|UnionObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|JavaStringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|StringObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|VoidObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestAvroDeserializer
block|{
specifier|private
specifier|final
name|GenericData
name|GENERIC_DATA
init|=
name|GenericData
operator|.
name|get
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|canDeserializeVoidType
parameter_list|()
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
name|String
name|schemaString
init|=
literal|"{\n"
operator|+
literal|"  \"type\": \"record\", \n"
operator|+
literal|"  \"name\": \"nullTest\",\n"
operator|+
literal|"  \"fields\" : [\n"
operator|+
literal|"    {\"name\": \"isANull\", \"type\": \"null\"}\n"
operator|+
literal|"  ]\n"
operator|+
literal|"}"
decl_stmt|;
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|schemaString
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|record
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"isANull"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|GENERIC_DATA
operator|.
name|validate
argument_list|(
name|s
argument_list|,
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|AvroGenericRecordWritable
name|garw
init|=
name|Utils
operator|.
name|serializeAndDeserializeRecord
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|AvroObjectInspectorGenerator
name|aoig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|AvroDeserializer
name|de
init|=
operator|new
name|AvroDeserializer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|de
operator|.
name|deserialize
argument_list|(
name|aoig
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|aoig
operator|.
name|getColumnTypes
argument_list|()
argument_list|,
name|garw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|row
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|theVoidObject
init|=
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|theVoidObject
argument_list|)
expr_stmt|;
name|StandardStructObjectInspector
name|oi
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|aoig
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|StructField
name|fieldRef
init|=
name|oi
operator|.
name|getStructFieldRef
argument_list|(
literal|"isANull"
argument_list|)
decl_stmt|;
name|Object
name|shouldBeNull
init|=
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRef
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|shouldBeNull
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
operator|instanceof
name|VoidObjectInspector
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canDeserializeMapsWithPrimitiveKeys
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|TestAvroObjectInspectorGenerator
operator|.
name|MAP_WITH_PRIMITIVE_VALUE_TYPE
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|record
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|m
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"aMap"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|GENERIC_DATA
operator|.
name|validate
argument_list|(
name|s
argument_list|,
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"record = "
operator|+
name|record
argument_list|)
expr_stmt|;
name|AvroGenericRecordWritable
name|garw
init|=
name|Utils
operator|.
name|serializeAndDeserializeRecord
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|AvroObjectInspectorGenerator
name|aoig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|AvroDeserializer
name|de
init|=
operator|new
name|AvroDeserializer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|de
operator|.
name|deserialize
argument_list|(
name|aoig
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|aoig
operator|.
name|getColumnTypes
argument_list|()
argument_list|,
name|garw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|row
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|theMapObject
init|=
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|theMapObject
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|Map
name|theMap
init|=
operator|(
name|Map
operator|)
name|theMapObject
decl_stmt|;
comment|// Verify the raw object that's been created
name|assertEquals
argument_list|(
literal|1l
argument_list|,
name|theMap
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2l
argument_list|,
name|theMap
operator|.
name|get
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3l
argument_list|,
name|theMap
operator|.
name|get
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the provided object inspector can pull out these same values
name|StandardStructObjectInspector
name|oi
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|aoig
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|z
init|=
name|oi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|z
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StructField
name|fieldRef
init|=
name|oi
operator|.
name|getStructFieldRef
argument_list|(
literal|"amap"
argument_list|)
decl_stmt|;
name|Map
name|theMap2
init|=
operator|(
name|Map
operator|)
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRef
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1l
argument_list|,
name|theMap2
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2l
argument_list|,
name|theMap2
operator|.
name|get
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3l
argument_list|,
name|theMap2
operator|.
name|get
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canDeserializeArrays
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|TestAvroObjectInspectorGenerator
operator|.
name|ARRAY_WITH_PRIMITIVE_ELEMENT_TYPE
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|record
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"Eccleston"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"Tennant"
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
literal|"Smith"
argument_list|)
expr_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"anArray"
argument_list|,
name|list
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|GENERIC_DATA
operator|.
name|validate
argument_list|(
name|s
argument_list|,
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Array-backed record = "
operator|+
name|record
argument_list|)
expr_stmt|;
name|AvroGenericRecordWritable
name|garw
init|=
name|Utils
operator|.
name|serializeAndDeserializeRecord
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|AvroObjectInspectorGenerator
name|aoig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|AvroDeserializer
name|de
init|=
operator|new
name|AvroDeserializer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|de
operator|.
name|deserialize
argument_list|(
name|aoig
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|aoig
operator|.
name|getColumnTypes
argument_list|()
argument_list|,
name|garw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|row
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|theArrayObject
init|=
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|theArrayObject
operator|instanceof
name|List
argument_list|)
expr_stmt|;
name|List
name|theList
init|=
operator|(
name|List
operator|)
name|theArrayObject
decl_stmt|;
comment|// Verify the raw object that's been created
name|assertEquals
argument_list|(
literal|"Eccleston"
argument_list|,
name|theList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Tennant"
argument_list|,
name|theList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|theList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now go the correct way, through objectinspectors
name|StandardStructObjectInspector
name|oi
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|aoig
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|StructField
name|fieldRefToArray
init|=
name|oi
operator|.
name|getStructFieldRef
argument_list|(
literal|"anArray"
argument_list|)
decl_stmt|;
name|Object
name|anArrayData
init|=
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefToArray
argument_list|)
decl_stmt|;
name|StandardListObjectInspector
name|anArrayOI
init|=
operator|(
name|StandardListObjectInspector
operator|)
name|fieldRefToArray
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|anArrayOI
operator|.
name|getListLength
argument_list|(
name|anArrayData
argument_list|)
argument_list|)
expr_stmt|;
name|JavaStringObjectInspector
name|elementOI
init|=
operator|(
name|JavaStringObjectInspector
operator|)
name|anArrayOI
operator|.
name|getListElementObjectInspector
argument_list|()
decl_stmt|;
name|Object
name|firstElement
init|=
name|anArrayOI
operator|.
name|getListElement
argument_list|(
name|anArrayData
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Eccleston"
argument_list|,
name|elementOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|firstElement
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|firstElement
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|Object
name|secondElement
init|=
name|anArrayOI
operator|.
name|getListElement
argument_list|(
name|anArrayData
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Tennant"
argument_list|,
name|elementOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|secondElement
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|secondElement
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|Object
name|thirdElement
init|=
name|anArrayOI
operator|.
name|getListElement
argument_list|(
name|anArrayData
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Smith"
argument_list|,
name|elementOI
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|thirdElement
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|thirdElement
operator|instanceof
name|String
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canDeserializeRecords
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|TestAvroObjectInspectorGenerator
operator|.
name|RECORD_SCHEMA
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|record
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|innerRecord
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
operator|.
name|getField
argument_list|(
literal|"aRecord"
argument_list|)
operator|.
name|schema
argument_list|()
argument_list|)
decl_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"int1"
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"boolean1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"long1"
argument_list|,
literal|42432234234l
argument_list|)
expr_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"aRecord"
argument_list|,
name|innerRecord
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|GENERIC_DATA
operator|.
name|validate
argument_list|(
name|s
argument_list|,
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|AvroGenericRecordWritable
name|garw
init|=
name|Utils
operator|.
name|serializeAndDeserializeRecord
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|AvroObjectInspectorGenerator
name|aoig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|AvroDeserializer
name|de
init|=
operator|new
name|AvroDeserializer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|de
operator|.
name|deserialize
argument_list|(
name|aoig
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|aoig
operator|.
name|getColumnTypes
argument_list|()
argument_list|,
name|garw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|row
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|theRecordObject
init|=
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"theRecordObject = "
operator|+
name|theRecordObject
operator|.
name|getClass
argument_list|()
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
comment|// The original record was lost in the deserialization, so just go the
comment|// correct way, through objectinspectors
name|StandardStructObjectInspector
name|oi
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|aoig
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|allStructFieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|allStructFieldRefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StructField
name|fieldRefForaRecord
init|=
name|allStructFieldRefs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"arecord"
argument_list|,
name|fieldRefForaRecord
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|innerRecord2
init|=
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRefForaRecord
argument_list|)
decl_stmt|;
comment|// Extract innerRecord field refs
name|StandardStructObjectInspector
name|innerRecord2OI
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|fieldRefForaRecord
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|allStructFieldRefs1
init|=
name|innerRecord2OI
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|allStructFieldRefs1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"int1"
argument_list|,
name|allStructFieldRefs1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"boolean1"
argument_list|,
name|allStructFieldRefs1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"long1"
argument_list|,
name|allStructFieldRefs1
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|innerRecord2OI
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|innerRecord2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|innerRecord2OI
operator|.
name|getStructFieldData
argument_list|(
name|innerRecord2
argument_list|,
name|allStructFieldRefs1
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|innerRecord2OI
operator|.
name|getStructFieldData
argument_list|(
name|innerRecord2
argument_list|,
name|allStructFieldRefs1
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|42432234234l
argument_list|,
name|innerRecord2OI
operator|.
name|getStructFieldData
argument_list|(
name|innerRecord2
argument_list|,
name|allStructFieldRefs1
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|ResultPair
block|{
comment|// Because Pairs give Java the vapors.
specifier|public
specifier|final
name|ObjectInspector
name|oi
decl_stmt|;
specifier|public
specifier|final
name|Object
name|value
decl_stmt|;
specifier|public
specifier|final
name|Object
name|unionObject
decl_stmt|;
specifier|private
name|ResultPair
parameter_list|(
name|ObjectInspector
name|oi
parameter_list|,
name|Object
name|value
parameter_list|,
name|Object
name|unionObject
parameter_list|)
block|{
name|this
operator|.
name|oi
operator|=
name|oi
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|unionObject
operator|=
name|unionObject
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|canDeserializeUnions
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|TestAvroObjectInspectorGenerator
operator|.
name|UNION_SCHEMA
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|record
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"aUnion"
argument_list|,
literal|"this is a string"
argument_list|)
expr_stmt|;
name|ResultPair
name|result
init|=
name|unionTester
argument_list|(
name|s
argument_list|,
name|record
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|value
operator|instanceof
name|String
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"this is a string"
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|UnionObjectInspector
name|uoi
init|=
operator|(
name|UnionObjectInspector
operator|)
name|result
operator|.
name|oi
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|uoi
operator|.
name|getTag
argument_list|(
name|result
operator|.
name|unionObject
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now the other enum possibility
name|record
operator|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"aUnion"
argument_list|,
literal|99
argument_list|)
expr_stmt|;
name|result
operator|=
name|unionTester
argument_list|(
name|s
argument_list|,
name|record
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|value
operator|instanceof
name|Integer
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|99
argument_list|,
name|result
operator|.
name|value
argument_list|)
expr_stmt|;
name|uoi
operator|=
operator|(
name|UnionObjectInspector
operator|)
name|result
operator|.
name|oi
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|uoi
operator|.
name|getTag
argument_list|(
name|result
operator|.
name|unionObject
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ResultPair
name|unionTester
parameter_list|(
name|Schema
name|s
parameter_list|,
name|GenericData
operator|.
name|Record
name|record
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|assertTrue
argument_list|(
name|GENERIC_DATA
operator|.
name|validate
argument_list|(
name|s
argument_list|,
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|AvroGenericRecordWritable
name|garw
init|=
name|Utils
operator|.
name|serializeAndDeserializeRecord
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|AvroObjectInspectorGenerator
name|aoig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|AvroDeserializer
name|de
init|=
operator|new
name|AvroDeserializer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|de
operator|.
name|deserialize
argument_list|(
name|aoig
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|aoig
operator|.
name|getColumnTypes
argument_list|()
argument_list|,
name|garw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|row
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StandardStructObjectInspector
name|oi
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|aoig
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldRefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StructField
name|fieldRef
init|=
name|fieldRefs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"aunion"
argument_list|,
name|fieldRef
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|theUnion
init|=
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRef
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
operator|instanceof
name|UnionObjectInspector
argument_list|)
expr_stmt|;
name|UnionObjectInspector
name|fieldObjectInspector
init|=
operator|(
name|UnionObjectInspector
operator|)
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|fieldObjectInspector
operator|.
name|getField
argument_list|(
name|theUnion
argument_list|)
decl_stmt|;
return|return
operator|new
name|ResultPair
argument_list|(
name|fieldObjectInspector
argument_list|,
name|value
argument_list|,
name|theUnion
argument_list|)
return|;
block|}
annotation|@
name|Test
comment|// Enums are one of two types we fudge for Hive. Enums go in, Strings come out.
specifier|public
name|void
name|canDeserializeEnums
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|TestAvroObjectInspectorGenerator
operator|.
name|ENUM_SCHEMA
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|record
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"baddies"
argument_list|,
operator|new
name|GenericData
operator|.
name|EnumSymbol
argument_list|(
name|s
operator|.
name|getField
argument_list|(
literal|"baddies"
argument_list|)
operator|.
name|schema
argument_list|()
argument_list|,
literal|"DALEKS"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|GENERIC_DATA
operator|.
name|validate
argument_list|(
name|s
argument_list|,
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|AvroGenericRecordWritable
name|garw
init|=
name|Utils
operator|.
name|serializeAndDeserializeRecord
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|AvroObjectInspectorGenerator
name|aoig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|AvroDeserializer
name|de
init|=
operator|new
name|AvroDeserializer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|de
operator|.
name|deserialize
argument_list|(
name|aoig
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|aoig
operator|.
name|getColumnTypes
argument_list|()
argument_list|,
name|garw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|row
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StandardStructObjectInspector
name|oi
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|aoig
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fieldRefs
init|=
name|oi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldRefs
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StructField
name|fieldRef
init|=
name|fieldRefs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"baddies"
argument_list|,
name|fieldRef
operator|.
name|getFieldName
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|theStringObject
init|=
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRef
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
operator|instanceof
name|StringObjectInspector
argument_list|)
expr_stmt|;
name|StringObjectInspector
name|soi
init|=
operator|(
name|StringObjectInspector
operator|)
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|String
name|finalValue
init|=
name|soi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|theStringObject
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"DALEKS"
argument_list|,
name|finalValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
comment|// Fixed doesn't exist in Hive. Fixeds go in, lists of bytes go out.
specifier|public
name|void
name|canDeserializeFixed
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|TestAvroObjectInspectorGenerator
operator|.
name|FIXED_SCHEMA
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|record
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"ANANCIENTBLUEBOX"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"hash"
argument_list|,
operator|new
name|GenericData
operator|.
name|Fixed
argument_list|(
name|s
argument_list|,
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|GENERIC_DATA
operator|.
name|validate
argument_list|(
name|s
argument_list|,
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|AvroGenericRecordWritable
name|garw
init|=
name|Utils
operator|.
name|serializeAndDeserializeRecord
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|AvroObjectInspectorGenerator
name|aoig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|AvroDeserializer
name|de
init|=
operator|new
name|AvroDeserializer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|de
operator|.
name|deserialize
argument_list|(
name|aoig
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|aoig
operator|.
name|getColumnTypes
argument_list|()
argument_list|,
name|garw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|row
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|byteObject
init|=
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|byteObject
operator|instanceof
name|byte
index|[]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|outBytes
init|=
operator|(
name|byte
index|[]
operator|)
name|byteObject
decl_stmt|;
comment|// Verify the raw object that's been created
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|,
name|outBytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Now go the correct way, through objectinspectors
name|StandardStructObjectInspector
name|oi
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|aoig
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|fieldsDataAsList
init|=
name|oi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldsDataAsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StructField
name|fieldRef
init|=
name|oi
operator|.
name|getStructFieldRef
argument_list|(
literal|"hash"
argument_list|)
decl_stmt|;
name|outBytes
operator|=
operator|(
name|byte
index|[]
operator|)
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRef
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|,
name|outBytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|canDeserializeBytes
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|TestAvroObjectInspectorGenerator
operator|.
name|BYTES_SCHEMA
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|record
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
literal|"ANANCIENTBLUEBOX"
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|bb
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"bytesField"
argument_list|,
name|bb
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|GENERIC_DATA
operator|.
name|validate
argument_list|(
name|s
argument_list|,
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|AvroGenericRecordWritable
name|garw
init|=
name|Utils
operator|.
name|serializeAndDeserializeRecord
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|AvroObjectInspectorGenerator
name|aoig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|AvroDeserializer
name|de
init|=
operator|new
name|AvroDeserializer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|de
operator|.
name|deserialize
argument_list|(
name|aoig
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|aoig
operator|.
name|getColumnTypes
argument_list|()
argument_list|,
name|garw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|row
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|byteObject
init|=
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|byteObject
operator|instanceof
name|byte
index|[]
argument_list|)
expr_stmt|;
name|byte
index|[]
name|outBytes
init|=
operator|(
name|byte
index|[]
operator|)
name|byteObject
decl_stmt|;
comment|// Verify the raw object that's been created
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|,
name|outBytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// Now go the correct way, through objectinspectors
name|StandardStructObjectInspector
name|oi
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|aoig
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|fieldsDataAsList
init|=
name|oi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldsDataAsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StructField
name|fieldRef
init|=
name|oi
operator|.
name|getStructFieldRef
argument_list|(
literal|"bytesField"
argument_list|)
decl_stmt|;
name|outBytes
operator|=
operator|(
name|byte
index|[]
operator|)
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRef
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|outBytes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|bytes
index|[
name|i
index|]
argument_list|,
name|outBytes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|canDeserializeNullableTypes
parameter_list|()
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|TestAvroObjectInspectorGenerator
operator|.
name|NULLABLE_STRING_SCHEMA
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|record
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"nullableString"
argument_list|,
literal|"this is a string"
argument_list|)
expr_stmt|;
name|verifyNullableType
argument_list|(
name|record
argument_list|,
name|s
argument_list|,
literal|"nullableString"
argument_list|,
literal|"this is a string"
argument_list|)
expr_stmt|;
name|record
operator|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"nullableString"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyNullableType
argument_list|(
name|record
argument_list|,
name|s
argument_list|,
literal|"nullableString"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canDeserializeNullableEnums
parameter_list|()
throws|throws
name|IOException
throws|,
name|SerDeException
block|{
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|TestAvroObjectInspectorGenerator
operator|.
name|NULLABLE_ENUM_SCHEMA
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|record
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"nullableEnum"
argument_list|,
operator|new
name|GenericData
operator|.
name|EnumSymbol
argument_list|(
name|AvroSerdeUtils
operator|.
name|getOtherTypeFromNullableType
argument_list|(
name|s
operator|.
name|getField
argument_list|(
literal|"nullableEnum"
argument_list|)
operator|.
name|schema
argument_list|()
argument_list|)
argument_list|,
literal|"CYBERMEN"
argument_list|)
argument_list|)
expr_stmt|;
name|verifyNullableType
argument_list|(
name|record
argument_list|,
name|s
argument_list|,
literal|"nullableEnum"
argument_list|,
literal|"CYBERMEN"
argument_list|)
expr_stmt|;
name|record
operator|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"nullableEnum"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyNullableType
argument_list|(
name|record
argument_list|,
name|s
argument_list|,
literal|"nullableEnum"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canDeserializeMapWithNullablePrimitiveValues
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|Schema
name|s
init|=
name|Schema
operator|.
name|parse
argument_list|(
name|TestAvroObjectInspectorGenerator
operator|.
name|MAP_WITH_NULLABLE_PRIMITIVE_VALUE_TYPE_SCHEMA
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|record
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"one"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"two"
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"three"
argument_list|,
literal|3l
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"mu"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|record
operator|.
name|put
argument_list|(
literal|"aMap"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|GENERIC_DATA
operator|.
name|validate
argument_list|(
name|s
argument_list|,
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"record = "
operator|+
name|record
argument_list|)
expr_stmt|;
name|AvroGenericRecordWritable
name|garw
init|=
name|Utils
operator|.
name|serializeAndDeserializeRecord
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|AvroObjectInspectorGenerator
name|aoig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|AvroDeserializer
name|de
init|=
operator|new
name|AvroDeserializer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|de
operator|.
name|deserialize
argument_list|(
name|aoig
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|aoig
operator|.
name|getColumnTypes
argument_list|()
argument_list|,
name|garw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|row
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|theMapObject
init|=
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|theMapObject
operator|instanceof
name|Map
argument_list|)
expr_stmt|;
name|Map
name|theMap
init|=
operator|(
name|Map
operator|)
name|theMapObject
decl_stmt|;
comment|// Verify the raw object that's been created
name|assertEquals
argument_list|(
literal|1l
argument_list|,
name|theMap
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2l
argument_list|,
name|theMap
operator|.
name|get
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3l
argument_list|,
name|theMap
operator|.
name|get
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|theMap
operator|.
name|containsKey
argument_list|(
literal|"mu"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|theMap
operator|.
name|get
argument_list|(
literal|"mu"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify that the provided object inspector can pull out these same values
name|StandardStructObjectInspector
name|oi
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|aoig
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|z
init|=
name|oi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|z
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StructField
name|fieldRef
init|=
name|oi
operator|.
name|getStructFieldRef
argument_list|(
literal|"amap"
argument_list|)
decl_stmt|;
name|Map
name|theMap2
init|=
operator|(
name|Map
operator|)
name|oi
operator|.
name|getStructFieldData
argument_list|(
name|row
argument_list|,
name|fieldRef
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1l
argument_list|,
name|theMap2
operator|.
name|get
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2l
argument_list|,
name|theMap2
operator|.
name|get
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3l
argument_list|,
name|theMap2
operator|.
name|get
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|theMap2
operator|.
name|containsKey
argument_list|(
literal|"mu"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|theMap2
operator|.
name|get
argument_list|(
literal|"mu"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyNullableType
parameter_list|(
name|GenericData
operator|.
name|Record
name|record
parameter_list|,
name|Schema
name|s
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|assertTrue
argument_list|(
name|GENERIC_DATA
operator|.
name|validate
argument_list|(
name|s
argument_list|,
name|record
argument_list|)
argument_list|)
expr_stmt|;
name|AvroGenericRecordWritable
name|garw
init|=
name|Utils
operator|.
name|serializeAndDeserializeRecord
argument_list|(
name|record
argument_list|)
decl_stmt|;
name|AvroObjectInspectorGenerator
name|aoig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|AvroDeserializer
name|de
init|=
operator|new
name|AvroDeserializer
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|row
init|=
operator|(
name|ArrayList
argument_list|<
name|Object
argument_list|>
operator|)
name|de
operator|.
name|deserialize
argument_list|(
name|aoig
operator|.
name|getColumnNames
argument_list|()
argument_list|,
name|aoig
operator|.
name|getColumnTypes
argument_list|()
argument_list|,
name|garw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|row
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|rowElement
init|=
name|row
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StandardStructObjectInspector
name|oi
init|=
operator|(
name|StandardStructObjectInspector
operator|)
name|aoig
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Object
argument_list|>
name|fieldsDataAsList
init|=
name|oi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|row
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|fieldsDataAsList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|StructField
name|fieldRef
init|=
name|oi
operator|.
name|getStructFieldRef
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|ObjectInspector
name|fieldObjectInspector
init|=
name|fieldRef
operator|.
name|getFieldObjectInspector
argument_list|()
decl_stmt|;
name|StringObjectInspector
name|soi
init|=
operator|(
name|StringObjectInspector
operator|)
name|fieldObjectInspector
decl_stmt|;
if|if
condition|(
name|expected
operator|==
literal|null
condition|)
block|{
name|assertNull
argument_list|(
name|soi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|rowElement
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|soi
operator|.
name|getPrimitiveJavaObject
argument_list|(
name|rowElement
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

