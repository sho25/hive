begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestColumnProjectionUtils
block|{
specifier|private
name|Configuration
name|conf
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadAllColumns
parameter_list|()
block|{
comment|// test that the all columns will be read by default
name|assertTrue
argument_list|(
name|ColumnProjectionUtils
operator|.
name|isReadAllColumns
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that setting read all resets column ids
name|ColumnProjectionUtils
operator|.
name|appendReadColumns
argument_list|(
name|conf
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|ColumnProjectionUtils
operator|.
name|setReadAllColumns
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ColumnProjectionUtils
operator|.
name|isReadAllColumns
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadColumnIds
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|columnIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|actual
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that read columns are initially an empty list
name|actual
operator|=
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// set setting read column ids with an empty list
name|ColumnProjectionUtils
operator|.
name|appendReadColumns
argument_list|(
name|conf
argument_list|,
name|columnIds
argument_list|)
expr_stmt|;
name|actual
operator|=
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// test that setting read column ids set read all columns to false
name|assertFalse
argument_list|(
name|ColumnProjectionUtils
operator|.
name|isReadAllColumns
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// add needed columns
name|columnIds
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ColumnProjectionUtils
operator|.
name|appendReadColumns
argument_list|(
name|conf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|columnIds
argument_list|,
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|columnIds
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ColumnProjectionUtils
operator|.
name|appendReadColumns
argument_list|(
name|conf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|actual
operator|=
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|columnIds
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|columnIds
operator|.
name|add
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|ColumnProjectionUtils
operator|.
name|appendReadColumns
argument_list|(
name|conf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|actual
operator|=
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|columnIds
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ColumnProjectionUtils
operator|.
name|isReadAllColumns
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeprecatedMethods
parameter_list|()
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|columnIds
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|actual
decl_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
comment|// test that read columns are initially an empty list
name|actual
operator|=
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// setting empty list results in reading none
name|ColumnProjectionUtils
operator|.
name|setReadColumnIDs
argument_list|(
name|conf
argument_list|,
name|columnIds
argument_list|)
expr_stmt|;
name|actual
operator|=
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|EMPTY_LIST
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// test set and append methods
name|columnIds
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|ColumnProjectionUtils
operator|.
name|setReadColumnIDs
argument_list|(
name|conf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|actual
operator|=
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|columnIds
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|columnIds
operator|.
name|add
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|ColumnProjectionUtils
operator|.
name|appendReadColumnID
argument_list|(
name|conf
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|actual
operator|=
name|ColumnProjectionUtils
operator|.
name|getReadColumnIDs
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|actual
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|columnIds
argument_list|,
name|actual
argument_list|)
expr_stmt|;
comment|// test that setting read column ids set read all columns to false
name|assertFalse
argument_list|(
name|ColumnProjectionUtils
operator|.
name|isReadAllColumns
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|ColumnProjectionUtils
operator|.
name|setFullyReadColumns
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ColumnProjectionUtils
operator|.
name|isReadAllColumns
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

