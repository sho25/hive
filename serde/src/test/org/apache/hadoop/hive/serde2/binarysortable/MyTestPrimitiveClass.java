begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveBaseChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StandardStructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveCharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveDecimalObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|WritableHiveVarcharObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|DateUtils
import|;
end_import

begin_comment
comment|// Just the primitive types.
end_comment

begin_class
specifier|public
class|class
name|MyTestPrimitiveClass
block|{
specifier|public
name|Boolean
name|myBool
decl_stmt|;
specifier|public
name|Byte
name|myByte
decl_stmt|;
specifier|public
name|Short
name|myShort
decl_stmt|;
specifier|public
name|Integer
name|myInt
decl_stmt|;
specifier|public
name|Long
name|myLong
decl_stmt|;
specifier|public
name|Float
name|myFloat
decl_stmt|;
specifier|public
name|Double
name|myDouble
decl_stmt|;
specifier|public
name|String
name|myString
decl_stmt|;
specifier|public
name|HiveChar
name|myHiveChar
decl_stmt|;
specifier|public
name|HiveVarchar
name|myHiveVarchar
decl_stmt|;
specifier|public
name|byte
index|[]
name|myBinary
decl_stmt|;
specifier|public
name|HiveDecimal
name|myDecimal
decl_stmt|;
specifier|public
name|Date
name|myDate
decl_stmt|;
specifier|public
name|Timestamp
name|myTimestamp
decl_stmt|;
specifier|public
name|HiveIntervalYearMonth
name|myIntervalYearMonth
decl_stmt|;
specifier|public
name|HiveIntervalDayTime
name|myIntervalDayTime
decl_stmt|;
specifier|public
name|MyTestPrimitiveClass
parameter_list|()
block|{     }
specifier|public
specifier|final
specifier|static
name|int
name|primitiveCount
init|=
literal|16
decl_stmt|;
specifier|public
name|int
name|randomFill
parameter_list|(
name|Random
name|r
parameter_list|,
name|ExtraTypeInfo
name|extraTypeInfo
parameter_list|)
block|{
name|int
name|randField
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|primitiveCount
argument_list|)
decl_stmt|;
name|int
name|field
init|=
literal|0
decl_stmt|;
return|return
name|randomFill
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
argument_list|,
name|extraTypeInfo
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|chooseNull
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|randField
parameter_list|,
name|int
name|field
parameter_list|)
block|{
if|if
condition|(
name|randField
operator|==
name|field
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
operator|(
name|r
operator|.
name|nextInt
argument_list|(
literal|5
argument_list|)
operator|==
literal|0
operator|)
return|;
block|}
specifier|public
name|int
name|randomFill
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|randField
parameter_list|,
name|int
name|field
parameter_list|,
name|ExtraTypeInfo
name|extraTypeInfo
parameter_list|)
block|{
name|myBool
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|Boolean
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|1
argument_list|)
operator|==
literal|1
argument_list|)
expr_stmt|;
name|myByte
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|myShort
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|Short
operator|.
name|valueOf
argument_list|(
operator|(
name|short
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|myInt
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|Integer
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
name|myLong
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|Long
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
name|myFloat
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|Float
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextFloat
argument_list|()
operator|*
literal|10
operator|-
literal|5
argument_list|)
expr_stmt|;
name|myDouble
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|Double
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|nextDouble
argument_list|()
operator|*
literal|10
operator|-
literal|5
argument_list|)
expr_stmt|;
name|myString
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|getRandString
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|myHiveChar
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|getRandHiveChar
argument_list|(
name|r
argument_list|,
name|extraTypeInfo
argument_list|)
expr_stmt|;
name|myHiveVarchar
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|getRandHiveVarchar
argument_list|(
name|r
argument_list|,
name|extraTypeInfo
argument_list|)
expr_stmt|;
name|myBinary
operator|=
name|getRandBinary
argument_list|(
name|r
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|myDecimal
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|getRandHiveDecimal
argument_list|(
name|r
argument_list|,
name|extraTypeInfo
argument_list|)
expr_stmt|;
name|myDate
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|getRandDate
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|myTimestamp
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|getRandTimestamp
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|myIntervalYearMonth
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|getRandIntervalYearMonth
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|myIntervalDayTime
operator|=
name|chooseNull
argument_list|(
name|r
argument_list|,
name|randField
argument_list|,
name|field
operator|++
argument_list|)
condition|?
literal|null
else|:
name|getRandIntervalDayTime
argument_list|(
name|r
argument_list|)
expr_stmt|;
return|return
name|field
return|;
block|}
specifier|public
specifier|static
class|class
name|ExtraTypeInfo
block|{
specifier|public
name|int
name|hiveCharMaxLength
decl_stmt|;
specifier|public
name|int
name|hiveVarcharMaxLength
decl_stmt|;
specifier|public
name|int
name|precision
decl_stmt|;
specifier|public
name|int
name|scale
decl_stmt|;
specifier|public
name|ExtraTypeInfo
parameter_list|()
block|{
comment|// For NULL fields, make up a valid max length.
name|hiveCharMaxLength
operator|=
literal|1
expr_stmt|;
name|hiveVarcharMaxLength
operator|=
literal|1
expr_stmt|;
name|precision
operator|=
name|HiveDecimal
operator|.
name|SYSTEM_DEFAULT_PRECISION
expr_stmt|;
name|scale
operator|=
name|HiveDecimal
operator|.
name|SYSTEM_DEFAULT_SCALE
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|PrimitiveTypeInfo
index|[]
name|getPrimitiveTypeInfos
parameter_list|(
name|ExtraTypeInfo
name|extraTypeInfo
parameter_list|)
block|{
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
init|=
operator|new
name|PrimitiveTypeInfo
index|[
name|primitiveCount
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|primitiveCount
condition|;
name|i
operator|++
control|)
block|{
name|primitiveTypeInfos
index|[
name|i
index|]
operator|=
name|getPrimitiveTypeInfo
argument_list|(
name|i
argument_list|,
name|extraTypeInfo
argument_list|)
expr_stmt|;
block|}
return|return
name|primitiveTypeInfos
return|;
block|}
specifier|public
specifier|static
name|String
name|getRandString
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
return|return
name|getRandString
argument_list|(
name|r
argument_list|,
literal|null
argument_list|,
name|r
operator|.
name|nextInt
argument_list|(
literal|10
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getRandString
parameter_list|(
name|Random
name|r
parameter_list|,
name|String
name|characters
parameter_list|,
name|int
name|length
parameter_list|)
block|{
if|if
condition|(
name|characters
operator|==
literal|null
condition|)
block|{
name|characters
operator|=
literal|"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
expr_stmt|;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|characters
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
literal|128
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|characters
operator|.
name|charAt
argument_list|(
name|r
operator|.
name|nextInt
argument_list|(
name|characters
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|HiveChar
name|getRandHiveChar
parameter_list|(
name|Random
name|r
parameter_list|,
name|ExtraTypeInfo
name|extraTypeInfo
parameter_list|)
block|{
name|int
name|maxLength
init|=
literal|10
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
decl_stmt|;
name|extraTypeInfo
operator|.
name|hiveCharMaxLength
operator|=
name|maxLength
expr_stmt|;
name|String
name|randomString
init|=
name|getRandString
argument_list|(
name|r
argument_list|,
literal|"abcdefghijklmnopqrstuvwxyz"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|HiveChar
name|hiveChar
init|=
operator|new
name|HiveChar
argument_list|(
name|randomString
argument_list|,
name|maxLength
argument_list|)
decl_stmt|;
return|return
name|hiveChar
return|;
block|}
specifier|public
specifier|static
name|HiveVarchar
name|getRandHiveVarchar
parameter_list|(
name|Random
name|r
parameter_list|,
name|ExtraTypeInfo
name|extraTypeInfo
parameter_list|)
block|{
name|int
name|maxLength
init|=
literal|10
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
decl_stmt|;
name|extraTypeInfo
operator|.
name|hiveVarcharMaxLength
operator|=
name|maxLength
expr_stmt|;
name|String
name|randomString
init|=
name|getRandString
argument_list|(
name|r
argument_list|,
literal|"abcdefghijklmnopqrstuvwxyz"
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|HiveVarchar
name|hiveVarchar
init|=
operator|new
name|HiveVarchar
argument_list|(
name|randomString
argument_list|,
name|maxLength
argument_list|)
decl_stmt|;
return|return
name|hiveVarchar
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getRandBinary
parameter_list|(
name|Random
name|r
parameter_list|,
name|int
name|len
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|len
condition|;
name|j
operator|++
control|)
block|{
name|bytes
index|[
name|j
index|]
operator|=
name|Byte
operator|.
name|valueOf
argument_list|(
operator|(
name|byte
operator|)
name|r
operator|.
name|nextInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|bytes
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DECIMAL_CHARS
init|=
literal|"0123456789"
decl_stmt|;
specifier|public
specifier|static
name|HiveDecimal
name|getRandHiveDecimal
parameter_list|(
name|Random
name|r
parameter_list|,
name|ExtraTypeInfo
name|extraTypeInfo
parameter_list|)
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|precision
init|=
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|18
argument_list|)
decl_stmt|;
name|int
name|scale
init|=
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|precision
operator|+
literal|1
argument_list|)
decl_stmt|;
name|int
name|integerDigits
init|=
name|precision
operator|-
name|scale
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|nextBoolean
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"-"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|integerDigits
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|getRandString
argument_list|(
name|r
argument_list|,
name|DECIMAL_CHARS
argument_list|,
name|integerDigits
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|scale
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|getRandString
argument_list|(
name|r
argument_list|,
name|DECIMAL_CHARS
argument_list|,
name|scale
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HiveDecimal
name|bd
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|extraTypeInfo
operator|.
name|precision
operator|=
name|bd
operator|.
name|precision
argument_list|()
expr_stmt|;
name|extraTypeInfo
operator|.
name|scale
operator|=
name|bd
operator|.
name|scale
argument_list|()
expr_stmt|;
if|if
condition|(
name|extraTypeInfo
operator|.
name|scale
operator|>
name|extraTypeInfo
operator|.
name|precision
condition|)
block|{
comment|// Sometimes weird decimals are produced?
continue|continue;
block|}
comment|// For now, punt.
name|extraTypeInfo
operator|.
name|precision
operator|=
name|HiveDecimal
operator|.
name|SYSTEM_DEFAULT_PRECISION
expr_stmt|;
name|extraTypeInfo
operator|.
name|scale
operator|=
name|HiveDecimal
operator|.
name|SYSTEM_DEFAULT_SCALE
expr_stmt|;
return|return
name|bd
return|;
block|}
block|}
specifier|public
specifier|static
name|Date
name|getRandDate
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|String
name|dateStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%d-%02d-%02d"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1800
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|500
argument_list|)
argument_list|)
argument_list|,
comment|// year
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|12
argument_list|)
argument_list|)
argument_list|,
comment|// month
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|28
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// day
name|Date
name|dateVal
init|=
name|Date
operator|.
name|valueOf
argument_list|(
name|dateStr
argument_list|)
decl_stmt|;
return|return
name|dateVal
return|;
block|}
specifier|public
specifier|static
name|Timestamp
name|getRandTimestamp
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|String
name|optionalNanos
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|==
literal|1
condition|)
block|{
name|optionalNanos
operator|=
name|String
operator|.
name|format
argument_list|(
literal|".%09d"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|DateUtils
operator|.
name|NANOS_PER_SEC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|timestampStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%d-%02d-%02d %02d:%02d:%02d%s"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1970
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|200
argument_list|)
argument_list|)
argument_list|,
comment|// year
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|12
argument_list|)
argument_list|)
argument_list|,
comment|// month
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|28
argument_list|)
argument_list|)
argument_list|,
comment|// day
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|24
argument_list|)
argument_list|)
argument_list|,
comment|// hour
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|,
comment|// minute
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|,
comment|// second
name|optionalNanos
argument_list|)
decl_stmt|;
name|Timestamp
name|timestampVal
init|=
name|Timestamp
operator|.
name|valueOf
argument_list|(
name|timestampStr
argument_list|)
decl_stmt|;
return|return
name|timestampVal
return|;
block|}
specifier|public
specifier|static
name|HiveIntervalYearMonth
name|getRandIntervalYearMonth
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|String
name|yearMonthSignStr
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|==
literal|0
condition|?
literal|""
else|:
literal|"-"
decl_stmt|;
name|String
name|intervalYearMonthStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s%d-%d"
argument_list|,
name|yearMonthSignStr
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1800
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|500
argument_list|)
argument_list|)
argument_list|,
comment|// year
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|12
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// month
name|HiveIntervalYearMonth
name|intervalYearMonthVal
init|=
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
name|intervalYearMonthStr
argument_list|)
decl_stmt|;
name|TestCase
operator|.
name|assertTrue
argument_list|(
name|intervalYearMonthVal
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|intervalYearMonthVal
return|;
block|}
specifier|public
specifier|static
name|HiveIntervalDayTime
name|getRandIntervalDayTime
parameter_list|(
name|Random
name|r
parameter_list|)
block|{
name|String
name|optionalNanos
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|==
literal|1
condition|)
block|{
name|optionalNanos
operator|=
name|String
operator|.
name|format
argument_list|(
literal|".%09d"
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
name|DateUtils
operator|.
name|NANOS_PER_SEC
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|yearMonthSignStr
init|=
name|r
operator|.
name|nextInt
argument_list|(
literal|2
argument_list|)
operator|==
literal|0
condition|?
literal|""
else|:
literal|"-"
decl_stmt|;
name|String
name|dayTimeStr
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s%d %02d:%02d:%02d%s"
argument_list|,
name|yearMonthSignStr
argument_list|,
name|Integer
operator|.
name|valueOf
argument_list|(
literal|1
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|28
argument_list|)
argument_list|)
argument_list|,
comment|// day
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|24
argument_list|)
argument_list|)
argument_list|,
comment|// hour
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|,
comment|// minute
name|Integer
operator|.
name|valueOf
argument_list|(
literal|0
operator|+
name|r
operator|.
name|nextInt
argument_list|(
literal|60
argument_list|)
argument_list|)
argument_list|,
comment|// second
name|optionalNanos
argument_list|)
decl_stmt|;
name|HiveIntervalDayTime
name|intervalDayTimeVal
init|=
name|HiveIntervalDayTime
operator|.
name|valueOf
argument_list|(
name|dayTimeStr
argument_list|)
decl_stmt|;
name|TestCase
operator|.
name|assertTrue
argument_list|(
name|intervalDayTimeVal
operator|!=
literal|null
argument_list|)
expr_stmt|;
return|return
name|intervalDayTimeVal
return|;
block|}
specifier|public
name|Object
name|getPrimitiveObject
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|field
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myBool
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myByte
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myShort
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myInt
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myLong
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myFloat
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myDouble
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myString
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myHiveChar
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myHiveVarchar
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myBinary
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myDecimal
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myDate
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myTimestamp
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myIntervalYearMonth
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|myIntervalDayTime
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Field "
operator|+
literal|" field not handled"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|getPrimitiveWritableObject
parameter_list|(
name|int
name|index
parameter_list|,
name|PrimitiveTypeInfo
name|primitiveTypeInfo
parameter_list|)
block|{
name|int
name|field
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myBool
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBooleanObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|boolean
operator|)
name|myBool
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myByte
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableByteObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|byte
operator|)
name|myByte
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myShort
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableShortObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|short
operator|)
name|myShort
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myInt
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableIntObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|int
operator|)
name|myInt
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myLong
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableLongObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|long
operator|)
name|myLong
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myFloat
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableFloatObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|float
operator|)
name|myFloat
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myDouble
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDoubleObjectInspector
operator|.
name|create
argument_list|(
operator|(
name|double
operator|)
name|myDouble
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myString
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableStringObjectInspector
operator|.
name|create
argument_list|(
name|myString
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
if|if
condition|(
name|myHiveChar
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|CharTypeInfo
name|charTypeInfo
init|=
operator|(
name|CharTypeInfo
operator|)
name|primitiveTypeInfo
decl_stmt|;
name|WritableHiveCharObjectInspector
name|writableCharObjectInspector
init|=
operator|new
name|WritableHiveCharObjectInspector
argument_list|(
name|charTypeInfo
argument_list|)
decl_stmt|;
return|return
name|writableCharObjectInspector
operator|.
name|create
argument_list|(
name|myHiveChar
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
if|if
condition|(
name|myHiveVarchar
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|VarcharTypeInfo
name|varcharTypeInfo
init|=
operator|(
name|VarcharTypeInfo
operator|)
name|primitiveTypeInfo
decl_stmt|;
name|WritableHiveVarcharObjectInspector
name|writableVarcharObjectInspector
init|=
operator|new
name|WritableHiveVarcharObjectInspector
argument_list|(
name|varcharTypeInfo
argument_list|)
decl_stmt|;
return|return
name|writableVarcharObjectInspector
operator|.
name|create
argument_list|(
name|myHiveVarchar
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myBinary
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableBinaryObjectInspector
operator|.
name|create
argument_list|(
name|myBinary
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
if|if
condition|(
name|myDecimal
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfo
decl_stmt|;
name|WritableHiveDecimalObjectInspector
name|writableDecimalObjectInspector
init|=
operator|new
name|WritableHiveDecimalObjectInspector
argument_list|(
name|decimalTypeInfo
argument_list|)
decl_stmt|;
return|return
name|writableDecimalObjectInspector
operator|.
name|create
argument_list|(
name|myDecimal
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myDate
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableDateObjectInspector
operator|.
name|create
argument_list|(
name|myDate
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myTimestamp
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableTimestampObjectInspector
operator|.
name|create
argument_list|(
name|myTimestamp
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myIntervalYearMonth
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableHiveIntervalYearMonthObjectInspector
operator|.
name|create
argument_list|(
name|myIntervalYearMonth
argument_list|)
operator|)
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
operator|(
name|myIntervalDayTime
operator|==
literal|null
condition|?
literal|null
else|:
name|PrimitiveObjectInspectorFactory
operator|.
name|writableHiveIntervalDayTimeObjectInspector
operator|.
name|create
argument_list|(
name|myIntervalDayTime
argument_list|)
operator|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Field "
operator|+
literal|" field not handled"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|PrimitiveCategory
name|getPrimitiveCategory
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|int
name|field
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|BOOLEAN
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|BYTE
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|SHORT
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|INT
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|LONG
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|FLOAT
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|DOUBLE
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|STRING
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|CHAR
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|VARCHAR
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|BINARY
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|DECIMAL
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|DATE
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|TIMESTAMP
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|INTERVAL_YEAR_MONTH
return|;
block|}
elseif|else
if|if
condition|(
name|index
operator|==
name|field
operator|++
condition|)
block|{
return|return
name|PrimitiveCategory
operator|.
name|INTERVAL_DAY_TIME
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|Error
argument_list|(
literal|"Field "
operator|+
literal|" field not handled"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|PrimitiveTypeInfo
name|getPrimitiveTypeInfo
parameter_list|(
name|int
name|index
parameter_list|,
name|ExtraTypeInfo
name|extraTypeInfo
parameter_list|)
block|{
name|PrimitiveCategory
name|primitiveCategory
init|=
name|getPrimitiveCategory
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|String
name|typeName
decl_stmt|;
switch|switch
condition|(
name|primitiveCategory
condition|)
block|{
case|case
name|BYTE
case|:
name|typeName
operator|=
literal|"tinyint"
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|typeName
operator|=
literal|"smallint"
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|typeName
operator|=
literal|"bigint"
expr_stmt|;
break|break;
case|case
name|CHAR
case|:
name|typeName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"char(%d)"
argument_list|,
name|extraTypeInfo
operator|.
name|hiveCharMaxLength
argument_list|)
expr_stmt|;
break|break;
case|case
name|VARCHAR
case|:
name|typeName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"varchar(%d)"
argument_list|,
name|extraTypeInfo
operator|.
name|hiveVarcharMaxLength
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL
case|:
name|typeName
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"decimal(%d,%d)"
argument_list|,
name|extraTypeInfo
operator|.
name|precision
argument_list|,
name|extraTypeInfo
operator|.
name|scale
argument_list|)
expr_stmt|;
break|break;
default|default:
comment|// No type name difference or adornment.
name|typeName
operator|=
name|primitiveCategory
operator|.
name|name
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
break|break;
block|}
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
operator|(
name|PrimitiveTypeInfo
operator|)
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
return|return
name|primitiveTypeInfo
return|;
block|}
specifier|public
name|StructObjectInspector
name|getRowInspector
parameter_list|(
name|PrimitiveTypeInfo
index|[]
name|primitiveTypeInfos
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|primitiveCount
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ObjectInspector
argument_list|>
name|primitiveObjectInspectorList
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|(
name|primitiveCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
literal|0
init|;
name|index
operator|<
name|MyTestPrimitiveClass
operator|.
name|primitiveCount
condition|;
name|index
operator|++
control|)
block|{
name|columnNames
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"col%d"
argument_list|,
name|index
argument_list|)
argument_list|)
expr_stmt|;
name|PrimitiveTypeInfo
name|primitiveTypeInfo
init|=
name|primitiveTypeInfos
index|[
name|index
index|]
decl_stmt|;
name|PrimitiveCategory
name|primitiveCategory
init|=
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
decl_stmt|;
name|primitiveObjectInspectorList
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveWritableObjectInspector
argument_list|(
name|primitiveCategory
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|StandardStructObjectInspector
name|rowOI
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|columnNames
argument_list|,
name|primitiveObjectInspectorList
argument_list|)
decl_stmt|;
return|return
name|rowOI
return|;
block|}
specifier|public
name|void
name|nonRandomFill
parameter_list|(
name|int
name|idx
parameter_list|,
name|ExtraTypeInfo
name|extraTypeInfo
parameter_list|)
block|{
name|myByte
operator|=
operator|(
name|Byte
operator|)
name|MyTestClass
operator|.
name|getNonRandValue
argument_list|(
name|MyTestClass
operator|.
name|nrByte
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myShort
operator|=
operator|(
name|Short
operator|)
name|MyTestClass
operator|.
name|getNonRandValue
argument_list|(
name|MyTestClass
operator|.
name|nrShort
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myInt
operator|=
operator|(
name|Integer
operator|)
name|MyTestClass
operator|.
name|getNonRandValue
argument_list|(
name|MyTestClass
operator|.
name|nrInt
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myLong
operator|=
operator|(
name|Long
operator|)
name|MyTestClass
operator|.
name|getNonRandValue
argument_list|(
name|MyTestClass
operator|.
name|nrLong
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myFloat
operator|=
operator|(
name|Float
operator|)
name|MyTestClass
operator|.
name|getNonRandValue
argument_list|(
name|MyTestClass
operator|.
name|nrFloat
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myDouble
operator|=
operator|(
name|Double
operator|)
name|MyTestClass
operator|.
name|getNonRandValue
argument_list|(
name|MyTestClass
operator|.
name|nrDouble
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myString
operator|=
operator|(
name|String
operator|)
name|MyTestClass
operator|.
name|getNonRandValue
argument_list|(
name|MyTestClass
operator|.
name|nrString
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myHiveChar
operator|=
operator|new
name|HiveChar
argument_list|(
name|myString
argument_list|,
name|myString
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|extraTypeInfo
operator|.
name|hiveCharMaxLength
operator|=
name|myString
operator|.
name|length
argument_list|()
expr_stmt|;
name|myHiveVarchar
operator|=
operator|new
name|HiveVarchar
argument_list|(
name|myString
argument_list|,
name|myString
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|extraTypeInfo
operator|.
name|hiveVarcharMaxLength
operator|=
name|myString
operator|.
name|length
argument_list|()
expr_stmt|;
name|myDecimal
operator|=
operator|(
name|HiveDecimal
operator|)
name|MyTestClass
operator|.
name|getNonRandValue
argument_list|(
name|MyTestClass
operator|.
name|nrDecimal
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|extraTypeInfo
operator|.
name|precision
operator|=
name|myDecimal
operator|.
name|precision
argument_list|()
expr_stmt|;
name|extraTypeInfo
operator|.
name|scale
operator|=
name|myDecimal
operator|.
name|scale
argument_list|()
expr_stmt|;
name|myDate
operator|=
operator|(
name|Date
operator|)
name|MyTestClass
operator|.
name|getNonRandValue
argument_list|(
name|MyTestClass
operator|.
name|nrDate
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myIntervalYearMonth
operator|=
operator|(
name|HiveIntervalYearMonth
operator|)
name|MyTestClass
operator|.
name|getNonRandValue
argument_list|(
name|MyTestClass
operator|.
name|nrIntervalYearMonth
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|myIntervalDayTime
operator|=
operator|(
name|HiveIntervalDayTime
operator|)
name|MyTestClass
operator|.
name|getNonRandValue
argument_list|(
name|MyTestClass
operator|.
name|nrIntervalDayTime
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

