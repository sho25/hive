begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySerDeParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * Unit tests for LazySimpleDeserializeRead.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestLazySimpleDeserializeRead
extends|extends
name|TestCase
block|{
comment|/**    * Test for escaping.    *    */
specifier|public
name|void
name|testEscaping
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|hconf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
comment|// set the escaping related properties
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|FIELD_DELIM
argument_list|,
literal|"|"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|ESCAPE_CHAR
argument_list|,
literal|"\\"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|SERIALIZATION_ESCAPE_CRLF
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|LazySerDeParameters
name|lazyParams
init|=
operator|new
name|LazySerDeParameters
argument_list|(
name|hconf
argument_list|,
name|props
argument_list|,
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|TypeInfo
index|[]
name|typeInfos
init|=
operator|new
name|TypeInfo
index|[
literal|2
index|]
decl_stmt|;
name|typeInfos
index|[
literal|0
index|]
operator|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|typeInfos
index|[
literal|1
index|]
operator|=
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|LazySimpleDeserializeRead
name|deserializeRead
init|=
operator|new
name|LazySimpleDeserializeRead
argument_list|(
name|typeInfos
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|,
name|lazyParams
argument_list|)
decl_stmt|;
comment|// set and parse the row
name|String
name|s
init|=
literal|"This\\nis\\rthe first\\r\\nmulti-line field\\n|field1-2"
decl_stmt|;
name|Text
name|row
init|=
operator|new
name|Text
argument_list|(
name|s
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|deserializeRead
operator|.
name|set
argument_list|(
name|row
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|row
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deserializeRead
operator|.
name|readNextField
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deserializeRead
operator|.
name|currentExternalBufferNeeded
argument_list|)
expr_stmt|;
name|int
name|externalBufferLen
init|=
name|deserializeRead
operator|.
name|currentExternalBufferNeededLen
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Wrong external buffer length"
argument_list|,
name|externalBufferLen
argument_list|,
literal|36
argument_list|)
expr_stmt|;
name|byte
index|[]
name|externalBuffer
init|=
operator|new
name|byte
index|[
name|externalBufferLen
index|]
decl_stmt|;
name|deserializeRead
operator|.
name|copyToExternalBuffer
argument_list|(
name|externalBuffer
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Text
name|field
init|=
operator|new
name|Text
argument_list|()
decl_stmt|;
name|field
operator|.
name|set
argument_list|(
name|externalBuffer
argument_list|,
literal|0
argument_list|,
name|externalBufferLen
argument_list|)
expr_stmt|;
name|String
name|f
init|=
literal|"This\nis\rthe first\r\nmulti-line field\n"
decl_stmt|;
name|Text
name|escaped
init|=
operator|new
name|Text
argument_list|(
name|f
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"The escaped result is incorrect"
argument_list|,
name|field
operator|.
name|compareTo
argument_list|(
name|escaped
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

