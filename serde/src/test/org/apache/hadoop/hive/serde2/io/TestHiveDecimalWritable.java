begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteOrder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Decimal128
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|Decimal128FastBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Unit tests for tsting the fast allocation-free conversion  * between HiveDecimalWritable and Decimal128  */
end_comment

begin_class
specifier|public
class|class
name|TestHiveDecimalWritable
block|{
specifier|private
name|Decimal128FastBuffer
name|scratch
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|scratch
operator|=
operator|new
name|Decimal128FastBuffer
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|doTestFastStreamForHiveDecimal
parameter_list|(
name|String
name|valueString
parameter_list|)
block|{
name|BigDecimal
name|value
init|=
operator|new
name|BigDecimal
argument_list|(
name|valueString
argument_list|)
decl_stmt|;
name|Decimal128
name|dec
init|=
operator|new
name|Decimal128
argument_list|()
decl_stmt|;
name|dec
operator|.
name|update
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|HiveDecimalWritable
name|witness
init|=
operator|new
name|HiveDecimalWritable
argument_list|()
decl_stmt|;
name|witness
operator|.
name|set
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|bufferUsed
init|=
name|dec
operator|.
name|fastSerializeForHiveDecimal
argument_list|(
name|scratch
argument_list|)
decl_stmt|;
name|HiveDecimalWritable
name|hdw
init|=
operator|new
name|HiveDecimalWritable
argument_list|()
decl_stmt|;
name|hdw
operator|.
name|set
argument_list|(
name|scratch
operator|.
name|getBytes
argument_list|(
name|bufferUsed
argument_list|)
argument_list|,
name|dec
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
name|HiveDecimal
name|hd
init|=
name|hdw
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
name|BigDecimal
name|readValue
init|=
name|hd
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|value
argument_list|,
name|readValue
argument_list|)
expr_stmt|;
comment|// Now test fastUpdate from the same serialized HiveDecimal
name|Decimal128
name|decRead
init|=
operator|new
name|Decimal128
argument_list|()
operator|.
name|fastUpdateFromInternalStorage
argument_list|(
name|witness
operator|.
name|getInternalStorage
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|witness
operator|.
name|getScale
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dec
argument_list|,
name|decRead
argument_list|)
expr_stmt|;
comment|// Test fastUpdate from it's own (not fully compacted) serialized output
name|Decimal128
name|decReadSelf
init|=
operator|new
name|Decimal128
argument_list|()
operator|.
name|fastUpdateFromInternalStorage
argument_list|(
name|hdw
operator|.
name|getInternalStorage
argument_list|()
argument_list|,
operator|(
name|short
operator|)
name|hdw
operator|.
name|getScale
argument_list|()
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dec
argument_list|,
name|decReadSelf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFastStreamForHiveDecimal
parameter_list|()
block|{
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-1"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-2"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"127"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-127"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"128"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-128"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"255"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-255"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"256"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-256"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"65535"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-65535"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"65536"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-65536"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"10"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"1000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"1000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"1000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"1000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"1000000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"1000000000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"1000000000000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"1000000000000000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"1000000000000000000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"1000000000000000000000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-10"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-1000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-1000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-1000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-1000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-1000000000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-1000000000000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-1000000000000000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-1000000000000000000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-1000000000000000000000000000000"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.01"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.01"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.02"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.02"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.0127"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.0127"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.0128"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.0128"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.0255"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.0255"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.0256"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.0256"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.065535"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.065535"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.065536"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.065536"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.101"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.10001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.10000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.10000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.10000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.10000000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.10000000000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.10000000000000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.10000000000000000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.10000000000000000000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"0.10000000000000000000000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.101"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.10001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.10000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.10000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.10000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.10000000000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.10000000000000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.10000000000000000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.10000000000000000000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
literal|"-0.10000000000000000000000000000001"
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|Integer
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
name|Long
operator|.
name|toString
argument_list|(
name|Long
operator|.
name|MIN_VALUE
argument_list|)
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
name|Decimal128
operator|.
name|MAX_VALUE
operator|.
name|toFormalString
argument_list|()
argument_list|)
expr_stmt|;
name|doTestFastStreamForHiveDecimal
argument_list|(
name|Decimal128
operator|.
name|MIN_VALUE
operator|.
name|toFormalString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test known serialization tricky values
name|int
index|[]
name|values
init|=
operator|new
name|int
index|[]
block|{
literal|0x80
block|,
literal|0x8000
block|,
literal|0x800000
block|,
literal|0x80000000
block|,
literal|0x81
block|,
literal|0x8001
block|,
literal|0x800001
block|,
literal|0x80000001
block|,
literal|0x7f
block|,
literal|0x7fff
block|,
literal|0x7fffff
block|,
literal|0x7fffffff
block|,
literal|0xff
block|,
literal|0xffff
block|,
literal|0xffffff
block|,
literal|0xffffffff
block|}
decl_stmt|;
for|for
control|(
name|int
name|value
range|:
name|values
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|int
index|[]
name|pos
init|=
operator|new
name|int
index|[]
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|int
index|[]
name|neg
init|=
operator|new
name|int
index|[]
block|{
literal|0xff
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|pos
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|neg
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|value
expr_stmt|;
name|doTestDecimalWithBoundsCheck
argument_list|(
operator|new
name|Decimal128
argument_list|()
operator|.
name|update32
argument_list|(
name|pos
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|doTestDecimalWithBoundsCheck
argument_list|(
operator|new
name|Decimal128
argument_list|()
operator|.
name|update32
argument_list|(
name|neg
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|doTestDecimalWithBoundsCheck
argument_list|(
operator|new
name|Decimal128
argument_list|()
operator|.
name|update64
argument_list|(
name|pos
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|doTestDecimalWithBoundsCheck
argument_list|(
operator|new
name|Decimal128
argument_list|()
operator|.
name|update64
argument_list|(
name|neg
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|doTestDecimalWithBoundsCheck
argument_list|(
operator|new
name|Decimal128
argument_list|()
operator|.
name|update96
argument_list|(
name|pos
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|doTestDecimalWithBoundsCheck
argument_list|(
operator|new
name|Decimal128
argument_list|()
operator|.
name|update96
argument_list|(
name|neg
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|doTestDecimalWithBoundsCheck
argument_list|(
operator|new
name|Decimal128
argument_list|()
operator|.
name|update128
argument_list|(
name|pos
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|doTestDecimalWithBoundsCheck
argument_list|(
operator|new
name|Decimal128
argument_list|()
operator|.
name|update128
argument_list|(
name|neg
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|void
name|doTestDecimalWithBoundsCheck
parameter_list|(
name|Decimal128
name|value
parameter_list|)
block|{
if|if
condition|(
operator|(
name|value
operator|.
name|compareTo
argument_list|(
name|Decimal128
operator|.
name|MAX_VALUE
argument_list|)
operator|)
operator|>
literal|0
operator|||
operator|(
name|value
operator|.
name|compareTo
argument_list|(
name|Decimal128
operator|.
name|MIN_VALUE
argument_list|)
operator|)
operator|<
literal|0
condition|)
block|{
comment|// Ignore this one, out of bounds and HiveDecimal will NPE
return|return;
block|}
name|doTestFastStreamForHiveDecimal
argument_list|(
name|value
operator|.
name|toFormalString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHive6594
parameter_list|()
block|{
name|String
index|[]
name|vs
init|=
operator|new
name|String
index|[]
block|{
literal|"-4033.445769230769"
block|,
literal|"6984454.211097692"
block|}
decl_stmt|;
name|Decimal128
name|d
init|=
operator|new
name|Decimal128
argument_list|(
literal|0L
argument_list|,
operator|(
name|short
operator|)
literal|14
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|vs
control|)
block|{
name|Decimal128
name|p
init|=
operator|new
name|Decimal128
argument_list|(
name|s
argument_list|,
operator|(
name|short
operator|)
literal|14
argument_list|)
decl_stmt|;
name|d
operator|.
name|addDestructive
argument_list|(
name|p
argument_list|,
call|(
name|short
call|)
argument_list|(
name|short
argument_list|)
literal|14
argument_list|)
expr_stmt|;
block|}
name|int
name|bufferUsed
init|=
name|d
operator|.
name|fastSerializeForHiveDecimal
argument_list|(
name|scratch
argument_list|)
decl_stmt|;
name|HiveDecimalWritable
name|hdw
init|=
operator|new
name|HiveDecimalWritable
argument_list|()
decl_stmt|;
name|hdw
operator|.
name|set
argument_list|(
name|scratch
operator|.
name|getBytes
argument_list|(
name|bufferUsed
argument_list|)
argument_list|,
name|d
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
name|HiveDecimal
name|hd
init|=
name|hdw
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
name|BigDecimal
name|readValue
init|=
name|hd
operator|.
name|bigDecimalValue
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|d
operator|.
name|toBigDecimal
argument_list|()
operator|.
name|stripTrailingZeros
argument_list|()
argument_list|,
name|readValue
operator|.
name|stripTrailingZeros
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

