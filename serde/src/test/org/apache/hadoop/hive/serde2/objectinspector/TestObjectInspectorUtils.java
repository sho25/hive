begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|Complex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|thrift
operator|.
name|test
operator|.
name|IntString
import|;
end_import

begin_comment
comment|/**  * TestObjectInspectorUtils.  *  */
end_comment

begin_class
specifier|public
class|class
name|TestObjectInspectorUtils
extends|extends
name|TestCase
block|{
specifier|public
name|void
name|testCompareFloatingNumberSignedZero
parameter_list|()
block|{
name|PrimitiveObjectInspector
name|doubleOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
name|Double
name|d1
init|=
name|Double
operator|.
name|valueOf
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
name|Double
name|d2
init|=
name|Double
operator|.
name|valueOf
argument_list|(
literal|"-0.0"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|d1
argument_list|,
name|doubleOI
argument_list|,
name|d2
argument_list|,
name|doubleOI
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|d2
argument_list|,
name|doubleOI
argument_list|,
name|d1
argument_list|,
name|doubleOI
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|d1
argument_list|,
name|doubleOI
argument_list|,
name|d1
argument_list|,
name|doubleOI
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|d2
argument_list|,
name|doubleOI
argument_list|,
name|d2
argument_list|,
name|doubleOI
argument_list|)
argument_list|)
expr_stmt|;
name|PrimitiveObjectInspector
name|floatOI
init|=
name|PrimitiveObjectInspectorFactory
operator|.
name|getPrimitiveJavaObjectInspector
argument_list|(
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
name|Float
name|f1
init|=
name|Float
operator|.
name|valueOf
argument_list|(
literal|"0.0"
argument_list|)
decl_stmt|;
name|Float
name|f2
init|=
name|Float
operator|.
name|valueOf
argument_list|(
literal|"-0.0"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|f1
argument_list|,
name|floatOI
argument_list|,
name|f2
argument_list|,
name|floatOI
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|f2
argument_list|,
name|floatOI
argument_list|,
name|f1
argument_list|,
name|floatOI
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|f1
argument_list|,
name|floatOI
argument_list|,
name|f1
argument_list|,
name|floatOI
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|ObjectInspectorUtils
operator|.
name|compare
argument_list|(
name|f2
argument_list|,
name|floatOI
argument_list|,
name|f2
argument_list|,
name|floatOI
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testObjectInspectorUtils
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|ObjectInspector
name|oi1
init|=
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|Complex
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|THRIFT
argument_list|)
decl_stmt|;
comment|// metadata
name|assertEquals
argument_list|(
name|Category
operator|.
name|STRUCT
argument_list|,
name|oi1
operator|.
name|getCategory
argument_list|()
argument_list|)
expr_stmt|;
comment|// standard ObjectInspector
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|oi1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
name|soi
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|soi
operator|.
name|getStructFieldRef
argument_list|(
literal|"aint"
argument_list|)
argument_list|)
expr_stmt|;
comment|// null
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|assertNull
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
literal|null
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// real object
name|Complex
name|cc
init|=
operator|new
name|Complex
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setAint
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setAString
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|c2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Integer
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
decl_stmt|;
name|cc
operator|.
name|setLint
argument_list|(
name|c2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|c3
init|=
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"one"
block|,
literal|"two"
block|}
argument_list|)
decl_stmt|;
name|cc
operator|.
name|setLString
argument_list|(
name|c3
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|IntString
argument_list|>
name|c4
init|=
operator|new
name|ArrayList
argument_list|<
name|IntString
argument_list|>
argument_list|()
decl_stmt|;
name|cc
operator|.
name|setLintString
argument_list|(
name|c4
argument_list|)
expr_stmt|;
name|cc
operator|.
name|setMStringString
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// standard object
name|Object
name|c
init|=
name|ObjectInspectorUtils
operator|.
name|copyToStandardObject
argument_list|(
name|cc
argument_list|,
name|oi1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|c
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"test"
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|c
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c2
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|c
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c3
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|c
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|c4
argument_list|,
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|c
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|c
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|cfields
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|cfields
operator|.
name|add
argument_list|(
name|soi
operator|.
name|getStructFieldData
argument_list|(
name|c
argument_list|,
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|cfields
argument_list|,
name|soi
operator|.
name|getStructFieldsDataAsList
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
comment|// sub fields
name|assertEquals
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|3
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspectorUtils
operator|.
name|getStandardObjectInspector
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardListObjectInspector
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getReflectionObjectInspector
argument_list|(
name|IntString
operator|.
name|class
argument_list|,
name|ObjectInspectorFactory
operator|.
name|ObjectInspectorOptions
operator|.
name|THRIFT
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ObjectInspectorFactory
operator|.
name|getStandardMapObjectInspector
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
argument_list|,
name|fields
operator|.
name|get
argument_list|(
literal|5
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testBucketIdGeneration
parameter_list|()
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|fieldNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"firstInteger"
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"secondString"
argument_list|)
expr_stmt|;
name|fieldNames
operator|.
name|add
argument_list|(
literal|"thirdBoolean"
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
name|fieldObjectInspectors
init|=
operator|new
name|ArrayList
argument_list|<
name|ObjectInspector
argument_list|>
argument_list|()
decl_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaIntObjectInspector
argument_list|)
expr_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|)
expr_stmt|;
name|fieldObjectInspectors
operator|.
name|add
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaBooleanObjectInspector
argument_list|)
expr_stmt|;
name|StandardStructObjectInspector
name|soi1
init|=
name|ObjectInspectorFactory
operator|.
name|getStandardStructObjectInspector
argument_list|(
name|fieldNames
argument_list|,
name|fieldObjectInspectors
argument_list|)
decl_stmt|;
name|ArrayList
argument_list|<
name|Object
argument_list|>
name|struct
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|struct
operator|.
name|add
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|struct
operator|.
name|add
argument_list|(
literal|"two"
argument_list|)
expr_stmt|;
name|struct
operator|.
name|add
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|hashCode
init|=
name|ObjectInspectorUtils
operator|.
name|getBucketHashCodeOld
argument_list|(
name|struct
operator|.
name|toArray
argument_list|()
argument_list|,
name|fieldObjectInspectors
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectInspector
index|[
name|fieldObjectInspectors
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
literal|3574518
argument_list|,
name|hashCode
argument_list|)
expr_stmt|;
name|int
name|bucketId
init|=
name|ObjectInspectorUtils
operator|.
name|getBucketNumberOld
argument_list|(
name|struct
operator|.
name|toArray
argument_list|()
argument_list|,
name|fieldObjectInspectors
operator|.
name|toArray
argument_list|(
operator|new
name|ObjectInspector
index|[
name|fieldObjectInspectors
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
literal|6
argument_list|,
name|bucketId
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|bucketId
argument_list|,
name|ObjectInspectorUtils
operator|.
name|getBucketNumber
argument_list|(
name|hashCode
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

