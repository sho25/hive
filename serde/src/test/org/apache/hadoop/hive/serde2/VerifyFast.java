begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalDayTime
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveVarchar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|DeserializeRead
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|PrimitiveObjectInspector
operator|.
name|PrimitiveCategory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|fast
operator|.
name|SerializeWrite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ByteWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DateWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|DoubleWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveCharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveDecimalWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalDayTimeWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveIntervalYearMonthWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|HiveVarcharWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|ShortWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
operator|.
name|TimestampWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|CharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|DecimalTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|VarcharTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BooleanWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|FloatWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|IntWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|LongWritable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_comment
comment|/**  * TestBinarySortableSerDe.  *  */
end_comment

begin_class
specifier|public
class|class
name|VerifyFast
block|{
specifier|public
specifier|static
name|void
name|verifyDeserializeRead
parameter_list|(
name|DeserializeRead
name|deserializeRead
parameter_list|,
name|PrimitiveTypeInfo
name|primitiveTypeInfo
parameter_list|,
name|Writable
name|writable
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|isNull
decl_stmt|;
name|isNull
operator|=
operator|!
name|deserializeRead
operator|.
name|readNextField
argument_list|()
expr_stmt|;
if|if
condition|(
name|isNull
condition|)
block|{
if|if
condition|(
name|writable
operator|!=
literal|null
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Field reports null but object is not null (class "
operator|+
name|writable
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|", "
operator|+
name|writable
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
elseif|else
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Field report not null but object is null"
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|boolean
name|value
init|=
name|deserializeRead
operator|.
name|currentBoolean
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|writable
operator|instanceof
name|BooleanWritable
operator|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Boolean expected writable not Boolean"
argument_list|)
expr_stmt|;
block|}
name|boolean
name|expected
init|=
operator|(
operator|(
name|BooleanWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Boolean field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BYTE
case|:
block|{
name|byte
name|value
init|=
name|deserializeRead
operator|.
name|currentByte
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|writable
operator|instanceof
name|ByteWritable
operator|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Byte expected writable not Byte"
argument_list|)
expr_stmt|;
block|}
name|byte
name|expected
init|=
operator|(
operator|(
name|ByteWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Byte field mismatch (expected "
operator|+
operator|(
name|int
operator|)
name|expected
operator|+
literal|" found "
operator|+
operator|(
name|int
operator|)
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|SHORT
case|:
block|{
name|short
name|value
init|=
name|deserializeRead
operator|.
name|currentShort
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|writable
operator|instanceof
name|ShortWritable
operator|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Short expected writable not Short"
argument_list|)
expr_stmt|;
block|}
name|short
name|expected
init|=
operator|(
operator|(
name|ShortWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Short field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INT
case|:
block|{
name|int
name|value
init|=
name|deserializeRead
operator|.
name|currentInt
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|writable
operator|instanceof
name|IntWritable
operator|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Integer expected writable not Integer"
argument_list|)
expr_stmt|;
block|}
name|int
name|expected
init|=
operator|(
operator|(
name|IntWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Int field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|LONG
case|:
block|{
name|long
name|value
init|=
name|deserializeRead
operator|.
name|currentLong
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|writable
operator|instanceof
name|LongWritable
operator|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Long expected writable not Long"
argument_list|)
expr_stmt|;
block|}
name|Long
name|expected
init|=
operator|(
operator|(
name|LongWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Long field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
name|float
name|value
init|=
name|deserializeRead
operator|.
name|currentFloat
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|writable
operator|instanceof
name|FloatWritable
operator|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Float expected writable not Float"
argument_list|)
expr_stmt|;
block|}
name|float
name|expected
init|=
operator|(
operator|(
name|FloatWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Float field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
name|double
name|value
init|=
name|deserializeRead
operator|.
name|currentDouble
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|writable
operator|instanceof
name|DoubleWritable
operator|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Double expected writable not Double"
argument_list|)
expr_stmt|;
block|}
name|double
name|expected
init|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|expected
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Double field mismatch (expected "
operator|+
name|expected
operator|+
literal|" found "
operator|+
name|value
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|STRING
case|:
block|{
name|byte
index|[]
name|stringBytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
operator|+
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|)
decl_stmt|;
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|stringBytes
argument_list|)
decl_stmt|;
name|String
name|string
init|=
name|text
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|expected
init|=
operator|(
operator|(
name|Text
operator|)
name|writable
operator|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|string
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"String field mismatch (expected '"
operator|+
name|expected
operator|+
literal|"' found '"
operator|+
name|string
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|CHAR
case|:
block|{
name|byte
index|[]
name|stringBytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
operator|+
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|)
decl_stmt|;
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|stringBytes
argument_list|)
decl_stmt|;
name|String
name|string
init|=
name|text
operator|.
name|toString
argument_list|()
decl_stmt|;
name|HiveChar
name|hiveChar
init|=
operator|new
name|HiveChar
argument_list|(
name|string
argument_list|,
operator|(
operator|(
name|CharTypeInfo
operator|)
name|primitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|HiveChar
name|expected
init|=
operator|(
operator|(
name|HiveCharWritable
operator|)
name|writable
operator|)
operator|.
name|getHiveChar
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hiveChar
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Char field mismatch (expected '"
operator|+
name|expected
operator|+
literal|"' found '"
operator|+
name|hiveChar
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
name|byte
index|[]
name|stringBytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
operator|+
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|)
decl_stmt|;
name|Text
name|text
init|=
operator|new
name|Text
argument_list|(
name|stringBytes
argument_list|)
decl_stmt|;
name|String
name|string
init|=
name|text
operator|.
name|toString
argument_list|()
decl_stmt|;
name|HiveVarchar
name|hiveVarchar
init|=
operator|new
name|HiveVarchar
argument_list|(
name|string
argument_list|,
operator|(
operator|(
name|VarcharTypeInfo
operator|)
name|primitiveTypeInfo
operator|)
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|HiveVarchar
name|expected
init|=
operator|(
operator|(
name|HiveVarcharWritable
operator|)
name|writable
operator|)
operator|.
name|getHiveVarchar
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hiveVarchar
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Varchar field mismatch (expected '"
operator|+
name|expected
operator|+
literal|"' found '"
operator|+
name|hiveVarchar
operator|+
literal|"')"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DECIMAL
case|:
block|{
name|HiveDecimal
name|value
init|=
name|deserializeRead
operator|.
name|currentHiveDecimalWritable
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Decimal field evaluated to NULL"
argument_list|)
expr_stmt|;
block|}
name|HiveDecimal
name|expected
init|=
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|writable
operator|)
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|DecimalTypeInfo
name|decimalTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfo
decl_stmt|;
name|int
name|precision
init|=
name|decimalTypeInfo
operator|.
name|getPrecision
argument_list|()
decl_stmt|;
name|int
name|scale
init|=
name|decimalTypeInfo
operator|.
name|getScale
argument_list|()
decl_stmt|;
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Decimal field mismatch (expected "
operator|+
name|expected
operator|.
name|toString
argument_list|()
operator|+
literal|" found "
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|") precision "
operator|+
name|precision
operator|+
literal|", scale "
operator|+
name|scale
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|DATE
case|:
block|{
name|Date
name|value
init|=
name|deserializeRead
operator|.
name|currentDateWritable
operator|.
name|get
argument_list|()
decl_stmt|;
name|Date
name|expected
init|=
operator|(
operator|(
name|DateWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Date field mismatch (expected "
operator|+
name|expected
operator|.
name|toString
argument_list|()
operator|+
literal|" found "
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|Timestamp
name|value
init|=
name|deserializeRead
operator|.
name|currentTimestampWritable
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|Timestamp
name|expected
init|=
operator|(
operator|(
name|TimestampWritable
operator|)
name|writable
operator|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Timestamp field mismatch (expected "
operator|+
name|expected
operator|.
name|toString
argument_list|()
operator|+
literal|" found "
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
name|HiveIntervalYearMonth
name|value
init|=
name|deserializeRead
operator|.
name|currentHiveIntervalYearMonthWritable
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
name|HiveIntervalYearMonth
name|expected
init|=
operator|(
operator|(
name|HiveIntervalYearMonthWritable
operator|)
name|writable
operator|)
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"HiveIntervalYearMonth field mismatch (expected "
operator|+
name|expected
operator|.
name|toString
argument_list|()
operator|+
literal|" found "
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
name|HiveIntervalDayTime
name|value
init|=
name|deserializeRead
operator|.
name|currentHiveIntervalDayTimeWritable
operator|.
name|getHiveIntervalDayTime
argument_list|()
decl_stmt|;
name|HiveIntervalDayTime
name|expected
init|=
operator|(
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|writable
operator|)
operator|.
name|getHiveIntervalDayTime
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|equals
argument_list|(
name|expected
argument_list|)
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"HiveIntervalDayTime field mismatch (expected "
operator|+
name|expected
operator|.
name|toString
argument_list|()
operator|+
literal|" found "
operator|+
name|value
operator|.
name|toString
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
case|case
name|BINARY
case|:
block|{
name|byte
index|[]
name|byteArray
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|deserializeRead
operator|.
name|currentBytes
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
argument_list|,
name|deserializeRead
operator|.
name|currentBytesStart
operator|+
name|deserializeRead
operator|.
name|currentBytesLength
argument_list|)
decl_stmt|;
name|BytesWritable
name|bytesWritable
init|=
operator|(
name|BytesWritable
operator|)
name|writable
decl_stmt|;
name|byte
index|[]
name|expected
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|bytesWritable
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bytesWritable
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|byteArray
operator|.
name|length
operator|!=
name|expected
operator|.
name|length
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Byte Array field mismatch (expected "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|" found "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|byteArray
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
name|byteArray
operator|.
name|length
condition|;
name|b
operator|++
control|)
block|{
if|if
condition|(
name|byteArray
index|[
name|b
index|]
operator|!=
name|expected
index|[
name|b
index|]
condition|)
block|{
name|TestCase
operator|.
name|fail
argument_list|(
literal|"Byte Array field mismatch (expected "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|" found "
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|byteArray
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unknown primitive category "
operator|+
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|void
name|serializeWrite
parameter_list|(
name|SerializeWrite
name|serializeWrite
parameter_list|,
name|PrimitiveTypeInfo
name|primitiveTypeInfo
parameter_list|,
name|Writable
name|writable
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|writable
operator|==
literal|null
condition|)
block|{
name|serializeWrite
operator|.
name|writeNull
argument_list|()
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN
case|:
block|{
name|boolean
name|value
init|=
operator|(
operator|(
name|BooleanWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeBoolean
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BYTE
case|:
block|{
name|byte
name|value
init|=
operator|(
operator|(
name|ByteWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeByte
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SHORT
case|:
block|{
name|short
name|value
init|=
operator|(
operator|(
name|ShortWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeShort
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INT
case|:
block|{
name|int
name|value
init|=
operator|(
operator|(
name|IntWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeInt
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LONG
case|:
block|{
name|long
name|value
init|=
operator|(
operator|(
name|LongWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeLong
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FLOAT
case|:
block|{
name|float
name|value
init|=
operator|(
operator|(
name|FloatWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeFloat
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DOUBLE
case|:
block|{
name|double
name|value
init|=
operator|(
operator|(
name|DoubleWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeDouble
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STRING
case|:
block|{
name|Text
name|value
init|=
operator|(
name|Text
operator|)
name|writable
decl_stmt|;
name|byte
index|[]
name|stringBytes
init|=
name|value
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|stringLength
init|=
name|stringBytes
operator|.
name|length
decl_stmt|;
name|serializeWrite
operator|.
name|writeString
argument_list|(
name|stringBytes
argument_list|,
literal|0
argument_list|,
name|stringLength
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CHAR
case|:
block|{
name|HiveChar
name|value
init|=
operator|(
operator|(
name|HiveCharWritable
operator|)
name|writable
operator|)
operator|.
name|getHiveChar
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeHiveChar
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VARCHAR
case|:
block|{
name|HiveVarchar
name|value
init|=
operator|(
operator|(
name|HiveVarcharWritable
operator|)
name|writable
operator|)
operator|.
name|getHiveVarchar
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeHiveVarchar
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DECIMAL
case|:
block|{
name|HiveDecimal
name|value
init|=
operator|(
operator|(
name|HiveDecimalWritable
operator|)
name|writable
operator|)
operator|.
name|getHiveDecimal
argument_list|()
decl_stmt|;
name|DecimalTypeInfo
name|decTypeInfo
init|=
operator|(
name|DecimalTypeInfo
operator|)
name|primitiveTypeInfo
decl_stmt|;
name|serializeWrite
operator|.
name|writeHiveDecimal
argument_list|(
name|value
argument_list|,
name|decTypeInfo
operator|.
name|scale
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DATE
case|:
block|{
name|Date
name|value
init|=
operator|(
operator|(
name|DateWritable
operator|)
name|writable
operator|)
operator|.
name|get
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeDate
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TIMESTAMP
case|:
block|{
name|Timestamp
name|value
init|=
operator|(
operator|(
name|TimestampWritable
operator|)
name|writable
operator|)
operator|.
name|getTimestamp
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeTimestamp
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_YEAR_MONTH
case|:
block|{
name|HiveIntervalYearMonth
name|value
init|=
operator|(
operator|(
name|HiveIntervalYearMonthWritable
operator|)
name|writable
operator|)
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeHiveIntervalYearMonth
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INTERVAL_DAY_TIME
case|:
block|{
name|HiveIntervalDayTime
name|value
init|=
operator|(
operator|(
name|HiveIntervalDayTimeWritable
operator|)
name|writable
operator|)
operator|.
name|getHiveIntervalDayTime
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeHiveIntervalDayTime
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BINARY
case|:
block|{
name|BytesWritable
name|byteWritable
init|=
operator|(
name|BytesWritable
operator|)
name|writable
decl_stmt|;
name|byte
index|[]
name|binaryBytes
init|=
name|byteWritable
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|int
name|length
init|=
name|byteWritable
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|serializeWrite
operator|.
name|writeBinary
argument_list|(
name|binaryBytes
argument_list|,
literal|0
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|Error
argument_list|(
literal|"Unknown primitive category "
operator|+
name|primitiveTypeInfo
operator|.
name|getPrimitiveCategory
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

