begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|annotations
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|code
operator|.
name|tempusfugit
operator|.
name|concurrency
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveIntervalYearMonth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestHiveIntervalYearMonthWritable
block|{
annotation|@
name|Rule
specifier|public
name|ConcurrentRule
name|concurrentRule
init|=
operator|new
name|ConcurrentRule
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|RepeatingRule
name|repeatingRule
init|=
operator|new
name|RepeatingRule
argument_list|()
decl_stmt|;
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testConstructor
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveIntervalYearMonth
name|hi1
init|=
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"1-2"
argument_list|)
decl_stmt|;
name|HiveIntervalYearMonthWritable
name|hiw1
init|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|(
name|hi1
argument_list|)
decl_stmt|;
name|HiveIntervalYearMonthWritable
name|hiw2
init|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|(
name|hiw1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|hiw1
argument_list|,
name|hiw2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testComparison
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveIntervalYearMonthWritable
name|hiw0
init|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"2-2"
argument_list|)
argument_list|)
decl_stmt|;
name|HiveIntervalYearMonthWritable
name|hiw1
init|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"2-2"
argument_list|)
argument_list|)
decl_stmt|;
name|HiveIntervalYearMonthWritable
name|hiw2
init|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"3-2"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hiw1
operator|+
literal|" equals "
operator|+
name|hiw1
argument_list|,
name|hiw1
operator|.
name|equals
argument_list|(
name|hiw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hiw1
operator|+
literal|" equals "
operator|+
name|hiw0
argument_list|,
name|hiw1
operator|.
name|equals
argument_list|(
name|hiw0
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hiw1
operator|+
literal|" equals "
operator|+
name|hiw2
argument_list|,
name|hiw1
operator|.
name|equals
argument_list|(
name|hiw2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hiw1
operator|+
literal|" compare "
operator|+
name|hiw1
argument_list|,
literal|0
operator|==
name|hiw1
operator|.
name|compareTo
argument_list|(
name|hiw1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hiw1
operator|+
literal|" compare "
operator|+
name|hiw0
argument_list|,
literal|0
operator|==
name|hiw1
operator|.
name|compareTo
argument_list|(
name|hiw0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hiw1
operator|+
literal|" compare "
operator|+
name|hiw2
argument_list|,
literal|0
operator|>
name|hiw1
operator|.
name|compareTo
argument_list|(
name|hiw2
argument_list|)
argument_list|)
expr_stmt|;
name|hiw2
operator|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"1-2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hiw1
operator|+
literal|" compare "
operator|+
name|hiw2
argument_list|,
literal|0
operator|<
name|hiw1
operator|.
name|compareTo
argument_list|(
name|hiw2
argument_list|)
argument_list|)
expr_stmt|;
name|hiw2
operator|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"2-3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hiw1
operator|+
literal|" compare "
operator|+
name|hiw2
argument_list|,
literal|0
operator|>
name|hiw1
operator|.
name|compareTo
argument_list|(
name|hiw2
argument_list|)
argument_list|)
expr_stmt|;
name|hiw2
operator|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|(
name|HiveIntervalYearMonth
operator|.
name|valueOf
argument_list|(
literal|"2-1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|hiw1
operator|+
literal|" compare "
operator|+
name|hiw2
argument_list|,
literal|0
operator|<
name|hiw1
operator|.
name|compareTo
argument_list|(
name|hiw2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Also check hashCode()
name|assertEquals
argument_list|(
name|hiw0
operator|.
name|hashCode
argument_list|()
argument_list|,
name|hiw1
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testGettersSetters
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveIntervalYearMonthWritable
name|hiw1
init|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|()
decl_stmt|;
name|hiw1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|HiveIntervalYearMonth
name|hi1
init|=
name|hiw1
operator|.
name|getHiveIntervalYearMonth
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|hi1
operator|.
name|getYears
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|hi1
operator|.
name|getMonths
argument_list|()
argument_list|)
expr_stmt|;
name|hiw1
operator|.
name|set
argument_list|(
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|3
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|hi1
operator|=
name|hiw1
operator|.
name|getHiveIntervalYearMonth
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|hi1
operator|.
name|getYears
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|hi1
operator|.
name|getMonths
argument_list|()
argument_list|)
expr_stmt|;
name|hiw1
operator|.
name|set
argument_list|(
operator|new
name|HiveIntervalYearMonthWritable
argument_list|(
operator|new
name|HiveIntervalYearMonth
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hi1
operator|=
name|hiw1
operator|.
name|getHiveIntervalYearMonth
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|hi1
operator|.
name|getYears
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|hi1
operator|.
name|getMonths
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Concurrent
argument_list|(
name|count
operator|=
literal|4
argument_list|)
annotation|@
name|Repeating
argument_list|(
name|repetition
operator|=
literal|100
argument_list|)
specifier|public
name|void
name|testWritableMethods
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveIntervalYearMonthWritable
name|hiw1
init|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|()
decl_stmt|;
name|HiveIntervalYearMonthWritable
name|hiw2
init|=
operator|new
name|HiveIntervalYearMonthWritable
argument_list|()
decl_stmt|;
name|hiw1
operator|.
name|set
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|hiw2
operator|.
name|set
argument_list|(
literal|7
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|hiw1
operator|.
name|equals
argument_list|(
name|hiw2
argument_list|)
argument_list|)
expr_stmt|;
name|ByteArrayOutputStream
name|byteStream
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutput
name|out
init|=
operator|new
name|DataOutputStream
argument_list|(
name|byteStream
argument_list|)
decl_stmt|;
name|hiw1
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|hiw2
operator|.
name|readFields
argument_list|(
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|byteStream
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|hiw1
argument_list|,
name|hiw2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

