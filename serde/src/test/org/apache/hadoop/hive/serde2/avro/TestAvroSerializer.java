begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *    http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|avro
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|reflect
operator|.
name|ReflectData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avro
operator|.
name|generic
operator|.
name|GenericEnumSymbol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|HiveDecimalV1
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|type
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|Buffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TestAvroSerializer
block|{
specifier|private
name|Schema
name|buildSchema
parameter_list|(
name|String
name|recordValues
parameter_list|)
block|{
name|String
name|s
init|=
literal|"{\n"
operator|+
literal|"  \"namespace\": \"org.apache.hadoop.hive\",\n"
operator|+
literal|"  \"name\": \"test_serializer\",\n"
operator|+
literal|"  \"type\": \"record\",\n"
operator|+
literal|"  \"fields\": ["
operator|+
name|recordValues
operator|+
literal|"  ] }"
decl_stmt|;
return|return
name|AvroSerdeUtils
operator|.
name|getSchemaFor
argument_list|(
name|s
argument_list|)
return|;
block|}
comment|/**    * Verify that we can serialize an avro value by taking one, running it through    * the deser process and then serialize it again.    */
specifier|private
name|GenericRecord
name|serializeAndDeserialize
parameter_list|(
name|String
name|recordValue
parameter_list|,
name|String
name|fieldName
parameter_list|,
name|Object
name|fieldValue
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|Schema
name|s
init|=
name|buildSchema
argument_list|(
name|recordValue
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|r
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|r
operator|.
name|put
argument_list|(
name|fieldName
argument_list|,
name|fieldValue
argument_list|)
expr_stmt|;
name|AvroSerializer
name|as
init|=
operator|new
name|AvroSerializer
argument_list|()
decl_stmt|;
name|AvroDeserializer
name|ad
init|=
operator|new
name|AvroDeserializer
argument_list|()
decl_stmt|;
name|AvroObjectInspectorGenerator
name|aoig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|aoig
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|aoig
operator|.
name|getColumnNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
init|=
name|aoig
operator|.
name|getColumnTypes
argument_list|()
decl_stmt|;
name|AvroGenericRecordWritable
name|agrw
init|=
name|Utils
operator|.
name|serializeAndDeserializeRecord
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Object
name|obj
init|=
name|ad
operator|.
name|deserialize
argument_list|(
name|columnNames
argument_list|,
name|columnTypes
argument_list|,
name|agrw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|Writable
name|result
init|=
name|as
operator|.
name|serialize
argument_list|(
name|obj
argument_list|,
name|oi
argument_list|,
name|columnNames
argument_list|,
name|columnTypes
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|AvroGenericRecordWritable
argument_list|)
expr_stmt|;
name|GenericRecord
name|r2
init|=
operator|(
operator|(
name|AvroGenericRecordWritable
operator|)
name|result
operator|)
operator|.
name|getRecord
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|r2
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r2
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeStrings
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|singleFieldTest
argument_list|(
literal|"string1"
argument_list|,
literal|"hello"
argument_list|,
literal|"\"string\""
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|singleFieldTest
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|Object
name|fieldValue
parameter_list|,
name|String
name|fieldType
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|GenericRecord
name|r2
init|=
name|serializeAndDeserialize
argument_list|(
literal|"{ \"name\":\""
operator|+
name|fieldName
operator|+
literal|"\", \"type\":"
operator|+
name|fieldType
operator|+
literal|" }"
argument_list|,
name|fieldName
argument_list|,
name|fieldValue
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|fieldValue
argument_list|,
name|r2
operator|.
name|get
argument_list|(
name|fieldName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeInts
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|singleFieldTest
argument_list|(
literal|"int1"
argument_list|,
literal|42
argument_list|,
literal|"\"int\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeBooleans
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|singleFieldTest
argument_list|(
literal|"boolean1"
argument_list|,
literal|true
argument_list|,
literal|"\"boolean\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeFloats
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|singleFieldTest
argument_list|(
literal|"float1"
argument_list|,
literal|42.24342f
argument_list|,
literal|"\"float\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeDoubles
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|singleFieldTest
argument_list|(
literal|"double1"
argument_list|,
literal|24.00000001
argument_list|,
literal|"\"double\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeTimestamps
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|singleFieldTest
argument_list|(
literal|"timestamp1"
argument_list|,
name|Timestamp
operator|.
name|valueOf
argument_list|(
literal|"2011-01-01 00:00:00"
argument_list|)
operator|.
name|toEpochMilli
argument_list|()
argument_list|,
literal|"\""
operator|+
name|AvroSerDe
operator|.
name|AVRO_LONG_TYPE_NAME
operator|+
literal|"\","
operator|+
literal|"\"logicalType\":\""
operator|+
name|AvroSerDe
operator|.
name|TIMESTAMP_TYPE_NAME
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeDecimals
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.1416"
argument_list|)
operator|.
name|bigIntegerBytes
argument_list|()
argument_list|)
decl_stmt|;
name|singleFieldTest
argument_list|(
literal|"dec1"
argument_list|,
name|bb
operator|.
name|rewind
argument_list|()
argument_list|,
literal|"{\"type\":\"bytes\", \"logicalType\":\"decimal\", \"precision\":5, \"scale\":4}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeLists
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|intList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|intList
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|String
name|field
init|=
literal|"{ \"name\":\"list1\", \"type\":{\"type\":\"array\", \"items\":\"int\"} }"
decl_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"list1"
argument_list|,
name|intList
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|list1
init|=
name|r
operator|.
name|get
argument_list|(
literal|"list1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|list1
operator|instanceof
name|GenericArray
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|list1
operator|instanceof
name|List
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|intList
argument_list|,
name|list1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeListOfDecimals
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|Buffer
argument_list|>
name|bbList
init|=
operator|new
name|ArrayList
argument_list|<
name|Buffer
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|decs
init|=
operator|new
name|String
index|[]
block|{
literal|"3.1416"
block|,
literal|"4.7779"
block|,
literal|"0.2312"
block|,
literal|"9.1000"
block|,
literal|"5.5555"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|decs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|bbList
operator|.
name|add
argument_list|(
name|AvroSerdeUtils
operator|.
name|getBufferFromDecimal
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
name|decs
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|field
init|=
literal|"{ \"name\":\"list1\", \"type\":{\"type\":\"array\","
operator|+
literal|" \"items\":{\"type\":\"bytes\", \"logicalType\":\"decimal\", \"precision\":5, \"scale\":4}} }"
decl_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"list1"
argument_list|,
name|bbList
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bbList
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"list1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeMaps
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"yes"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"no"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|field
init|=
literal|"{ \"name\":\"map1\", \"type\":{\"type\":\"map\", \"values\":\"boolean\"} }"
decl_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"map1"
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"map1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeMapOfDecimals
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Buffer
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Buffer
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"yes"
argument_list|,
name|AvroSerdeUtils
operator|.
name|getBufferFromDecimal
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.14"
argument_list|)
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"no"
argument_list|,
name|AvroSerdeUtils
operator|.
name|getBufferFromDecimal
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"6.2832732"
argument_list|)
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|field
init|=
literal|"{ \"name\":\"map1\", \"type\":{\"type\":\"map\","
operator|+
literal|" \"values\":{\"type\":\"bytes\", \"logicalType\":\"decimal\", \"precision\":5, \"scale\":4}} }"
decl_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"map1"
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"map1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeStructs
parameter_list|()
throws|throws
name|SerDeException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"struct1\", \"type\":{\"type\":\"record\", "
operator|+
literal|"\"name\":\"struct1_name\", \"fields\": [\n"
operator|+
literal|"{ \"name\":\"sInt\", \"type\":\"int\" }, { \"name\""
operator|+
literal|":\"sBoolean\", \"type\":\"boolean\" }, { \"name\":\"sString\", \"type\":\"string\" } ] } }"
decl_stmt|;
name|Schema
name|s
init|=
name|buildSchema
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|innerRecord
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
operator|.
name|getField
argument_list|(
literal|"struct1"
argument_list|)
operator|.
name|schema
argument_list|()
argument_list|)
decl_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"sInt"
argument_list|,
literal|77
argument_list|)
expr_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"sBoolean"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"sString"
argument_list|,
literal|"tedious"
argument_list|)
expr_stmt|;
name|GenericData
operator|.
name|Record
name|r
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|r
operator|.
name|put
argument_list|(
literal|"struct1"
argument_list|,
name|innerRecord
argument_list|)
expr_stmt|;
name|AvroSerializer
name|as
init|=
operator|new
name|AvroSerializer
argument_list|()
decl_stmt|;
name|AvroDeserializer
name|ad
init|=
operator|new
name|AvroDeserializer
argument_list|()
decl_stmt|;
name|AvroObjectInspectorGenerator
name|aoig
init|=
operator|new
name|AvroObjectInspectorGenerator
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|aoig
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
name|aoig
operator|.
name|getColumnNames
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TypeInfo
argument_list|>
name|columnTypes
init|=
name|aoig
operator|.
name|getColumnTypes
argument_list|()
decl_stmt|;
name|AvroGenericRecordWritable
name|agrw
init|=
operator|new
name|AvroGenericRecordWritable
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|agrw
operator|.
name|setFileSchema
argument_list|(
name|r
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|obj
init|=
name|ad
operator|.
name|deserialize
argument_list|(
name|columnNames
argument_list|,
name|columnTypes
argument_list|,
name|agrw
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|Writable
name|result
init|=
name|as
operator|.
name|serialize
argument_list|(
name|obj
argument_list|,
name|oi
argument_list|,
name|columnNames
argument_list|,
name|columnTypes
argument_list|,
name|s
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|result
operator|instanceof
name|AvroGenericRecordWritable
argument_list|)
expr_stmt|;
name|GenericRecord
name|r2
init|=
operator|(
operator|(
name|AvroGenericRecordWritable
operator|)
name|result
operator|)
operator|.
name|getRecord
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|s
argument_list|,
name|r2
operator|.
name|getSchema
argument_list|()
argument_list|)
expr_stmt|;
name|GenericRecord
name|r3
init|=
operator|(
name|GenericRecord
operator|)
name|r2
operator|.
name|get
argument_list|(
literal|"struct1"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|77
argument_list|,
name|r3
operator|.
name|get
argument_list|(
literal|"sInt"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|r3
operator|.
name|get
argument_list|(
literal|"sBoolean"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"tedious"
argument_list|,
name|r3
operator|.
name|get
argument_list|(
literal|"sString"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeUnions
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"union1\", \"type\":[\"float\", \"boolean\", \"string\","
operator|+
literal|" {\"type\":\"bytes\", \"logicalType\":\"decimal\", \"precision\":5, \"scale\":4}] }"
decl_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"union1"
argument_list|,
literal|424.4f
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|424.4f
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"union1"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"union1"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|true
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"union1"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"union1"
argument_list|,
literal|"hello"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hello"
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"union1"
argument_list|)
argument_list|)
expr_stmt|;
name|HiveDecimal
name|dec
init|=
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.1415926"
argument_list|)
decl_stmt|;
name|r
operator|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"union1"
argument_list|,
name|AvroSerdeUtils
operator|.
name|getBufferFromDecimal
argument_list|(
name|dec
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|HiveDecimal
name|dec1
init|=
name|AvroSerdeUtils
operator|.
name|getHiveDecimalFromByteBuffer
argument_list|(
operator|(
name|ByteBuffer
operator|)
name|r
operator|.
name|get
argument_list|(
literal|"union1"
argument_list|)
argument_list|,
literal|4
argument_list|)
decl_stmt|;
comment|// For now, old class.
name|HiveDecimalV1
name|oldDec
init|=
name|HiveDecimalV1
operator|.
name|create
argument_list|(
name|dec
operator|.
name|bigDecimalValue
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|oldDec
operator|.
name|setScale
argument_list|(
literal|4
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|dec1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
enum|enum
name|enum1
block|{
name|BLUE
block|,
name|RED
block|,
name|GREEN
block|}
empty_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|canSerializeEnums
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|type
init|=
literal|"{\"type\": \"enum\", \"name\": \"enum1_values\", "
operator|+
literal|"\"symbols\":[\"BLUE\",\"RED\",\"GREEN\"]}"
decl_stmt|;
name|Schema
name|schema
init|=
name|AvroSerdeUtils
operator|.
name|getSchemaFor
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|String
name|field
init|=
literal|"{ \"name\":\"enum1\", \"type\": "
operator|+
name|schema
operator|+
literal|" }"
decl_stmt|;
for|for
control|(
name|enum1
name|e
range|:
name|enum1
operator|.
name|values
argument_list|()
control|)
block|{
name|GenericEnumSymbol
name|symbol
init|=
operator|new
name|GenericData
operator|.
name|EnumSymbol
argument_list|(
name|schema
argument_list|,
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"enum1"
argument_list|,
name|symbol
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|e
argument_list|,
name|enum1
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|get
argument_list|(
literal|"enum1"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeNullableEnums
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|type
init|=
literal|"{\"type\": \"enum\", \"name\": \"enum1_values\",\n"
operator|+
literal|"  \"namespace\": \"org.apache.hadoop.hive\",\n"
operator|+
literal|"  \"symbols\":[\"BLUE\",\"RED\",\"GREEN\"]}"
decl_stmt|;
name|Schema
name|schema
init|=
name|AvroSerdeUtils
operator|.
name|getSchemaFor
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|String
name|field
init|=
literal|"{ \"name\":\"nullableenum\", \"type\": [\"null\", "
operator|+
name|schema
operator|+
literal|"] }"
decl_stmt|;
name|GenericEnumSymbol
name|symbol
init|=
operator|new
name|GenericData
operator|.
name|EnumSymbol
argument_list|(
name|schema
argument_list|,
name|enum1
operator|.
name|BLUE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableenum"
argument_list|,
name|symbol
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|enum1
operator|.
name|BLUE
argument_list|,
name|enum1
operator|.
name|valueOf
argument_list|(
name|r
operator|.
name|get
argument_list|(
literal|"nullableenum"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableenum"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|get
argument_list|(
literal|"nullableenum"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeNullablePrimitiveTypes
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"nullableint\", \"type\":[\"int\", \"null\"] }"
decl_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableint"
argument_list|,
literal|42
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|42
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"nullableint"
argument_list|)
argument_list|)
expr_stmt|;
name|r
operator|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableint"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|get
argument_list|(
literal|"nullableint"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeMapsWithNullablePrimitiveValues
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"mapWithNulls\", \"type\": "
operator|+
literal|"{\"type\":\"map\", \"values\": [\"null\", \"boolean\"]} }"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"yes"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"no"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"maybe"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"mapWithNulls"
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|r
operator|.
name|get
argument_list|(
literal|"mapWithNulls"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeNullableRecords
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"nullableStruct\", \"type\": [\"null\", {\"type\":\"record\", "
operator|+
literal|"\"name\":\"struct1_name\", \"fields\": [\n"
operator|+
literal|"{ \"name\":\"sInt\", \"type\":\"int\" }, "
operator|+
literal|"{ \"name\":\"sBoolean\", \"type\":\"boolean\" }, "
operator|+
literal|"{ \"name\":\"sString\", \"type\":\"string\" } ] }] }"
decl_stmt|;
name|Schema
name|s
init|=
name|buildSchema
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Schema
name|nullable
init|=
name|s
operator|.
name|getField
argument_list|(
literal|"nullableStruct"
argument_list|)
operator|.
name|schema
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|AvroSerdeUtils
operator|.
name|isNullableType
argument_list|(
name|nullable
argument_list|)
argument_list|)
expr_stmt|;
name|GenericData
operator|.
name|Record
name|innerRecord
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|AvroSerdeUtils
operator|.
name|getOtherTypeFromNullableType
argument_list|(
name|nullable
argument_list|)
argument_list|)
decl_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"sInt"
argument_list|,
literal|77
argument_list|)
expr_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"sBoolean"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"sString"
argument_list|,
literal|"tedious"
argument_list|)
expr_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableStruct"
argument_list|,
name|innerRecord
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|r
operator|.
name|get
argument_list|(
literal|"nullableStruct"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|innerRecord
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|innerRecord
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|r
operator|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableStruct"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|get
argument_list|(
literal|"nullableStruct"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeNullableLists
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|Integer
argument_list|>
name|intList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|intList
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|String
name|field
init|=
literal|"{ \"name\":\"nullableList\", \"type\": [\"null\", "
operator|+
literal|"{\"type\":\"array\", \"items\":\"int\"}] }"
decl_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableList"
argument_list|,
name|intList
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|r
operator|.
name|get
argument_list|(
literal|"nullableList"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|intList
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|intList
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|r
operator|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableList"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|get
argument_list|(
literal|"nullableList"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeNullableMaps
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"nullableMap\", \"type\": [\"null\", "
operator|+
literal|"{\"type\":\"map\", \"values\":\"boolean\"}] }"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"yes"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"no"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableMap"
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|r
operator|.
name|get
argument_list|(
literal|"nullableMap"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|m
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|r
operator|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableMap"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|get
argument_list|(
literal|"nullableMap"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeNullableFixed
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"nullableFixed\", \"type\": [\"null\", "
operator|+
literal|"{\"type\":\"fixed\", \"name\":\"threebytes\", \"size\":3}] }"
decl_stmt|;
name|Schema
name|s
init|=
name|buildSchema
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|Schema
name|nullable
init|=
name|s
operator|.
name|getField
argument_list|(
literal|"nullableFixed"
argument_list|)
operator|.
name|schema
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|AvroSerdeUtils
operator|.
name|isNullableType
argument_list|(
name|nullable
argument_list|)
argument_list|)
expr_stmt|;
name|GenericData
operator|.
name|Fixed
name|fixed
init|=
operator|new
name|GenericData
operator|.
name|Fixed
argument_list|(
name|AvroSerdeUtils
operator|.
name|getOtherTypeFromNullableType
argument_list|(
name|nullable
argument_list|)
argument_list|,
literal|"k9@"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableFixed"
argument_list|,
name|fixed
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Fixed
name|result
init|=
operator|(
name|GenericData
operator|.
name|Fixed
operator|)
name|r
operator|.
name|get
argument_list|(
literal|"nullableFixed"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|fixed
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|fixed
operator|.
name|bytes
argument_list|()
argument_list|,
name|result
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableFixed"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|get
argument_list|(
literal|"nullableFixed"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeNullableBytes
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"nullableBytes\", \"type\":[\"null\", \"bytes\"] }"
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"easy as one two three"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|bb
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableBytes"
argument_list|,
name|bb
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|r
operator|.
name|get
argument_list|(
literal|"nullableBytes"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|bb
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bb
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|r
operator|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableBytes"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|get
argument_list|(
literal|"nullableBytes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeNullableDecimals
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"nullableBytes\", \"type\":[\"null\", "
operator|+
literal|"{\"type\":\"bytes\", \"logicalType\":\"decimal\", \"precision\":5, \"scale\":4}] }"
decl_stmt|;
name|Buffer
name|bb
init|=
name|AvroSerdeUtils
operator|.
name|getBufferFromDecimal
argument_list|(
name|HiveDecimal
operator|.
name|create
argument_list|(
literal|"3.1416"
argument_list|)
argument_list|,
literal|4
argument_list|)
decl_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableBytes"
argument_list|,
name|bb
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|r
operator|.
name|get
argument_list|(
literal|"nullableBytes"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|bb
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|bb
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|r
operator|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"nullableBytes"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|get
argument_list|(
literal|"nullableBytes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeArraysWithNullablePrimitiveElements
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
specifier|final
name|String
name|field
init|=
literal|"{ \"name\":\"listWithNulls\", \"type\": "
operator|+
literal|"{\"type\":\"array\", \"items\": [\"null\", \"int\"]} }"
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|intList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|intList
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|null
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"listWithNulls"
argument_list|,
name|intList
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|r
operator|.
name|get
argument_list|(
literal|"listWithNulls"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|intList
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|intList
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeArraysWithNullableComplexElements
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
specifier|final
name|String
name|field
init|=
literal|"{ \"name\":\"listOfNullableLists\", \"type\": "
operator|+
literal|"{\"type\":\"array\", \"items\": [\"null\", "
operator|+
literal|"{\"type\": \"array\", \"items\": \"int\"}]} }"
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|intListList
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|intList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|intList
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|intListList
argument_list|,
name|intList
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"listOfNullableLists"
argument_list|,
name|intListList
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|r
operator|.
name|get
argument_list|(
literal|"listOfNullableLists"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|intListList
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|intListList
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeRecordsWithNullableComplexElements
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"struct1\", \"type\":{\"type\":\"record\", "
operator|+
literal|"\"name\":\"struct1_name\", \"fields\": [\n"
operator|+
literal|"{ \"name\":\"sInt\", \"type\":\"int\" }, { \"name\""
operator|+
literal|":\"sBoolean\", \"type\":\"boolean\" }, { \"name\":\"nullableList\", \"type\":[\"null\", "
operator|+
literal|"{ \"type\":\"array\", \"items\":\"int\"}] } ] } }"
decl_stmt|;
name|Schema
name|s
init|=
name|buildSchema
argument_list|(
name|field
argument_list|)
decl_stmt|;
name|GenericData
operator|.
name|Record
name|innerRecord
init|=
operator|new
name|GenericData
operator|.
name|Record
argument_list|(
name|s
operator|.
name|getField
argument_list|(
literal|"struct1"
argument_list|)
operator|.
name|schema
argument_list|()
argument_list|)
decl_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"sInt"
argument_list|,
literal|77
argument_list|)
expr_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"sBoolean"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|intList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|intList
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"nullableList"
argument_list|,
name|intList
argument_list|)
expr_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"struct1"
argument_list|,
name|innerRecord
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|r
operator|.
name|get
argument_list|(
literal|"struct1"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|innerRecord
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|innerRecord
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|innerRecord
operator|.
name|put
argument_list|(
literal|"nullableList"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|r
operator|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"struct1"
argument_list|,
name|innerRecord
argument_list|)
expr_stmt|;
name|result
operator|=
name|r
operator|.
name|get
argument_list|(
literal|"struct1"
argument_list|)
expr_stmt|;
name|assertNotSame
argument_list|(
name|innerRecord
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|innerRecord
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeMapsWithNullableComplexValues
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"mapWithNullableLists\", \"type\": "
operator|+
literal|"{\"type\":\"map\", \"values\": [\"null\", "
operator|+
literal|"{\"type\": \"array\", \"items\": \"int\"}]} }"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Integer
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Integer
argument_list|>
name|intList
init|=
operator|new
name|ArrayList
argument_list|<
name|Integer
argument_list|>
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|intList
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"list"
argument_list|,
name|intList
argument_list|)
expr_stmt|;
name|m
operator|.
name|put
argument_list|(
literal|"null"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"mapWithNullableLists"
argument_list|,
name|m
argument_list|)
decl_stmt|;
name|Object
name|result
init|=
name|r
operator|.
name|get
argument_list|(
literal|"mapWithNullableLists"
argument_list|)
decl_stmt|;
name|assertNotSame
argument_list|(
name|m
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|m
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeBytes
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"bytes1\", \"type\":\"bytes\" }"
decl_stmt|;
name|ByteBuffer
name|bb
init|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
literal|"easy as one two three"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|bb
operator|.
name|rewind
argument_list|()
expr_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"bytes1"
argument_list|,
name|bb
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bb
argument_list|,
name|r
operator|.
name|get
argument_list|(
literal|"bytes1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|canSerializeFixed
parameter_list|()
throws|throws
name|SerDeException
throws|,
name|IOException
block|{
name|String
name|field
init|=
literal|"{ \"name\":\"fixed1\", \"type\":{\"type\":\"fixed\", "
operator|+
literal|"\"name\":\"threebytes\", \"size\":3} }"
decl_stmt|;
name|GenericData
operator|.
name|Fixed
name|fixed
init|=
operator|new
name|GenericData
operator|.
name|Fixed
argument_list|(
name|buildSchema
argument_list|(
name|field
argument_list|)
argument_list|,
literal|"k9@"
operator|.
name|getBytes
argument_list|()
argument_list|)
decl_stmt|;
name|GenericRecord
name|r
init|=
name|serializeAndDeserialize
argument_list|(
name|field
argument_list|,
literal|"fixed1"
argument_list|,
name|fixed
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|fixed
operator|.
name|bytes
argument_list|()
argument_list|,
operator|(
operator|(
name|GenericData
operator|.
name|Fixed
operator|)
name|r
operator|.
name|get
argument_list|(
literal|"fixed1"
argument_list|)
operator|)
operator|.
name|bytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

