begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|test
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestThriftSerDe
extends|extends
name|TestCase
block|{
name|ThriftSerDe
name|serde
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
name|Properties
name|schema
decl_stmt|;
name|ThriftTestObj
name|testObj
decl_stmt|;
specifier|public
name|TestThriftSerDe
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|serde
operator|=
operator|new
name|ThriftSerDe
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|schema
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|schema
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_CLASS
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|test
operator|.
name|ThriftTestObj
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"com.facebook.thrift.protocol.TJSONProtocol"
argument_list|)
expr_stmt|;
name|serde
operator|.
name|initialize
argument_list|(
name|conf
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|testObj
operator|=
operator|new
name|ThriftTestObj
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|BytesWritable
name|buffer
decl_stmt|;
specifier|final
name|String
name|output
init|=
literal|"{\"-1\":{\"i32\":10},\"-2\":{\"str\":\"hello world!\"}}"
decl_stmt|;
specifier|public
name|void
name|testSerialize
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|testObj
operator|.
name|field1
operator|=
literal|10
expr_stmt|;
name|testObj
operator|.
name|field2
operator|=
literal|"hello world!"
expr_stmt|;
name|buffer
operator|=
operator|(
name|BytesWritable
operator|)
name|serde
operator|.
name|serialize
argument_list|(
name|testObj
argument_list|)
expr_stmt|;
name|byte
name|temp
index|[]
init|=
name|buffer
operator|.
name|get
argument_list|()
decl_stmt|;
name|String
name|tempStr
init|=
operator|new
name|String
argument_list|(
name|temp
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tempStr
operator|.
name|equals
argument_list|(
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testDeSerialize
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|buffer
operator|=
operator|new
name|BytesWritable
argument_list|(
name|output
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|ThriftTestObj
name|obj
init|=
operator|(
name|ThriftTestObj
operator|)
name|serde
operator|.
name|deserialize
argument_list|(
name|buffer
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|.
name|field1
operator|==
literal|10
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|.
name|field2
operator|.
name|equals
argument_list|(
literal|"hello world!"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetFieldFromExpression
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|SerDeField
name|f
init|=
name|serde
operator|.
name|getFieldFromExpression
argument_list|(
literal|null
argument_list|,
literal|"field1"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|isPrimitive
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|isList
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|isMap
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|f
operator|=
name|serde
operator|.
name|getFieldFromExpression
argument_list|(
literal|null
argument_list|,
literal|"field3"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|isList
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"java.util.List"
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|=
name|serde
operator|.
name|getFieldFromExpression
argument_list|(
name|f
argument_list|,
literal|"field0"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"field0"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|getType
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|f
operator|=
name|serde
operator|.
name|getFieldFromExpression
argument_list|(
literal|null
argument_list|,
literal|"fieldXXX"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetFields
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|List
argument_list|<
name|SerDeField
argument_list|>
name|fields
init|=
name|serde
operator|.
name|getFields
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"field1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"field2"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SerDeField
argument_list|>
name|fields2
init|=
name|serde
operator|.
name|getFields
argument_list|(
name|fields
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fields2
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fields2
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"field0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

