begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|thrift
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TestTCTLSeparatedProtocol
extends|extends
name|TestCase
block|{
specifier|public
name|TestTCTLSeparatedProtocol
parameter_list|()
throws|throws
name|Exception
block|{   }
specifier|public
name|void
name|testLookupSerDe
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|TMemoryBuffer
name|trans
init|=
operator|new
name|TMemoryBuffer
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|String
name|foo
init|=
literal|"Hello"
decl_stmt|;
name|String
name|bar
init|=
literal|"World!"
decl_stmt|;
name|byte
name|separator
index|[]
init|=
block|{
name|TCTLSeparatedProtocol
operator|.
name|defaultPrimarySeparatorChar_
block|}
decl_stmt|;
name|trans
operator|.
name|write
argument_list|(
name|foo
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|foo
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|trans
operator|.
name|write
argument_list|(
name|separator
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|trans
operator|.
name|write
argument_list|(
name|separator
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|trans
operator|.
name|write
argument_list|(
name|bar
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|bar
operator|.
name|getBytes
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|trans
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// use 3 as the row buffer size to force lots of re-buffering.
name|TCTLSeparatedProtocol
name|prot
init|=
operator|new
name|TCTLSeparatedProtocol
argument_list|(
name|trans
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|prot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
name|prot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
name|String
name|hello
init|=
name|prot
operator|.
name|readString
argument_list|()
decl_stmt|;
name|prot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hello
operator|.
name|equals
argument_list|(
name|foo
argument_list|)
argument_list|)
expr_stmt|;
name|prot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
name|hello
operator|=
name|prot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|prot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hello
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|prot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
name|hello
operator|=
name|prot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|prot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hello
operator|.
name|equals
argument_list|(
name|bar
argument_list|)
argument_list|)
expr_stmt|;
name|prot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
name|hello
operator|=
name|prot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|prot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|hello
operator|.
name|length
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

