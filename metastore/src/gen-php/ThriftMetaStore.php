<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/hive_metastore/hive_metastore_types.php';
include_once $GLOBALS['THRIFT_ROOT'].'/packages/fb303/FacebookService.php';

interface ThriftMetaStoreIf extends FacebookServiceIf {
  public function get_fields($db_name, $table_name);
  public function get_tables($db_name, $pattern);
  public function get_schema($table_name);
  public function alter_table($db_name, $table_name, $schema);
  public function create_table($db_name, $table_name, $schema);
  public function drop_table($db_name, $table_name);
  public function truncate_table($db_name, $table_name, $partition);
  public function table_exists($db_name, $table_name);
  public function get_partitions($db_name, $table_name);
  public function get_dbs();
  public function cat($db_name, $table_name, $partition, $high);
}

class ThriftMetaStoreClient extends FacebookServiceClient implements ThriftMetaStoreIf {
  public function __construct($input, $output=null) {
    parent::__construct($input, $output);
  }

  public function get_fields($db_name, $table_name)
  {
    $this->send_get_fields($db_name, $table_name);
    return $this->recv_get_fields();
  }

  public function send_get_fields($db_name, $table_name)
  {
    $args = new ThriftMetaStore_get_fields_args();
    $args->db_name = $db_name;
    $args->table_name = $table_name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_fields', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_fields', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_fields()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'ThriftMetaStore_get_fields_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new ThriftMetaStore_get_fields_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    if ($result->ouch3 !== null) {
      throw $result->ouch3;
    }
    throw new Exception("get_fields failed: unknown result");
  }

  public function get_tables($db_name, $pattern)
  {
    $this->send_get_tables($db_name, $pattern);
    return $this->recv_get_tables();
  }

  public function send_get_tables($db_name, $pattern)
  {
    $args = new ThriftMetaStore_get_tables_args();
    $args->db_name = $db_name;
    $args->pattern = $pattern;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_tables', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_tables', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_tables()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'ThriftMetaStore_get_tables_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new ThriftMetaStore_get_tables_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    if ($result->ouch3 !== null) {
      throw $result->ouch3;
    }
    throw new Exception("get_tables failed: unknown result");
  }

  public function get_schema($table_name)
  {
    $this->send_get_schema($table_name);
    return $this->recv_get_schema();
  }

  public function send_get_schema($table_name)
  {
    $args = new ThriftMetaStore_get_schema_args();
    $args->table_name = $table_name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_schema', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_schema', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_schema()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'ThriftMetaStore_get_schema_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new ThriftMetaStore_get_schema_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    if ($result->ouch3 !== null) {
      throw $result->ouch3;
    }
    throw new Exception("get_schema failed: unknown result");
  }

  public function alter_table($db_name, $table_name, $schema)
  {
    $this->send_alter_table($db_name, $table_name, $schema);
    $this->recv_alter_table();
  }

  public function send_alter_table($db_name, $table_name, $schema)
  {
    $args = new ThriftMetaStore_alter_table_args();
    $args->db_name = $db_name;
    $args->table_name = $table_name;
    $args->schema = $schema;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'alter_table', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('alter_table', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_alter_table()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'ThriftMetaStore_alter_table_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new ThriftMetaStore_alter_table_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    if ($result->ouch3 !== null) {
      throw $result->ouch3;
    }
    return;
  }

  public function create_table($db_name, $table_name, $schema)
  {
    $this->send_create_table($db_name, $table_name, $schema);
    $this->recv_create_table();
  }

  public function send_create_table($db_name, $table_name, $schema)
  {
    $args = new ThriftMetaStore_create_table_args();
    $args->db_name = $db_name;
    $args->table_name = $table_name;
    $args->schema = $schema;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'create_table', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('create_table', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_create_table()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'ThriftMetaStore_create_table_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new ThriftMetaStore_create_table_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    return;
  }

  public function drop_table($db_name, $table_name)
  {
    $this->send_drop_table($db_name, $table_name);
    $this->recv_drop_table();
  }

  public function send_drop_table($db_name, $table_name)
  {
    $args = new ThriftMetaStore_drop_table_args();
    $args->db_name = $db_name;
    $args->table_name = $table_name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'drop_table', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('drop_table', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_drop_table()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'ThriftMetaStore_drop_table_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new ThriftMetaStore_drop_table_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    if ($result->ouch3 !== null) {
      throw $result->ouch3;
    }
    return;
  }

  public function truncate_table($db_name, $table_name, $partition)
  {
    $this->send_truncate_table($db_name, $table_name, $partition);
    $this->recv_truncate_table();
  }

  public function send_truncate_table($db_name, $table_name, $partition)
  {
    $args = new ThriftMetaStore_truncate_table_args();
    $args->db_name = $db_name;
    $args->table_name = $table_name;
    $args->partition = $partition;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'truncate_table', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('truncate_table', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_truncate_table()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'ThriftMetaStore_truncate_table_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new ThriftMetaStore_truncate_table_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    if ($result->ouch3 !== null) {
      throw $result->ouch3;
    }
    return;
  }

  public function table_exists($db_name, $table_name)
  {
    $this->send_table_exists($db_name, $table_name);
    return $this->recv_table_exists();
  }

  public function send_table_exists($db_name, $table_name)
  {
    $args = new ThriftMetaStore_table_exists_args();
    $args->db_name = $db_name;
    $args->table_name = $table_name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'table_exists', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('table_exists', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_table_exists()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'ThriftMetaStore_table_exists_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new ThriftMetaStore_table_exists_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    throw new Exception("table_exists failed: unknown result");
  }

  public function get_partitions($db_name, $table_name)
  {
    $this->send_get_partitions($db_name, $table_name);
    return $this->recv_get_partitions();
  }

  public function send_get_partitions($db_name, $table_name)
  {
    $args = new ThriftMetaStore_get_partitions_args();
    $args->db_name = $db_name;
    $args->table_name = $table_name;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_partitions', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_partitions', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_partitions()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'ThriftMetaStore_get_partitions_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new ThriftMetaStore_get_partitions_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    if ($result->ouch3 !== null) {
      throw $result->ouch3;
    }
    throw new Exception("get_partitions failed: unknown result");
  }

  public function get_dbs()
  {
    $this->send_get_dbs();
    return $this->recv_get_dbs();
  }

  public function send_get_dbs()
  {
    $args = new ThriftMetaStore_get_dbs_args();
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'get_dbs', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('get_dbs', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_get_dbs()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'ThriftMetaStore_get_dbs_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new ThriftMetaStore_get_dbs_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch !== null) {
      throw $result->ouch;
    }
    throw new Exception("get_dbs failed: unknown result");
  }

  public function cat($db_name, $table_name, $partition, $high)
  {
    $this->send_cat($db_name, $table_name, $partition, $high);
    return $this->recv_cat();
  }

  public function send_cat($db_name, $table_name, $partition, $high)
  {
    $args = new ThriftMetaStore_cat_args();
    $args->db_name = $db_name;
    $args->table_name = $table_name;
    $args->partition = $partition;
    $args->high = $high;
    $bin_accel = ($this->output_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'cat', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('cat', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_cat()
  {
    $bin_accel = ($this->input_ instanceof TProtocol::$TBINARYPROTOCOLACCELERATED) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, 'ThriftMetaStore_cat_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new ThriftMetaStore_cat_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->ouch1 !== null) {
      throw $result->ouch1;
    }
    if ($result->ouch2 !== null) {
      throw $result->ouch2;
    }
    if ($result->ouch3 !== null) {
      throw $result->ouch3;
    }
    throw new Exception("cat failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ThriftMetaStore_get_fields_args {
  static $_TSPEC;

  public $db_name = null;
  public $table_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -1 => array(
          'var' => 'db_name',
          'type' => TType::STRING,
          ),
        -2 => array(
          'var' => 'table_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['db_name'])) {
        $this->db_name = $vals['db_name'];
      }
      if (isset($vals['table_name'])) {
        $this->table_name = $vals['table_name'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_get_fields_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->db_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_get_fields_args');
    if ($this->db_name !== null) {
      $xfer += $output->writeFieldBegin('db_name', TType::STRING, -1);
      $xfer += $output->writeString($this->db_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->table_name !== null) {
      $xfer += $output->writeFieldBegin('table_name', TType::STRING, -2);
      $xfer += $output->writeString($this->table_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_get_fields_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;
  public $ouch3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'FieldSchema',
            ),
          ),
        -3 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'MetaException',
          ),
        -4 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'UnknownTableException',
          ),
        -5 => array(
          'var' => 'ouch3',
          'type' => TType::STRUCT,
          'class' => 'UnknownDBException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
      if (isset($vals['ouch3'])) {
        $this->ouch3 = $vals['ouch3'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_get_fields_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size175 = 0;
            $_etype178 = 0;
            $xfer += $input->readListBegin($_etype178, $_size175);
            for ($_i179 = 0; $_i179 < $_size175; ++$_i179)
            {
              $elem180 = null;
              $elem180 = new FieldSchema();
              $xfer += $elem180->read($input);
              $this->success []= $elem180;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -3:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new MetaException();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -4:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new UnknownTableException();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -5:
          if ($ftype == TType::STRUCT) {
            $this->ouch3 = new UnknownDBException();
            $xfer += $this->ouch3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_get_fields_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter181)
          {
            $xfer += $iter181->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, -3);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, -4);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch3 !== null) {
      $xfer += $output->writeFieldBegin('ouch3', TType::STRUCT, -5);
      $xfer += $this->ouch3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_get_tables_args {
  static $_TSPEC;

  public $db_name = null;
  public $pattern = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -1 => array(
          'var' => 'db_name',
          'type' => TType::STRING,
          ),
        -2 => array(
          'var' => 'pattern',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['db_name'])) {
        $this->db_name = $vals['db_name'];
      }
      if (isset($vals['pattern'])) {
        $this->pattern = $vals['pattern'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_get_tables_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->db_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pattern);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_get_tables_args');
    if ($this->db_name !== null) {
      $xfer += $output->writeFieldBegin('db_name', TType::STRING, -1);
      $xfer += $output->writeString($this->db_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pattern !== null) {
      $xfer += $output->writeFieldBegin('pattern', TType::STRING, -2);
      $xfer += $output->writeString($this->pattern);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_get_tables_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;
  public $ouch3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        -3 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'MetaException',
          ),
        -4 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'UnknownTableException',
          ),
        -5 => array(
          'var' => 'ouch3',
          'type' => TType::STRUCT,
          'class' => 'UnknownDBException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
      if (isset($vals['ouch3'])) {
        $this->ouch3 = $vals['ouch3'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_get_tables_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size182 = 0;
            $_etype185 = 0;
            $xfer += $input->readListBegin($_etype185, $_size182);
            for ($_i186 = 0; $_i186 < $_size182; ++$_i186)
            {
              $elem187 = null;
              $xfer += $input->readString($elem187);
              $this->success []= $elem187;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -3:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new MetaException();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -4:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new UnknownTableException();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -5:
          if ($ftype == TType::STRUCT) {
            $this->ouch3 = new UnknownDBException();
            $xfer += $this->ouch3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_get_tables_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter188)
          {
            $xfer += $output->writeString($iter188);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, -3);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, -4);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch3 !== null) {
      $xfer += $output->writeFieldBegin('ouch3', TType::STRUCT, -5);
      $xfer += $this->ouch3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_get_schema_args {
  static $_TSPEC;

  public $table_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -1 => array(
          'var' => 'table_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['table_name'])) {
        $this->table_name = $vals['table_name'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_get_schema_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_get_schema_args');
    if ($this->table_name !== null) {
      $xfer += $output->writeFieldBegin('table_name', TType::STRING, -1);
      $xfer += $output->writeString($this->table_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_get_schema_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;
  public $ouch3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        -2 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'MetaException',
          ),
        -3 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'UnknownTableException',
          ),
        -4 => array(
          'var' => 'ouch3',
          'type' => TType::STRUCT,
          'class' => 'UnknownDBException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
      if (isset($vals['ouch3'])) {
        $this->ouch3 = $vals['ouch3'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_get_schema_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size189 = 0;
            $_ktype190 = 0;
            $_vtype191 = 0;
            $xfer += $input->readMapBegin($_ktype190, $_vtype191, $_size189);
            for ($_i193 = 0; $_i193 < $_size189; ++$_i193)
            {
              $key194 = '';
              $val195 = '';
              $xfer += $input->readString($key194);
              $xfer += $input->readString($val195);
              $this->success[$key194] = $val195;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -2:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new MetaException();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -3:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new UnknownTableException();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -4:
          if ($ftype == TType::STRUCT) {
            $this->ouch3 = new UnknownDBException();
            $xfer += $this->ouch3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_get_schema_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->success));
        {
          foreach ($this->success as $kiter196 => $viter197)
          {
            $xfer += $output->writeString($kiter196);
            $xfer += $output->writeString($viter197);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, -2);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, -3);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch3 !== null) {
      $xfer += $output->writeFieldBegin('ouch3', TType::STRUCT, -4);
      $xfer += $this->ouch3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_alter_table_args {
  static $_TSPEC;

  public $db_name = null;
  public $table_name = null;
  public $schema = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -1 => array(
          'var' => 'db_name',
          'type' => TType::STRING,
          ),
        -2 => array(
          'var' => 'table_name',
          'type' => TType::STRING,
          ),
        -3 => array(
          'var' => 'schema',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['db_name'])) {
        $this->db_name = $vals['db_name'];
      }
      if (isset($vals['table_name'])) {
        $this->table_name = $vals['table_name'];
      }
      if (isset($vals['schema'])) {
        $this->schema = $vals['schema'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_alter_table_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->db_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -3:
          if ($ftype == TType::MAP) {
            $this->schema = array();
            $_size198 = 0;
            $_ktype199 = 0;
            $_vtype200 = 0;
            $xfer += $input->readMapBegin($_ktype199, $_vtype200, $_size198);
            for ($_i202 = 0; $_i202 < $_size198; ++$_i202)
            {
              $key203 = '';
              $val204 = '';
              $xfer += $input->readString($key203);
              $xfer += $input->readString($val204);
              $this->schema[$key203] = $val204;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_alter_table_args');
    if ($this->db_name !== null) {
      $xfer += $output->writeFieldBegin('db_name', TType::STRING, -1);
      $xfer += $output->writeString($this->db_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->table_name !== null) {
      $xfer += $output->writeFieldBegin('table_name', TType::STRING, -2);
      $xfer += $output->writeString($this->table_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->schema !== null) {
      $xfer += $output->writeFieldBegin('schema', TType::MAP, -3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->schema));
        {
          foreach ($this->schema as $kiter205 => $viter206)
          {
            $xfer += $output->writeString($kiter205);
            $xfer += $output->writeString($viter206);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_alter_table_result {
  static $_TSPEC;

  public $ouch1 = null;
  public $ouch2 = null;
  public $ouch3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -4 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'MetaException',
          ),
        -5 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'UnknownTableException',
          ),
        -6 => array(
          'var' => 'ouch3',
          'type' => TType::STRUCT,
          'class' => 'UnknownDBException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
      if (isset($vals['ouch3'])) {
        $this->ouch3 = $vals['ouch3'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_alter_table_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -4:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new MetaException();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -5:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new UnknownTableException();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -6:
          if ($ftype == TType::STRUCT) {
            $this->ouch3 = new UnknownDBException();
            $xfer += $this->ouch3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_alter_table_result');
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, -4);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, -5);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch3 !== null) {
      $xfer += $output->writeFieldBegin('ouch3', TType::STRUCT, -6);
      $xfer += $this->ouch3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_create_table_args {
  static $_TSPEC;

  public $db_name = null;
  public $table_name = null;
  public $schema = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -1 => array(
          'var' => 'db_name',
          'type' => TType::STRING,
          ),
        -2 => array(
          'var' => 'table_name',
          'type' => TType::STRING,
          ),
        -3 => array(
          'var' => 'schema',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['db_name'])) {
        $this->db_name = $vals['db_name'];
      }
      if (isset($vals['table_name'])) {
        $this->table_name = $vals['table_name'];
      }
      if (isset($vals['schema'])) {
        $this->schema = $vals['schema'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_create_table_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->db_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -3:
          if ($ftype == TType::MAP) {
            $this->schema = array();
            $_size207 = 0;
            $_ktype208 = 0;
            $_vtype209 = 0;
            $xfer += $input->readMapBegin($_ktype208, $_vtype209, $_size207);
            for ($_i211 = 0; $_i211 < $_size207; ++$_i211)
            {
              $key212 = '';
              $val213 = '';
              $xfer += $input->readString($key212);
              $xfer += $input->readString($val213);
              $this->schema[$key212] = $val213;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_create_table_args');
    if ($this->db_name !== null) {
      $xfer += $output->writeFieldBegin('db_name', TType::STRING, -1);
      $xfer += $output->writeString($this->db_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->table_name !== null) {
      $xfer += $output->writeFieldBegin('table_name', TType::STRING, -2);
      $xfer += $output->writeString($this->table_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->schema !== null) {
      $xfer += $output->writeFieldBegin('schema', TType::MAP, -3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->schema));
        {
          foreach ($this->schema as $kiter214 => $viter215)
          {
            $xfer += $output->writeString($kiter214);
            $xfer += $output->writeString($viter215);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_create_table_result {
  static $_TSPEC;

  public $ouch1 = null;
  public $ouch2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -4 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'MetaException',
          ),
        -5 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'UnknownDBException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_create_table_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -4:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new MetaException();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -5:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new UnknownDBException();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_create_table_result');
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, -4);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, -5);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_drop_table_args {
  static $_TSPEC;

  public $db_name = null;
  public $table_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -1 => array(
          'var' => 'db_name',
          'type' => TType::STRING,
          ),
        -2 => array(
          'var' => 'table_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['db_name'])) {
        $this->db_name = $vals['db_name'];
      }
      if (isset($vals['table_name'])) {
        $this->table_name = $vals['table_name'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_drop_table_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->db_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_drop_table_args');
    if ($this->db_name !== null) {
      $xfer += $output->writeFieldBegin('db_name', TType::STRING, -1);
      $xfer += $output->writeString($this->db_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->table_name !== null) {
      $xfer += $output->writeFieldBegin('table_name', TType::STRING, -2);
      $xfer += $output->writeString($this->table_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_drop_table_result {
  static $_TSPEC;

  public $ouch1 = null;
  public $ouch2 = null;
  public $ouch3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -3 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'MetaException',
          ),
        -4 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'UnknownTableException',
          ),
        -5 => array(
          'var' => 'ouch3',
          'type' => TType::STRUCT,
          'class' => 'UnknownDBException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
      if (isset($vals['ouch3'])) {
        $this->ouch3 = $vals['ouch3'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_drop_table_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -3:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new MetaException();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -4:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new UnknownTableException();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -5:
          if ($ftype == TType::STRUCT) {
            $this->ouch3 = new UnknownDBException();
            $xfer += $this->ouch3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_drop_table_result');
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, -3);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, -4);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch3 !== null) {
      $xfer += $output->writeFieldBegin('ouch3', TType::STRUCT, -5);
      $xfer += $this->ouch3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_truncate_table_args {
  static $_TSPEC;

  public $db_name = null;
  public $table_name = null;
  public $partition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -1 => array(
          'var' => 'db_name',
          'type' => TType::STRING,
          ),
        -2 => array(
          'var' => 'table_name',
          'type' => TType::STRING,
          ),
        -3 => array(
          'var' => 'partition',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['db_name'])) {
        $this->db_name = $vals['db_name'];
      }
      if (isset($vals['table_name'])) {
        $this->table_name = $vals['table_name'];
      }
      if (isset($vals['partition'])) {
        $this->partition = $vals['partition'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_truncate_table_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->db_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->partition);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_truncate_table_args');
    if ($this->db_name !== null) {
      $xfer += $output->writeFieldBegin('db_name', TType::STRING, -1);
      $xfer += $output->writeString($this->db_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->table_name !== null) {
      $xfer += $output->writeFieldBegin('table_name', TType::STRING, -2);
      $xfer += $output->writeString($this->table_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partition !== null) {
      $xfer += $output->writeFieldBegin('partition', TType::STRING, -3);
      $xfer += $output->writeString($this->partition);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_truncate_table_result {
  static $_TSPEC;

  public $ouch1 = null;
  public $ouch2 = null;
  public $ouch3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -4 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'MetaException',
          ),
        -5 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'UnknownTableException',
          ),
        -6 => array(
          'var' => 'ouch3',
          'type' => TType::STRUCT,
          'class' => 'UnknownDBException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
      if (isset($vals['ouch3'])) {
        $this->ouch3 = $vals['ouch3'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_truncate_table_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -4:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new MetaException();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -5:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new UnknownTableException();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -6:
          if ($ftype == TType::STRUCT) {
            $this->ouch3 = new UnknownDBException();
            $xfer += $this->ouch3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_truncate_table_result');
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, -4);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, -5);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch3 !== null) {
      $xfer += $output->writeFieldBegin('ouch3', TType::STRUCT, -6);
      $xfer += $this->ouch3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_table_exists_args {
  static $_TSPEC;

  public $db_name = null;
  public $table_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -1 => array(
          'var' => 'db_name',
          'type' => TType::STRING,
          ),
        -2 => array(
          'var' => 'table_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['db_name'])) {
        $this->db_name = $vals['db_name'];
      }
      if (isset($vals['table_name'])) {
        $this->table_name = $vals['table_name'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_table_exists_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->db_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_table_exists_args');
    if ($this->db_name !== null) {
      $xfer += $output->writeFieldBegin('db_name', TType::STRING, -1);
      $xfer += $output->writeString($this->db_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->table_name !== null) {
      $xfer += $output->writeFieldBegin('table_name', TType::STRING, -2);
      $xfer += $output->writeString($this->table_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_table_exists_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        -3 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'MetaException',
          ),
        -4 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'UnknownDBException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_table_exists_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -3:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new MetaException();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -4:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new UnknownDBException();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_table_exists_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, -3);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, -4);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_get_partitions_args {
  static $_TSPEC;

  public $db_name = null;
  public $table_name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -1 => array(
          'var' => 'db_name',
          'type' => TType::STRING,
          ),
        -2 => array(
          'var' => 'table_name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['db_name'])) {
        $this->db_name = $vals['db_name'];
      }
      if (isset($vals['table_name'])) {
        $this->table_name = $vals['table_name'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_get_partitions_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->db_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_get_partitions_args');
    if ($this->db_name !== null) {
      $xfer += $output->writeFieldBegin('db_name', TType::STRING, -1);
      $xfer += $output->writeString($this->db_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->table_name !== null) {
      $xfer += $output->writeFieldBegin('table_name', TType::STRING, -2);
      $xfer += $output->writeString($this->table_name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_get_partitions_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;
  public $ouch3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        -3 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'MetaException',
          ),
        -4 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'UnknownTableException',
          ),
        -5 => array(
          'var' => 'ouch3',
          'type' => TType::STRUCT,
          'class' => 'UnknownDBException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
      if (isset($vals['ouch3'])) {
        $this->ouch3 = $vals['ouch3'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_get_partitions_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size216 = 0;
            $_etype219 = 0;
            $xfer += $input->readListBegin($_etype219, $_size216);
            for ($_i220 = 0; $_i220 < $_size216; ++$_i220)
            {
              $elem221 = null;
              $xfer += $input->readString($elem221);
              $this->success []= $elem221;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -3:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new MetaException();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -4:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new UnknownTableException();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -5:
          if ($ftype == TType::STRUCT) {
            $this->ouch3 = new UnknownDBException();
            $xfer += $this->ouch3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_get_partitions_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter222)
          {
            $xfer += $output->writeString($iter222);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, -3);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, -4);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch3 !== null) {
      $xfer += $output->writeFieldBegin('ouch3', TType::STRUCT, -5);
      $xfer += $this->ouch3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_get_dbs_args {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'ThriftMetaStore_get_dbs_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_get_dbs_args');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_get_dbs_result {
  static $_TSPEC;

  public $success = null;
  public $ouch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        -1 => array(
          'var' => 'ouch',
          'type' => TType::STRUCT,
          'class' => 'MetaException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch'])) {
        $this->ouch = $vals['ouch'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_get_dbs_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size223 = 0;
            $_etype226 = 0;
            $xfer += $input->readListBegin($_etype226, $_size223);
            for ($_i227 = 0; $_i227 < $_size223; ++$_i227)
            {
              $elem228 = null;
              $xfer += $input->readString($elem228);
              $this->success []= $elem228;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -1:
          if ($ftype == TType::STRUCT) {
            $this->ouch = new MetaException();
            $xfer += $this->ouch->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_get_dbs_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter229)
          {
            $xfer += $output->writeString($iter229);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch !== null) {
      $xfer += $output->writeFieldBegin('ouch', TType::STRUCT, -1);
      $xfer += $this->ouch->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_cat_args {
  static $_TSPEC;

  public $db_name = null;
  public $table_name = null;
  public $partition = null;
  public $high = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        -1 => array(
          'var' => 'db_name',
          'type' => TType::STRING,
          ),
        -2 => array(
          'var' => 'table_name',
          'type' => TType::STRING,
          ),
        -3 => array(
          'var' => 'partition',
          'type' => TType::STRING,
          ),
        -4 => array(
          'var' => 'high',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['db_name'])) {
        $this->db_name = $vals['db_name'];
      }
      if (isset($vals['table_name'])) {
        $this->table_name = $vals['table_name'];
      }
      if (isset($vals['partition'])) {
        $this->partition = $vals['partition'];
      }
      if (isset($vals['high'])) {
        $this->high = $vals['high'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_cat_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case -1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->db_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table_name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->partition);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->high);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_cat_args');
    if ($this->db_name !== null) {
      $xfer += $output->writeFieldBegin('db_name', TType::STRING, -1);
      $xfer += $output->writeString($this->db_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->table_name !== null) {
      $xfer += $output->writeFieldBegin('table_name', TType::STRING, -2);
      $xfer += $output->writeString($this->table_name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partition !== null) {
      $xfer += $output->writeFieldBegin('partition', TType::STRING, -3);
      $xfer += $output->writeString($this->partition);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->high !== null) {
      $xfer += $output->writeFieldBegin('high', TType::I32, -4);
      $xfer += $output->writeI32($this->high);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStore_cat_result {
  static $_TSPEC;

  public $success = null;
  public $ouch1 = null;
  public $ouch2 = null;
  public $ouch3 = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        -5 => array(
          'var' => 'ouch1',
          'type' => TType::STRUCT,
          'class' => 'MetaException',
          ),
        -6 => array(
          'var' => 'ouch2',
          'type' => TType::STRUCT,
          'class' => 'UnknownDBException',
          ),
        -7 => array(
          'var' => 'ouch3',
          'type' => TType::STRUCT,
          'class' => 'UnknownTableException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
      if (isset($vals['ouch1'])) {
        $this->ouch1 = $vals['ouch1'];
      }
      if (isset($vals['ouch2'])) {
        $this->ouch2 = $vals['ouch2'];
      }
      if (isset($vals['ouch3'])) {
        $this->ouch3 = $vals['ouch3'];
      }
    }
  }

  public function getName() {
    return 'ThriftMetaStore_cat_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size230 = 0;
            $_etype233 = 0;
            $xfer += $input->readListBegin($_etype233, $_size230);
            for ($_i234 = 0; $_i234 < $_size230; ++$_i234)
            {
              $elem235 = null;
              $xfer += $input->readString($elem235);
              $this->success []= $elem235;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -5:
          if ($ftype == TType::STRUCT) {
            $this->ouch1 = new MetaException();
            $xfer += $this->ouch1->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -6:
          if ($ftype == TType::STRUCT) {
            $this->ouch2 = new UnknownDBException();
            $xfer += $this->ouch2->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case -7:
          if ($ftype == TType::STRUCT) {
            $this->ouch3 = new UnknownTableException();
            $xfer += $this->ouch3->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ThriftMetaStore_cat_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRING, count($this->success));
        {
          foreach ($this->success as $iter236)
          {
            $xfer += $output->writeString($iter236);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch1 !== null) {
      $xfer += $output->writeFieldBegin('ouch1', TType::STRUCT, -5);
      $xfer += $this->ouch1->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch2 !== null) {
      $xfer += $output->writeFieldBegin('ouch2', TType::STRUCT, -6);
      $xfer += $this->ouch2->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ouch3 !== null) {
      $xfer += $output->writeFieldBegin('ouch3', TType::STRUCT, -7);
      $xfer += $this->ouch3->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ThriftMetaStoreProcessor extends FacebookServiceProcessor {
  public function __construct($handler) {
    parent::__construct($handler);
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_get_fields($seqid, $input, $output) {
    $args = new ThriftMetaStore_get_fields_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new ThriftMetaStore_get_fields_result();
    try {
      $result->success = $this->handler_->get_fields($args->db_name, $args->table_name);
    } catch (MetaException $ouch1) {
      $result->ouch1 = $ouch1;
        } catch (UnknownTableException $ouch2) {
      $result->ouch2 = $ouch2;
        } catch (UnknownDBException $ouch3) {
      $result->ouch3 = $ouch3;
    }
    $output->writeMessageBegin('get_fields', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
  protected function process_get_tables($seqid, $input, $output) {
    $args = new ThriftMetaStore_get_tables_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new ThriftMetaStore_get_tables_result();
    try {
      $result->success = $this->handler_->get_tables($args->db_name, $args->pattern);
    } catch (MetaException $ouch1) {
      $result->ouch1 = $ouch1;
        } catch (UnknownTableException $ouch2) {
      $result->ouch2 = $ouch2;
        } catch (UnknownDBException $ouch3) {
      $result->ouch3 = $ouch3;
    }
    $output->writeMessageBegin('get_tables', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
  protected function process_get_schema($seqid, $input, $output) {
    $args = new ThriftMetaStore_get_schema_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new ThriftMetaStore_get_schema_result();
    try {
      $result->success = $this->handler_->get_schema($args->table_name);
    } catch (MetaException $ouch1) {
      $result->ouch1 = $ouch1;
        } catch (UnknownTableException $ouch2) {
      $result->ouch2 = $ouch2;
        } catch (UnknownDBException $ouch3) {
      $result->ouch3 = $ouch3;
    }
    $output->writeMessageBegin('get_schema', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
  protected function process_alter_table($seqid, $input, $output) {
    $args = new ThriftMetaStore_alter_table_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new ThriftMetaStore_alter_table_result();
    try {
      $this->handler_->alter_table($args->db_name, $args->table_name, $args->schema);
    } catch (MetaException $ouch1) {
      $result->ouch1 = $ouch1;
        } catch (UnknownTableException $ouch2) {
      $result->ouch2 = $ouch2;
        } catch (UnknownDBException $ouch3) {
      $result->ouch3 = $ouch3;
    }
    $output->writeMessageBegin('alter_table', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
  protected function process_create_table($seqid, $input, $output) {
    $args = new ThriftMetaStore_create_table_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new ThriftMetaStore_create_table_result();
    try {
      $this->handler_->create_table($args->db_name, $args->table_name, $args->schema);
    } catch (MetaException $ouch1) {
      $result->ouch1 = $ouch1;
        } catch (UnknownDBException $ouch2) {
      $result->ouch2 = $ouch2;
    }
    $output->writeMessageBegin('create_table', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
  protected function process_drop_table($seqid, $input, $output) {
    $args = new ThriftMetaStore_drop_table_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new ThriftMetaStore_drop_table_result();
    try {
      $this->handler_->drop_table($args->db_name, $args->table_name);
    } catch (MetaException $ouch1) {
      $result->ouch1 = $ouch1;
        } catch (UnknownTableException $ouch2) {
      $result->ouch2 = $ouch2;
        } catch (UnknownDBException $ouch3) {
      $result->ouch3 = $ouch3;
    }
    $output->writeMessageBegin('drop_table', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
  protected function process_truncate_table($seqid, $input, $output) {
    $args = new ThriftMetaStore_truncate_table_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new ThriftMetaStore_truncate_table_result();
    try {
      $this->handler_->truncate_table($args->db_name, $args->table_name, $args->partition);
    } catch (MetaException $ouch1) {
      $result->ouch1 = $ouch1;
        } catch (UnknownTableException $ouch2) {
      $result->ouch2 = $ouch2;
        } catch (UnknownDBException $ouch3) {
      $result->ouch3 = $ouch3;
    }
    $output->writeMessageBegin('truncate_table', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
  protected function process_table_exists($seqid, $input, $output) {
    $args = new ThriftMetaStore_table_exists_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new ThriftMetaStore_table_exists_result();
    try {
      $result->success = $this->handler_->table_exists($args->db_name, $args->table_name);
    } catch (MetaException $ouch1) {
      $result->ouch1 = $ouch1;
        } catch (UnknownDBException $ouch2) {
      $result->ouch2 = $ouch2;
    }
    $output->writeMessageBegin('table_exists', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
  protected function process_get_partitions($seqid, $input, $output) {
    $args = new ThriftMetaStore_get_partitions_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new ThriftMetaStore_get_partitions_result();
    try {
      $result->success = $this->handler_->get_partitions($args->db_name, $args->table_name);
    } catch (MetaException $ouch1) {
      $result->ouch1 = $ouch1;
        } catch (UnknownTableException $ouch2) {
      $result->ouch2 = $ouch2;
        } catch (UnknownDBException $ouch3) {
      $result->ouch3 = $ouch3;
    }
    $output->writeMessageBegin('get_partitions', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
  protected function process_get_dbs($seqid, $input, $output) {
    $args = new ThriftMetaStore_get_dbs_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new ThriftMetaStore_get_dbs_result();
    try {
      $result->success = $this->handler_->get_dbs();
    } catch (MetaException $ouch) {
      $result->ouch = $ouch;
    }
    $output->writeMessageBegin('get_dbs', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
  protected function process_cat($seqid, $input, $output) {
    $args = new ThriftMetaStore_cat_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new ThriftMetaStore_cat_result();
    try {
      $result->success = $this->handler_->cat($args->db_name, $args->table_name, $args->partition, $args->high);
    } catch (MetaException $ouch1) {
      $result->ouch1 = $ouch1;
        } catch (UnknownDBException $ouch2) {
      $result->ouch2 = $ouch2;
        } catch (UnknownTableException $ouch3) {
      $result->ouch3 = $ouch3;
    }
    $output->writeMessageBegin('cat', TMessageType::REPLY, $seqid);
    $result->write($output);
    $output->getTransport()->flush();
  }
}
?>
