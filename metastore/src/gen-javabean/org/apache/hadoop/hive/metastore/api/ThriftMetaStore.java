begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ThriftMetaStore
block|{
comment|/**  * This interface is deprecated.  */
specifier|public
interface|interface
name|Iface
extends|extends
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
operator|.
name|Iface
block|{
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_fields
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|get_schema
parameter_list|(
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|create_table
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|drop_table
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|truncate_table
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|String
name|partition
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
specifier|public
name|boolean
name|table_exists
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_dbs
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|cat
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|String
name|partition
parameter_list|,
name|int
name|high
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
throws|,
name|UnknownTableException
throws|,
name|TException
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|Client
extends|extends
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
operator|.
name|Client
implements|implements
name|Iface
block|{
specifier|public
name|Client
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
block|{
name|this
argument_list|(
name|prot
argument_list|,
name|prot
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Client
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
block|{
name|super
argument_list|(
name|iprot
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_fields
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|send_get_fields
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|)
expr_stmt|;
return|return
name|recv_get_fields
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_fields
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_fields"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_fields_args
name|args
init|=
operator|new
name|get_fields_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|recv_get_fields
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_fields_result
name|result
init|=
operator|new
name|get_fields_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_fields failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|send_get_tables
argument_list|(
name|db_name
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
return|return
name|recv_get_tables
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_tables"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_tables_args
name|args
init|=
operator|new
name|get_tables_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_tables
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_tables_result
name|result
init|=
operator|new
name|get_tables_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_tables failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|get_schema
parameter_list|(
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|send_get_schema
argument_list|(
name|table_name
argument_list|)
expr_stmt|;
return|return
name|recv_get_schema
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_schema
parameter_list|(
name|String
name|table_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_schema"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_schema_args
name|args
init|=
operator|new
name|get_schema_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|recv_get_schema
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_schema_result
name|result
init|=
operator|new
name|get_schema_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_schema failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|send_alter_table
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|recv_alter_table
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_alter_table
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|alter_table_args
name|args
init|=
operator|new
name|alter_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|args
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_alter_table
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|alter_table_result
name|result
init|=
operator|new
name|alter_table_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|create_table
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|send_create_table
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|,
name|schema
argument_list|)
expr_stmt|;
name|recv_create_table
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_create_table
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|create_table_args
name|args
init|=
operator|new
name|create_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|args
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_create_table
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|create_table_result
name|result
init|=
operator|new
name|create_table_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|drop_table
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|send_drop_table
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|)
expr_stmt|;
name|recv_drop_table
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_drop_table
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|drop_table_args
name|args
init|=
operator|new
name|drop_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_drop_table
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|drop_table_result
name|result
init|=
operator|new
name|drop_table_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|truncate_table
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|String
name|partition
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|send_truncate_table
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|,
name|partition
argument_list|)
expr_stmt|;
name|recv_truncate_table
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_truncate_table
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|String
name|partition
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"truncate_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|truncate_table_args
name|args
init|=
operator|new
name|truncate_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|args
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_truncate_table
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|truncate_table_result
name|result
init|=
operator|new
name|truncate_table_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
return|return;
block|}
specifier|public
name|boolean
name|table_exists
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|send_table_exists
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|)
expr_stmt|;
return|return
name|recv_table_exists
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_table_exists
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"table_exists"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|table_exists_args
name|args
init|=
operator|new
name|table_exists_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_table_exists
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|table_exists_result
name|result
init|=
operator|new
name|table_exists_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"table_exists failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|send_get_partitions
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|)
expr_stmt|;
return|return
name|recv_get_partitions
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_partitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_partitions_args
name|args
init|=
operator|new
name|get_partitions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_partitions
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_partitions_result
name|result
init|=
operator|new
name|get_partitions_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_partitions failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_dbs
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_dbs
argument_list|()
expr_stmt|;
return|return
name|recv_get_dbs
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_dbs
parameter_list|()
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_dbs"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_dbs_args
name|args
init|=
operator|new
name|get_dbs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_dbs
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_dbs_result
name|result
init|=
operator|new
name|get_dbs_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o
condition|)
block|{
throw|throw
name|result
operator|.
name|o
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_dbs failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|cat
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|String
name|partition
parameter_list|,
name|int
name|high
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
throws|,
name|UnknownTableException
throws|,
name|TException
block|{
name|send_cat
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|,
name|partition
argument_list|,
name|high
argument_list|)
expr_stmt|;
return|return
name|recv_cat
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_cat
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|String
name|partition
parameter_list|,
name|int
name|high
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"cat"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|cat_args
name|args
init|=
operator|new
name|cat_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|args
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
name|args
operator|.
name|high
operator|=
name|high
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_cat
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownDBException
throws|,
name|UnknownTableException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|cat_result
name|result
init|=
operator|new
name|cat_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"cat failed: unknown result"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Processor
extends|extends
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
operator|.
name|Processor
implements|implements
name|TProcessor
block|{
specifier|public
name|Processor
parameter_list|(
name|Iface
name|iface
parameter_list|)
block|{
name|super
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|iface_
operator|=
name|iface
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_fields"
argument_list|,
operator|new
name|get_fields
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_tables"
argument_list|,
operator|new
name|get_tables
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_schema"
argument_list|,
operator|new
name|get_schema
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"alter_table"
argument_list|,
operator|new
name|alter_table
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"create_table"
argument_list|,
operator|new
name|create_table
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"drop_table"
argument_list|,
operator|new
name|drop_table
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"truncate_table"
argument_list|,
operator|new
name|truncate_table
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"table_exists"
argument_list|,
operator|new
name|table_exists
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_partitions"
argument_list|,
operator|new
name|get_partitions
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_dbs"
argument_list|,
operator|new
name|get_dbs
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"cat"
argument_list|,
operator|new
name|cat
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Iface
name|iface_
decl_stmt|;
specifier|public
name|boolean
name|process
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
name|ProcessFunction
name|fn
init|=
name|processMap_
operator|.
name|get
argument_list|(
name|msg
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|==
literal|null
condition|)
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|UNKNOWN_METHOD
argument_list|,
literal|"Invalid method name: '"
operator|+
name|msg
operator|.
name|name
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
name|msg
operator|.
name|name
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|msg
operator|.
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|fn
operator|.
name|process
argument_list|(
name|msg
operator|.
name|seqid
argument_list|,
name|iprot
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
class|class
name|get_fields
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_fields_args
name|args
init|=
operator|new
name|get_fields_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_fields_result
name|result
init|=
operator|new
name|get_fields_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_fields
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_fields"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_tables
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_tables_args
name|args
init|=
operator|new
name|get_tables_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_tables_result
name|result
init|=
operator|new
name|get_tables_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_tables
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|pattern
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_tables"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_schema
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_schema_args
name|args
init|=
operator|new
name|get_schema_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_schema_result
name|result
init|=
operator|new
name|get_schema_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_schema
argument_list|(
name|args
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_schema"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|alter_table
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|alter_table_args
name|args
init|=
operator|new
name|alter_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|alter_table_result
name|result
init|=
operator|new
name|alter_table_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|alter_table
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|table_name
argument_list|,
name|args
operator|.
name|schema
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_table"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|create_table
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|create_table_args
name|args
init|=
operator|new
name|create_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|create_table_result
name|result
init|=
operator|new
name|create_table_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|create_table
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|table_name
argument_list|,
name|args
operator|.
name|schema
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_table"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|drop_table
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|drop_table_args
name|args
init|=
operator|new
name|drop_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|drop_table_result
name|result
init|=
operator|new
name|drop_table_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|drop_table
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|table_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_table"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|truncate_table
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|truncate_table_args
name|args
init|=
operator|new
name|truncate_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|truncate_table_result
name|result
init|=
operator|new
name|truncate_table_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|truncate_table
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|table_name
argument_list|,
name|args
operator|.
name|partition
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"truncate_table"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|table_exists
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|table_exists_args
name|args
init|=
operator|new
name|table_exists_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|table_exists_result
name|result
init|=
operator|new
name|table_exists_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|table_exists
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"table_exists"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_partitions
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_partitions_args
name|args
init|=
operator|new
name|get_partitions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_partitions_result
name|result
init|=
operator|new
name|get_partitions_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_partitions
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_dbs
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_dbs_args
name|args
init|=
operator|new
name|get_dbs_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_dbs_result
name|result
init|=
operator|new
name|get_dbs_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_dbs
argument_list|()
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o
parameter_list|)
block|{
name|result
operator|.
name|o
operator|=
name|o
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_dbs"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|cat
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|cat_args
name|args
init|=
operator|new
name|cat_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|cat_result
name|result
init|=
operator|new
name|cat_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|cat
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|table_name
argument_list|,
name|args
operator|.
name|partition
argument_list|,
name|args
operator|.
name|high
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"cat"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|get_fields_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|table_name
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_fields_args
parameter_list|()
block|{ }
specifier|public
name|get_fields_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
return|;
block|}
specifier|public
name|void
name|setTable_name
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_fields_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_fields_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_fields_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_table_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_table_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_table_name
operator|||
name|that_present_table_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table_name
operator|&&
name|that_present_table_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_fields_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|table_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"table_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_fields_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",table_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_fields_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownTableException
name|o2
decl_stmt|;
specifier|private
name|UnknownDBException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_fields_result
parameter_list|()
block|{ }
specifier|public
name|get_fields_result
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|UnknownTableException
name|o2
parameter_list|,
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|FieldSchema
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownTableException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownDBException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_fields_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_fields_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_fields_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list89
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|_list89
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i90
init|=
literal|0
init|;
name|_i90
operator|<
name|_list89
operator|.
name|size
condition|;
operator|++
name|_i90
control|)
block|{
name|FieldSchema
name|_elem91
init|=
operator|new
name|FieldSchema
argument_list|()
decl_stmt|;
name|_elem91
operator|=
operator|new
name|FieldSchema
argument_list|()
expr_stmt|;
name|_elem91
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem91
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownTableException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|5
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_fields_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|_iter92
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter92
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|5
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_fields_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_tables_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|pattern
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|pattern
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_tables_args
parameter_list|()
block|{ }
specifier|public
name|get_tables_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|pattern
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|this
operator|.
name|pattern
return|;
block|}
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|pattern
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPattern
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|pattern
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_tables_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_tables_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_tables_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_pattern
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|pattern
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_pattern
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|pattern
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_pattern
operator|||
name|that_present_pattern
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_pattern
operator|&&
name|that_present_pattern
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|pattern
operator|.
name|equals
argument_list|(
name|that
operator|.
name|pattern
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|pattern
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|pattern
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_tables_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|pattern
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"pattern"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|pattern
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_tables_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",pattern:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|pattern
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_tables_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownTableException
name|o2
decl_stmt|;
specifier|private
name|UnknownDBException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_tables_result
parameter_list|()
block|{ }
specifier|public
name|get_tables_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|UnknownTableException
name|o2
parameter_list|,
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownTableException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownDBException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_tables_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_tables_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_tables_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list93
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list93
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i94
init|=
literal|0
init|;
name|_i94
operator|<
name|_list93
operator|.
name|size
condition|;
operator|++
name|_i94
control|)
block|{
name|String
name|_elem95
init|=
literal|null
decl_stmt|;
name|_elem95
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem95
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownTableException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|5
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_tables_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter96
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter96
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|5
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_tables_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_schema_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|table_name
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|table_name
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_schema_args
parameter_list|()
block|{ }
specifier|public
name|get_schema_args
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
return|;
block|}
specifier|public
name|void
name|setTable_name
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_schema_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_schema_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_schema_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_table_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_table_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_table_name
operator|||
name|that_present_table_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table_name
operator|&&
name|that_present_table_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_schema_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|table_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"table_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_schema_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"table_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_schema_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownTableException
name|o2
decl_stmt|;
specifier|private
name|UnknownDBException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_schema_result
parameter_list|()
block|{ }
specifier|public
name|get_schema_result
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|UnknownTableException
name|o2
parameter_list|,
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToSuccess
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownTableException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownDBException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_schema_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_schema_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_schema_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map97
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map97
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i98
init|=
literal|0
init|;
name|_i98
operator|<
name|_map97
operator|.
name|size
condition|;
operator|++
name|_i98
control|)
block|{
name|String
name|_key99
decl_stmt|;
name|String
name|_val100
decl_stmt|;
name|_key99
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val100
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|_key99
argument_list|,
name|_val100
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownTableException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_schema_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|MAP
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter101
range|:
name|this
operator|.
name|success
operator|.
name|keySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter101
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|success
operator|.
name|get
argument_list|(
name|_iter101
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_schema_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_table_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|table_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|schema
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|alter_table_args
parameter_list|()
block|{ }
specifier|public
name|alter_table_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|schema
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
return|;
block|}
specifier|public
name|void
name|setTable_name
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|int
name|getSchemaSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|schema
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|schema
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToSchema
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|schema
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|schema
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|schema
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|schema
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSchema
parameter_list|()
block|{
return|return
name|this
operator|.
name|schema
return|;
block|}
specifier|public
name|void
name|setSchema
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|schema
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSchema
parameter_list|()
block|{
name|this
operator|.
name|schema
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|schema
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_table_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_table_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_table_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_table_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_table_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_table_name
operator|||
name|that_present_table_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table_name
operator|&&
name|that_present_table_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_schema
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|schema
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_schema
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|schema
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_schema
operator|||
name|that_present_schema
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_schema
operator|&&
name|that_present_schema
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|schema
operator|.
name|equals
argument_list|(
name|that
operator|.
name|schema
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map102
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|schema
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map102
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i103
init|=
literal|0
init|;
name|_i103
operator|<
name|_map102
operator|.
name|size
condition|;
operator|++
name|_i103
control|)
block|{
name|String
name|_key104
decl_stmt|;
name|String
name|_val105
decl_stmt|;
name|_key104
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val105
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|schema
operator|.
name|put
argument_list|(
name|_key104
argument_list|,
name|_val105
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|schema
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_table_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|table_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"table_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|schema
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"schema"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|MAP
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|schema
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter106
range|:
name|this
operator|.
name|schema
operator|.
name|keySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter106
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|schema
operator|.
name|get
argument_list|(
name|_iter106
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_table_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",table_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",schema:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|schema
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_table_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownTableException
name|o2
decl_stmt|;
specifier|private
name|UnknownDBException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|alter_table_result
parameter_list|()
block|{ }
specifier|public
name|alter_table_result
parameter_list|(
name|MetaException
name|o1
parameter_list|,
name|UnknownTableException
name|o2
parameter_list|,
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownTableException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownDBException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_table_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_table_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_table_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|5
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownTableException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|6
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_table_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|5
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|6
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_table_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|create_table_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|table_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|schema
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|create_table_args
parameter_list|()
block|{ }
specifier|public
name|create_table_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|schema
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
return|;
block|}
specifier|public
name|void
name|setTable_name
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|int
name|getSchemaSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|schema
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|schema
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToSchema
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|schema
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|schema
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|schema
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|schema
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSchema
parameter_list|()
block|{
return|return
name|this
operator|.
name|schema
return|;
block|}
specifier|public
name|void
name|setSchema
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|)
block|{
name|this
operator|.
name|schema
operator|=
name|schema
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|schema
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSchema
parameter_list|()
block|{
name|this
operator|.
name|schema
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|schema
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_table_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_table_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_table_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_table_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_table_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_table_name
operator|||
name|that_present_table_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table_name
operator|&&
name|that_present_table_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_schema
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|schema
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_schema
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|schema
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_schema
operator|||
name|that_present_schema
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_schema
operator|&&
name|that_present_schema
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|schema
operator|.
name|equals
argument_list|(
name|that
operator|.
name|schema
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map107
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|schema
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map107
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i108
init|=
literal|0
init|;
name|_i108
operator|<
name|_map107
operator|.
name|size
condition|;
operator|++
name|_i108
control|)
block|{
name|String
name|_key109
decl_stmt|;
name|String
name|_val110
decl_stmt|;
name|_key109
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val110
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|schema
operator|.
name|put
argument_list|(
name|_key109
argument_list|,
name|_val110
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|schema
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_table_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|table_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"table_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|schema
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"schema"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|MAP
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|schema
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter111
range|:
name|this
operator|.
name|schema
operator|.
name|keySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter111
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|schema
operator|.
name|get
argument_list|(
name|_iter111
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_table_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",table_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",schema:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|schema
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|create_table_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownDBException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|create_table_result
parameter_list|()
block|{ }
specifier|public
name|create_table_result
parameter_list|(
name|MetaException
name|o1
parameter_list|,
name|UnknownDBException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownDBException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownDBException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_table_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_table_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_table_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|5
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_table_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|5
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_table_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_table_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|table_name
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|drop_table_args
parameter_list|()
block|{ }
specifier|public
name|drop_table_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
return|;
block|}
specifier|public
name|void
name|setTable_name
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_table_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_table_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_table_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_table_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_table_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_table_name
operator|||
name|that_present_table_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table_name
operator|&&
name|that_present_table_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_table_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|table_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"table_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_table_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",table_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_table_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownTableException
name|o2
decl_stmt|;
specifier|private
name|UnknownDBException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|drop_table_result
parameter_list|()
block|{ }
specifier|public
name|drop_table_result
parameter_list|(
name|MetaException
name|o1
parameter_list|,
name|UnknownTableException
name|o2
parameter_list|,
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownTableException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownDBException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_table_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_table_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_table_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownTableException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|5
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_table_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|5
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_table_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|truncate_table_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
specifier|private
name|String
name|partition
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|table_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|partition
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|truncate_table_args
parameter_list|()
block|{ }
specifier|public
name|truncate_table_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|partition
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
return|;
block|}
specifier|public
name|void
name|setTable_name
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getPartition
parameter_list|()
block|{
return|return
name|this
operator|.
name|partition
return|;
block|}
specifier|public
name|void
name|setPartition
parameter_list|(
name|String
name|partition
parameter_list|)
block|{
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|partition
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPartition
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|partition
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|truncate_table_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|truncate_table_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|truncate_table_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_table_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_table_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_table_name
operator|||
name|that_present_table_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table_name
operator|&&
name|that_present_table_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_partition
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|partition
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_partition
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|partition
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_partition
operator|||
name|that_present_partition
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_partition
operator|&&
name|that_present_partition
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|partition
operator|.
name|equals
argument_list|(
name|that
operator|.
name|partition
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|partition
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|partition
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"truncate_table_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|table_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"table_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|partition
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"partition"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|partition
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"truncate_table_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",table_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",partition:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|partition
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|truncate_table_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownTableException
name|o2
decl_stmt|;
specifier|private
name|UnknownDBException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|truncate_table_result
parameter_list|()
block|{ }
specifier|public
name|truncate_table_result
parameter_list|(
name|MetaException
name|o1
parameter_list|,
name|UnknownTableException
name|o2
parameter_list|,
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownTableException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownDBException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|truncate_table_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|truncate_table_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|truncate_table_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|5
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownTableException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|6
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"truncate_table_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|5
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|6
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"truncate_table_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|table_exists_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|table_name
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|table_exists_args
parameter_list|()
block|{ }
specifier|public
name|table_exists_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
return|;
block|}
specifier|public
name|void
name|setTable_name
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|table_exists_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|table_exists_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|table_exists_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_table_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_table_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_table_name
operator|||
name|that_present_table_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table_name
operator|&&
name|that_present_table_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"table_exists_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|table_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"table_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"table_exists_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",table_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|table_exists_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownDBException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|table_exists_result
parameter_list|()
block|{ }
specifier|public
name|table_exists_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|UnknownDBException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownDBException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownDBException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|table_exists_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|table_exists_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|table_exists_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"table_exists_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|BOOL
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"table_exists_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partitions_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|table_name
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_partitions_args
parameter_list|()
block|{ }
specifier|public
name|get_partitions_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
return|;
block|}
specifier|public
name|void
name|setTable_name
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partitions_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partitions_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partitions_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_table_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_table_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_table_name
operator|||
name|that_present_table_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table_name
operator|&&
name|that_present_table_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partitions_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|table_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"table_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partitions_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",table_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partitions_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownTableException
name|o2
decl_stmt|;
specifier|private
name|UnknownDBException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_partitions_result
parameter_list|()
block|{ }
specifier|public
name|get_partitions_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|UnknownTableException
name|o2
parameter_list|,
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownTableException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownDBException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partitions_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partitions_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partitions_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list112
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list112
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i113
init|=
literal|0
init|;
name|_i113
operator|<
name|_list112
operator|.
name|size
condition|;
operator|++
name|_i113
control|)
block|{
name|String
name|_elem114
init|=
literal|null
decl_stmt|;
name|_elem114
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem114
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownTableException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|5
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partitions_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter115
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter115
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|5
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partitions_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_dbs_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|get_dbs_args
parameter_list|()
block|{ }
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_dbs_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_dbs_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_dbs_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_dbs_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_dbs_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_dbs_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_dbs_result
parameter_list|()
block|{ }
specifier|public
name|get_dbs_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o
operator|=
name|o
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO
parameter_list|()
block|{
return|return
name|this
operator|.
name|o
return|;
block|}
specifier|public
name|void
name|setO
parameter_list|(
name|MetaException
name|o
parameter_list|)
block|{
name|this
operator|.
name|o
operator|=
name|o
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO
parameter_list|()
block|{
name|this
operator|.
name|o
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_dbs_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_dbs_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_dbs_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o
operator|||
name|that_present_o
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o
operator|&&
name|that_present_o
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list116
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list116
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i117
init|=
literal|0
init|;
name|_i117
operator|<
name|_list116
operator|.
name|size
condition|;
operator|++
name|_i117
control|)
block|{
name|String
name|_elem118
init|=
literal|null
decl_stmt|;
name|_elem118
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem118
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_dbs_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter119
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter119
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_dbs_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|cat_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
specifier|private
name|String
name|partition
decl_stmt|;
specifier|private
name|int
name|high
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|table_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|partition
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|high
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|cat_args
parameter_list|()
block|{ }
specifier|public
name|cat_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|String
name|partition
parameter_list|,
name|int
name|high
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|partition
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|high
operator|=
name|high
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|high
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
return|;
block|}
specifier|public
name|void
name|setTable_name
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getPartition
parameter_list|()
block|{
return|return
name|this
operator|.
name|partition
return|;
block|}
specifier|public
name|void
name|setPartition
parameter_list|(
name|String
name|partition
parameter_list|)
block|{
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|partition
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPartition
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|partition
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|int
name|getHigh
parameter_list|()
block|{
return|return
name|this
operator|.
name|high
return|;
block|}
specifier|public
name|void
name|setHigh
parameter_list|(
name|int
name|high
parameter_list|)
block|{
name|this
operator|.
name|high
operator|=
name|high
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|high
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetHigh
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|high
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|cat_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|cat_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|cat_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_table_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_table_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_table_name
operator|||
name|that_present_table_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table_name
operator|&&
name|that_present_table_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_partition
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|partition
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_partition
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|partition
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_partition
operator|||
name|that_present_partition
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_partition
operator|&&
name|that_present_partition
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|partition
operator|.
name|equals
argument_list|(
name|that
operator|.
name|partition
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_high
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_high
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_high
operator|||
name|that_present_high
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_high
operator|&&
name|that_present_high
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|high
operator|!=
name|that
operator|.
name|high
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|partition
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|partition
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|high
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|high
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"cat_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|table_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"table_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|partition
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"partition"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|partition
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"high"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I32
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|high
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"cat_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",table_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",partition:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|partition
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",high:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|high
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|cat_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownDBException
name|o2
decl_stmt|;
specifier|private
name|UnknownTableException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|cat_result
parameter_list|()
block|{ }
specifier|public
name|cat_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|UnknownDBException
name|o2
parameter_list|,
name|UnknownTableException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownDBException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownDBException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownTableException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|UnknownTableException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|cat_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|cat_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|cat_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list120
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list120
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i121
init|=
literal|0
init|;
name|_i121
operator|<
name|_list120
operator|.
name|size
condition|;
operator|++
name|_i121
control|)
block|{
name|String
name|_elem122
init|=
literal|null
decl_stmt|;
name|_elem122
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem122
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|5
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|6
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|7
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownTableException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"cat_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter123
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter123
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|5
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|6
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|7
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"cat_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

