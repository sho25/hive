begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|Table
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"Table"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"dbName"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|OWNER_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"owner"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|CREATE_TIME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"createTime"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|LAST_ACCESS_TIME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"lastAccessTime"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|RETENTION_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"retention"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SD_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"sd"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PARTITION_KEYS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"partitionKeys"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PARAMETERS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"parameters"
argument_list|,
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|9
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|VIEW_ORIGINAL_TEXT_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"viewOriginalText"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|VIEW_EXPANDED_TEXT_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"viewExpandedText"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|11
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_TYPE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tableType"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|12
argument_list|)
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TABLENAME
init|=
literal|1
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|DBNAME
init|=
literal|2
decl_stmt|;
specifier|private
name|String
name|owner
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OWNER
init|=
literal|3
decl_stmt|;
specifier|private
name|int
name|createTime
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|CREATETIME
init|=
literal|4
decl_stmt|;
specifier|private
name|int
name|lastAccessTime
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LASTACCESSTIME
init|=
literal|5
decl_stmt|;
specifier|private
name|int
name|retention
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|RETENTION
init|=
literal|6
decl_stmt|;
specifier|private
name|StorageDescriptor
name|sd
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SD
init|=
literal|7
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionKeys
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|PARTITIONKEYS
init|=
literal|8
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|PARAMETERS
init|=
literal|9
decl_stmt|;
specifier|private
name|String
name|viewOriginalText
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|VIEWORIGINALTEXT
init|=
literal|10
decl_stmt|;
specifier|private
name|String
name|viewExpandedText
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|VIEWEXPANDEDTEXT
init|=
literal|11
decl_stmt|;
specifier|private
name|String
name|tableType
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|TABLETYPE
init|=
literal|12
decl_stmt|;
specifier|private
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|createTime
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|lastAccessTime
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|retention
init|=
literal|false
decl_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
name|TABLENAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|DBNAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"dbName"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|OWNER
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"owner"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|CREATETIME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"createTime"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|LASTACCESSTIME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"lastAccessTime"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|RETENTION
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"retention"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|SD
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"sd"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|StorageDescriptor
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|PARTITIONKEYS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"partitionKeys"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|FieldSchema
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|PARAMETERS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"parameters"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MapMetaData
argument_list|(
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|VIEWORIGINALTEXT
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"viewOriginalText"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|VIEWEXPANDEDTEXT
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"viewExpandedText"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|TABLETYPE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tableType"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
static|static
block|{
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|Table
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Table
parameter_list|()
block|{   }
specifier|public
name|Table
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|owner
parameter_list|,
name|int
name|createTime
parameter_list|,
name|int
name|lastAccessTime
parameter_list|,
name|int
name|retention
parameter_list|,
name|StorageDescriptor
name|sd
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionKeys
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|,
name|String
name|viewOriginalText
parameter_list|,
name|String
name|viewExpandedText
parameter_list|,
name|String
name|tableType
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|createTime
operator|=
name|createTime
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|createTime
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|lastAccessTime
operator|=
name|lastAccessTime
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|lastAccessTime
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|retention
operator|=
name|retention
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|retention
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
name|this
operator|.
name|partitionKeys
operator|=
name|partitionKeys
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|this
operator|.
name|viewOriginalText
operator|=
name|viewOriginalText
expr_stmt|;
name|this
operator|.
name|viewExpandedText
operator|=
name|viewExpandedText
expr_stmt|;
name|this
operator|.
name|tableType
operator|=
name|tableType
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|Table
parameter_list|(
name|Table
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetDbName
argument_list|()
condition|)
block|{
name|this
operator|.
name|dbName
operator|=
name|other
operator|.
name|dbName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetOwner
argument_list|()
condition|)
block|{
name|this
operator|.
name|owner
operator|=
name|other
operator|.
name|owner
expr_stmt|;
block|}
name|__isset
operator|.
name|createTime
operator|=
name|other
operator|.
name|__isset
operator|.
name|createTime
expr_stmt|;
name|this
operator|.
name|createTime
operator|=
name|other
operator|.
name|createTime
expr_stmt|;
name|__isset
operator|.
name|lastAccessTime
operator|=
name|other
operator|.
name|__isset
operator|.
name|lastAccessTime
expr_stmt|;
name|this
operator|.
name|lastAccessTime
operator|=
name|other
operator|.
name|lastAccessTime
expr_stmt|;
name|__isset
operator|.
name|retention
operator|=
name|other
operator|.
name|__isset
operator|.
name|retention
expr_stmt|;
name|this
operator|.
name|retention
operator|=
name|other
operator|.
name|retention
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetSd
argument_list|()
condition|)
block|{
name|this
operator|.
name|sd
operator|=
operator|new
name|StorageDescriptor
argument_list|(
name|other
operator|.
name|sd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPartitionKeys
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|__this__partitionKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|other_element
range|:
name|other
operator|.
name|partitionKeys
control|)
block|{
name|__this__partitionKeys
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|partitionKeys
operator|=
name|__this__partitionKeys
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetParameters
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|__this__parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|other_element
range|:
name|other
operator|.
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__parameters_copy_key
init|=
name|other_element_key
decl_stmt|;
name|String
name|__this__parameters_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__parameters
operator|.
name|put
argument_list|(
name|__this__parameters_copy_key
argument_list|,
name|__this__parameters_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|parameters
operator|=
name|__this__parameters
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetViewOriginalText
argument_list|()
condition|)
block|{
name|this
operator|.
name|viewOriginalText
operator|=
name|other
operator|.
name|viewOriginalText
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetViewExpandedText
argument_list|()
condition|)
block|{
name|this
operator|.
name|viewExpandedText
operator|=
name|other
operator|.
name|viewExpandedText
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTableType
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableType
operator|=
name|other
operator|.
name|tableType
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Table
name|clone
parameter_list|()
block|{
return|return
operator|new
name|Table
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
specifier|public
name|void
name|setTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field tableName is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbName
return|;
block|}
specifier|public
name|void
name|setDbName
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbName
parameter_list|()
block|{
name|this
operator|.
name|dbName
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field dbName is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetDbName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbName
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
return|return
name|this
operator|.
name|owner
return|;
block|}
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
block|}
specifier|public
name|void
name|unsetOwner
parameter_list|()
block|{
name|this
operator|.
name|owner
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field owner is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetOwner
parameter_list|()
block|{
return|return
name|this
operator|.
name|owner
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getCreateTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|createTime
return|;
block|}
specifier|public
name|void
name|setCreateTime
parameter_list|(
name|int
name|createTime
parameter_list|)
block|{
name|this
operator|.
name|createTime
operator|=
name|createTime
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|createTime
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetCreateTime
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|createTime
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field createTime is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetCreateTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|createTime
return|;
block|}
specifier|public
name|int
name|getLastAccessTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastAccessTime
return|;
block|}
specifier|public
name|void
name|setLastAccessTime
parameter_list|(
name|int
name|lastAccessTime
parameter_list|)
block|{
name|this
operator|.
name|lastAccessTime
operator|=
name|lastAccessTime
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|lastAccessTime
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLastAccessTime
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|lastAccessTime
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field lastAccessTime is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetLastAccessTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|lastAccessTime
return|;
block|}
specifier|public
name|int
name|getRetention
parameter_list|()
block|{
return|return
name|this
operator|.
name|retention
return|;
block|}
specifier|public
name|void
name|setRetention
parameter_list|(
name|int
name|retention
parameter_list|)
block|{
name|this
operator|.
name|retention
operator|=
name|retention
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|retention
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetRetention
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|retention
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field retention is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetRetention
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|retention
return|;
block|}
specifier|public
name|StorageDescriptor
name|getSd
parameter_list|()
block|{
return|return
name|this
operator|.
name|sd
return|;
block|}
specifier|public
name|void
name|setSd
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSd
parameter_list|()
block|{
name|this
operator|.
name|sd
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field sd is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetSd
parameter_list|()
block|{
return|return
name|this
operator|.
name|sd
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getPartitionKeysSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|partitionKeys
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|partitionKeys
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|getPartitionKeysIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|partitionKeys
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|partitionKeys
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToPartitionKeys
parameter_list|(
name|FieldSchema
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|partitionKeys
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|partitionKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|partitionKeys
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getPartitionKeys
parameter_list|()
block|{
return|return
name|this
operator|.
name|partitionKeys
return|;
block|}
specifier|public
name|void
name|setPartitionKeys
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionKeys
parameter_list|)
block|{
name|this
operator|.
name|partitionKeys
operator|=
name|partitionKeys
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPartitionKeys
parameter_list|()
block|{
name|this
operator|.
name|partitionKeys
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field partitionKeys is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetPartitionKeys
parameter_list|()
block|{
return|return
name|this
operator|.
name|partitionKeys
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getParametersSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|parameters
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|parameters
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToParameters
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|parameters
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|parameters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|parameters
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|parameters
return|;
block|}
specifier|public
name|void
name|setParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
specifier|public
name|void
name|unsetParameters
parameter_list|()
block|{
name|this
operator|.
name|parameters
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field parameters is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|parameters
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getViewOriginalText
parameter_list|()
block|{
return|return
name|this
operator|.
name|viewOriginalText
return|;
block|}
specifier|public
name|void
name|setViewOriginalText
parameter_list|(
name|String
name|viewOriginalText
parameter_list|)
block|{
name|this
operator|.
name|viewOriginalText
operator|=
name|viewOriginalText
expr_stmt|;
block|}
specifier|public
name|void
name|unsetViewOriginalText
parameter_list|()
block|{
name|this
operator|.
name|viewOriginalText
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field viewOriginalText is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetViewOriginalText
parameter_list|()
block|{
return|return
name|this
operator|.
name|viewOriginalText
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getViewExpandedText
parameter_list|()
block|{
return|return
name|this
operator|.
name|viewExpandedText
return|;
block|}
specifier|public
name|void
name|setViewExpandedText
parameter_list|(
name|String
name|viewExpandedText
parameter_list|)
block|{
name|this
operator|.
name|viewExpandedText
operator|=
name|viewExpandedText
expr_stmt|;
block|}
specifier|public
name|void
name|unsetViewExpandedText
parameter_list|()
block|{
name|this
operator|.
name|viewExpandedText
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field viewExpandedText is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetViewExpandedText
parameter_list|()
block|{
return|return
name|this
operator|.
name|viewExpandedText
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getTableType
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableType
return|;
block|}
specifier|public
name|void
name|setTableType
parameter_list|(
name|String
name|tableType
parameter_list|)
block|{
name|this
operator|.
name|tableType
operator|=
name|tableType
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTableType
parameter_list|()
block|{
name|this
operator|.
name|tableType
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field tableType is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetTableType
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableType
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|TABLENAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DBNAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDbName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDbName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OWNER
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetOwner
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setOwner
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CREATETIME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCreateTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCreateTime
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LASTACCESSTIME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLastAccessTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLastAccessTime
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|RETENTION
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRetention
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRetention
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SD
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSd
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSd
argument_list|(
operator|(
name|StorageDescriptor
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARTITIONKEYS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPartitionKeys
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPartitionKeys
argument_list|(
operator|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARAMETERS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetParameters
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setParameters
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VIEWORIGINALTEXT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetViewOriginalText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setViewOriginalText
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VIEWEXPANDEDTEXT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetViewExpandedText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setViewExpandedText
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TABLETYPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableType
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|TABLENAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|DBNAME
case|:
return|return
name|getDbName
argument_list|()
return|;
case|case
name|OWNER
case|:
return|return
name|getOwner
argument_list|()
return|;
case|case
name|CREATETIME
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getCreateTime
argument_list|()
argument_list|)
return|;
case|case
name|LASTACCESSTIME
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getLastAccessTime
argument_list|()
argument_list|)
return|;
case|case
name|RETENTION
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getRetention
argument_list|()
argument_list|)
return|;
case|case
name|SD
case|:
return|return
name|getSd
argument_list|()
return|;
case|case
name|PARTITIONKEYS
case|:
return|return
name|getPartitionKeys
argument_list|()
return|;
case|case
name|PARAMETERS
case|:
return|return
name|getParameters
argument_list|()
return|;
case|case
name|VIEWORIGINALTEXT
case|:
return|return
name|getViewOriginalText
argument_list|()
return|;
case|case
name|VIEWEXPANDEDTEXT
case|:
return|return
name|getViewExpandedText
argument_list|()
return|;
case|case
name|TABLETYPE
case|:
return|return
name|getTableType
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
comment|// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSet
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|TABLENAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|DBNAME
case|:
return|return
name|isSetDbName
argument_list|()
return|;
case|case
name|OWNER
case|:
return|return
name|isSetOwner
argument_list|()
return|;
case|case
name|CREATETIME
case|:
return|return
name|isSetCreateTime
argument_list|()
return|;
case|case
name|LASTACCESSTIME
case|:
return|return
name|isSetLastAccessTime
argument_list|()
return|;
case|case
name|RETENTION
case|:
return|return
name|isSetRetention
argument_list|()
return|;
case|case
name|SD
case|:
return|return
name|isSetSd
argument_list|()
return|;
case|case
name|PARTITIONKEYS
case|:
return|return
name|isSetPartitionKeys
argument_list|()
return|;
case|case
name|PARAMETERS
case|:
return|return
name|isSetParameters
argument_list|()
return|;
case|case
name|VIEWORIGINALTEXT
case|:
return|return
name|isSetViewOriginalText
argument_list|()
return|;
case|case
name|VIEWEXPANDEDTEXT
case|:
return|return
name|isSetViewExpandedText
argument_list|()
return|;
case|case
name|TABLETYPE
case|:
return|return
name|isSetTableType
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|Table
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|Table
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Table
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_dbName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDbName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_dbName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDbName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_dbName
operator|||
name|that_present_dbName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbName
operator|&&
name|that_present_dbName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_owner
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetOwner
argument_list|()
decl_stmt|;
name|boolean
name|that_present_owner
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetOwner
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_owner
operator|||
name|that_present_owner
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_owner
operator|&&
name|that_present_owner
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|owner
operator|.
name|equals
argument_list|(
name|that
operator|.
name|owner
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_createTime
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_createTime
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_createTime
operator|||
name|that_present_createTime
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_createTime
operator|&&
name|that_present_createTime
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|createTime
operator|!=
name|that
operator|.
name|createTime
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_lastAccessTime
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_lastAccessTime
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_lastAccessTime
operator|||
name|that_present_lastAccessTime
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_lastAccessTime
operator|&&
name|that_present_lastAccessTime
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|lastAccessTime
operator|!=
name|that
operator|.
name|lastAccessTime
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_retention
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_retention
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_retention
operator|||
name|that_present_retention
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_retention
operator|&&
name|that_present_retention
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|retention
operator|!=
name|that
operator|.
name|retention
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_sd
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSd
argument_list|()
decl_stmt|;
name|boolean
name|that_present_sd
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSd
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_sd
operator|||
name|that_present_sd
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_sd
operator|&&
name|that_present_sd
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|sd
operator|.
name|equals
argument_list|(
name|that
operator|.
name|sd
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_partitionKeys
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPartitionKeys
argument_list|()
decl_stmt|;
name|boolean
name|that_present_partitionKeys
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPartitionKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_partitionKeys
operator|||
name|that_present_partitionKeys
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_partitionKeys
operator|&&
name|that_present_partitionKeys
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|partitionKeys
operator|.
name|equals
argument_list|(
name|that
operator|.
name|partitionKeys
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_parameters
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetParameters
argument_list|()
decl_stmt|;
name|boolean
name|that_present_parameters
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_parameters
operator|||
name|that_present_parameters
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_parameters
operator|&&
name|that_present_parameters
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|parameters
operator|.
name|equals
argument_list|(
name|that
operator|.
name|parameters
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_viewOriginalText
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetViewOriginalText
argument_list|()
decl_stmt|;
name|boolean
name|that_present_viewOriginalText
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetViewOriginalText
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_viewOriginalText
operator|||
name|that_present_viewOriginalText
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_viewOriginalText
operator|&&
name|that_present_viewOriginalText
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|viewOriginalText
operator|.
name|equals
argument_list|(
name|that
operator|.
name|viewOriginalText
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_viewExpandedText
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetViewExpandedText
argument_list|()
decl_stmt|;
name|boolean
name|that_present_viewExpandedText
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetViewExpandedText
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_viewExpandedText
operator|||
name|that_present_viewExpandedText
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_viewExpandedText
operator|&&
name|that_present_viewExpandedText
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|viewExpandedText
operator|.
name|equals
argument_list|(
name|that
operator|.
name|viewExpandedText
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tableType
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableType
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableType
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableType
operator|||
name|that_present_tableType
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableType
operator|&&
name|that_present_tableType
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableType
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
name|TABLENAME
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DBNAME
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|dbName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OWNER
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|owner
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CREATETIME
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|createTime
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|createTime
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LASTACCESSTIME
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|lastAccessTime
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|lastAccessTime
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|RETENTION
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|retention
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|retention
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SD
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|sd
operator|=
operator|new
name|StorageDescriptor
argument_list|()
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARTITIONKEYS
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list26
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|partitionKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|_list26
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i27
init|=
literal|0
init|;
name|_i27
operator|<
name|_list26
operator|.
name|size
condition|;
operator|++
name|_i27
control|)
block|{
name|FieldSchema
name|_elem28
decl_stmt|;
name|_elem28
operator|=
operator|new
name|FieldSchema
argument_list|()
expr_stmt|;
name|_elem28
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|partitionKeys
operator|.
name|add
argument_list|(
name|_elem28
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARAMETERS
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map29
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|parameters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map29
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i30
init|=
literal|0
init|;
name|_i30
operator|<
name|_map29
operator|.
name|size
condition|;
operator|++
name|_i30
control|)
block|{
name|String
name|_key31
decl_stmt|;
name|String
name|_val32
decl_stmt|;
name|_key31
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val32
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|parameters
operator|.
name|put
argument_list|(
name|_key31
argument_list|,
name|_val32
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VIEWORIGINALTEXT
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|viewOriginalText
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VIEWEXPANDEDTEXT
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|viewExpandedText
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TABLETYPE
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableType
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|dbName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|dbName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|owner
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|OWNER_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|owner
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|CREATE_TIME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|createTime
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LAST_ACCESS_TIME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|lastAccessTime
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|RETENTION_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|retention
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|sd
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SD_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|partitionKeys
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PARTITION_KEYS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|partitionKeys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|_iter33
range|:
name|this
operator|.
name|partitionKeys
control|)
block|{
name|_iter33
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|parameters
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PARAMETERS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|_iter34
range|:
name|this
operator|.
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter34
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter34
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|viewOriginalText
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|VIEW_ORIGINAL_TEXT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|viewOriginalText
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|viewExpandedText
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|VIEW_EXPANDED_TEXT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|viewExpandedText
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tableType
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_TYPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tableType
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Table("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"owner:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|owner
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|owner
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"createTime:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|createTime
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"lastAccessTime:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|lastAccessTime
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"retention:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|retention
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"sd:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|sd
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|sd
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"partitionKeys:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|partitionKeys
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|partitionKeys
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"parameters:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|parameters
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|parameters
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"viewOriginalText:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|viewOriginalText
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|viewOriginalText
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"viewExpandedText:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|viewExpandedText
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|viewExpandedText
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableType:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableType
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableType
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
comment|// check that fields of type enum have valid values
block|}
block|}
end_class

end_unit

