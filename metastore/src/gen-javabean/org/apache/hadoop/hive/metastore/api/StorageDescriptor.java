begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|StorageDescriptor
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"StorageDescriptor"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COLS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"cols"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|LOCATION_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"location"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|INPUT_FORMAT_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"inputFormat"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|OUTPUT_FORMAT_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"outputFormat"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|COMPRESSED_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"compressed"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NUM_BUCKETS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"numBuckets"
argument_list|,
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SERDE_INFO_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"serdeInfo"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|BUCKET_COLS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"bucketCols"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SORT_COLS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"sortCols"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|9
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PARAMETERS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"parameters"
argument_list|,
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|COLS
init|=
literal|1
decl_stmt|;
specifier|private
name|String
name|location
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LOCATION
init|=
literal|2
decl_stmt|;
specifier|private
name|String
name|inputFormat
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|INPUTFORMAT
init|=
literal|3
decl_stmt|;
specifier|private
name|String
name|outputFormat
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OUTPUTFORMAT
init|=
literal|4
decl_stmt|;
specifier|private
name|boolean
name|compressed
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|COMPRESSED
init|=
literal|5
decl_stmt|;
specifier|private
name|int
name|numBuckets
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|NUMBUCKETS
init|=
literal|6
decl_stmt|;
specifier|private
name|SerDeInfo
name|serdeInfo
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SERDEINFO
init|=
literal|7
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|BUCKETCOLS
init|=
literal|8
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|SORTCOLS
init|=
literal|9
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|PARAMETERS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|compressed
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|numBuckets
init|=
literal|false
decl_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
init|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|()
block|{
block|{
name|put
argument_list|(
name|COLS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"cols"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|FieldSchema
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|LOCATION
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"location"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|INPUTFORMAT
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"inputFormat"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|OUTPUTFORMAT
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"outputFormat"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|COMPRESSED
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"compressed"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|NUMBUCKETS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"numBuckets"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|SERDEINFO
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"serdeInfo"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|SerDeInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|BUCKETCOLS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"bucketCols"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|SORTCOLS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"sortCols"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Order
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|PARAMETERS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"parameters"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MapMetaData
argument_list|(
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
decl_stmt|;
static|static
block|{
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|StorageDescriptor
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StorageDescriptor
parameter_list|()
block|{   }
specifier|public
name|StorageDescriptor
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|,
name|String
name|location
parameter_list|,
name|String
name|inputFormat
parameter_list|,
name|String
name|outputFormat
parameter_list|,
name|boolean
name|compressed
parameter_list|,
name|int
name|numBuckets
parameter_list|,
name|SerDeInfo
name|serdeInfo
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|,
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|cols
operator|=
name|cols
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|inputFormat
operator|=
name|inputFormat
expr_stmt|;
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
name|this
operator|.
name|compressed
operator|=
name|compressed
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|compressed
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|numBuckets
operator|=
name|numBuckets
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|numBuckets
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|serdeInfo
operator|=
name|serdeInfo
expr_stmt|;
name|this
operator|.
name|bucketCols
operator|=
name|bucketCols
expr_stmt|;
name|this
operator|.
name|sortCols
operator|=
name|sortCols
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|StorageDescriptor
parameter_list|(
name|StorageDescriptor
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetCols
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|__this__cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|other_element
range|:
name|other
operator|.
name|cols
control|)
block|{
name|__this__cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|cols
operator|=
name|__this__cols
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetLocation
argument_list|()
condition|)
block|{
name|this
operator|.
name|location
operator|=
name|other
operator|.
name|location
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetInputFormat
argument_list|()
condition|)
block|{
name|this
operator|.
name|inputFormat
operator|=
name|other
operator|.
name|inputFormat
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetOutputFormat
argument_list|()
condition|)
block|{
name|this
operator|.
name|outputFormat
operator|=
name|other
operator|.
name|outputFormat
expr_stmt|;
block|}
name|__isset
operator|.
name|compressed
operator|=
name|other
operator|.
name|__isset
operator|.
name|compressed
expr_stmt|;
name|this
operator|.
name|compressed
operator|=
name|other
operator|.
name|compressed
expr_stmt|;
name|__isset
operator|.
name|numBuckets
operator|=
name|other
operator|.
name|__isset
operator|.
name|numBuckets
expr_stmt|;
name|this
operator|.
name|numBuckets
operator|=
name|other
operator|.
name|numBuckets
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetSerdeInfo
argument_list|()
condition|)
block|{
name|this
operator|.
name|serdeInfo
operator|=
operator|new
name|SerDeInfo
argument_list|(
name|other
operator|.
name|serdeInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetBucketCols
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__bucketCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|bucketCols
control|)
block|{
name|__this__bucketCols
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|bucketCols
operator|=
name|__this__bucketCols
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetSortCols
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Order
argument_list|>
name|__this__sortCols
init|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Order
name|other_element
range|:
name|other
operator|.
name|sortCols
control|)
block|{
name|__this__sortCols
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|sortCols
operator|=
name|__this__sortCols
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetParameters
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|__this__parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|other_element
range|:
name|other
operator|.
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__parameters_copy_key
init|=
name|other_element_key
decl_stmt|;
name|String
name|__this__parameters_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__parameters
operator|.
name|put
argument_list|(
name|__this__parameters_copy_key
argument_list|,
name|__this__parameters_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|parameters
operator|=
name|__this__parameters
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|StorageDescriptor
name|clone
parameter_list|()
block|{
return|return
operator|new
name|StorageDescriptor
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|int
name|getColsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|cols
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|cols
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|getColsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|cols
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|cols
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToCols
parameter_list|(
name|FieldSchema
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|cols
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|cols
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|cols
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|cols
return|;
block|}
specifier|public
name|void
name|setCols
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|)
block|{
name|this
operator|.
name|cols
operator|=
name|cols
expr_stmt|;
block|}
specifier|public
name|void
name|unsetCols
parameter_list|()
block|{
name|this
operator|.
name|cols
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field cols is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|cols
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
return|;
block|}
specifier|public
name|void
name|setLocation
parameter_list|(
name|String
name|location
parameter_list|)
block|{
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLocation
parameter_list|()
block|{
name|this
operator|.
name|location
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field location is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetLocation
parameter_list|()
block|{
return|return
name|this
operator|.
name|location
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getInputFormat
parameter_list|()
block|{
return|return
name|this
operator|.
name|inputFormat
return|;
block|}
specifier|public
name|void
name|setInputFormat
parameter_list|(
name|String
name|inputFormat
parameter_list|)
block|{
name|this
operator|.
name|inputFormat
operator|=
name|inputFormat
expr_stmt|;
block|}
specifier|public
name|void
name|unsetInputFormat
parameter_list|()
block|{
name|this
operator|.
name|inputFormat
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field inputFormat is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetInputFormat
parameter_list|()
block|{
return|return
name|this
operator|.
name|inputFormat
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getOutputFormat
parameter_list|()
block|{
return|return
name|this
operator|.
name|outputFormat
return|;
block|}
specifier|public
name|void
name|setOutputFormat
parameter_list|(
name|String
name|outputFormat
parameter_list|)
block|{
name|this
operator|.
name|outputFormat
operator|=
name|outputFormat
expr_stmt|;
block|}
specifier|public
name|void
name|unsetOutputFormat
parameter_list|()
block|{
name|this
operator|.
name|outputFormat
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field outputFormat is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetOutputFormat
parameter_list|()
block|{
return|return
name|this
operator|.
name|outputFormat
operator|!=
literal|null
return|;
block|}
specifier|public
name|boolean
name|isCompressed
parameter_list|()
block|{
return|return
name|this
operator|.
name|compressed
return|;
block|}
specifier|public
name|void
name|setCompressed
parameter_list|(
name|boolean
name|compressed
parameter_list|)
block|{
name|this
operator|.
name|compressed
operator|=
name|compressed
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|compressed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetCompressed
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|compressed
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field compressed is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetCompressed
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|compressed
return|;
block|}
specifier|public
name|int
name|getNumBuckets
parameter_list|()
block|{
return|return
name|this
operator|.
name|numBuckets
return|;
block|}
specifier|public
name|void
name|setNumBuckets
parameter_list|(
name|int
name|numBuckets
parameter_list|)
block|{
name|this
operator|.
name|numBuckets
operator|=
name|numBuckets
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|numBuckets
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetNumBuckets
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|numBuckets
operator|=
literal|false
expr_stmt|;
block|}
comment|// Returns true if field numBuckets is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetNumBuckets
parameter_list|()
block|{
return|return
name|this
operator|.
name|__isset
operator|.
name|numBuckets
return|;
block|}
specifier|public
name|SerDeInfo
name|getSerdeInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|serdeInfo
return|;
block|}
specifier|public
name|void
name|setSerdeInfo
parameter_list|(
name|SerDeInfo
name|serdeInfo
parameter_list|)
block|{
name|this
operator|.
name|serdeInfo
operator|=
name|serdeInfo
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSerdeInfo
parameter_list|()
block|{
name|this
operator|.
name|serdeInfo
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field serdeInfo is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetSerdeInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|serdeInfo
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getBucketColsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|bucketCols
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|bucketCols
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getBucketColsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|bucketCols
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|bucketCols
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToBucketCols
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|bucketCols
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|bucketCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|bucketCols
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBucketCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|bucketCols
return|;
block|}
specifier|public
name|void
name|setBucketCols
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|bucketCols
parameter_list|)
block|{
name|this
operator|.
name|bucketCols
operator|=
name|bucketCols
expr_stmt|;
block|}
specifier|public
name|void
name|unsetBucketCols
parameter_list|()
block|{
name|this
operator|.
name|bucketCols
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field bucketCols is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetBucketCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|bucketCols
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getSortColsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|sortCols
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|sortCols
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Order
argument_list|>
name|getSortColsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|sortCols
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|sortCols
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSortCols
parameter_list|(
name|Order
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|sortCols
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|sortCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|sortCols
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Order
argument_list|>
name|getSortCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|sortCols
return|;
block|}
specifier|public
name|void
name|setSortCols
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
parameter_list|)
block|{
name|this
operator|.
name|sortCols
operator|=
name|sortCols
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSortCols
parameter_list|()
block|{
name|this
operator|.
name|sortCols
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field sortCols is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetSortCols
parameter_list|()
block|{
return|return
name|this
operator|.
name|sortCols
operator|!=
literal|null
return|;
block|}
specifier|public
name|int
name|getParametersSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|parameters
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|parameters
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToParameters
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|parameters
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|parameters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|parameters
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|parameters
return|;
block|}
specifier|public
name|void
name|setParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
specifier|public
name|void
name|unsetParameters
parameter_list|()
block|{
name|this
operator|.
name|parameters
operator|=
literal|null
expr_stmt|;
block|}
comment|// Returns true if field parameters is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSetParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|parameters
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|COLS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCols
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCols
argument_list|(
operator|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LOCATION
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLocation
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLocation
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INPUTFORMAT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetInputFormat
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setInputFormat
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OUTPUTFORMAT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetOutputFormat
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setOutputFormat
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COMPRESSED
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCompressed
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCompressed
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NUMBUCKETS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNumBuckets
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNumBuckets
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SERDEINFO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSerdeInfo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSerdeInfo
argument_list|(
operator|(
name|SerDeInfo
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BUCKETCOLS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBucketCols
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBucketCols
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SORTCOLS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSortCols
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSortCols
argument_list|(
operator|(
name|List
argument_list|<
name|Order
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARAMETERS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetParameters
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setParameters
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|COLS
case|:
return|return
name|getCols
argument_list|()
return|;
case|case
name|LOCATION
case|:
return|return
name|getLocation
argument_list|()
return|;
case|case
name|INPUTFORMAT
case|:
return|return
name|getInputFormat
argument_list|()
return|;
case|case
name|OUTPUTFORMAT
case|:
return|return
name|getOutputFormat
argument_list|()
return|;
case|case
name|COMPRESSED
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isCompressed
argument_list|()
argument_list|)
return|;
case|case
name|NUMBUCKETS
case|:
return|return
operator|new
name|Integer
argument_list|(
name|getNumBuckets
argument_list|()
argument_list|)
return|;
case|case
name|SERDEINFO
case|:
return|return
name|getSerdeInfo
argument_list|()
return|;
case|case
name|BUCKETCOLS
case|:
return|return
name|getBucketCols
argument_list|()
return|;
case|case
name|SORTCOLS
case|:
return|return
name|getSortCols
argument_list|()
return|;
case|case
name|PARAMETERS
case|:
return|return
name|getParameters
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
comment|// Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
specifier|public
name|boolean
name|isSet
parameter_list|(
name|int
name|fieldID
parameter_list|)
block|{
switch|switch
condition|(
name|fieldID
condition|)
block|{
case|case
name|COLS
case|:
return|return
name|isSetCols
argument_list|()
return|;
case|case
name|LOCATION
case|:
return|return
name|isSetLocation
argument_list|()
return|;
case|case
name|INPUTFORMAT
case|:
return|return
name|isSetInputFormat
argument_list|()
return|;
case|case
name|OUTPUTFORMAT
case|:
return|return
name|isSetOutputFormat
argument_list|()
return|;
case|case
name|COMPRESSED
case|:
return|return
name|isSetCompressed
argument_list|()
return|;
case|case
name|NUMBUCKETS
case|:
return|return
name|isSetNumBuckets
argument_list|()
return|;
case|case
name|SERDEINFO
case|:
return|return
name|isSetSerdeInfo
argument_list|()
return|;
case|case
name|BUCKETCOLS
case|:
return|return
name|isSetBucketCols
argument_list|()
return|;
case|case
name|SORTCOLS
case|:
return|return
name|isSetSortCols
argument_list|()
return|;
case|case
name|PARAMETERS
case|:
return|return
name|isSetParameters
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldID
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|StorageDescriptor
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|StorageDescriptor
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|StorageDescriptor
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_cols
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetCols
argument_list|()
decl_stmt|;
name|boolean
name|that_present_cols
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_cols
operator|||
name|that_present_cols
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_cols
operator|&&
name|that_present_cols
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|cols
operator|.
name|equals
argument_list|(
name|that
operator|.
name|cols
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_location
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetLocation
argument_list|()
decl_stmt|;
name|boolean
name|that_present_location
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_location
operator|||
name|that_present_location
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_location
operator|&&
name|that_present_location
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|location
operator|.
name|equals
argument_list|(
name|that
operator|.
name|location
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_inputFormat
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetInputFormat
argument_list|()
decl_stmt|;
name|boolean
name|that_present_inputFormat
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetInputFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_inputFormat
operator|||
name|that_present_inputFormat
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_inputFormat
operator|&&
name|that_present_inputFormat
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|inputFormat
operator|.
name|equals
argument_list|(
name|that
operator|.
name|inputFormat
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_outputFormat
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetOutputFormat
argument_list|()
decl_stmt|;
name|boolean
name|that_present_outputFormat
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetOutputFormat
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_outputFormat
operator|||
name|that_present_outputFormat
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_outputFormat
operator|&&
name|that_present_outputFormat
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|outputFormat
operator|.
name|equals
argument_list|(
name|that
operator|.
name|outputFormat
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_compressed
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_compressed
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_compressed
operator|||
name|that_present_compressed
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_compressed
operator|&&
name|that_present_compressed
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|compressed
operator|!=
name|that
operator|.
name|compressed
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_numBuckets
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_numBuckets
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_numBuckets
operator|||
name|that_present_numBuckets
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_numBuckets
operator|&&
name|that_present_numBuckets
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|numBuckets
operator|!=
name|that
operator|.
name|numBuckets
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_serdeInfo
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSerdeInfo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_serdeInfo
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSerdeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_serdeInfo
operator|||
name|that_present_serdeInfo
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_serdeInfo
operator|&&
name|that_present_serdeInfo
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|serdeInfo
operator|.
name|equals
argument_list|(
name|that
operator|.
name|serdeInfo
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_bucketCols
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetBucketCols
argument_list|()
decl_stmt|;
name|boolean
name|that_present_bucketCols
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetBucketCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_bucketCols
operator|||
name|that_present_bucketCols
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_bucketCols
operator|&&
name|that_present_bucketCols
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|bucketCols
operator|.
name|equals
argument_list|(
name|that
operator|.
name|bucketCols
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_sortCols
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSortCols
argument_list|()
decl_stmt|;
name|boolean
name|that_present_sortCols
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSortCols
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_sortCols
operator|||
name|that_present_sortCols
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_sortCols
operator|&&
name|that_present_sortCols
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|sortCols
operator|.
name|equals
argument_list|(
name|that
operator|.
name|sortCols
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_parameters
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetParameters
argument_list|()
decl_stmt|;
name|boolean
name|that_present_parameters
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_parameters
operator|||
name|that_present_parameters
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_parameters
operator|&&
name|that_present_parameters
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|parameters
operator|.
name|equals
argument_list|(
name|that
operator|.
name|parameters
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
name|COLS
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list9
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|cols
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|_list9
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i10
init|=
literal|0
init|;
name|_i10
operator|<
name|_list9
operator|.
name|size
condition|;
operator|++
name|_i10
control|)
block|{
name|FieldSchema
name|_elem11
decl_stmt|;
name|_elem11
operator|=
operator|new
name|FieldSchema
argument_list|()
expr_stmt|;
name|_elem11
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|cols
operator|.
name|add
argument_list|(
name|_elem11
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LOCATION
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|location
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INPUTFORMAT
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|inputFormat
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OUTPUTFORMAT
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|outputFormat
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COMPRESSED
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|compressed
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|compressed
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NUMBUCKETS
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|numBuckets
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|numBuckets
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SERDEINFO
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|serdeInfo
operator|=
operator|new
name|SerDeInfo
argument_list|()
expr_stmt|;
name|this
operator|.
name|serdeInfo
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BUCKETCOLS
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list12
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|bucketCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list12
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i13
init|=
literal|0
init|;
name|_i13
operator|<
name|_list12
operator|.
name|size
condition|;
operator|++
name|_i13
control|)
block|{
name|String
name|_elem14
decl_stmt|;
name|_elem14
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|bucketCols
operator|.
name|add
argument_list|(
name|_elem14
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SORTCOLS
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list15
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|sortCols
operator|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|(
name|_list15
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i16
init|=
literal|0
init|;
name|_i16
operator|<
name|_list15
operator|.
name|size
condition|;
operator|++
name|_i16
control|)
block|{
name|Order
name|_elem17
decl_stmt|;
name|_elem17
operator|=
operator|new
name|Order
argument_list|()
expr_stmt|;
name|_elem17
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|sortCols
operator|.
name|add
argument_list|(
name|_elem17
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARAMETERS
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map18
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|parameters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map18
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i19
init|=
literal|0
init|;
name|_i19
operator|<
name|_map18
operator|.
name|size
condition|;
operator|++
name|_i19
control|)
block|{
name|String
name|_key20
decl_stmt|;
name|String
name|_val21
decl_stmt|;
name|_key20
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val21
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|parameters
operator|.
name|put
argument_list|(
name|_key20
argument_list|,
name|_val21
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cols
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|cols
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|_iter22
range|:
name|this
operator|.
name|cols
control|)
block|{
name|_iter22
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|location
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LOCATION_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|location
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|inputFormat
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|INPUT_FORMAT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|inputFormat
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|outputFormat
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|OUTPUT_FORMAT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|outputFormat
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COMPRESSED_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|compressed
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NUM_BUCKETS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|numBuckets
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|serdeInfo
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SERDE_INFO_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|serdeInfo
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|bucketCols
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BUCKET_COLS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|bucketCols
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter23
range|:
name|this
operator|.
name|bucketCols
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter23
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|sortCols
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SORT_COLS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|sortCols
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Order
name|_iter24
range|:
name|this
operator|.
name|sortCols
control|)
block|{
name|_iter24
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|parameters
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PARAMETERS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|_iter25
range|:
name|this
operator|.
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter25
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter25
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"StorageDescriptor("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"cols:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|cols
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|cols
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"location:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|location
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|location
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"inputFormat:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|inputFormat
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|inputFormat
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"outputFormat:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|outputFormat
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|outputFormat
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"compressed:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|compressed
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"numBuckets:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|numBuckets
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"serdeInfo:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|serdeInfo
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|serdeInfo
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"bucketCols:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|bucketCols
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|bucketCols
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"sortCols:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|sortCols
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|sortCols
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"parameters:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|parameters
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|parameters
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
comment|// check that fields of type enum have valid values
block|}
block|}
end_class

end_unit

