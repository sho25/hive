begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|Index
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|indexName
decl_stmt|;
specifier|private
name|int
name|indexType
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|colNames
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|indexName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|indexType
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|tableName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|dbName
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|colNames
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|Index
parameter_list|()
block|{ }
specifier|public
name|Index
parameter_list|(
name|String
name|indexName
parameter_list|,
name|int
name|indexType
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|indexName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|indexType
operator|=
name|indexType
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|indexType
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|dbName
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|colNames
operator|=
name|colNames
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|colNames
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexName
return|;
block|}
specifier|public
name|void
name|setIndexName
parameter_list|(
name|String
name|indexName
parameter_list|)
block|{
name|this
operator|.
name|indexName
operator|=
name|indexName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|indexName
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetIndexName
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|indexName
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|int
name|getIndexType
parameter_list|()
block|{
return|return
name|this
operator|.
name|indexType
return|;
block|}
specifier|public
name|void
name|setIndexType
parameter_list|(
name|int
name|indexType
parameter_list|)
block|{
name|this
operator|.
name|indexType
operator|=
name|indexType
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|indexType
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetIndexType
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|indexType
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
specifier|public
name|void
name|setTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbName
return|;
block|}
specifier|public
name|void
name|setDbName
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|dbName
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbName
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|dbName
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|int
name|getColNamesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|colNames
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|colNames
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getColNamesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|colNames
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|colNames
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToColNames
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|colNames
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|colNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|colNames
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|colNames
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getColNames
parameter_list|()
block|{
return|return
name|this
operator|.
name|colNames
return|;
block|}
specifier|public
name|void
name|setColNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
block|{
name|this
operator|.
name|colNames
operator|=
name|colNames
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|colNames
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetColNames
parameter_list|()
block|{
name|this
operator|.
name|colNames
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|colNames
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|Index
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|Index
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Index
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_indexName
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|indexName
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_indexName
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|indexName
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_indexName
operator|||
name|that_present_indexName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_indexName
operator|&&
name|that_present_indexName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|indexName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|indexName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_indexType
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_indexType
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_indexType
operator|||
name|that_present_indexType
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_indexType
operator|&&
name|that_present_indexType
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|indexType
operator|!=
name|that
operator|.
name|indexType
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|tableName
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|tableName
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_dbName
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|dbName
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_dbName
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|dbName
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_dbName
operator|||
name|that_present_dbName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbName
operator|&&
name|that_present_dbName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_colNames
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|colNames
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_colNames
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|colNames
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_colNames
operator|||
name|that_present_colNames
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_colNames
operator|&&
name|that_present_colNames
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|colNames
operator|.
name|equals
argument_list|(
name|that
operator|.
name|colNames
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|indexName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|indexName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|indexType
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|indexType
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tableName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|dbName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|dbName
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list44
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|colNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list44
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i45
init|=
literal|0
init|;
name|_i45
operator|<
name|_list44
operator|.
name|size
condition|;
operator|++
name|_i45
control|)
block|{
name|String
name|_elem46
init|=
literal|null
decl_stmt|;
name|_elem46
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|colNames
operator|.
name|add
argument_list|(
name|_elem46
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|colNames
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"Index"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|indexName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"indexName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|indexName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"indexType"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I32
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|indexType
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tableName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|dbName
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"dbName"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|dbName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|colNames
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"colNames"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|5
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|colNames
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter47
range|:
name|this
operator|.
name|colNames
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter47
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Index("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"indexName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|indexName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",indexType:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|indexType
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",tableName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",dbName:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbName
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",colNames:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|colNames
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

