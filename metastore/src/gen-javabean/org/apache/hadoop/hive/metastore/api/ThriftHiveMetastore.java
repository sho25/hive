begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ThriftHiveMetastore
block|{
comment|/**  * This interface is live.  */
specifier|public
interface|interface
name|Iface
extends|extends
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
operator|.
name|Iface
block|{
specifier|public
name|boolean
name|create_database
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Database
name|get_database
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|boolean
name|drop_database
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_databases
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Type
name|get_type
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|boolean
name|create_type
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|boolean
name|drop_type
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|get_type_all
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_fields
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|create_table
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|drop_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Table
name|get_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Partition
name|add_partition
parameter_list|(
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Partition
name|append_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|boolean
name|drop_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Partition
name|get_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partition_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|boolean
name|alter_partitions
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parts
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|boolean
name|create_index
parameter_list|(
name|Index
name|index_def
parameter_list|)
throws|throws
name|IndexAlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|Client
extends|extends
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
operator|.
name|Client
implements|implements
name|Iface
block|{
specifier|public
name|Client
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
block|{
name|this
argument_list|(
name|prot
argument_list|,
name|prot
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Client
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
block|{
name|super
argument_list|(
name|iprot
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|create_database
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_create_database
argument_list|(
name|name
argument_list|,
name|description
argument_list|)
expr_stmt|;
return|return
name|recv_create_database
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_create_database
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_database"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|create_database_args
name|args
init|=
operator|new
name|create_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|args
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_create_database
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|create_database_result
name|result
init|=
operator|new
name|create_database_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"create_database failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Database
name|get_database
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_get_database
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|recv_get_database
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_database
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_database"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_database_args
name|args
init|=
operator|new
name|get_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Database
name|recv_get_database
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_database_result
name|result
init|=
operator|new
name|get_database_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_database failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|drop_database
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_drop_database
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|recv_drop_database
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_drop_database
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_database"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|drop_database_args
name|args
init|=
operator|new
name|drop_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_drop_database
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|drop_database_result
name|result
init|=
operator|new
name|drop_database_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"drop_database failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_databases
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_databases
argument_list|()
expr_stmt|;
return|return
name|recv_get_databases
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_databases
parameter_list|()
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_databases"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_databases_args
name|args
init|=
operator|new
name|get_databases_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_databases
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_databases_result
name|result
init|=
operator|new
name|get_databases_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_databases failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Type
name|get_type
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_type
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|recv_get_type
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_type
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_type_args
name|args
init|=
operator|new
name|get_type_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Type
name|recv_get_type
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_type_result
name|result
init|=
operator|new
name|get_type_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_type failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|create_type
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_create_type
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|recv_create_type
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_create_type
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_type"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|create_type_args
name|args
init|=
operator|new
name|create_type_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_create_type
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|create_type_result
name|result
init|=
operator|new
name|create_type_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"create_type failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|drop_type
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_drop_type
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|recv_drop_type
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_drop_type
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_type"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|drop_type_args
name|args
init|=
operator|new
name|drop_type_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_drop_type
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|drop_type_result
name|result
init|=
operator|new
name|drop_type_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"drop_type failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|get_type_all
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_type_all
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|recv_get_type_all
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_type_all
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type_all"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_type_all_args
name|args
init|=
operator|new
name|get_type_all_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|recv_get_type_all
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_type_all_result
name|result
init|=
operator|new
name|get_type_all_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_type_all failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_fields
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|send_get_fields
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|)
expr_stmt|;
return|return
name|recv_get_fields
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_fields
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_fields"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_fields_args
name|args
init|=
operator|new
name|get_fields_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|recv_get_fields
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_fields_result
name|result
init|=
operator|new
name|get_fields_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_fields failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|create_table
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|send_create_table
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|recv_create_table
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_create_table
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|create_table_args
name|args
init|=
operator|new
name|create_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|tbl
operator|=
name|tbl
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_create_table
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|create_table_result
name|result
init|=
operator|new
name|create_table_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o4
condition|)
block|{
throw|throw
name|result
operator|.
name|o4
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|drop_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_drop_table
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
name|recv_drop_table
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_drop_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|drop_table_args
name|args
init|=
operator|new
name|drop_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|args
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|args
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_drop_table
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|drop_table_result
name|result
init|=
operator|new
name|drop_table_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
return|return;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_tables
argument_list|(
name|db_name
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
return|return
name|recv_get_tables
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_tables"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_tables_args
name|args
init|=
operator|new
name|get_tables_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_tables
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_tables_result
name|result
init|=
operator|new
name|get_tables_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_tables failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Table
name|get_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|send_get_table
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
return|return
name|recv_get_table
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_table_args
name|args
init|=
operator|new
name|get_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|args
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Table
name|recv_get_table
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_table_result
name|result
init|=
operator|new
name|get_table_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_table failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_alter_table
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|new_tbl
argument_list|)
expr_stmt|;
name|recv_alter_table
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|alter_table_args
name|args
init|=
operator|new
name|alter_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|args
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|args
operator|.
name|new_tbl
operator|=
name|new_tbl
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_alter_table
parameter_list|()
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|alter_table_result
name|result
init|=
operator|new
name|alter_table_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
return|return;
block|}
specifier|public
name|Partition
name|add_partition
parameter_list|(
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_add_partition
argument_list|(
name|new_part
argument_list|)
expr_stmt|;
return|return
name|recv_add_partition
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_add_partition
parameter_list|(
name|Partition
name|new_part
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"add_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|add_partition_args
name|args
init|=
operator|new
name|add_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|new_part
operator|=
name|new_part
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|recv_add_partition
parameter_list|()
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|add_partition_result
name|result
init|=
operator|new
name|add_partition_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"add_partition failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Partition
name|append_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_append_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
return|return
name|recv_append_partition
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_append_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"append_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|append_partition_args
name|args
init|=
operator|new
name|append_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|args
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|recv_append_partition
parameter_list|()
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|append_partition_result
name|result
init|=
operator|new
name|append_partition_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"append_partition failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|drop_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_drop_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
return|return
name|recv_drop_partition
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_drop_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|drop_partition_args
name|args
init|=
operator|new
name|drop_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|args
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|args
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_drop_partition
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|drop_partition_result
name|result
init|=
operator|new
name|drop_partition_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"drop_partition failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Partition
name|get_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
return|return
name|recv_get_partition
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_partition_args
name|args
init|=
operator|new
name|get_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|args
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|recv_get_partition
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_partition_result
name|result
init|=
operator|new
name|get_partition_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_partition failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_get_partitions
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
return|return
name|recv_get_partitions
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_partitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_partitions_args
name|args
init|=
operator|new
name|get_partitions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|args
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|recv_get_partitions
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_partitions_result
name|result
init|=
operator|new
name|get_partitions_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_partitions failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partition_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_partition_names
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
return|return
name|recv_get_partition_names
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_partition_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_names"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_partition_names_args
name|args
init|=
operator|new
name|get_partition_names_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|args
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|args
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_partition_names
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|get_partition_names_result
name|result
init|=
operator|new
name|get_partition_names_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_partition_names failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|alter_partitions
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parts
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_alter_partitions
argument_list|(
name|sd
argument_list|,
name|parts
argument_list|)
expr_stmt|;
return|return
name|recv_alter_partitions
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_alter_partitions
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parts
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_partitions"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|alter_partitions_args
name|args
init|=
operator|new
name|alter_partitions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
name|args
operator|.
name|parts
operator|=
name|parts
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_alter_partitions
parameter_list|()
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|alter_partitions_result
name|result
init|=
operator|new
name|alter_partitions_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"alter_partitions failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|create_index
parameter_list|(
name|Index
name|index_def
parameter_list|)
throws|throws
name|IndexAlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_create_index
argument_list|(
name|index_def
argument_list|)
expr_stmt|;
return|return
name|recv_create_index
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_create_index
parameter_list|(
name|Index
name|index_def
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_index"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|create_index_args
name|args
init|=
operator|new
name|create_index_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|index_def
operator|=
name|index_def
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_create_index
parameter_list|()
throws|throws
name|IndexAlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
name|create_index_result
name|result
init|=
operator|new
name|create_index_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"create_index failed: unknown result"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|Processor
extends|extends
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
operator|.
name|Processor
implements|implements
name|TProcessor
block|{
specifier|public
name|Processor
parameter_list|(
name|Iface
name|iface
parameter_list|)
block|{
name|super
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|iface_
operator|=
name|iface
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"create_database"
argument_list|,
operator|new
name|create_database
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_database"
argument_list|,
operator|new
name|get_database
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"drop_database"
argument_list|,
operator|new
name|drop_database
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_databases"
argument_list|,
operator|new
name|get_databases
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_type"
argument_list|,
operator|new
name|get_type
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"create_type"
argument_list|,
operator|new
name|create_type
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"drop_type"
argument_list|,
operator|new
name|drop_type
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_type_all"
argument_list|,
operator|new
name|get_type_all
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_fields"
argument_list|,
operator|new
name|get_fields
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"create_table"
argument_list|,
operator|new
name|create_table
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"drop_table"
argument_list|,
operator|new
name|drop_table
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_tables"
argument_list|,
operator|new
name|get_tables
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_table"
argument_list|,
operator|new
name|get_table
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"alter_table"
argument_list|,
operator|new
name|alter_table
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"add_partition"
argument_list|,
operator|new
name|add_partition
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"append_partition"
argument_list|,
operator|new
name|append_partition
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"drop_partition"
argument_list|,
operator|new
name|drop_partition
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_partition"
argument_list|,
operator|new
name|get_partition
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_partitions"
argument_list|,
operator|new
name|get_partitions
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_partition_names"
argument_list|,
operator|new
name|get_partition_names
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"alter_partitions"
argument_list|,
operator|new
name|alter_partitions
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"create_index"
argument_list|,
operator|new
name|create_index
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Iface
name|iface_
decl_stmt|;
specifier|public
name|boolean
name|process
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
name|ProcessFunction
name|fn
init|=
name|processMap_
operator|.
name|get
argument_list|(
name|msg
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|==
literal|null
condition|)
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|UNKNOWN_METHOD
argument_list|,
literal|"Invalid method name: '"
operator|+
name|msg
operator|.
name|name
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
name|msg
operator|.
name|name
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|msg
operator|.
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|fn
operator|.
name|process
argument_list|(
name|msg
operator|.
name|seqid
argument_list|,
name|iprot
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
class|class
name|create_database
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|create_database_args
name|args
init|=
operator|new
name|create_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|create_database_result
name|result
init|=
operator|new
name|create_database_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|create_database
argument_list|(
name|args
operator|.
name|name
argument_list|,
name|args
operator|.
name|description
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_database"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_database
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_database_args
name|args
init|=
operator|new
name|get_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_database_result
name|result
init|=
operator|new
name|get_database_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_database
argument_list|(
name|args
operator|.
name|name
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_database"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|drop_database
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|drop_database_args
name|args
init|=
operator|new
name|drop_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|drop_database_result
name|result
init|=
operator|new
name|drop_database_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|drop_database
argument_list|(
name|args
operator|.
name|name
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_database"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_databases
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_databases_args
name|args
init|=
operator|new
name|get_databases_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_databases_result
name|result
init|=
operator|new
name|get_databases_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_databases
argument_list|()
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_databases"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_type
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_type_args
name|args
init|=
operator|new
name|get_type_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_type_result
name|result
init|=
operator|new
name|get_type_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_type
argument_list|(
name|args
operator|.
name|name
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|create_type
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|create_type_args
name|args
init|=
operator|new
name|create_type_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|create_type_result
name|result
init|=
operator|new
name|create_type_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|create_type
argument_list|(
name|args
operator|.
name|type
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_type"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|drop_type
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|drop_type_args
name|args
init|=
operator|new
name|drop_type_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|drop_type_result
name|result
init|=
operator|new
name|drop_type_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|drop_type
argument_list|(
name|args
operator|.
name|type
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_type"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_type_all
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_type_all_args
name|args
init|=
operator|new
name|get_type_all_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_type_all_result
name|result
init|=
operator|new
name|get_type_all_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_type_all
argument_list|(
name|args
operator|.
name|name
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type_all"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_fields
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_fields_args
name|args
init|=
operator|new
name|get_fields_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_fields_result
name|result
init|=
operator|new
name|get_fields_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_fields
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_fields"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|create_table
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|create_table_args
name|args
init|=
operator|new
name|create_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|create_table_result
name|result
init|=
operator|new
name|create_table_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|create_table
argument_list|(
name|args
operator|.
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o4
parameter_list|)
block|{
name|result
operator|.
name|o4
operator|=
name|o4
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o4
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_table"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|drop_table
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|drop_table_args
name|args
init|=
operator|new
name|drop_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|drop_table_result
name|result
init|=
operator|new
name|drop_table_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|drop_table
argument_list|(
name|args
operator|.
name|dbname
argument_list|,
name|args
operator|.
name|name
argument_list|,
name|args
operator|.
name|deleteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_table"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_tables
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_tables_args
name|args
init|=
operator|new
name|get_tables_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_tables_result
name|result
init|=
operator|new
name|get_tables_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_tables
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|pattern
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_tables"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_table
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_table_args
name|args
init|=
operator|new
name|get_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_table_result
name|result
init|=
operator|new
name|get_table_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_table
argument_list|(
name|args
operator|.
name|dbname
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_table"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|alter_table
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|alter_table_args
name|args
init|=
operator|new
name|alter_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|alter_table_result
name|result
init|=
operator|new
name|alter_table_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|alter_table
argument_list|(
name|args
operator|.
name|dbname
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|new_tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_table"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|add_partition
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|add_partition_args
name|args
init|=
operator|new
name|add_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|add_partition_result
name|result
init|=
operator|new
name|add_partition_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|add_partition
argument_list|(
name|args
operator|.
name|new_part
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"add_partition"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|append_partition
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|append_partition_args
name|args
init|=
operator|new
name|append_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|append_partition_result
name|result
init|=
operator|new
name|append_partition_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|append_partition
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|part_vals
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"append_partition"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|drop_partition
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|drop_partition_args
name|args
init|=
operator|new
name|drop_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|drop_partition_result
name|result
init|=
operator|new
name|drop_partition_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|drop_partition
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|part_vals
argument_list|,
name|args
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_partition"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_partition
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_partition_args
name|args
init|=
operator|new
name|get_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_partition_result
name|result
init|=
operator|new
name|get_partition_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_partition
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|part_vals
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_partitions
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_partitions_args
name|args
init|=
operator|new
name|get_partitions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_partitions_result
name|result
init|=
operator|new
name|get_partitions_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_partitions
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_partition_names
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_partition_names_args
name|args
init|=
operator|new
name|get_partition_names_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_partition_names_result
name|result
init|=
operator|new
name|get_partition_names_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_partition_names
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_names"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|alter_partitions
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|alter_partitions_args
name|args
init|=
operator|new
name|alter_partitions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|alter_partitions_result
name|result
init|=
operator|new
name|alter_partitions_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|alter_partitions
argument_list|(
name|args
operator|.
name|sd
argument_list|,
name|args
operator|.
name|parts
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_partitions"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|create_index
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|create_index_args
name|args
init|=
operator|new
name|create_index_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|create_index_result
name|result
init|=
operator|new
name|create_index_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|create_index
argument_list|(
name|args
operator|.
name|index_def
argument_list|)
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IndexAlreadyExistsException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|result
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_index"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|create_database_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|description
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|description
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|create_database_args
parameter_list|()
block|{ }
specifier|public
name|create_database_args
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|description
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|description
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|this
operator|.
name|description
return|;
block|}
specifier|public
name|void
name|setDescription
parameter_list|(
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|description
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDescription
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|description
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_database_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_database_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_database_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_description
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|description
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_description
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|description
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_description
operator|||
name|that_present_description
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_description
operator|&&
name|that_present_description
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|description
operator|.
name|equals
argument_list|(
name|that
operator|.
name|description
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|description
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|description
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_database_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|description
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"description"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|description
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_database_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",description:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|description
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|create_database_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|AlreadyExistsException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|create_database_result
parameter_list|()
block|{ }
specifier|public
name|create_database_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|AlreadyExistsException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|AlreadyExistsException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_database_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_database_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_database_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|AlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_database_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|BOOL
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_database_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_database_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|name
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_database_args
parameter_list|()
block|{ }
specifier|public
name|get_database_args
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_database_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_database_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_database_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_database_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_database_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_database_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|Database
name|success
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_database_result
parameter_list|()
block|{ }
specifier|public
name|get_database_result
parameter_list|(
name|Database
name|success
parameter_list|,
name|NoSuchObjectException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Database
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Database
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|NoSuchObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_database_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_database_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_database_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Database
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_database_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_database_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_database_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|name
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|drop_database_args
parameter_list|()
block|{ }
specifier|public
name|drop_database_args
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_database_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_database_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_database_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_database_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_database_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_database_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|drop_database_result
parameter_list|()
block|{ }
specifier|public
name|drop_database_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_database_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_database_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_database_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_database_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|BOOL
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_database_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_databases_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|get_databases_args
parameter_list|()
block|{ }
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_databases_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_databases_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_databases_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_databases_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_databases_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_databases_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_databases_result
parameter_list|()
block|{ }
specifier|public
name|get_databases_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_databases_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_databases_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_databases_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list48
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list48
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i49
init|=
literal|0
init|;
name|_i49
operator|<
name|_list48
operator|.
name|size
condition|;
operator|++
name|_i49
control|)
block|{
name|String
name|_elem50
init|=
literal|null
decl_stmt|;
name|_elem50
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem50
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_databases_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter51
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter51
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_databases_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_type_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|name
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_type_args
parameter_list|()
block|{ }
specifier|public
name|get_type_args
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_type_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_type_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_type_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_type_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_type_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_type_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|Type
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_type_result
parameter_list|()
block|{ }
specifier|public
name|get_type_result
parameter_list|(
name|Type
name|success
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Type
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Type
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_type_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_type_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_type_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Type
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_type_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_type_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|create_type_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|Type
name|type
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|type
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|create_type_args
parameter_list|()
block|{ }
specifier|public
name|create_type_args
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|type
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|type
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetType
parameter_list|()
block|{
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|type
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_type_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_type_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_type_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_type
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|type
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_type
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|type
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_type
operator|||
name|that_present_type
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_type
operator|&&
name|that_present_type
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|type
operator|.
name|equals
argument_list|(
name|that
operator|.
name|type
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|type
operator|=
operator|new
name|Type
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|type
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_type_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|type
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"type"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_type_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"type:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|create_type_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|AlreadyExistsException
name|o1
decl_stmt|;
specifier|private
name|InvalidObjectException
name|o2
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|create_type_result
parameter_list|()
block|{ }
specifier|public
name|create_type_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|AlreadyExistsException
name|o1
parameter_list|,
name|InvalidObjectException
name|o2
parameter_list|,
name|MetaException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|AlreadyExistsException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|InvalidObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|InvalidObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_type_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_type_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_type_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|AlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|InvalidObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_type_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|BOOL
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_type_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_type_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|type
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|type
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|drop_type_args
parameter_list|()
block|{ }
specifier|public
name|drop_type_args
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|type
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|type
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetType
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|type
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_type_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_type_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_type_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_type
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|type
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_type
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|type
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_type
operator|||
name|that_present_type
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_type
operator|&&
name|that_present_type
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|type
operator|.
name|equals
argument_list|(
name|that
operator|.
name|type
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|type
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_type_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|type
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"type"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|type
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_type_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"type:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|type
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_type_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|drop_type_result
parameter_list|()
block|{ }
specifier|public
name|drop_type_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_type_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_type_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_type_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_type_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|BOOL
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_type_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_type_all_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|name
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_type_all_args
parameter_list|()
block|{ }
specifier|public
name|get_type_all_args
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_type_all_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_type_all_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_type_all_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_type_all_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_type_all_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_type_all_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_type_all_result
parameter_list|()
block|{ }
specifier|public
name|get_type_all_result
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToSuccess
parameter_list|(
name|String
name|key
parameter_list|,
name|Type
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_type_all_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_type_all_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_type_all_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map52
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
argument_list|(
literal|2
operator|*
name|_map52
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i53
init|=
literal|0
init|;
name|_i53
operator|<
name|_map52
operator|.
name|size
condition|;
operator|++
name|_i53
control|)
block|{
name|String
name|_key54
decl_stmt|;
name|Type
name|_val55
decl_stmt|;
name|_key54
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val55
operator|=
operator|new
name|Type
argument_list|()
expr_stmt|;
name|_val55
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|_key54
argument_list|,
name|_val55
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_type_all_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|MAP
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter56
range|:
name|this
operator|.
name|success
operator|.
name|keySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter56
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|get
argument_list|(
name|_iter56
argument_list|)
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_type_all_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_fields_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|table_name
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_fields_args
parameter_list|()
block|{ }
specifier|public
name|get_fields_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
return|;
block|}
specifier|public
name|void
name|setTable_name
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_fields_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_fields_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_fields_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_table_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_table_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|table_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_table_name
operator|||
name|that_present_table_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table_name
operator|&&
name|that_present_table_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|table_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_fields_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|table_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"table_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_fields_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",table_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_fields_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownTableException
name|o2
decl_stmt|;
specifier|private
name|UnknownDBException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_fields_result
parameter_list|()
block|{ }
specifier|public
name|get_fields_result
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|UnknownTableException
name|o2
parameter_list|,
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|FieldSchema
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownTableException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|UnknownDBException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_fields_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_fields_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_fields_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list57
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|_list57
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i58
init|=
literal|0
init|;
name|_i58
operator|<
name|_list57
operator|.
name|size
condition|;
operator|++
name|_i58
control|)
block|{
name|FieldSchema
name|_elem59
init|=
operator|new
name|FieldSchema
argument_list|()
decl_stmt|;
name|_elem59
operator|=
operator|new
name|FieldSchema
argument_list|()
expr_stmt|;
name|_elem59
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem59
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownTableException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|5
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_fields_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|_iter60
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter60
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|5
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_fields_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|create_table_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|Table
name|tbl
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|tbl
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|create_table_args
parameter_list|()
block|{ }
specifier|public
name|create_table_args
parameter_list|(
name|Table
name|tbl
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tbl
operator|=
name|tbl
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Table
name|getTbl
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl
return|;
block|}
specifier|public
name|void
name|setTbl
parameter_list|(
name|Table
name|tbl
parameter_list|)
block|{
name|this
operator|.
name|tbl
operator|=
name|tbl
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl
parameter_list|()
block|{
name|this
operator|.
name|tbl
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_table_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_table_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_table_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tbl
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|tbl
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_tbl
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|tbl
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_tbl
operator|||
name|that_present_tbl
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl
operator|&&
name|that_present_tbl
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|tbl
operator|=
operator|new
name|Table
argument_list|()
expr_stmt|;
name|this
operator|.
name|tbl
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_table_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tbl"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|tbl
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_table_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|create_table_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|AlreadyExistsException
name|o1
decl_stmt|;
specifier|private
name|InvalidObjectException
name|o2
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o4
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o4
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|create_table_result
parameter_list|()
block|{ }
specifier|public
name|create_table_result
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|,
name|InvalidObjectException
name|o2
parameter_list|,
name|MetaException
name|o3
parameter_list|,
name|NoSuchObjectException
name|o4
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o4
operator|=
name|o4
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o4
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|AlreadyExistsException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|InvalidObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|InvalidObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|NoSuchObjectException
name|getO4
parameter_list|()
block|{
return|return
name|this
operator|.
name|o4
return|;
block|}
specifier|public
name|void
name|setO4
parameter_list|(
name|NoSuchObjectException
name|o4
parameter_list|)
block|{
name|this
operator|.
name|o4
operator|=
name|o4
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o4
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO4
parameter_list|()
block|{
name|this
operator|.
name|o4
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o4
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_table_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_table_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_table_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o4
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o4
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o4
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o4
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o4
operator|||
name|that_present_o4
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o4
operator|&&
name|that_present_o4
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o4
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o4
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|AlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|InvalidObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o4
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o4
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o4
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_table_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o4
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o4
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o4"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o4
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_table_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o4:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o4
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_table_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|boolean
name|deleteData
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|dbname
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|deleteData
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|drop_table_args
parameter_list|()
block|{ }
specifier|public
name|drop_table_args
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|dbname
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|deleteData
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
return|;
block|}
specifier|public
name|void
name|setDbname
parameter_list|(
name|String
name|dbname
parameter_list|)
block|{
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|dbname
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbname
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|dbname
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDeleteData
parameter_list|()
block|{
return|return
name|this
operator|.
name|deleteData
return|;
block|}
specifier|public
name|void
name|setDeleteData
parameter_list|(
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|deleteData
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDeleteData
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|deleteData
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_table_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_table_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_table_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_dbname
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|dbname
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_dbname
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|dbname
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_dbname
operator|||
name|that_present_dbname
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbname
operator|&&
name|that_present_dbname
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbname
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_deleteData
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_deleteData
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_deleteData
operator|||
name|that_present_deleteData
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_deleteData
operator|&&
name|that_present_deleteData
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|deleteData
operator|!=
name|that
operator|.
name|deleteData
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|dbname
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|deleteData
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_table_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"dbname"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"deleteData"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|BOOL
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_table_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbname:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",deleteData:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_table_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|NoSuchObjectException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|drop_table_result
parameter_list|()
block|{ }
specifier|public
name|drop_table_result
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|,
name|MetaException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|NoSuchObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_table_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_table_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_table_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_table_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_table_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_tables_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|pattern
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|pattern
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_tables_args
parameter_list|()
block|{ }
specifier|public
name|get_tables_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|pattern
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|this
operator|.
name|pattern
return|;
block|}
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|pattern
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPattern
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|pattern
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_tables_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_tables_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_tables_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_pattern
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|pattern
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_pattern
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|pattern
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_pattern
operator|||
name|that_present_pattern
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_pattern
operator|&&
name|that_present_pattern
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|pattern
operator|.
name|equals
argument_list|(
name|that
operator|.
name|pattern
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
operator|-
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|pattern
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|pattern
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_tables_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|pattern
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"pattern"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|pattern
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_tables_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",pattern:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|pattern
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_tables_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_tables_result
parameter_list|()
block|{ }
specifier|public
name|get_tables_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_tables_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_tables_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_tables_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list61
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list61
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i62
init|=
literal|0
init|;
name|_i62
operator|<
name|_list61
operator|.
name|size
condition|;
operator|++
name|_i62
control|)
block|{
name|String
name|_elem63
init|=
literal|null
decl_stmt|;
name|_elem63
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem63
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
operator|-
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_tables_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter64
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter64
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
operator|-
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_tables_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_table_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|dbname
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|tbl_name
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_table_args
parameter_list|()
block|{ }
specifier|public
name|get_table_args
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|dbname
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
return|;
block|}
specifier|public
name|void
name|setDbname
parameter_list|(
name|String
name|dbname
parameter_list|)
block|{
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|dbname
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbname
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|dbname
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_table_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_table_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_table_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_dbname
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|dbname
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_dbname
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|dbname
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_dbname
operator|||
name|that_present_dbname
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbname
operator|&&
name|that_present_dbname
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbname
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|dbname
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_table_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"dbname"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tbl_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_table_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbname:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",tbl_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_table_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|Table
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_table_result
parameter_list|()
block|{ }
specifier|public
name|get_table_result
parameter_list|(
name|Table
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Table
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Table
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|NoSuchObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_table_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_table_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_table_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Table
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_table_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_table_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_table_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|Table
name|new_tbl
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|dbname
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|tbl_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|new_tbl
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|alter_table_args
parameter_list|()
block|{ }
specifier|public
name|alter_table_args
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|dbname
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|new_tbl
operator|=
name|new_tbl
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|new_tbl
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
return|;
block|}
specifier|public
name|void
name|setDbname
parameter_list|(
name|String
name|dbname
parameter_list|)
block|{
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|dbname
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbname
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|dbname
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|Table
name|getNew_tbl
parameter_list|()
block|{
return|return
name|this
operator|.
name|new_tbl
return|;
block|}
specifier|public
name|void
name|setNew_tbl
parameter_list|(
name|Table
name|new_tbl
parameter_list|)
block|{
name|this
operator|.
name|new_tbl
operator|=
name|new_tbl
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|new_tbl
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetNew_tbl
parameter_list|()
block|{
name|this
operator|.
name|new_tbl
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|new_tbl
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_table_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_table_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_table_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_dbname
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|dbname
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_dbname
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|dbname
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_dbname
operator|||
name|that_present_dbname
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbname
operator|&&
name|that_present_dbname
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbname
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_new_tbl
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|new_tbl
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_new_tbl
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|new_tbl
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_new_tbl
operator|||
name|that_present_new_tbl
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_new_tbl
operator|&&
name|that_present_new_tbl
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|new_tbl
operator|.
name|equals
argument_list|(
name|that
operator|.
name|new_tbl
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|dbname
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|new_tbl
operator|=
operator|new
name|Table
argument_list|()
expr_stmt|;
name|this
operator|.
name|new_tbl
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|new_tbl
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_table_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"dbname"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tbl_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|new_tbl
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"new_tbl"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|new_tbl
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_table_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbname:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",tbl_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",new_tbl:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|new_tbl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_table_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|InvalidOperationException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|alter_table_result
parameter_list|()
block|{ }
specifier|public
name|alter_table_result
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|InvalidOperationException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_table_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_table_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_table_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidOperationException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_table_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_table_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|add_partition_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|Partition
name|new_part
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|new_part
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|add_partition_args
parameter_list|()
block|{ }
specifier|public
name|add_partition_args
parameter_list|(
name|Partition
name|new_part
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|new_part
operator|=
name|new_part
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|new_part
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Partition
name|getNew_part
parameter_list|()
block|{
return|return
name|this
operator|.
name|new_part
return|;
block|}
specifier|public
name|void
name|setNew_part
parameter_list|(
name|Partition
name|new_part
parameter_list|)
block|{
name|this
operator|.
name|new_part
operator|=
name|new_part
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|new_part
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetNew_part
parameter_list|()
block|{
name|this
operator|.
name|new_part
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|new_part
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|add_partition_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|add_partition_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|add_partition_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_new_part
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|new_part
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_new_part
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|new_part
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_new_part
operator|||
name|that_present_new_part
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_new_part
operator|&&
name|that_present_new_part
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|new_part
operator|.
name|equals
argument_list|(
name|that
operator|.
name|new_part
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|new_part
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|this
operator|.
name|new_part
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|new_part
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"add_partition_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|new_part
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"new_part"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|new_part
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"add_partition_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"new_part:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|new_part
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|add_partition_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|Partition
name|success
decl_stmt|;
specifier|private
name|InvalidObjectException
name|o1
decl_stmt|;
specifier|private
name|AlreadyExistsException
name|o2
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|add_partition_result
parameter_list|()
block|{ }
specifier|public
name|add_partition_result
parameter_list|(
name|Partition
name|success
parameter_list|,
name|InvalidObjectException
name|o1
parameter_list|,
name|AlreadyExistsException
name|o2
parameter_list|,
name|MetaException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Partition
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Partition
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|InvalidObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|InvalidObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|AlreadyExistsException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|AlreadyExistsException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|add_partition_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|add_partition_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|add_partition_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|AlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"add_partition_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"add_partition_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|append_partition_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|tbl_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|part_vals
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|append_partition_args
parameter_list|()
block|{ }
specifier|public
name|append_partition_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|int
name|getPart_valsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPart_valsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|part_vals
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToPart_vals
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
return|;
block|}
specifier|public
name|void
name|setPart_vals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_vals
parameter_list|()
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|append_partition_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|append_partition_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|append_partition_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_part_vals
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|part_vals
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_part_vals
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|part_vals
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_part_vals
operator|||
name|that_present_part_vals
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_vals
operator|&&
name|that_present_part_vals
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_vals
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_vals
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list65
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list65
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i66
init|=
literal|0
init|;
name|_i66
operator|<
name|_list65
operator|.
name|size
condition|;
operator|++
name|_i66
control|)
block|{
name|String
name|_elem67
init|=
literal|null
decl_stmt|;
name|_elem67
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|_elem67
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"append_partition_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tbl_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|part_vals
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"part_vals"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter68
range|:
name|this
operator|.
name|part_vals
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter68
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"append_partition_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",tbl_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",part_vals:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_vals
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|append_partition_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|Partition
name|success
decl_stmt|;
specifier|private
name|InvalidObjectException
name|o1
decl_stmt|;
specifier|private
name|AlreadyExistsException
name|o2
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o3
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|append_partition_result
parameter_list|()
block|{ }
specifier|public
name|append_partition_result
parameter_list|(
name|Partition
name|success
parameter_list|,
name|InvalidObjectException
name|o1
parameter_list|,
name|AlreadyExistsException
name|o2
parameter_list|,
name|MetaException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Partition
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Partition
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|InvalidObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|InvalidObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|AlreadyExistsException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|AlreadyExistsException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|append_partition_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|append_partition_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|append_partition_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o3
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|AlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o3
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"append_partition_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o3
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o3"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"append_partition_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o3:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_partition_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
specifier|private
name|boolean
name|deleteData
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|tbl_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|part_vals
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|deleteData
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|drop_partition_args
parameter_list|()
block|{ }
specifier|public
name|drop_partition_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|deleteData
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|int
name|getPart_valsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPart_valsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|part_vals
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToPart_vals
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
return|;
block|}
specifier|public
name|void
name|setPart_vals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_vals
parameter_list|()
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|isDeleteData
parameter_list|()
block|{
return|return
name|this
operator|.
name|deleteData
return|;
block|}
specifier|public
name|void
name|setDeleteData
parameter_list|(
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|deleteData
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDeleteData
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|deleteData
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_partition_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_partition_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_partition_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_part_vals
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|part_vals
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_part_vals
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|part_vals
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_part_vals
operator|||
name|that_present_part_vals
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_vals
operator|&&
name|that_present_part_vals
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_vals
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_vals
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_deleteData
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_deleteData
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_deleteData
operator|||
name|that_present_deleteData
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_deleteData
operator|&&
name|that_present_deleteData
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|deleteData
operator|!=
name|that
operator|.
name|deleteData
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list69
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list69
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i70
init|=
literal|0
init|;
name|_i70
operator|<
name|_list69
operator|.
name|size
condition|;
operator|++
name|_i70
control|)
block|{
name|String
name|_elem71
init|=
literal|null
decl_stmt|;
name|_elem71
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|_elem71
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|deleteData
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_partition_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tbl_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|part_vals
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"part_vals"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter72
range|:
name|this
operator|.
name|part_vals
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter72
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"deleteData"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|BOOL
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|4
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_partition_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",tbl_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",part_vals:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_vals
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",deleteData:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_partition_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|drop_partition_result
parameter_list|()
block|{ }
specifier|public
name|drop_partition_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|NoSuchObjectException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|NoSuchObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_partition_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_partition_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_partition_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_partition_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|BOOL
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_partition_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partition_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|tbl_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|part_vals
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_partition_args
parameter_list|()
block|{ }
specifier|public
name|get_partition_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|int
name|getPart_valsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPart_valsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|part_vals
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToPart_vals
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
return|;
block|}
specifier|public
name|void
name|setPart_vals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_vals
parameter_list|()
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partition_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partition_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partition_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_part_vals
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|part_vals
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_part_vals
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|part_vals
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_part_vals
operator|||
name|that_present_part_vals
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_vals
operator|&&
name|that_present_part_vals
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_vals
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_vals
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list73
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list73
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i74
init|=
literal|0
init|;
name|_i74
operator|<
name|_list73
operator|.
name|size
condition|;
operator|++
name|_i74
control|)
block|{
name|String
name|_elem75
init|=
literal|null
decl_stmt|;
name|_elem75
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|_elem75
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|part_vals
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partition_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tbl_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|part_vals
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"part_vals"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter76
range|:
name|this
operator|.
name|part_vals
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter76
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partition_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",tbl_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",part_vals:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_vals
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partition_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|Partition
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_partition_result
parameter_list|()
block|{ }
specifier|public
name|get_partition_result
parameter_list|(
name|Partition
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Partition
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Partition
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partition_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partition_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partition_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partition_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partition_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partitions_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|short
name|max_parts
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|tbl_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|max_parts
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_partitions_args
parameter_list|()
block|{
name|this
operator|.
name|max_parts
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|get_partitions_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|max_parts
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|short
name|getMax_parts
parameter_list|()
block|{
return|return
name|this
operator|.
name|max_parts
return|;
block|}
specifier|public
name|void
name|setMax_parts
parameter_list|(
name|short
name|max_parts
parameter_list|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|max_parts
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMax_parts
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|max_parts
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partitions_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partitions_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partitions_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_max_parts
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_max_parts
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_max_parts
operator|||
name|that_present_max_parts
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_max_parts
operator|&&
name|that_present_max_parts
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|max_parts
operator|!=
name|that
operator|.
name|max_parts
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I16
condition|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|max_parts
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partitions_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tbl_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"max_parts"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I16
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI16
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partitions_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",tbl_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",max_parts:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partitions_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|success
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_partitions_result
parameter_list|()
block|{ }
specifier|public
name|get_partitions_result
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|success
parameter_list|,
name|NoSuchObjectException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|Partition
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|NoSuchObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partitions_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partitions_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partitions_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list77
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|_list77
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i78
init|=
literal|0
init|;
name|_i78
operator|<
name|_list77
operator|.
name|size
condition|;
operator|++
name|_i78
control|)
block|{
name|Partition
name|_elem79
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|_elem79
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|_elem79
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem79
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partitions_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|_iter80
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter80
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partitions_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partition_names_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|short
name|max_parts
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|db_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|tbl_name
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|max_parts
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_partition_names_args
parameter_list|()
block|{
name|this
operator|.
name|max_parts
operator|=
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|get_partition_names_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|max_parts
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|short
name|getMax_parts
parameter_list|()
block|{
return|return
name|this
operator|.
name|max_parts
return|;
block|}
specifier|public
name|void
name|setMax_parts
parameter_list|(
name|short
name|max_parts
parameter_list|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|max_parts
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMax_parts
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|max_parts
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partition_names_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partition_names_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partition_names_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|db_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|tbl_name
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_max_parts
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_max_parts
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_max_parts
operator|||
name|that_present_max_parts
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_max_parts
operator|&&
name|that_present_max_parts
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|max_parts
operator|!=
name|that
operator|.
name|max_parts
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|db_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|tbl_name
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I16
condition|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|max_parts
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partition_names_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"db_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"tbl_name"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRING
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|field
operator|.
name|name
operator|=
literal|"max_parts"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|I16
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|3
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI16
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partition_names_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",tbl_name:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",max_parts:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partition_names_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|get_partition_names_result
parameter_list|()
block|{ }
specifier|public
name|get_partition_names_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partition_names_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partition_names_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partition_names_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|success
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list81
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list81
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i82
init|=
literal|0
init|;
name|_i82
operator|<
name|_list81
operator|.
name|size
condition|;
operator|++
name|_i82
control|)
block|{
name|String
name|_elem83
init|=
literal|null
decl_stmt|;
name|_elem83
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem83
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partition_names_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter84
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter84
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partition_names_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_partitions_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|StorageDescriptor
name|sd
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|parts
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|sd
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|parts
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|alter_partitions_args
parameter_list|()
block|{ }
specifier|public
name|alter_partitions_args
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|parts
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|sd
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|parts
operator|=
name|parts
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|parts
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|StorageDescriptor
name|getSd
parameter_list|()
block|{
return|return
name|this
operator|.
name|sd
return|;
block|}
specifier|public
name|void
name|setSd
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|sd
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSd
parameter_list|()
block|{
name|this
operator|.
name|sd
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|sd
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|int
name|getPartsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|parts
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|parts
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPartsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|parts
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|parts
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToParts
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|parts
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|parts
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|parts
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|parts
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getParts
parameter_list|()
block|{
return|return
name|this
operator|.
name|parts
return|;
block|}
specifier|public
name|void
name|setParts
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|parts
parameter_list|)
block|{
name|this
operator|.
name|parts
operator|=
name|parts
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|parts
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetParts
parameter_list|()
block|{
name|this
operator|.
name|parts
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|parts
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_partitions_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_partitions_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_partitions_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_sd
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|sd
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_sd
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|sd
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_sd
operator|||
name|that_present_sd
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_sd
operator|&&
name|that_present_sd
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|sd
operator|.
name|equals
argument_list|(
name|that
operator|.
name|sd
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_parts
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|parts
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_parts
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|parts
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_parts
operator|||
name|that_present_parts
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_parts
operator|&&
name|that_present_parts
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|parts
operator|.
name|equals
argument_list|(
name|that
operator|.
name|parts
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|sd
operator|=
operator|new
name|StorageDescriptor
argument_list|()
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|sd
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list85
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|parts
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list85
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i86
init|=
literal|0
init|;
name|_i86
operator|<
name|_list85
operator|.
name|size
condition|;
operator|++
name|_i86
control|)
block|{
name|String
name|_elem87
init|=
literal|null
decl_stmt|;
name|_elem87
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|parts
operator|.
name|add
argument_list|(
name|_elem87
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|__isset
operator|.
name|parts
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_partitions_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|sd
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"sd"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|parts
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"parts"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|LIST
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|parts
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter88
range|:
name|this
operator|.
name|parts
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter88
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_partitions_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"sd:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|sd
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",parts:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|parts
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_partitions_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|InvalidOperationException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|alter_partitions_result
parameter_list|()
block|{ }
specifier|public
name|alter_partitions_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|InvalidOperationException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|InvalidOperationException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_partitions_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_partitions_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_partitions_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidOperationException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_partitions_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|BOOL
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_partitions_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|create_index_args
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|Index
name|index_def
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|index_def
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|create_index_args
parameter_list|()
block|{ }
specifier|public
name|create_index_args
parameter_list|(
name|Index
name|index_def
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|index_def
operator|=
name|index_def
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|index_def
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Index
name|getIndex_def
parameter_list|()
block|{
return|return
name|this
operator|.
name|index_def
return|;
block|}
specifier|public
name|void
name|setIndex_def
parameter_list|(
name|Index
name|index_def
parameter_list|)
block|{
name|this
operator|.
name|index_def
operator|=
name|index_def
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|index_def
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetIndex_def
parameter_list|()
block|{
name|this
operator|.
name|index_def
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|index_def
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_index_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_index_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_index_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_index_def
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|index_def
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_index_def
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|index_def
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_index_def
operator|||
name|that_present_index_def
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_index_def
operator|&&
name|that_present_index_def
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|index_def
operator|.
name|equals
argument_list|(
name|that
operator|.
name|index_def
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|index_def
operator|=
operator|new
name|Index
argument_list|()
expr_stmt|;
name|this
operator|.
name|index_def
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|index_def
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_index_args"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|index_def
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"index_def"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|index_def
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_index_args("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"index_def:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|index_def
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|create_index_result
implements|implements
name|TBase
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|IndexAlreadyExistsException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
specifier|public
specifier|final
name|Isset
name|__isset
init|=
operator|new
name|Isset
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
class|class
name|Isset
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
specifier|public
name|boolean
name|success
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o1
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|o2
init|=
literal|false
decl_stmt|;
block|}
specifier|public
name|create_index_result
parameter_list|()
block|{ }
specifier|public
name|create_index_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|IndexAlreadyExistsException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|IndexAlreadyExistsException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|IndexAlreadyExistsException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_index_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_index_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_index_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o1
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
operator|(
name|this
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
operator|(
name|that
operator|.
name|o2
operator|!=
literal|null
operator|)
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|success
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|IndexAlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o1
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|__isset
operator|.
name|o2
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
break|break;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TStruct
name|struct
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_index_result"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|struct
argument_list|)
expr_stmt|;
name|TField
name|field
init|=
operator|new
name|TField
argument_list|()
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|success
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"success"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|BOOL
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|0
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o1
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o1"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|1
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|__isset
operator|.
name|o2
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
name|field
operator|.
name|name
operator|=
literal|"o2"
expr_stmt|;
name|field
operator|.
name|type
operator|=
name|TType
operator|.
name|STRUCT
expr_stmt|;
name|field
operator|.
name|id
operator|=
literal|2
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|field
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_index_result("
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o1:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|",o2:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

