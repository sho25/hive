begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_comment
comment|/**  * TestMetaStoreEventListener. Test case for  * {@link org.apache.hadoop.hive.metastore.MetaStoreEndFunctionListener}  */
end_comment

begin_class
specifier|public
class|class
name|TestMetaStoreEndFunctionListener
extends|extends
name|TestCase
block|{
specifier|private
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
name|HiveMetaStoreClient
name|msc
decl_stmt|;
specifier|private
name|Driver
name|driver
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hive.metastore.event.listeners"
argument_list|,
name|DummyListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hive.metastore.pre.event.listeners"
argument_list|,
name|DummyPreListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
literal|"hive.metastore.end.function.listeners"
argument_list|,
name|DummyEndFunctionListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|port
init|=
name|MetaStoreUtils
operator|.
name|findFreePort
argument_list|()
decl_stmt|;
name|MetaStoreUtils
operator|.
name|startMetaStore
argument_list|(
name|port
argument_list|,
name|ShimLoader
operator|.
name|getHadoopThriftAuthBridge
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|port
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
expr_stmt|;
name|msc
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testEndFunctionListener
parameter_list|()
throws|throws
name|Exception
block|{
comment|/* Objective here is to ensure that when exceptions are thrown in HiveMetaStore in API methods      * they bubble up and are stored in the MetaStoreEndFunctionContext objects      */
name|String
name|dbName
init|=
literal|"tmpdb"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tmptbl"
decl_stmt|;
name|int
name|listSize
init|=
literal|0
decl_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"create database "
operator|+
name|dbName
argument_list|)
expr_stmt|;
try|try
block|{
name|msc
operator|.
name|getDatabase
argument_list|(
literal|"UnknownDB"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{     }
name|listSize
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|size
argument_list|()
expr_stmt|;
name|String
name|func_name
init|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
decl_stmt|;
name|MetaStoreEndFunctionContext
name|context
init|=
name|DummyEndFunctionListener
operator|.
name|contextList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|func_name
argument_list|,
literal|"get_database"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|Exception
name|e
init|=
name|context
operator|.
name|getException
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|instanceof
name|NoSuchObjectException
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getInputTableName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"use "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"create table %s (a string) partitioned by (b string)"
argument_list|,
name|tblName
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|tableName
init|=
literal|"Unknown"
decl_stmt|;
try|try
block|{
name|msc
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{     }
name|listSize
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|size
argument_list|()
expr_stmt|;
name|func_name
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|context
operator|=
name|DummyEndFunctionListener
operator|.
name|contextList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|func_name
argument_list|,
literal|"get_table"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|context
operator|.
name|getException
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|instanceof
name|NoSuchObjectException
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getInputTableName
argument_list|()
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|msc
operator|.
name|getPartition
argument_list|(
literal|"tmpdb"
argument_list|,
name|tblName
argument_list|,
literal|"b=2012"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{     }
name|listSize
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|size
argument_list|()
expr_stmt|;
name|func_name
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|context
operator|=
name|DummyEndFunctionListener
operator|.
name|contextList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|func_name
argument_list|,
literal|"get_partition_by_name"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|context
operator|.
name|getException
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|instanceof
name|NoSuchObjectException
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getInputTableName
argument_list|()
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
try|try
block|{
name|driver
operator|.
name|run
argument_list|(
literal|"drop table Unknown"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e4
parameter_list|)
block|{     }
name|listSize
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|size
argument_list|()
expr_stmt|;
name|func_name
operator|=
name|DummyEndFunctionListener
operator|.
name|funcNameList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|context
operator|=
name|DummyEndFunctionListener
operator|.
name|contextList
operator|.
name|get
argument_list|(
name|listSize
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|func_name
argument_list|,
literal|"get_table"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|context
operator|.
name|isSuccess
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|=
name|context
operator|.
name|getException
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|!=
literal|null
operator|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
name|e
operator|instanceof
name|NoSuchObjectException
operator|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|context
operator|.
name|getInputTableName
argument_list|()
argument_list|,
literal|"Unknown"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

