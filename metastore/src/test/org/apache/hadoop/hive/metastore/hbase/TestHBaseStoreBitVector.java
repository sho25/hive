begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Decimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DecimalColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DoubleColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StringColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|TestHBaseStoreBitVector
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHBaseStoreBitVector
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|emptyParameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Table with NUM_PART_KEYS partitioning keys and NUM_PARTITIONS values per key
specifier|static
specifier|final
name|int
name|NUM_PART_KEYS
init|=
literal|1
decl_stmt|;
specifier|static
specifier|final
name|int
name|NUM_PARTITIONS
init|=
literal|5
decl_stmt|;
specifier|static
specifier|final
name|String
name|DB
init|=
literal|"db"
decl_stmt|;
specifier|static
specifier|final
name|String
name|TBL
init|=
literal|"tbl"
decl_stmt|;
specifier|static
specifier|final
name|String
name|COL
init|=
literal|"col"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PART_KEY_PREFIX
init|=
literal|"part"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PART_VAL_PREFIX
init|=
literal|"val"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PART_KV_SEPARATOR
init|=
literal|"="
decl_stmt|;
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|PART_KEYS
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|PART_VALS
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
comment|// Initialize mock partitions
static|static
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|NUM_PART_KEYS
condition|;
name|i
operator|++
control|)
block|{
name|PART_KEYS
operator|.
name|add
argument_list|(
name|PART_KEY_PREFIX
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|NUM_PARTITIONS
condition|;
name|i
operator|++
control|)
block|{
name|PART_VALS
operator|.
name|add
argument_list|(
name|PART_VAL_PREFIX
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
specifier|final
name|long
name|DEFAULT_TIME
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|static
specifier|final
name|String
name|PART_KEY
init|=
literal|"part"
decl_stmt|;
specifier|static
specifier|final
name|String
name|LONG_COL
init|=
literal|"longCol"
decl_stmt|;
specifier|static
specifier|final
name|String
name|LONG_TYPE
init|=
literal|"long"
decl_stmt|;
specifier|static
specifier|final
name|String
name|INT_TYPE
init|=
literal|"int"
decl_stmt|;
specifier|static
specifier|final
name|String
name|INT_VAL
init|=
literal|"1234"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DOUBLE_COL
init|=
literal|"doubleCol"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DOUBLE_TYPE
init|=
literal|"double"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DOUBLE_VAL
init|=
literal|"3.1415"
decl_stmt|;
specifier|static
specifier|final
name|String
name|STRING_COL
init|=
literal|"stringCol"
decl_stmt|;
specifier|static
specifier|final
name|String
name|STRING_TYPE
init|=
literal|"string"
decl_stmt|;
specifier|static
specifier|final
name|String
name|STRING_VAL
init|=
literal|"stringval"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DECIMAL_COL
init|=
literal|"decimalCol"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DECIMAL_TYPE
init|=
literal|"decimal(5,3)"
decl_stmt|;
specifier|static
specifier|final
name|String
name|DECIMAL_VAL
init|=
literal|"12.123"
decl_stmt|;
specifier|static
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|longColStatsObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|(
name|NUM_PARTITIONS
argument_list|)
decl_stmt|;
specifier|static
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|doubleColStatsObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|(
name|NUM_PARTITIONS
argument_list|)
decl_stmt|;
specifier|static
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|stringColStatsObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|(
name|NUM_PARTITIONS
argument_list|)
decl_stmt|;
specifier|static
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|decimalColStatsObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|(
name|NUM_PARTITIONS
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Mock
name|HTableInterface
name|htable
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Cell
argument_list|>
name|rows
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
name|HBaseStore
name|store
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
block|{
comment|// All data intitializations
name|populateMockStats
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|populateMockStats
parameter_list|()
block|{
name|ColumnStatisticsObj
name|statsObj
decl_stmt|;
comment|// Add NUM_PARTITIONS ColumnStatisticsObj of each type
comment|// For aggregate stats test, we'll treat each ColumnStatisticsObj as stats for 1 partition
comment|// For the rest, we'll just pick the 1st ColumnStatisticsObj from this list and use it
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_PARTITIONS
condition|;
name|i
operator|++
control|)
block|{
name|statsObj
operator|=
name|mockLongStats
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|longColStatsObjs
operator|.
name|add
argument_list|(
name|statsObj
argument_list|)
expr_stmt|;
name|statsObj
operator|=
name|mockDoubleStats
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|doubleColStatsObjs
operator|.
name|add
argument_list|(
name|statsObj
argument_list|)
expr_stmt|;
name|statsObj
operator|=
name|mockStringStats
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|stringColStatsObjs
operator|.
name|add
argument_list|(
name|statsObj
argument_list|)
expr_stmt|;
name|statsObj
operator|=
name|mockDecimalStats
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|decimalColStatsObjs
operator|.
name|add
argument_list|(
name|statsObj
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|ColumnStatisticsObj
name|mockLongStats
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|long
name|high
init|=
literal|120938479124L
operator|+
literal|100
operator|*
name|i
decl_stmt|;
name|long
name|low
init|=
operator|-
literal|12341243213412124L
operator|-
literal|50
operator|*
name|i
decl_stmt|;
name|long
name|nulls
init|=
literal|23
operator|+
name|i
decl_stmt|;
name|long
name|dVs
init|=
literal|213L
operator|+
literal|10
operator|*
name|i
decl_stmt|;
name|String
name|bitVectors
init|=
literal|"{0, 1, 2, 3, 4, 5, 6, 7, 8}{1, 2, 3, 4, 5, 6, 7, 8}"
decl_stmt|;
name|ColumnStatisticsObj
name|colStatsObj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|colStatsObj
operator|.
name|setColName
argument_list|(
name|LONG_COL
argument_list|)
expr_stmt|;
name|colStatsObj
operator|.
name|setColType
argument_list|(
name|LONG_TYPE
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|LongColumnStatsData
name|longData
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|longData
operator|.
name|setHighValue
argument_list|(
name|high
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setLowValue
argument_list|(
name|low
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setNumNulls
argument_list|(
name|nulls
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setNumDVs
argument_list|(
name|dVs
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setBitVectors
argument_list|(
name|bitVectors
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|longData
argument_list|)
expr_stmt|;
name|colStatsObj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|colStatsObj
return|;
block|}
specifier|private
specifier|static
name|ColumnStatisticsObj
name|mockDoubleStats
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|double
name|high
init|=
literal|123423.23423
operator|+
literal|100
operator|*
name|i
decl_stmt|;
name|double
name|low
init|=
literal|0.00001234233
operator|-
literal|50
operator|*
name|i
decl_stmt|;
name|long
name|nulls
init|=
literal|92
operator|+
name|i
decl_stmt|;
name|long
name|dVs
init|=
literal|1234123421L
operator|+
literal|10
operator|*
name|i
decl_stmt|;
name|String
name|bitVectors
init|=
literal|"{0, 1, 2, 3, 4, 5, 6, 7, 8}{0, 2, 3, 4, 5, 6, 7, 8}"
decl_stmt|;
name|ColumnStatisticsObj
name|colStatsObj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|colStatsObj
operator|.
name|setColName
argument_list|(
name|DOUBLE_COL
argument_list|)
expr_stmt|;
name|colStatsObj
operator|.
name|setColType
argument_list|(
name|DOUBLE_TYPE
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|DoubleColumnStatsData
name|doubleData
init|=
operator|new
name|DoubleColumnStatsData
argument_list|()
decl_stmt|;
name|doubleData
operator|.
name|setHighValue
argument_list|(
name|high
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setLowValue
argument_list|(
name|low
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setNumNulls
argument_list|(
name|nulls
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setNumDVs
argument_list|(
name|dVs
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setBitVectors
argument_list|(
name|bitVectors
argument_list|)
expr_stmt|;
name|data
operator|.
name|setDoubleStats
argument_list|(
name|doubleData
argument_list|)
expr_stmt|;
name|colStatsObj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|colStatsObj
return|;
block|}
specifier|private
specifier|static
name|ColumnStatisticsObj
name|mockStringStats
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|long
name|maxLen
init|=
literal|1234
operator|+
literal|10
operator|*
name|i
decl_stmt|;
name|double
name|avgLen
init|=
literal|32.3
operator|+
name|i
decl_stmt|;
name|long
name|nulls
init|=
literal|987
operator|+
literal|10
operator|*
name|i
decl_stmt|;
name|long
name|dVs
init|=
literal|906
operator|+
name|i
decl_stmt|;
name|String
name|bitVectors
init|=
literal|"{0, 1, 2, 3, 4, 5, 6, 7, 8}{0, 1, 3, 4, 5, 6, 7, 8}"
decl_stmt|;
name|ColumnStatisticsObj
name|colStatsObj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|colStatsObj
operator|.
name|setColName
argument_list|(
name|STRING_COL
argument_list|)
expr_stmt|;
name|colStatsObj
operator|.
name|setColType
argument_list|(
name|STRING_TYPE
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|StringColumnStatsData
name|stringData
init|=
operator|new
name|StringColumnStatsData
argument_list|()
decl_stmt|;
name|stringData
operator|.
name|setMaxColLen
argument_list|(
name|maxLen
argument_list|)
expr_stmt|;
name|stringData
operator|.
name|setAvgColLen
argument_list|(
name|avgLen
argument_list|)
expr_stmt|;
name|stringData
operator|.
name|setNumNulls
argument_list|(
name|nulls
argument_list|)
expr_stmt|;
name|stringData
operator|.
name|setNumDVs
argument_list|(
name|dVs
argument_list|)
expr_stmt|;
name|stringData
operator|.
name|setBitVectors
argument_list|(
name|bitVectors
argument_list|)
expr_stmt|;
name|data
operator|.
name|setStringStats
argument_list|(
name|stringData
argument_list|)
expr_stmt|;
name|colStatsObj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|colStatsObj
return|;
block|}
specifier|private
specifier|static
name|ColumnStatisticsObj
name|mockDecimalStats
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|Decimal
name|high
init|=
operator|new
name|Decimal
argument_list|()
decl_stmt|;
name|high
operator|.
name|setScale
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|String
name|strHigh
init|=
name|String
operator|.
name|valueOf
argument_list|(
literal|3876
operator|+
literal|100
operator|*
name|i
argument_list|)
decl_stmt|;
name|high
operator|.
name|setUnscaled
argument_list|(
name|strHigh
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Decimal
name|low
init|=
operator|new
name|Decimal
argument_list|()
decl_stmt|;
name|low
operator|.
name|setScale
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|String
name|strLow
init|=
name|String
operator|.
name|valueOf
argument_list|(
literal|38
operator|+
name|i
argument_list|)
decl_stmt|;
name|low
operator|.
name|setUnscaled
argument_list|(
name|strLow
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|nulls
init|=
literal|13
operator|+
name|i
decl_stmt|;
name|long
name|dVs
init|=
literal|923947293L
operator|+
literal|100
operator|*
name|i
decl_stmt|;
name|String
name|bitVectors
init|=
literal|"{0, 1, 2, 3, 4, 5, 6, 7, 8}{0, 1, 2, 4, 5, 6, 7, 8}"
decl_stmt|;
name|ColumnStatisticsObj
name|colStatsObj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|colStatsObj
operator|.
name|setColName
argument_list|(
name|DECIMAL_COL
argument_list|)
expr_stmt|;
name|colStatsObj
operator|.
name|setColType
argument_list|(
name|DECIMAL_TYPE
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|DecimalColumnStatsData
name|decimalData
init|=
operator|new
name|DecimalColumnStatsData
argument_list|()
decl_stmt|;
name|decimalData
operator|.
name|setHighValue
argument_list|(
name|high
argument_list|)
expr_stmt|;
name|decimalData
operator|.
name|setLowValue
argument_list|(
name|low
argument_list|)
expr_stmt|;
name|decimalData
operator|.
name|setNumNulls
argument_list|(
name|nulls
argument_list|)
expr_stmt|;
name|decimalData
operator|.
name|setNumDVs
argument_list|(
name|dVs
argument_list|)
expr_stmt|;
name|decimalData
operator|.
name|setBitVectors
argument_list|(
name|bitVectors
argument_list|)
expr_stmt|;
name|data
operator|.
name|setDecimalStats
argument_list|(
name|decimalData
argument_list|)
expr_stmt|;
name|colStatsObj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|colStatsObj
return|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
block|{   }
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|MockitoAnnotations
operator|.
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBaseReadWrite
operator|.
name|NO_CACHE_CONF
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|=
name|MockUtils
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|htable
argument_list|,
name|rows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|longTableStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|createMockTable
argument_list|(
name|LONG_COL
argument_list|,
name|LONG_TYPE
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
comment|// Get a default ColumnStatisticsDesc for table level stats
name|ColumnStatisticsDesc
name|desc
init|=
name|getMockTblColStatsDesc
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// Get one of the pre-created ColumnStatisticsObj
name|ColumnStatisticsObj
name|obj
init|=
name|longColStatsObjs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LongColumnStatsData
name|longData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
comment|// Add to DB
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
comment|// Get from DB
name|ColumnStatistics
name|statsFromDB
init|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|DB
argument_list|,
name|TBL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|LONG_COL
argument_list|)
argument_list|)
decl_stmt|;
comment|// Compare ColumnStatisticsDesc
name|Assert
operator|.
name|assertEquals
argument_list|(
name|desc
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|,
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB
argument_list|,
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TBL
argument_list|,
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare ColumnStatisticsObj
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsFromDB
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|objFromDB
init|=
name|statsFromDB
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|dataFromDB
init|=
name|objFromDB
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
comment|// Compare ColumnStatisticsData
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|LONG_STATS
argument_list|,
name|dataFromDB
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare LongColumnStatsData
name|LongColumnStatsData
name|longDataFromDB
init|=
name|dataFromDB
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longData
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|longDataFromDB
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longData
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|longDataFromDB
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longData
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|longDataFromDB
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longData
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|longDataFromDB
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longData
operator|.
name|getBitVectors
argument_list|()
argument_list|,
name|longDataFromDB
operator|.
name|getBitVectors
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|doubleTableStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|createMockTable
argument_list|(
name|DOUBLE_COL
argument_list|,
name|DOUBLE_TYPE
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
comment|// Get a default ColumnStatisticsDesc for table level stats
name|ColumnStatisticsDesc
name|desc
init|=
name|getMockTblColStatsDesc
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// Get one of the pre-created ColumnStatisticsObj
name|ColumnStatisticsObj
name|obj
init|=
name|doubleColStatsObjs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DoubleColumnStatsData
name|doubleData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
decl_stmt|;
comment|// Add to DB
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
comment|// Get from DB
name|ColumnStatistics
name|statsFromDB
init|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|DB
argument_list|,
name|TBL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|DOUBLE_COL
argument_list|)
argument_list|)
decl_stmt|;
comment|// Compare ColumnStatisticsDesc
name|Assert
operator|.
name|assertEquals
argument_list|(
name|desc
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|,
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB
argument_list|,
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TBL
argument_list|,
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare ColumnStatisticsObj
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsFromDB
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|objFromDB
init|=
name|statsFromDB
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|dataFromDB
init|=
name|objFromDB
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
comment|// Compare ColumnStatisticsData
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|DOUBLE_STATS
argument_list|,
name|dataFromDB
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare DoubleColumnStatsData
name|DoubleColumnStatsData
name|doubleDataFromDB
init|=
name|dataFromDB
operator|.
name|getDoubleStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleData
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|doubleDataFromDB
operator|.
name|getHighValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleData
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|doubleDataFromDB
operator|.
name|getLowValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleData
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|doubleDataFromDB
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleData
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|doubleDataFromDB
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleData
operator|.
name|getBitVectors
argument_list|()
argument_list|,
name|doubleDataFromDB
operator|.
name|getBitVectors
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringTableStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|createMockTable
argument_list|(
name|STRING_COL
argument_list|,
name|STRING_TYPE
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
comment|// Get a default ColumnStatisticsDesc for table level stats
name|ColumnStatisticsDesc
name|desc
init|=
name|getMockTblColStatsDesc
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// Get one of the pre-created ColumnStatisticsObj
name|ColumnStatisticsObj
name|obj
init|=
name|stringColStatsObjs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StringColumnStatsData
name|stringData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
comment|// Add to DB
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
comment|// Get from DB
name|ColumnStatistics
name|statsFromDB
init|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|DB
argument_list|,
name|TBL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|STRING_COL
argument_list|)
argument_list|)
decl_stmt|;
comment|// Compare ColumnStatisticsDesc
name|Assert
operator|.
name|assertEquals
argument_list|(
name|desc
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|,
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB
argument_list|,
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TBL
argument_list|,
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare ColumnStatisticsObj
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsFromDB
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|objFromDB
init|=
name|statsFromDB
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|dataFromDB
init|=
name|objFromDB
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
comment|// Compare ColumnStatisticsData
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|STRING_STATS
argument_list|,
name|dataFromDB
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare StringColumnStatsData
name|StringColumnStatsData
name|stringDataFromDB
init|=
name|dataFromDB
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringData
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
name|stringDataFromDB
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringData
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
name|stringDataFromDB
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringData
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|stringDataFromDB
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringData
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|stringDataFromDB
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringData
operator|.
name|getBitVectors
argument_list|()
argument_list|,
name|stringDataFromDB
operator|.
name|getBitVectors
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|decimalTableStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|createMockTable
argument_list|(
name|DECIMAL_COL
argument_list|,
name|DECIMAL_TYPE
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
comment|// Get a default ColumnStatisticsDesc for table level stats
name|ColumnStatisticsDesc
name|desc
init|=
name|getMockTblColStatsDesc
argument_list|()
decl_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// Get one of the pre-created ColumnStatisticsObj
name|ColumnStatisticsObj
name|obj
init|=
name|decimalColStatsObjs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DecimalColumnStatsData
name|decimalData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDecimalStats
argument_list|()
decl_stmt|;
comment|// Add to DB
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
comment|// Get from DB
name|ColumnStatistics
name|statsFromDB
init|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|DB
argument_list|,
name|TBL
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|DECIMAL_COL
argument_list|)
argument_list|)
decl_stmt|;
comment|// Compare ColumnStatisticsDesc
name|Assert
operator|.
name|assertEquals
argument_list|(
name|desc
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|,
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB
argument_list|,
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TBL
argument_list|,
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|statsFromDB
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare ColumnStatisticsObj
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsFromDB
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|objFromDB
init|=
name|statsFromDB
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|dataFromDB
init|=
name|objFromDB
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
comment|// Compare ColumnStatisticsData
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|DECIMAL_STATS
argument_list|,
name|dataFromDB
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare DecimalColumnStatsData
name|DecimalColumnStatsData
name|decimalDataFromDB
init|=
name|dataFromDB
operator|.
name|getDecimalStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decimalData
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|decimalDataFromDB
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decimalData
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|decimalDataFromDB
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decimalData
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|decimalDataFromDB
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decimalData
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|decimalDataFromDB
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decimalData
operator|.
name|getBitVectors
argument_list|()
argument_list|,
name|decimalDataFromDB
operator|.
name|getBitVectors
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|longPartitionStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|createMockTableAndPartition
argument_list|(
name|INT_TYPE
argument_list|,
name|INT_VAL
argument_list|)
expr_stmt|;
comment|// Add partition stats for: LONG_COL and partition: {PART_KEY, INT_VAL} to DB
comment|// Because of the way our mock implementation works we actually need to not create the table
comment|// before we set statistics on it.
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
comment|// Get a default ColumnStatisticsDesc for partition level stats
name|ColumnStatisticsDesc
name|desc
init|=
name|getMockPartColStatsDesc
argument_list|(
name|PART_KEY
argument_list|,
name|INT_VAL
argument_list|)
decl_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// Get one of the pre-created ColumnStatisticsObj
name|ColumnStatisticsObj
name|obj
init|=
name|longColStatsObjs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LongColumnStatsData
name|longData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
comment|// Add to DB
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parVals
operator|.
name|add
argument_list|(
name|INT_VAL
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
argument_list|,
name|parVals
argument_list|)
expr_stmt|;
comment|// Get from DB
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|desc
operator|.
name|getPartName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|obj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|statsFromDB
init|=
name|store
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|DB
argument_list|,
name|TBL
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
comment|// Compare ColumnStatisticsDesc
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsFromDB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|desc
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TBL
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare ColumnStatisticsObj
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|objFromDB
init|=
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|dataFromDB
init|=
name|objFromDB
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
comment|// Compare ColumnStatisticsData
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|LONG_STATS
argument_list|,
name|dataFromDB
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare LongColumnStatsData
name|LongColumnStatsData
name|longDataFromDB
init|=
name|dataFromDB
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longData
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|longDataFromDB
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longData
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|longDataFromDB
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longData
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|longDataFromDB
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longData
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|longDataFromDB
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longData
operator|.
name|getBitVectors
argument_list|()
argument_list|,
name|longDataFromDB
operator|.
name|getBitVectors
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|doublePartitionStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|createMockTableAndPartition
argument_list|(
name|DOUBLE_TYPE
argument_list|,
name|DOUBLE_VAL
argument_list|)
expr_stmt|;
comment|// Add partition stats for: DOUBLE_COL and partition: {PART_KEY, DOUBLE_VAL} to DB
comment|// Because of the way our mock implementation works we actually need to not create the table
comment|// before we set statistics on it.
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
comment|// Get a default ColumnStatisticsDesc for partition level stats
name|ColumnStatisticsDesc
name|desc
init|=
name|getMockPartColStatsDesc
argument_list|(
name|PART_KEY
argument_list|,
name|DOUBLE_VAL
argument_list|)
decl_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// Get one of the pre-created ColumnStatisticsObj
name|ColumnStatisticsObj
name|obj
init|=
name|doubleColStatsObjs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DoubleColumnStatsData
name|doubleData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
decl_stmt|;
comment|// Add to DB
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parVals
operator|.
name|add
argument_list|(
name|DOUBLE_VAL
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
argument_list|,
name|parVals
argument_list|)
expr_stmt|;
comment|// Get from DB
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|desc
operator|.
name|getPartName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|obj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|statsFromDB
init|=
name|store
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|DB
argument_list|,
name|TBL
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
comment|// Compare ColumnStatisticsDesc
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsFromDB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|desc
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TBL
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare ColumnStatisticsObj
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|objFromDB
init|=
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|dataFromDB
init|=
name|objFromDB
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
comment|// Compare ColumnStatisticsData
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|DOUBLE_STATS
argument_list|,
name|dataFromDB
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare DoubleColumnStatsData
name|DoubleColumnStatsData
name|doubleDataFromDB
init|=
name|dataFromDB
operator|.
name|getDoubleStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleData
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|doubleDataFromDB
operator|.
name|getHighValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleData
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|doubleDataFromDB
operator|.
name|getLowValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleData
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|doubleDataFromDB
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleData
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|doubleDataFromDB
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleData
operator|.
name|getBitVectors
argument_list|()
argument_list|,
name|doubleDataFromDB
operator|.
name|getBitVectors
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringPartitionStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|createMockTableAndPartition
argument_list|(
name|STRING_TYPE
argument_list|,
name|STRING_VAL
argument_list|)
expr_stmt|;
comment|// Add partition stats for: STRING_COL and partition: {PART_KEY, STRING_VAL} to DB
comment|// Because of the way our mock implementation works we actually need to not create the table
comment|// before we set statistics on it.
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
comment|// Get a default ColumnStatisticsDesc for partition level stats
name|ColumnStatisticsDesc
name|desc
init|=
name|getMockPartColStatsDesc
argument_list|(
name|PART_KEY
argument_list|,
name|STRING_VAL
argument_list|)
decl_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// Get one of the pre-created ColumnStatisticsObj
name|ColumnStatisticsObj
name|obj
init|=
name|stringColStatsObjs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|StringColumnStatsData
name|stringData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
comment|// Add to DB
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parVals
operator|.
name|add
argument_list|(
name|STRING_VAL
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
argument_list|,
name|parVals
argument_list|)
expr_stmt|;
comment|// Get from DB
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|desc
operator|.
name|getPartName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|obj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|statsFromDB
init|=
name|store
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|DB
argument_list|,
name|TBL
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
comment|// Compare ColumnStatisticsDesc
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsFromDB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|desc
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TBL
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare ColumnStatisticsObj
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|objFromDB
init|=
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|dataFromDB
init|=
name|objFromDB
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
comment|// Compare ColumnStatisticsData
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|STRING_STATS
argument_list|,
name|dataFromDB
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare StringColumnStatsData
name|StringColumnStatsData
name|stringDataFromDB
init|=
name|dataFromDB
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringData
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
name|stringDataFromDB
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringData
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
name|stringDataFromDB
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringData
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|stringDataFromDB
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringData
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|stringDataFromDB
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stringData
operator|.
name|getBitVectors
argument_list|()
argument_list|,
name|stringDataFromDB
operator|.
name|getBitVectors
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|decimalPartitionStatistics
parameter_list|()
throws|throws
name|Exception
block|{
name|createMockTableAndPartition
argument_list|(
name|DECIMAL_TYPE
argument_list|,
name|DECIMAL_VAL
argument_list|)
expr_stmt|;
comment|// Add partition stats for: DECIMAL_COL and partition: {PART_KEY, DECIMAL_VAL} to DB
comment|// Because of the way our mock implementation works we actually need to not create the table
comment|// before we set statistics on it.
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
comment|// Get a default ColumnStatisticsDesc for partition level stats
name|ColumnStatisticsDesc
name|desc
init|=
name|getMockPartColStatsDesc
argument_list|(
name|PART_KEY
argument_list|,
name|DECIMAL_VAL
argument_list|)
decl_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
comment|// Get one of the pre-created ColumnStatisticsObj
name|ColumnStatisticsObj
name|obj
init|=
name|decimalColStatsObjs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|DecimalColumnStatsData
name|decimalData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDecimalStats
argument_list|()
decl_stmt|;
comment|// Add to DB
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|parVals
operator|.
name|add
argument_list|(
name|DECIMAL_VAL
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
argument_list|,
name|parVals
argument_list|)
expr_stmt|;
comment|// Get from DB
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|desc
operator|.
name|getPartName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|obj
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|statsFromDB
init|=
name|store
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|DB
argument_list|,
name|TBL
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
comment|// Compare ColumnStatisticsDesc
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsFromDB
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|desc
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|DB
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|TBL
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare ColumnStatisticsObj
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|objFromDB
init|=
name|statsFromDB
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObj
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|dataFromDB
init|=
name|objFromDB
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
comment|// Compare ColumnStatisticsData
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|DECIMAL_STATS
argument_list|,
name|dataFromDB
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
comment|// Compare DecimalColumnStatsData
name|DecimalColumnStatsData
name|decimalDataFromDB
init|=
name|dataFromDB
operator|.
name|getDecimalStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decimalData
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|decimalDataFromDB
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decimalData
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|decimalDataFromDB
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decimalData
operator|.
name|getNumNulls
argument_list|()
argument_list|,
name|decimalDataFromDB
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decimalData
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|decimalDataFromDB
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decimalData
operator|.
name|getBitVectors
argument_list|()
argument_list|,
name|decimalDataFromDB
operator|.
name|getBitVectors
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Table
name|createMockTable
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|type
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|17
argument_list|,
name|serde
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|int
name|currentTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|TBL
argument_list|,
name|DB
argument_list|,
literal|"me"
argument_list|,
name|currentTime
argument_list|,
name|currentTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|cols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
specifier|private
name|Table
name|createMockTableAndPartition
parameter_list|(
name|String
name|partType
parameter_list|,
name|String
name|partVal
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
name|partType
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|17
argument_list|,
name|serde
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bucketcol"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Order
argument_list|(
literal|"sortcol"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|int
name|currentTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|TBL
argument_list|,
name|DB
argument_list|,
literal|"me"
argument_list|,
name|currentTime
argument_list|,
name|currentTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|cols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|DB
argument_list|,
name|TBL
argument_list|,
name|currentTime
argument_list|,
name|currentTime
argument_list|,
name|sd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
return|return
name|table
return|;
block|}
comment|/**    * Returns a dummy table level ColumnStatisticsDesc with default values    */
specifier|private
name|ColumnStatisticsDesc
name|getMockTblColStatsDesc
parameter_list|()
block|{
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|DEFAULT_TIME
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDbName
argument_list|(
name|DB
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTableName
argument_list|(
name|TBL
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setIsTblLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|desc
return|;
block|}
comment|/**    * Returns a dummy partition level ColumnStatisticsDesc    */
specifier|private
name|ColumnStatisticsDesc
name|getMockPartColStatsDesc
parameter_list|(
name|String
name|partKey
parameter_list|,
name|String
name|partVal
parameter_list|)
block|{
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|DEFAULT_TIME
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDbName
argument_list|(
name|DB
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTableName
argument_list|(
name|TBL
argument_list|)
expr_stmt|;
comment|// part1=val1
name|desc
operator|.
name|setPartName
argument_list|(
name|partKey
operator|+
name|PART_KV_SEPARATOR
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setIsTblLevel
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|desc
return|;
block|}
block|}
end_class

end_unit

