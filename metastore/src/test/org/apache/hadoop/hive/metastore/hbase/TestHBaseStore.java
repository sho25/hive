begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BinaryColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Decimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DecimalColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DoubleColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FunctionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StringColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|ExpectedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|TestHBaseStore
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestHBaseStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|emptyParameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|ExpectedException
name|thrown
init|=
name|ExpectedException
operator|.
name|none
argument_list|()
decl_stmt|;
annotation|@
name|Mock
name|HTableInterface
name|htable
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Cell
argument_list|>
name|rows
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
name|HBaseStore
name|store
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
name|MockitoAnnotations
operator|.
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBaseReadWrite
operator|.
name|NO_CACHE_CONF
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|=
name|MockUtils
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|htable
argument_list|,
name|rows
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createDb
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbname
init|=
literal|"mydb"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbname
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Database
name|d
init|=
name|store
operator|.
name|getDatabase
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbname
argument_list|,
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"no description"
argument_list|,
name|d
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:///tmp"
argument_list|,
name|d
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|alterDb
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbname
init|=
literal|"mydb"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbname
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|.
name|setDescription
argument_list|(
literal|"a description"
argument_list|)
expr_stmt|;
name|store
operator|.
name|alterDatabase
argument_list|(
name|dbname
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|Database
name|d
init|=
name|store
operator|.
name|getDatabase
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbname
argument_list|,
name|d
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"a description"
argument_list|,
name|d
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:///tmp"
argument_list|,
name|d
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropDb
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbname
init|=
literal|"anotherdb"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbname
argument_list|,
literal|"no description"
argument_list|,
literal|"file:///tmp"
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|Database
name|d
init|=
name|store
operator|.
name|getDatabase
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropDatabase
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|NoSuchObjectException
operator|.
name|class
argument_list|)
expr_stmt|;
name|store
operator|.
name|getDatabase
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbname
init|=
literal|"default"
decl_stmt|;
name|String
name|funcName
init|=
literal|"createfunc"
decl_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|Function
name|func
init|=
operator|new
name|Function
argument_list|(
name|funcName
argument_list|,
name|dbname
argument_list|,
literal|"o.a.h.h.myfunc"
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|now
argument_list|,
name|FunctionType
operator|.
name|JAVA
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|JAR
argument_list|,
literal|"file:/tmp/somewhere"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|createFunction
argument_list|(
name|func
argument_list|)
expr_stmt|;
name|Function
name|f
init|=
name|store
operator|.
name|getFunction
argument_list|(
name|dbname
argument_list|,
name|funcName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbname
argument_list|,
name|f
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|funcName
argument_list|,
name|f
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"o.a.h.h.myfunc"
argument_list|,
name|f
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|f
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|f
operator|.
name|getOwnerType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|now
operator|<=
name|f
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|FunctionType
operator|.
name|JAVA
argument_list|,
name|f
operator|.
name|getFunctionType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|f
operator|.
name|getResourceUrisSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceType
operator|.
name|JAR
argument_list|,
name|f
operator|.
name|getResourceUris
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:/tmp/somewhere"
argument_list|,
name|f
operator|.
name|getResourceUris
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|alterFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbname
init|=
literal|"default"
decl_stmt|;
name|String
name|funcName
init|=
literal|"alterfunc"
decl_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResourceUri
argument_list|>
name|uris
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceUri
argument_list|>
argument_list|()
decl_stmt|;
name|uris
operator|.
name|add
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|FILE
argument_list|,
literal|"whatever"
argument_list|)
argument_list|)
expr_stmt|;
name|Function
name|func
init|=
operator|new
name|Function
argument_list|(
name|funcName
argument_list|,
name|dbname
argument_list|,
literal|"o.a.h.h.myfunc"
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|now
argument_list|,
name|FunctionType
operator|.
name|JAVA
argument_list|,
name|uris
argument_list|)
decl_stmt|;
name|store
operator|.
name|createFunction
argument_list|(
name|func
argument_list|)
expr_stmt|;
name|Function
name|f
init|=
name|store
operator|.
name|getFunction
argument_list|(
name|dbname
argument_list|,
name|funcName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceType
operator|.
name|FILE
argument_list|,
name|f
operator|.
name|getResourceUris
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
name|func
operator|.
name|addToResourceUris
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|ARCHIVE
argument_list|,
literal|"file"
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|alterFunction
argument_list|(
name|dbname
argument_list|,
name|funcName
argument_list|,
name|func
argument_list|)
expr_stmt|;
name|f
operator|=
name|store
operator|.
name|getFunction
argument_list|(
name|dbname
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|f
operator|.
name|getResourceUrisSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceType
operator|.
name|FILE
argument_list|,
name|f
operator|.
name|getResourceUris
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ResourceType
operator|.
name|ARCHIVE
argument_list|,
name|f
operator|.
name|getResourceUris
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getResourceType
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropFunction
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbname
init|=
literal|"default"
decl_stmt|;
name|String
name|funcName
init|=
literal|"delfunc"
decl_stmt|;
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|Function
name|func
init|=
operator|new
name|Function
argument_list|(
name|funcName
argument_list|,
name|dbname
argument_list|,
literal|"o.a.h.h.myfunc"
argument_list|,
literal|"me"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|now
argument_list|,
name|FunctionType
operator|.
name|JAVA
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|ResourceType
operator|.
name|JAR
argument_list|,
literal|"file:/tmp/somewhere"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|createFunction
argument_list|(
name|func
argument_list|)
expr_stmt|;
name|Function
name|f
init|=
name|store
operator|.
name|getFunction
argument_list|(
name|dbname
argument_list|,
name|funcName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropFunction
argument_list|(
name|dbname
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
comment|//thrown.expect(NoSuchObjectException.class);
name|Assert
operator|.
name|assertNull
argument_list|(
name|store
operator|.
name|getFunction
argument_list|(
name|dbname
argument_list|,
name|funcName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"mytable"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|17
argument_list|,
name|serde
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bucketcol"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Order
argument_list|(
literal|"sortcol"
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
literal|"default"
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|store
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"serde"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"seriallib"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:/tmp"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"input"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|17
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"bucketcol"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSortColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"sortcol"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSortCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getCol
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSortCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getParametersSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"value"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|t
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|t
operator|.
name|getParametersSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|skewInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"mytable"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col3"
argument_list|)
argument_list|,
literal|"col4"
argument_list|)
expr_stmt|;
name|SkewedInfo
name|skew
init|=
operator|new
name|SkewedInfo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col2"
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setSkewedInfo
argument_list|(
name|skew
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
literal|"default"
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|store
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"serde"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"seriallib"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:/tmp"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"input"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSortColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|t
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|t
operator|.
name|getParametersSize
argument_list|()
argument_list|)
expr_stmt|;
name|skew
operator|=
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|skew
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|skew
operator|.
name|getSkewedColNamesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|skew
operator|.
name|getSkewedColNames
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|skew
operator|.
name|getSkewedColValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col2"
argument_list|,
name|skew
operator|.
name|getSkewedColValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|skew
operator|.
name|getSkewedColValueLocationMapsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col4"
argument_list|,
name|skew
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
operator|.
name|get
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hashSd
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col3"
argument_list|)
argument_list|,
literal|"col4"
argument_list|)
expr_stmt|;
name|SkewedInfo
name|skew
init|=
operator|new
name|SkewedInfo
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col2"
argument_list|)
argument_list|)
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setSkewedInfo
argument_list|(
name|skew
argument_list|)
expr_stmt|;
name|MessageDigest
name|md
init|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
decl_stmt|;
name|byte
index|[]
name|baseHash
init|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|sd
argument_list|,
name|md
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|changeSchema
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|changeSchema
operator|.
name|getCols
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"varchar(32)"
argument_list|,
literal|"a comment"
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|schemaHash
init|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|changeSchema
argument_list|,
name|md
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|baseHash
argument_list|,
name|schemaHash
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|changeLocation
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|changeLocation
operator|.
name|setLocation
argument_list|(
literal|"file:/somewhere/else"
argument_list|)
expr_stmt|;
name|byte
index|[]
name|locationHash
init|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|changeLocation
argument_list|,
name|md
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|baseHash
argument_list|,
name|locationHash
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|alterTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"alttable"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
literal|"default"
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|startTime
operator|+=
literal|10
expr_stmt|;
name|table
operator|.
name|setLastAccessTime
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|store
operator|.
name|alterTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|store
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nocomment"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"serde"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"seriallib"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:/tmp"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"input"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|t
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"default"
argument_list|,
name|t
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|t
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|startTime
argument_list|,
name|t
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|tableName
init|=
literal|"dtable"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
literal|"default"
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|store
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|store
operator|.
name|getTable
argument_list|(
literal|"default"
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"myparttable"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pc"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"fred"
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/pc=fred"
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Partition
name|p
init|=
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nocomment"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"serde"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"seriallib"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:/tmp/pc=fred"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"input"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|p
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|p
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"fred"
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|store
operator|.
name|doesPartitionExist
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|store
operator|.
name|doesPartitionExist
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|alterPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"alterparttable"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pc"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"fred"
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/pc=fred"
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|part
operator|.
name|setLastAccessTime
argument_list|(
name|startTime
operator|+
literal|10
argument_list|)
expr_stmt|;
name|store
operator|.
name|alterPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|,
name|part
argument_list|)
expr_stmt|;
name|Partition
name|p
init|=
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"int"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"nocomment"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"serde"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"seriallib"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:/tmp/pc=fred"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"input"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"output"
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|p
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|p
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|p
operator|.
name|getValuesSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"fred"
argument_list|,
name|p
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|startTime
operator|+
literal|10
argument_list|,
name|p
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|store
operator|.
name|doesPartitionExist
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|store
operator|.
name|doesPartitionExist
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"bob"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"manyParts"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pc"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"alan"
argument_list|,
literal|"bob"
argument_list|,
literal|"carl"
argument_list|,
literal|"doug"
argument_list|,
literal|"ethan"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|val
range|:
name|partVals
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/pc="
operator|+
name|val
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Partition
name|p
init|=
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"file:/tmp/pc="
operator|+
name|val
argument_list|,
name|p
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|store
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|5
argument_list|,
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|pv
init|=
operator|new
name|String
index|[
literal|5
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
name|pv
index|[
name|i
index|]
operator|=
name|parts
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|pv
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|pv
argument_list|,
name|partVals
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|5
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|listGetDropPartitionNames
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"listParts"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pc"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"region"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|String
index|[]
index|[]
name|partVals
init|=
operator|new
name|String
index|[]
index|[]
block|{
block|{
literal|"today"
block|,
literal|"north america"
block|}
block|,
block|{
literal|"tomorrow"
block|,
literal|"europe"
block|}
block|}
decl_stmt|;
for|for
control|(
name|String
index|[]
name|pv
range|:
name|partVals
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|pv
control|)
name|vals
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/pc="
operator|+
name|pv
index|[
literal|0
index|]
operator|+
literal|"/region="
operator|+
name|pv
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|store
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|String
index|[]
name|resultNames
init|=
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|resultNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|resultNames
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"pc=today/region=north america"
block|,
literal|"pc=tomorrow/region=europe"
block|}
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|store
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|names
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|partVals
index|[
literal|0
index|]
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
name|partVals
index|[
literal|1
index|]
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getValues
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|afterDropParts
init|=
name|store
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|afterDropParts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"myparttable2"
decl_stmt|;
name|int
name|startTime
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"pc"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|emptyParameters
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"fred"
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/pc=fred"
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|vals
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|startTime
argument_list|,
name|startTime
argument_list|,
name|psd
argument_list|,
name|emptyParameters
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|NoSuchObjectException
operator|.
name|class
argument_list|)
expr_stmt|;
name|store
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createRole
parameter_list|()
throws|throws
name|Exception
block|{
name|int
name|now
init|=
operator|(
name|int
operator|)
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|String
name|roleName
init|=
literal|"myrole"
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleName
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|Role
name|r
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|roleName
argument_list|,
name|r
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|r
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|now
operator|<=
name|r
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|dropRole
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|roleName
init|=
literal|"anotherrole"
decl_stmt|;
name|store
operator|.
name|addRole
argument_list|(
name|roleName
argument_list|,
literal|"me"
argument_list|)
expr_stmt|;
name|Role
name|role
init|=
name|store
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|role
argument_list|)
expr_stmt|;
name|store
operator|.
name|removeRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|thrown
operator|.
name|expect
argument_list|(
name|NoSuchObjectException
operator|.
name|class
argument_list|)
expr_stmt|;
name|store
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
block|}
comment|// Due to the way our mock stuff works, we can only insert one column at a time, so we'll test
comment|// each stat type separately.  We'll test them together in hte integration tests.
annotation|@
name|Test
specifier|public
name|void
name|booleanTableStatistics
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Because of the way our mock implementation works we actually need to not create the table
comment|// before we set statistics on it.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|dbname
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"statstable"
decl_stmt|;
name|String
name|boolcol
init|=
literal|"boolcol"
decl_stmt|;
name|long
name|trues
init|=
literal|37
decl_stmt|;
name|long
name|falses
init|=
literal|12
decl_stmt|;
name|long
name|booleanNulls
init|=
literal|2
decl_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDbName
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setIsTblLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|boolcol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|BooleanColumnStatsData
name|boolData
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|boolData
operator|.
name|setNumTrues
argument_list|(
name|trues
argument_list|)
expr_stmt|;
name|boolData
operator|.
name|setNumFalses
argument_list|(
name|falses
argument_list|)
expr_stmt|;
name|boolData
operator|.
name|setNumNulls
argument_list|(
name|booleanNulls
argument_list|)
expr_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
name|boolData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|stats
operator|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|boolcol
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbname
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|colData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|BOOLEAN_STATS
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
name|boolData
operator|=
name|colData
operator|.
name|getBooleanStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|trues
argument_list|,
name|boolData
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|falses
argument_list|,
name|boolData
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|booleanNulls
argument_list|,
name|boolData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|longTableStatistics
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Because of the way our mock implementation works we actually need to not create the table
comment|// before we set statistics on it.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|dbname
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"statstable"
decl_stmt|;
name|String
name|longcol
init|=
literal|"longcol"
decl_stmt|;
name|long
name|longHigh
init|=
literal|120938479124L
decl_stmt|;
name|long
name|longLow
init|=
operator|-
literal|12341243213412124L
decl_stmt|;
name|long
name|longNulls
init|=
literal|23
decl_stmt|;
name|long
name|longDVs
init|=
literal|213L
decl_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDbName
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setIsTblLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|longcol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|LongColumnStatsData
name|longData
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|longData
operator|.
name|setHighValue
argument_list|(
name|longHigh
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setLowValue
argument_list|(
name|longLow
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setNumNulls
argument_list|(
name|longNulls
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setNumDVs
argument_list|(
name|longDVs
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|longData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|stats
operator|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|longcol
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbname
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|colData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|LONG_STATS
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
name|longData
operator|=
name|colData
operator|.
name|getLongStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longHigh
argument_list|,
name|longData
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longLow
argument_list|,
name|longData
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longNulls
argument_list|,
name|longData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|longDVs
argument_list|,
name|longData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|doubleTableStatistics
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Because of the way our mock implementation works we actually need to not create the table
comment|// before we set statistics on it.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|dbname
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"statstable"
decl_stmt|;
name|String
name|doublecol
init|=
literal|"doublecol"
decl_stmt|;
name|double
name|doubleHigh
init|=
literal|123423.23423
decl_stmt|;
name|double
name|doubleLow
init|=
literal|0.00001234233
decl_stmt|;
name|long
name|doubleNulls
init|=
literal|92
decl_stmt|;
name|long
name|doubleDVs
init|=
literal|1234123421L
decl_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDbName
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setIsTblLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|doublecol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|DoubleColumnStatsData
name|doubleData
init|=
operator|new
name|DoubleColumnStatsData
argument_list|()
decl_stmt|;
name|doubleData
operator|.
name|setHighValue
argument_list|(
name|doubleHigh
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setLowValue
argument_list|(
name|doubleLow
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setNumNulls
argument_list|(
name|doubleNulls
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setNumDVs
argument_list|(
name|doubleDVs
argument_list|)
expr_stmt|;
name|data
operator|.
name|setDoubleStats
argument_list|(
name|doubleData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|stats
operator|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|doublecol
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbname
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|colData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|DOUBLE_STATS
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
name|doubleData
operator|=
name|colData
operator|.
name|getDoubleStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleHigh
argument_list|,
name|doubleData
operator|.
name|getHighValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleLow
argument_list|,
name|doubleData
operator|.
name|getLowValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleNulls
argument_list|,
name|doubleData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|doubleDVs
argument_list|,
name|doubleData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|stringTableStatistics
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Because of the way our mock implementation works we actually need to not create the table
comment|// before we set statistics on it.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|dbname
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"statstable"
decl_stmt|;
name|String
name|stringcol
init|=
literal|"stringcol"
decl_stmt|;
name|long
name|strMaxLen
init|=
literal|1234
decl_stmt|;
name|double
name|strAvgLen
init|=
literal|32.3
decl_stmt|;
name|long
name|strNulls
init|=
literal|987
decl_stmt|;
name|long
name|strDVs
init|=
literal|906
decl_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDbName
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setIsTblLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|stringcol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"string"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|StringColumnStatsData
name|strData
init|=
operator|new
name|StringColumnStatsData
argument_list|()
decl_stmt|;
name|strData
operator|.
name|setMaxColLen
argument_list|(
name|strMaxLen
argument_list|)
expr_stmt|;
name|strData
operator|.
name|setAvgColLen
argument_list|(
name|strAvgLen
argument_list|)
expr_stmt|;
name|strData
operator|.
name|setNumNulls
argument_list|(
name|strNulls
argument_list|)
expr_stmt|;
name|strData
operator|.
name|setNumDVs
argument_list|(
name|strDVs
argument_list|)
expr_stmt|;
name|data
operator|.
name|setStringStats
argument_list|(
name|strData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|stats
operator|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|stringcol
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbname
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|colData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|STRING_STATS
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
name|strData
operator|=
name|colData
operator|.
name|getStringStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strMaxLen
argument_list|,
name|strData
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strAvgLen
argument_list|,
name|strData
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strNulls
argument_list|,
name|strData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|strDVs
argument_list|,
name|strData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|binaryTableStatistics
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Because of the way our mock implementation works we actually need to not create the table
comment|// before we set statistics on it.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|dbname
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"statstable"
decl_stmt|;
name|String
name|binarycol
init|=
literal|"bincol"
decl_stmt|;
name|long
name|binMaxLen
init|=
literal|123412987L
decl_stmt|;
name|double
name|binAvgLen
init|=
literal|76.98
decl_stmt|;
name|long
name|binNulls
init|=
literal|976998797L
decl_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDbName
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setIsTblLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|binarycol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"binary"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|BinaryColumnStatsData
name|binData
init|=
operator|new
name|BinaryColumnStatsData
argument_list|()
decl_stmt|;
name|binData
operator|.
name|setMaxColLen
argument_list|(
name|binMaxLen
argument_list|)
expr_stmt|;
name|binData
operator|.
name|setAvgColLen
argument_list|(
name|binAvgLen
argument_list|)
expr_stmt|;
name|binData
operator|.
name|setNumNulls
argument_list|(
name|binNulls
argument_list|)
expr_stmt|;
name|data
operator|.
name|setBinaryStats
argument_list|(
name|binData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|stats
operator|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|binarycol
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbname
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|colData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|BINARY_STATS
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
name|binData
operator|=
name|colData
operator|.
name|getBinaryStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binMaxLen
argument_list|,
name|binData
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binAvgLen
argument_list|,
name|binData
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|binNulls
argument_list|,
name|binData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|decimalTableStatistics
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Because of the way our mock implementation works we actually need to not create the table
comment|// before we set statistics on it.
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|dbname
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"statstable"
decl_stmt|;
name|String
name|decimalcol
init|=
literal|"deccol"
decl_stmt|;
name|Decimal
name|decHigh
init|=
operator|new
name|Decimal
argument_list|()
decl_stmt|;
name|decHigh
operator|.
name|setScale
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|decHigh
operator|.
name|setUnscaled
argument_list|(
literal|"3876"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
comment|// I have not clue how this is translated, but it
comment|// doesn't matter
name|Decimal
name|decLow
init|=
operator|new
name|Decimal
argument_list|()
decl_stmt|;
name|decLow
operator|.
name|setScale
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|)
expr_stmt|;
name|decLow
operator|.
name|setUnscaled
argument_list|(
literal|"38"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|decNulls
init|=
literal|13
decl_stmt|;
name|long
name|decDVs
init|=
literal|923947293L
decl_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDbName
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setIsTblLevel
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
name|decimalcol
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"decimal(5,3)"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|DecimalColumnStatsData
name|decData
init|=
operator|new
name|DecimalColumnStatsData
argument_list|()
decl_stmt|;
name|decData
operator|.
name|setHighValue
argument_list|(
name|decHigh
argument_list|)
expr_stmt|;
name|decData
operator|.
name|setLowValue
argument_list|(
name|decLow
argument_list|)
expr_stmt|;
name|decData
operator|.
name|setNumNulls
argument_list|(
name|decNulls
argument_list|)
expr_stmt|;
name|decData
operator|.
name|setNumDVs
argument_list|(
name|decDVs
argument_list|)
expr_stmt|;
name|data
operator|.
name|setDecimalStats
argument_list|(
name|decData
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|stats
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
name|stats
operator|=
name|store
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|decimalcol
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbname
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|stats
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|colData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|DECIMAL_STATS
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
name|decData
operator|=
name|colData
operator|.
name|getDecimalStats
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decHigh
argument_list|,
name|decData
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decLow
argument_list|,
name|decData
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decNulls
argument_list|,
name|decData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|decDVs
argument_list|,
name|decData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

