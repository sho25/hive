begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AbortTxnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AddDynamicPartitions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CommitTxnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetOpenTxnsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|OpenTxnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|OpenTxnsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for TxnHandler.  */
end_comment

begin_class
specifier|public
class|class
name|TestCompactionTxnHandler
block|{
specifier|private
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
specifier|private
name|TxnStore
name|txnHandler
decl_stmt|;
specifier|public
name|TestCompactionTxnHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindNextToCompact
parameter_list|()
throws|throws
name|Exception
block|{
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=today"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|CompactionInfo
name|ci
init|=
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|ci
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|ci
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ds=today"
argument_list|,
name|ci
operator|.
name|partName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CompactionType
operator|.
name|MINOR
argument_list|,
name|ci
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|ci
operator|.
name|runAs
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|setRunAs
argument_list|(
name|ci
operator|.
name|id
argument_list|,
literal|"bob"
argument_list|)
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ShowCompactResponseElement
name|c
init|=
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|c
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|c
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ds=today"
argument_list|,
name|c
operator|.
name|getPartitionname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CompactionType
operator|.
name|MINOR
argument_list|,
name|c
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"working"
argument_list|,
name|c
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|getStart
argument_list|()
operator|-
literal|5000
operator|<
name|now
operator|&&
name|c
operator|.
name|getStart
argument_list|()
operator|+
literal|5000
operator|>
name|now
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fred"
argument_list|,
name|c
operator|.
name|getWorkerid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bob"
argument_list|,
name|c
operator|.
name|getRunAs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindNextToCompact2
parameter_list|()
throws|throws
name|Exception
block|{
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=today"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=yesterday"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|boolean
name|expectToday
init|=
literal|false
decl_stmt|;
name|CompactionInfo
name|ci
init|=
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|ci
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|ci
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
literal|"ds=today"
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|partName
argument_list|)
condition|)
name|expectToday
operator|=
literal|false
expr_stmt|;
elseif|else
if|if
condition|(
literal|"ds=yesterday"
operator|.
name|equals
argument_list|(
name|ci
operator|.
name|partName
argument_list|)
condition|)
name|expectToday
operator|=
literal|true
expr_stmt|;
else|else
name|fail
argument_list|(
literal|"partition name should have been today or yesterday but was "
operator|+
name|ci
operator|.
name|partName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CompactionType
operator|.
name|MINOR
argument_list|,
name|ci
operator|.
name|type
argument_list|)
expr_stmt|;
name|ci
operator|=
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|ci
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|ci
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectToday
condition|)
name|assertEquals
argument_list|(
literal|"ds=today"
argument_list|,
name|ci
operator|.
name|partName
argument_list|)
expr_stmt|;
else|else
name|assertEquals
argument_list|(
literal|"ds=yesterday"
argument_list|,
name|ci
operator|.
name|partName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CompactionType
operator|.
name|MINOR
argument_list|,
name|ci
operator|.
name|type
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
argument_list|)
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ShowCompactResponseElement
name|e
range|:
name|compacts
control|)
block|{
name|assertEquals
argument_list|(
literal|"working"
argument_list|,
name|e
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|e
operator|.
name|getStart
argument_list|()
operator|-
literal|5000
operator|<
name|now
operator|&&
name|e
operator|.
name|getStart
argument_list|()
operator|+
literal|5000
operator|>
name|now
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fred"
argument_list|,
name|e
operator|.
name|getWorkerid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindNextToCompactNothingToCompact
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarkCompacted
parameter_list|()
throws|throws
name|Exception
block|{
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=today"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|CompactionInfo
name|ci
init|=
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|markCompacted
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
argument_list|)
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ShowCompactResponseElement
name|c
init|=
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|c
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|c
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ds=today"
argument_list|,
name|c
operator|.
name|getPartitionname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CompactionType
operator|.
name|MINOR
argument_list|,
name|c
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|c
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getWorkerid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindNextToClean
parameter_list|()
throws|throws
name|Exception
block|{
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=today"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnHandler
operator|.
name|findReadyToClean
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CompactionInfo
name|ci
init|=
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnHandler
operator|.
name|findReadyToClean
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|markCompacted
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CompactionInfo
argument_list|>
name|toClean
init|=
name|txnHandler
operator|.
name|findReadyToClean
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|toClean
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
argument_list|)
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ShowCompactResponseElement
name|c
init|=
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|c
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|c
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ds=today"
argument_list|,
name|c
operator|.
name|getPartitionname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CompactionType
operator|.
name|MINOR
argument_list|,
name|c
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ready for cleaning"
argument_list|,
name|c
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getWorkerid
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMarkCleaned
parameter_list|()
throws|throws
name|Exception
block|{
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=today"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnHandler
operator|.
name|findReadyToClean
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CompactionInfo
name|ci
init|=
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnHandler
operator|.
name|findReadyToClean
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|markCompacted
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CompactionInfo
argument_list|>
name|toClean
init|=
name|txnHandler
operator|.
name|findReadyToClean
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|toClean
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|markCleaned
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnHandler
operator|.
name|findReadyToClean
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getCompactsSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|TxnHandler
operator|.
name|SUCCEEDED_RESPONSE
operator|.
name|equals
argument_list|(
name|rsp
operator|.
name|getCompacts
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRevokeFromLocalWorkers
parameter_list|()
throws|throws
name|Exception
block|{
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"baz"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"bazzoo"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred-193892"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"bob-193892"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred-193893"
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|revokeFromLocalWorkers
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|sawWorkingBob
init|=
literal|false
decl_stmt|;
name|int
name|initiatedCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ShowCompactResponseElement
name|c
range|:
name|compacts
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
literal|"working"
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|"bob-193892"
argument_list|,
name|c
operator|.
name|getWorkerid
argument_list|()
argument_list|)
expr_stmt|;
name|sawWorkingBob
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
literal|"initiated"
argument_list|)
condition|)
block|{
name|initiatedCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unexpected state"
argument_list|)
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
name|sawWorkingBob
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|initiatedCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRevokeTimedOutWorkers
parameter_list|()
throws|throws
name|Exception
block|{
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"baz"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred-193892"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred-193892"
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|revokeTimedoutWorkers
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|sawWorking
init|=
literal|false
decl_stmt|,
name|sawInitiated
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ShowCompactResponseElement
name|c
range|:
name|compacts
control|)
block|{
if|if
condition|(
name|c
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
literal|"working"
argument_list|)
condition|)
name|sawWorking
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|c
operator|.
name|getState
argument_list|()
operator|.
name|equals
argument_list|(
literal|"initiated"
argument_list|)
condition|)
name|sawInitiated
operator|=
literal|true
expr_stmt|;
else|else
name|fail
argument_list|(
literal|"Unexpected state"
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|sawWorking
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sawInitiated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFindPotentialCompactions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that committing unlocks
name|long
name|txnid
init|=
name|openTxn
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"yourtable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|req
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|commitTxn
argument_list|(
operator|new
name|CommitTxnRequest
argument_list|(
name|txnid
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnHandler
operator|.
name|numLocksInLockTable
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|CompactionInfo
argument_list|>
name|potentials
init|=
name|txnHandler
operator|.
name|findPotentialCompactions
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|potentials
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|sawMyTable
init|=
literal|false
decl_stmt|,
name|sawYourTable
init|=
literal|false
decl_stmt|;
for|for
control|(
name|CompactionInfo
name|ci
range|:
name|potentials
control|)
block|{
name|sawMyTable
operator||=
operator|(
name|ci
operator|.
name|dbname
operator|.
name|equals
argument_list|(
literal|"mydb"
argument_list|)
operator|&&
name|ci
operator|.
name|tableName
operator|.
name|equals
argument_list|(
literal|"mytable"
argument_list|)
operator|&&
name|ci
operator|.
name|partName
operator|==
literal|null
operator|)
expr_stmt|;
name|sawYourTable
operator||=
operator|(
name|ci
operator|.
name|dbname
operator|.
name|equals
argument_list|(
literal|"mydb"
argument_list|)
operator|&&
name|ci
operator|.
name|tableName
operator|.
name|equals
argument_list|(
literal|"yourtable"
argument_list|)
operator|&&
name|ci
operator|.
name|partName
operator|.
name|equals
argument_list|(
literal|"mypartition"
argument_list|)
operator|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|sawMyTable
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sawYourTable
argument_list|)
expr_stmt|;
block|}
comment|// TODO test changes to mark cleaned to clean txns and txn_components
annotation|@
name|Test
specifier|public
name|void
name|testMarkCleanedCleansTxnsAndTxnComponents
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|txnid
init|=
name|openTxn
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|req
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|abortTxn
argument_list|(
operator|new
name|AbortTxnRequest
argument_list|(
name|txnid
argument_list|)
argument_list|)
expr_stmt|;
name|txnid
operator|=
name|openTxn
argument_list|()
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"yourtable"
argument_list|)
expr_stmt|;
name|components
operator|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|abortTxn
argument_list|(
operator|new
name|AbortTxnRequest
argument_list|(
name|txnid
argument_list|)
argument_list|)
expr_stmt|;
name|txnid
operator|=
name|openTxn
argument_list|()
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|components
operator|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"baz"
argument_list|)
expr_stmt|;
name|components
operator|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|abortTxn
argument_list|(
operator|new
name|AbortTxnRequest
argument_list|(
name|txnid
argument_list|)
argument_list|)
expr_stmt|;
name|CompactionInfo
name|ci
init|=
operator|new
name|CompactionInfo
argument_list|()
decl_stmt|;
comment|// Now clean them and check that they are removed from the count.
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"mydb"
argument_list|,
literal|"mytable"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnHandler
operator|.
name|findReadyToClean
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|=
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|markCompacted
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|CompactionInfo
argument_list|>
name|toClean
init|=
name|txnHandler
operator|.
name|findReadyToClean
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|toClean
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|markCleaned
argument_list|(
name|ci
argument_list|)
expr_stmt|;
comment|// Check that we are cleaning up the empty aborted transactions
name|GetOpenTxnsResponse
name|txnList
init|=
name|txnHandler
operator|.
name|getOpenTxns
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|txnList
operator|.
name|getOpen_txnsSize
argument_list|()
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|cleanEmptyAbortedTxns
argument_list|()
expr_stmt|;
name|txnList
operator|=
name|txnHandler
operator|.
name|getOpenTxns
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|txnList
operator|.
name|getOpen_txnsSize
argument_list|()
argument_list|)
expr_stmt|;
name|rqst
operator|=
operator|new
name|CompactionRequest
argument_list|(
literal|"mydb"
argument_list|,
literal|"foo"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
expr_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnHandler
operator|.
name|findReadyToClean
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ci
operator|=
name|txnHandler
operator|.
name|findNextToCompact
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|markCompacted
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|toClean
operator|=
name|txnHandler
operator|.
name|findReadyToClean
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|toClean
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|markCleaned
argument_list|(
name|ci
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|openTxns
argument_list|(
operator|new
name|OpenTxnRequest
argument_list|(
literal|1
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|cleanEmptyAbortedTxns
argument_list|()
expr_stmt|;
name|txnList
operator|=
name|txnHandler
operator|.
name|getOpenTxns
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|txnList
operator|.
name|getOpen_txnsSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addDynamicPartitions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"adp_table"
decl_stmt|;
name|OpenTxnsResponse
name|openTxns
init|=
name|txnHandler
operator|.
name|openTxns
argument_list|(
operator|new
name|OpenTxnRequest
argument_list|(
literal|1
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|txnId
init|=
name|openTxns
operator|.
name|getTxn_ids
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// lock a table, as in dynamic partitions
name|LockComponent
name|lc
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
name|lc
operator|.
name|setTablename
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|LockRequest
name|lr
init|=
operator|new
name|LockRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|lc
argument_list|)
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|lr
operator|.
name|setTxnid
argument_list|(
name|txnId
argument_list|)
expr_stmt|;
name|LockResponse
name|lock
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
operator|new
name|LockRequest
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|lc
argument_list|)
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|LockState
operator|.
name|ACQUIRED
argument_list|,
name|lock
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|addDynamicPartitions
argument_list|(
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnId
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=yesterday"
argument_list|,
literal|"ds=today"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|commitTxn
argument_list|(
operator|new
name|CommitTxnRequest
argument_list|(
name|txnId
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|CompactionInfo
argument_list|>
name|potentials
init|=
name|txnHandler
operator|.
name|findPotentialCompactions
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|potentials
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SortedSet
argument_list|<
name|CompactionInfo
argument_list|>
name|sorted
init|=
operator|new
name|TreeSet
argument_list|<
name|CompactionInfo
argument_list|>
argument_list|(
name|potentials
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|CompactionInfo
name|ci
range|:
name|sorted
control|)
block|{
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|ci
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|ci
operator|.
name|tableName
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|i
operator|++
condition|)
block|{
case|case
literal|0
case|:
name|assertEquals
argument_list|(
literal|"ds=today"
argument_list|,
name|ci
operator|.
name|partName
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|assertEquals
argument_list|(
literal|"ds=yesterday"
argument_list|,
name|ci
operator|.
name|partName
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"What?"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TxnDbUtil
operator|.
name|prepDb
argument_list|()
expr_stmt|;
name|txnHandler
operator|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|()
expr_stmt|;
block|}
specifier|private
name|long
name|openTxn
parameter_list|()
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|txns
init|=
name|txnHandler
operator|.
name|openTxns
argument_list|(
operator|new
name|OpenTxnRequest
argument_list|(
literal|1
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
operator|.
name|getTxn_ids
argument_list|()
decl_stmt|;
return|return
name|txns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

