begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|cli
operator|.
name|CliSessionState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|ListenerEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|Driver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|session
operator|.
name|SessionState
import|;
end_import

begin_comment
comment|/**  * TestMetaStoreEventListener. Test case for  * {@link org.apache.hadoop.hive.metastore.hadooorg.apache.hadoop.hive.metastore.MetaStoreEventListener}  */
end_comment

begin_class
specifier|public
class|class
name|TestMetaStoreEventListener
extends|extends
name|TestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|msPort
init|=
literal|"20001"
decl_stmt|;
specifier|private
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
name|HiveMetaStoreClient
name|msc
decl_stmt|;
specifier|private
name|Driver
name|driver
decl_stmt|;
specifier|private
specifier|static
class|class
name|RunMS
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|HiveMetaStore
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
name|msPort
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|ConfVars
operator|.
name|METASTORE_EVENT_LISTENERS
operator|.
name|varname
argument_list|,
name|DummyListener
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|RunMS
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|40000
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.metastore.local"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|msPort
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTRETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|SessionState
operator|.
name|start
argument_list|(
operator|new
name|CliSessionState
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
expr_stmt|;
name|msc
operator|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|driver
operator|=
operator|new
name|Driver
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testListener
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|ListenerEvent
argument_list|>
name|notifyList
init|=
name|DummyListener
operator|.
name|notifyList
decl_stmt|;
name|assertEquals
argument_list|(
name|notifyList
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"create database tmpdb"
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
name|msc
operator|.
name|getDatabase
argument_list|(
literal|"tmpdb"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|notifyList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|CreateDatabaseEvent
name|dbEvent
init|=
call|(
name|CreateDatabaseEvent
call|)
argument_list|(
name|notifyList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|dbEvent
operator|.
name|getStatus
argument_list|()
assert|;
name|assertEquals
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|dbEvent
operator|.
name|getDatabase
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|,
name|dbEvent
operator|.
name|getDatabase
argument_list|()
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"use tmpdb"
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"create table tmptbl (a string) partitioned by (b string)"
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|msc
operator|.
name|getTable
argument_list|(
literal|"tmpdb"
argument_list|,
literal|"tmptbl"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|notifyList
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|CreateTableEvent
name|tblEvent
init|=
call|(
name|CreateTableEvent
call|)
argument_list|(
name|notifyList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|tblEvent
operator|.
name|getStatus
argument_list|()
assert|;
name|assertEquals
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblEvent
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tblEvent
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|tblEvent
operator|.
name|getTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"alter table tmptbl add partition (b='2011')"
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
name|msc
operator|.
name|getPartition
argument_list|(
literal|"tmpdb"
argument_list|,
literal|"tmptbl"
argument_list|,
literal|"b=2011"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|notifyList
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|AddPartitionEvent
name|partEvent
init|=
call|(
name|AddPartitionEvent
call|)
argument_list|(
name|notifyList
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
assert|assert
name|partEvent
operator|.
name|getStatus
argument_list|()
assert|;
name|assertEquals
argument_list|(
name|part
argument_list|,
name|partEvent
operator|.
name|getPartition
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"alter table tmptbl drop partition (b='2011')"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|notifyList
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|DropPartitionEvent
name|dropPart
init|=
operator|(
name|DropPartitionEvent
operator|)
name|notifyList
operator|.
name|get
argument_list|(
literal|3
argument_list|)
decl_stmt|;
assert|assert
name|dropPart
operator|.
name|getStatus
argument_list|()
assert|;
name|assertEquals
argument_list|(
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|dropPart
operator|.
name|getPartition
argument_list|()
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|dropPart
operator|.
name|getPartition
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|dropPart
operator|.
name|getPartition
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop table tmptbl"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|notifyList
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|DropTableEvent
name|dropTbl
init|=
operator|(
name|DropTableEvent
operator|)
name|notifyList
operator|.
name|get
argument_list|(
literal|4
argument_list|)
decl_stmt|;
assert|assert
name|dropTbl
operator|.
name|getStatus
argument_list|()
assert|;
name|assertEquals
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|dropTbl
operator|.
name|getTable
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|dropTbl
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|dropTbl
operator|.
name|getTable
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|driver
operator|.
name|run
argument_list|(
literal|"drop database tmpdb"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|notifyList
operator|.
name|size
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|DropDatabaseEvent
name|dropDB
init|=
operator|(
name|DropDatabaseEvent
operator|)
name|notifyList
operator|.
name|get
argument_list|(
literal|5
argument_list|)
decl_stmt|;
assert|assert
name|dropDB
operator|.
name|getStatus
argument_list|()
assert|;
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dropDB
operator|.
name|getDatabase
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

