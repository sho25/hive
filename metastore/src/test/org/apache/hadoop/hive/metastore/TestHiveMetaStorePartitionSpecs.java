begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|CompositePartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|columnar
operator|.
name|LazyBinaryColumnarSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Test to check PartitionSpec support in HiveMetaStore.  */
end_comment

begin_class
specifier|public
class|class
name|TestHiveMetaStorePartitionSpecs
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHiveMetaStorePartitionSpecs
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|msPort
init|=
literal|"20102"
decl_stmt|;
specifier|private
specifier|static
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
specifier|static
name|SecurityManager
name|securityManager
decl_stmt|;
specifier|public
specifier|static
class|class
name|NoExitSecurityManager
extends|extends
name|SecurityManager
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkPermission
parameter_list|(
name|Permission
name|perm
parameter_list|)
block|{
comment|// allow anything.
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkPermission
parameter_list|(
name|Permission
name|perm
parameter_list|,
name|Object
name|context
parameter_list|)
block|{
comment|// allow anything.
block|}
annotation|@
name|Override
specifier|public
name|void
name|checkExit
parameter_list|(
name|int
name|status
parameter_list|)
block|{
name|super
operator|.
name|checkExit
argument_list|(
name|status
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"System.exit() was called. Raising exception. "
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RunMS
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|HiveMetaStore
operator|.
name|main
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"-v"
block|,
literal|"-p"
block|,
name|msPort
block|,
literal|"--hiveconf"
block|,
literal|"hive.metastore.expression.proxy="
operator|+
name|MockPartitionExpressionForMetastore
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exiting. Got exception from metastore: "
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Shutting down metastore."
argument_list|)
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
name|securityManager
argument_list|)
expr_stmt|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|startMetaStoreServer
parameter_list|()
throws|throws
name|Exception
block|{
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
operator|new
name|RunMS
argument_list|()
argument_list|)
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|securityManager
operator|=
name|System
operator|.
name|getSecurityManager
argument_list|()
expr_stmt|;
name|System
operator|.
name|setSecurityManager
argument_list|(
operator|new
name|NoExitSecurityManager
argument_list|()
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|TestHiveMetaStorePartitionSpecs
operator|.
name|class
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|,
literal|"thrift://localhost:"
operator|+
name|msPort
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
operator|.
name|varname
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_EXPRESSION_PROXY_CLASS
operator|.
name|name
argument_list|()
argument_list|,
name|MockPartitionExpressionForMetastore
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|PREEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|System
operator|.
name|setProperty
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|POSTEXECHOOKS
operator|.
name|varname
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|dbName
init|=
literal|"testpartitionspecs_db"
decl_stmt|;
specifier|private
specifier|static
name|String
name|tableName
init|=
literal|"testpartitionspecs_table"
decl_stmt|;
specifier|private
specifier|static
name|int
name|nDates
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
name|String
name|datePrefix
init|=
literal|"2014010"
decl_stmt|;
specifier|private
specifier|static
name|void
name|createTable
parameter_list|(
name|HiveMetaStoreClient
name|hmsc
parameter_list|,
name|boolean
name|enablePartitionGrouping
parameter_list|)
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|columns
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|columns
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"foo"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|columns
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"bar"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partColumns
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partColumns
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"dt"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|partColumns
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"blurb"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serdeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"LBCSerDe"
argument_list|,
name|LazyBinaryColumnarSerDe
operator|.
name|class
operator|.
name|getCanonicalName
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|storageDescriptor
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|columns
argument_list|,
literal|null
argument_list|,
literal|"org.apache.hadoop.hive.ql.io.RCFileInputFormat"
argument_list|,
literal|"org.apache.hadoop.hive.ql.io.RCFileOutputFormat"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serdeInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tableParameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|tableParameters
operator|.
name|put
argument_list|(
literal|"hive.hcatalog.partition.spec.grouping.enabled"
argument_list|,
name|enablePartitionGrouping
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|""
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|storageDescriptor
argument_list|,
name|partColumns
argument_list|,
name|tableParameters
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|hmsc
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Table "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|" does not exist"
argument_list|,
name|hmsc
operator|.
name|tableExists
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|clearAndRecreateDB
parameter_list|(
name|HiveMetaStoreClient
name|hmsc
parameter_list|)
throws|throws
name|Exception
block|{
name|hmsc
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|,
literal|true
argument_list|,
comment|// Delete data.
literal|true
argument_list|,
comment|// Ignore unknownDB.
literal|true
comment|// Cascade.
argument_list|)
expr_stmt|;
name|hmsc
operator|.
name|createDatabase
argument_list|(
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
literal|""
argument_list|,
comment|// Description.
literal|null
argument_list|,
comment|// Location.
literal|null
comment|// Parameters.
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Get partition-path. For grid='XYZ', place the partition outside the table-path.
specifier|private
specifier|static
name|String
name|getPartitionPath
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|)
block|{
return|return
name|partValues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"isLocatedOutsideTablePath"
argument_list|)
condition|?
comment|// i.e. Is the partition outside the table-dir?
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|replace
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|"location_outside_"
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|+
literal|"_"
operator|+
name|partValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|+
literal|"_"
operator|+
name|partValues
operator|.
name|get
argument_list|(
literal|1
argument_list|)
else|:
literal|null
return|;
comment|// Use defaults... Partitions are put in the table directory.
block|}
specifier|private
specifier|static
name|void
name|populatePartitions
parameter_list|(
name|HiveMetaStoreClient
name|hmsc
parameter_list|,
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|blurbs
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDates
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|String
name|blurb
range|:
name|blurbs
control|)
block|{
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
comment|// Add partitions located in the table-directory (i.e. default).
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|datePrefix
operator|+
name|i
argument_list|,
name|blurb
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setLocation
argument_list|(
name|getPartitionPath
argument_list|(
name|table
argument_list|,
name|values
argument_list|)
argument_list|)
expr_stmt|;
name|hmsc
operator|.
name|add_partition
argument_list|(
operator|new
name|Partition
argument_list|(
name|values
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|testGetPartitionSpecs
parameter_list|(
name|boolean
name|enablePartitionGrouping
parameter_list|)
block|{
try|try
block|{
name|HiveMetaStoreClient
name|hmsc
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|clearAndRecreateDB
argument_list|(
name|hmsc
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|hmsc
argument_list|,
name|enablePartitionGrouping
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|hmsc
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|populatePartitions
argument_list|(
name|hmsc
argument_list|,
name|table
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"isLocatedInTablePath"
argument_list|,
literal|"isLocatedOutsideTablePath"
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|hmsc
operator|.
name|listPartitionSpecs
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of partitions."
argument_list|,
name|nDates
operator|*
literal|2
argument_list|,
name|partitionSpecProxy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|locationToDateMap
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|locationToDateMap
operator|.
name|put
argument_list|(
literal|"isLocatedInTablePath"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|locationToDateMap
operator|.
name|put
argument_list|(
literal|"isLocatedOutsideTablePath"
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
operator|.
name|PartitionIterator
name|iterator
init|=
name|partitionSpecProxy
operator|.
name|getPartitionIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Partition
name|partition
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|locationToDateMap
operator|.
name|get
argument_list|(
name|partition
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|partition
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|expectedDates
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|nDates
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nDates
condition|;
operator|++
name|i
control|)
block|{
name|expectedDates
operator|.
name|add
argument_list|(
name|datePrefix
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Unexpected date-values."
argument_list|,
name|expectedDates
operator|.
name|toArray
argument_list|()
argument_list|,
name|locationToDateMap
operator|.
name|get
argument_list|(
literal|"isLocatedInTablePath"
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Unexpected date-values."
argument_list|,
name|expectedDates
operator|.
name|toArray
argument_list|()
argument_list|,
name|locationToDateMap
operator|.
name|get
argument_list|(
literal|"isLocatedOutsideTablePath"
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
name|partitionSpecProxy
operator|=
name|hmsc
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|"blurb = \"isLocatedOutsideTablePath\""
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|locationToDateMap
operator|.
name|get
argument_list|(
literal|"isLocatedInTablePath"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|locationToDateMap
operator|.
name|get
argument_list|(
literal|"isLocatedOutsideTablePath"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iterator
operator|=
name|partitionSpecProxy
operator|.
name|getPartitionIterator
argument_list|()
expr_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Partition
name|partition
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|locationToDateMap
operator|.
name|get
argument_list|(
name|partition
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|partition
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected date-values."
argument_list|,
literal|0
argument_list|,
name|locationToDateMap
operator|.
name|get
argument_list|(
literal|"isLocatedInTablePath"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertArrayEquals
argument_list|(
literal|"Unexpected date-values."
argument_list|,
name|expectedDates
operator|.
name|toArray
argument_list|()
argument_list|,
name|locationToDateMap
operator|.
name|get
argument_list|(
literal|"isLocatedOutsideTablePath"
argument_list|)
operator|.
name|toArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected Exception!"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected Exception!"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test for HiveMetaStoreClient.listPartitionSpecs() and HiveMetaStoreClient.listPartitionSpecsByFilter().    * Check behaviour with and without Partition-grouping enabled.    */
annotation|@
name|Test
specifier|public
name|void
name|testGetPartitionSpecs_WithAndWithoutPartitionGrouping
parameter_list|()
block|{
name|testGetPartitionSpecs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testGetPartitionSpecs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test to confirm that partitions can be added using PartitionSpecs.    */
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitions
parameter_list|()
block|{
try|try
block|{
comment|// Create source table.
name|HiveMetaStoreClient
name|hmsc
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|clearAndRecreateDB
argument_list|(
name|hmsc
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|hmsc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|hmsc
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|populatePartitions
argument_list|(
name|hmsc
argument_list|,
name|table
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"isLocatedInTablePath"
argument_list|,
literal|"isLocatedOutsideTablePath"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clone the table,
name|String
name|targetTableName
init|=
literal|"cloned_"
operator|+
name|tableName
decl_stmt|;
name|Table
name|targetTable
init|=
operator|new
name|Table
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|targetTable
operator|.
name|setTableName
argument_list|(
name|targetTableName
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|targetTableSd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|targetTable
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|targetTableSd
operator|.
name|setLocation
argument_list|(
name|targetTableSd
operator|.
name|getLocation
argument_list|()
operator|.
name|replace
argument_list|(
name|tableName
argument_list|,
name|targetTableName
argument_list|)
argument_list|)
expr_stmt|;
name|hmsc
operator|.
name|createTable
argument_list|(
name|targetTable
argument_list|)
expr_stmt|;
comment|// Get partition-list from source.
name|PartitionSpecProxy
name|partitionsForAddition
init|=
name|hmsc
operator|.
name|listPartitionSpecsByFilter
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|"blurb = \"isLocatedInTablePath\""
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|partitionsForAddition
operator|.
name|setTableName
argument_list|(
name|targetTableName
argument_list|)
expr_stmt|;
name|partitionsForAddition
operator|.
name|setRootLocation
argument_list|(
name|targetTableSd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of partitions added. "
argument_list|,
name|partitionsForAddition
operator|.
name|size
argument_list|()
argument_list|,
name|hmsc
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionsForAddition
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check that the added partitions are as expected.
name|PartitionSpecProxy
name|clonedPartitions
init|=
name|hmsc
operator|.
name|listPartitionSpecs
argument_list|(
name|dbName
argument_list|,
name|targetTableName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of partitions returned. "
argument_list|,
name|partitionsForAddition
operator|.
name|size
argument_list|()
argument_list|,
name|clonedPartitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PartitionSpecProxy
operator|.
name|PartitionIterator
name|sourceIterator
init|=
name|partitionsForAddition
operator|.
name|getPartitionIterator
argument_list|()
decl_stmt|,
name|targetIterator
init|=
name|clonedPartitions
operator|.
name|getPartitionIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|targetIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Partition
name|sourcePartition
init|=
name|sourceIterator
operator|.
name|next
argument_list|()
decl_stmt|,
name|targetPartition
init|=
name|targetIterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mismatched values."
argument_list|,
name|sourcePartition
operator|.
name|getValues
argument_list|()
argument_list|,
name|targetPartition
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Mismatched locations."
argument_list|,
name|sourcePartition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|targetPartition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected Exception!"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected Exception!"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test to confirm that Partition-grouping behaves correctly when Table-schemas evolve.    * Partitions must be grouped by location and schema.    */
annotation|@
name|Test
specifier|public
name|void
name|testFetchingPartitionsWithDifferentSchemas
parameter_list|()
block|{
try|try
block|{
comment|// Create source table.
name|HiveMetaStoreClient
name|hmsc
init|=
operator|new
name|HiveMetaStoreClient
argument_list|(
name|hiveConf
argument_list|)
decl_stmt|;
name|clearAndRecreateDB
argument_list|(
name|hmsc
argument_list|)
expr_stmt|;
name|createTable
argument_list|(
name|hmsc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
name|hmsc
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|populatePartitions
argument_list|(
name|hmsc
argument_list|,
name|table
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"isLocatedInTablePath"
argument_list|,
literal|"isLocatedOutsideTablePath"
argument_list|)
comment|// Blurb list.
argument_list|)
expr_stmt|;
comment|// Modify table schema. Add columns.
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
decl_stmt|;
name|fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"goo"
argument_list|,
literal|"string"
argument_list|,
literal|"Entirely new column. Doesn't apply to older partitions."
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|fields
argument_list|)
expr_stmt|;
name|hmsc
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|table
argument_list|)
expr_stmt|;
comment|// Check that the change stuck.
name|table
operator|=
name|hmsc
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of table columns."
argument_list|,
literal|3
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getColsSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Add partitions with new schema.
comment|// Mark Partitions with new schema with different blurb.
name|populatePartitions
argument_list|(
name|hmsc
argument_list|,
name|table
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"hasNewColumn"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Retrieve *all* partitions from the table.
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|hmsc
operator|.
name|listPartitionSpecs
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of partitions."
argument_list|,
name|nDates
operator|*
literal|3
argument_list|,
name|partitionSpecProxy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Confirm grouping.
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected type of PartitionSpecProxy."
argument_list|,
name|partitionSpecProxy
operator|instanceof
name|CompositePartitionSpecProxy
argument_list|)
expr_stmt|;
name|CompositePartitionSpecProxy
name|compositePartitionSpecProxy
init|=
operator|(
name|CompositePartitionSpecProxy
operator|)
name|partitionSpecProxy
decl_stmt|;
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|partitionSpecs
init|=
name|compositePartitionSpecProxy
operator|.
name|toPartitionSpec
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"PartitionSpec[0] should have been a SharedSDPartitionSpec."
argument_list|,
name|partitionSpecs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isSetSharedSDPartitionSpec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"PartitionSpec[0] should use the table-path as the common root location. "
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|partitionSpecs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getRootPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"PartitionSpec[1] should have been a SharedSDPartitionSpec."
argument_list|,
name|partitionSpecs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|isSetSharedSDPartitionSpec
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"PartitionSpec[1] should use the table-path as the common root location. "
argument_list|,
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|partitionSpecs
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getRootPath
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"PartitionSpec[2] should have been a ListComposingPartitionSpec."
argument_list|,
name|partitionSpecs
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|isSetPartitionList
argument_list|()
argument_list|)
expr_stmt|;
comment|// Categorize the partitions returned, and confirm that all partitions are accounted for.
name|PartitionSpecProxy
operator|.
name|PartitionIterator
name|iterator
init|=
name|partitionSpecProxy
operator|.
name|getPartitionIterator
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
name|blurbToPartitionList
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|Partition
argument_list|>
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Partition
name|partition
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|blurb
init|=
name|partition
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|blurbToPartitionList
operator|.
name|containsKey
argument_list|(
name|blurb
argument_list|)
condition|)
block|{
name|blurbToPartitionList
operator|.
name|put
argument_list|(
name|blurb
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|nDates
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|blurbToPartitionList
operator|.
name|get
argument_list|(
name|blurb
argument_list|)
operator|.
name|add
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
comment|//</Classification>
comment|// All partitions with blurb="isLocatedOutsideTablePath" should have 2 columns,
comment|// and must have locations outside the table directory.
for|for
control|(
name|Partition
name|partition
range|:
name|blurbToPartitionList
operator|.
name|get
argument_list|(
literal|"isLocatedOutsideTablePath"
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of columns."
argument_list|,
literal|2
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected first column."
argument_list|,
literal|"foo"
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected second column."
argument_list|,
literal|"bar"
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|partitionLocation
init|=
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|String
name|tableLocation
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected partition location: "
operator|+
name|partitionLocation
operator|+
literal|". "
operator|+
literal|"Partition should have been outside table location: "
operator|+
name|tableLocation
argument_list|,
operator|!
name|partitionLocation
operator|.
name|startsWith
argument_list|(
name|tableLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// All partitions with blurb="isLocatedInTablePath" should have 2 columns,
comment|// and must have locations within the table directory.
for|for
control|(
name|Partition
name|partition
range|:
name|blurbToPartitionList
operator|.
name|get
argument_list|(
literal|"isLocatedInTablePath"
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of columns."
argument_list|,
literal|2
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected first column."
argument_list|,
literal|"foo"
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected second column."
argument_list|,
literal|"bar"
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|partitionLocation
init|=
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|String
name|tableLocation
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected partition location: "
operator|+
name|partitionLocation
operator|+
literal|". "
operator|+
literal|"Partition should have been within table location: "
operator|+
name|tableLocation
argument_list|,
name|partitionLocation
operator|.
name|startsWith
argument_list|(
name|tableLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// All partitions with blurb="hasNewColumn" were added after the table schema changed,
comment|// and must have 3 columns. Also, the partition locations must lie within the table directory.
for|for
control|(
name|Partition
name|partition
range|:
name|blurbToPartitionList
operator|.
name|get
argument_list|(
literal|"hasNewColumn"
argument_list|)
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected number of columns."
argument_list|,
literal|3
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected first column."
argument_list|,
literal|"foo"
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected second column."
argument_list|,
literal|"bar"
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Unexpected third column."
argument_list|,
literal|"goo"
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|partitionLocation
init|=
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|String
name|tableLocation
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected partition location: "
operator|+
name|partitionLocation
operator|+
literal|". "
operator|+
literal|"Partition should have been within table location: "
operator|+
name|tableLocation
argument_list|,
name|partitionLocation
operator|.
name|startsWith
argument_list|(
name|tableLocation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unexpected Exception!"
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|t
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Unexpected Exception!"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

