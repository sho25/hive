begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|RowFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Bytes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartFilterExprUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|HBaseFilterPlanUtil
operator|.
name|FilterPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|HBaseFilterPlanUtil
operator|.
name|MultiScanPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|HBaseFilterPlanUtil
operator|.
name|PlanResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|HBaseFilterPlanUtil
operator|.
name|ScanPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|HBaseFilterPlanUtil
operator|.
name|ScanPlan
operator|.
name|ScanMarker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
operator|.
name|LeafNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
operator|.
name|LogicalOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
operator|.
name|Operator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
operator|.
name|TreeNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|primitives
operator|.
name|Shorts
import|;
end_import

begin_class
specifier|public
class|class
name|TestHBaseFilterPlanUtil
block|{
specifier|final
name|boolean
name|INCLUSIVE
init|=
literal|true
decl_stmt|;
comment|/**    * Test the function that compares byte arrays    */
annotation|@
name|Test
specifier|public
name|void
name|testCompare
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|HBaseFilterPlanUtil
operator|.
name|compare
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|HBaseFilterPlanUtil
operator|.
name|compare
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|HBaseFilterPlanUtil
operator|.
name|compare
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|HBaseFilterPlanUtil
operator|.
name|compare
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|2
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|HBaseFilterPlanUtil
operator|.
name|compare
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|2
block|,
literal|1
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|HBaseFilterPlanUtil
operator|.
name|compare
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|3
block|,
literal|1
block|}
argument_list|,
operator|new
name|byte
index|[]
block|{
literal|3
block|,
literal|2
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test function that finds greater/lesser marker    */
annotation|@
name|Test
specifier|public
name|void
name|testgetComparedMarker
parameter_list|()
block|{
name|ScanMarker
name|l
decl_stmt|;
name|ScanMarker
name|r
decl_stmt|;
comment|// equal plans
name|l
operator|=
operator|new
name|ScanMarker
argument_list|(
literal|"1"
argument_list|,
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|ScanMarker
argument_list|(
literal|"1"
argument_list|,
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|assertFirstGreater
argument_list|(
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|l
operator|=
operator|new
name|ScanMarker
argument_list|(
literal|"1"
argument_list|,
operator|!
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|ScanMarker
argument_list|(
literal|"1"
argument_list|,
operator|!
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|assertFirstGreater
argument_list|(
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|assertFirstGreater
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// create l is greater because of inclusive flag
name|l
operator|=
operator|new
name|ScanMarker
argument_list|(
literal|"1"
argument_list|,
operator|!
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
comment|// the rule for null vs non-null is different
comment|// non-null is both smaller and greater than null
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l
argument_list|,
name|ScanPlan
operator|.
name|getComparedMarker
argument_list|(
name|l
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l
argument_list|,
name|ScanPlan
operator|.
name|getComparedMarker
argument_list|(
literal|null
argument_list|,
name|l
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l
argument_list|,
name|ScanPlan
operator|.
name|getComparedMarker
argument_list|(
name|l
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l
argument_list|,
name|ScanPlan
operator|.
name|getComparedMarker
argument_list|(
literal|null
argument_list|,
name|l
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// create l that is greater because of the bytes
name|l
operator|=
operator|new
name|ScanMarker
argument_list|(
literal|"2"
argument_list|,
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|new
name|ScanMarker
argument_list|(
literal|"1"
argument_list|,
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
expr_stmt|;
name|assertFirstGreater
argument_list|(
name|l
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertFirstGreater
parameter_list|(
name|ScanMarker
name|big
parameter_list|,
name|ScanMarker
name|small
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|big
argument_list|,
name|ScanPlan
operator|.
name|getComparedMarker
argument_list|(
name|big
argument_list|,
name|small
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|big
argument_list|,
name|ScanPlan
operator|.
name|getComparedMarker
argument_list|(
name|small
argument_list|,
name|big
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|small
argument_list|,
name|ScanPlan
operator|.
name|getComparedMarker
argument_list|(
name|big
argument_list|,
name|small
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|small
argument_list|,
name|ScanPlan
operator|.
name|getComparedMarker
argument_list|(
name|small
argument_list|,
name|big
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test ScanPlan AND operation    */
annotation|@
name|Test
specifier|public
name|void
name|testScanPlanAnd
parameter_list|()
block|{
name|ScanPlan
name|l
init|=
operator|new
name|ScanPlan
argument_list|()
decl_stmt|;
name|ScanPlan
name|r
init|=
operator|new
name|ScanPlan
argument_list|()
decl_stmt|;
name|l
operator|.
name|setStartMarker
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|,
literal|"10"
argument_list|,
name|INCLUSIVE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setStartMarker
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|,
literal|"10"
argument_list|,
name|INCLUSIVE
argument_list|)
expr_stmt|;
name|ScanPlan
name|res
decl_stmt|;
comment|// both equal
name|res
operator|=
name|l
operator|.
name|and
argument_list|(
name|r
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|ScanMarker
argument_list|(
literal|"10"
argument_list|,
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
argument_list|,
name|res
operator|.
name|markers
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|startMarker
argument_list|)
expr_stmt|;
comment|// add equal end markers as well, and test AND again
name|l
operator|.
name|setEndMarker
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|,
literal|"20"
argument_list|,
name|INCLUSIVE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setEndMarker
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|,
literal|"20"
argument_list|,
name|INCLUSIVE
argument_list|)
expr_stmt|;
name|res
operator|=
name|l
operator|.
name|and
argument_list|(
name|r
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|ScanMarker
argument_list|(
literal|"10"
argument_list|,
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
argument_list|,
name|res
operator|.
name|markers
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|startMarker
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|new
name|ScanMarker
argument_list|(
literal|"20"
argument_list|,
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
argument_list|,
name|res
operator|.
name|markers
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|endMarker
argument_list|)
expr_stmt|;
name|l
operator|.
name|setStartMarker
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|,
literal|"10"
argument_list|,
operator|!
name|INCLUSIVE
argument_list|)
expr_stmt|;
name|l
operator|.
name|setEndMarker
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|,
literal|"20"
argument_list|,
name|INCLUSIVE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setStartMarker
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|,
literal|"10"
argument_list|,
name|INCLUSIVE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setEndMarker
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|,
literal|"15"
argument_list|,
name|INCLUSIVE
argument_list|)
expr_stmt|;
name|res
operator|=
name|l
operator|.
name|and
argument_list|(
name|r
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// start of l is greater, end of r is smaller
name|Assert
operator|.
name|assertEquals
argument_list|(
name|l
operator|.
name|markers
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|startMarker
argument_list|,
name|res
operator|.
name|markers
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|startMarker
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|r
operator|.
name|markers
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|endMarker
argument_list|,
name|res
operator|.
name|markers
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|endMarker
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test ScanPlan OR operation    */
annotation|@
name|Test
specifier|public
name|void
name|testScanPlanOr
parameter_list|()
block|{
name|ScanPlan
name|l
init|=
operator|new
name|ScanPlan
argument_list|()
decl_stmt|;
name|ScanPlan
name|r
init|=
operator|new
name|ScanPlan
argument_list|()
decl_stmt|;
name|l
operator|.
name|setStartMarker
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|,
literal|"1"
argument_list|,
name|INCLUSIVE
argument_list|)
expr_stmt|;
name|r
operator|.
name|setStartMarker
argument_list|(
literal|"a"
argument_list|,
literal|"int"
argument_list|,
literal|"11"
argument_list|,
name|INCLUSIVE
argument_list|)
expr_stmt|;
name|FilterPlan
name|res1
init|=
name|l
operator|.
name|or
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|res1
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|res1
operator|.
name|getPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|markers
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|startMarker
operator|.
name|equals
argument_list|(
name|l
operator|.
name|markers
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|startMarker
argument_list|)
expr_stmt|;
name|res1
operator|.
name|getPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|markers
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|startMarker
operator|.
name|equals
argument_list|(
name|r
operator|.
name|markers
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
operator|.
name|startMarker
argument_list|)
expr_stmt|;
name|FilterPlan
name|res2
init|=
name|res1
operator|.
name|or
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|res2
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test MultiScanPlan OR    */
annotation|@
name|Test
specifier|public
name|void
name|testMultiScanPlanOr
parameter_list|()
block|{
name|MultiScanPlan
name|l
init|=
name|createMultiScanPlan
argument_list|(
operator|new
name|ScanPlan
argument_list|()
argument_list|)
decl_stmt|;
name|MultiScanPlan
name|r
init|=
name|createMultiScanPlan
argument_list|(
operator|new
name|ScanPlan
argument_list|()
argument_list|)
decl_stmt|;
comment|// verify OR of two multi plans with one plan each
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|or
argument_list|(
name|r
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify OR of multi plan with a single scanplan
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|or
argument_list|(
operator|new
name|ScanPlan
argument_list|()
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|new
name|ScanPlan
argument_list|()
operator|)
operator|.
name|or
argument_list|(
name|l
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify or of two multiplans with more than one scan plan
name|r
operator|=
name|createMultiScanPlan
argument_list|(
operator|new
name|ScanPlan
argument_list|()
argument_list|,
operator|new
name|ScanPlan
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|l
operator|.
name|or
argument_list|(
name|r
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|r
operator|.
name|or
argument_list|(
name|l
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|MultiScanPlan
name|createMultiScanPlan
parameter_list|(
name|ScanPlan
modifier|...
name|scanPlans
parameter_list|)
block|{
return|return
operator|new
name|MultiScanPlan
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|scanPlans
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Test MultiScanPlan AND    */
annotation|@
name|Test
specifier|public
name|void
name|testMultiScanPlanAnd
parameter_list|()
block|{
name|MultiScanPlan
name|l
init|=
name|createMultiScanPlan
argument_list|(
operator|new
name|ScanPlan
argument_list|()
argument_list|)
decl_stmt|;
name|MultiScanPlan
name|r
init|=
name|createMultiScanPlan
argument_list|(
operator|new
name|ScanPlan
argument_list|()
argument_list|)
decl_stmt|;
comment|// two MultiScanPlan with single scan plans should result in new FilterPlan
comment|// with just one scan
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|l
operator|.
name|and
argument_list|(
name|r
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// l has one ScanPlan, r has two. AND result should have two
name|r
operator|=
name|createMultiScanPlan
argument_list|(
operator|new
name|ScanPlan
argument_list|()
argument_list|,
operator|new
name|ScanPlan
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|l
operator|.
name|and
argument_list|(
name|r
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|r
operator|.
name|and
argument_list|(
name|l
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// l has 2 ScanPlans, r has 3. AND result should have 6
name|l
operator|=
name|createMultiScanPlan
argument_list|(
operator|new
name|ScanPlan
argument_list|()
argument_list|,
operator|new
name|ScanPlan
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
name|createMultiScanPlan
argument_list|(
operator|new
name|ScanPlan
argument_list|()
argument_list|,
operator|new
name|ScanPlan
argument_list|()
argument_list|,
operator|new
name|ScanPlan
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|l
operator|.
name|and
argument_list|(
name|r
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|r
operator|.
name|and
argument_list|(
name|l
argument_list|)
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test plan generation from LeafNode    *    * @throws MetaException    */
annotation|@
name|Test
specifier|public
name|void
name|testLeafNodePlan
parameter_list|()
throws|throws
name|MetaException
block|{
specifier|final
name|String
name|KEY
init|=
literal|"k1"
decl_stmt|;
specifier|final
name|String
name|VAL
init|=
literal|"v1"
decl_stmt|;
specifier|final
name|String
name|OTHERKEY
init|=
literal|"k2"
decl_stmt|;
name|LeafNode
name|l
init|=
operator|new
name|LeafNode
argument_list|()
decl_stmt|;
name|l
operator|.
name|keyName
operator|=
name|KEY
expr_stmt|;
name|l
operator|.
name|value
operator|=
name|VAL
expr_stmt|;
specifier|final
name|ScanMarker
name|DEFAULT_SCANMARKER
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|KEY
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|parts
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|OTHERKEY
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|operator
operator|=
name|Operator
operator|.
name|EQUALS
expr_stmt|;
name|verifyPlan
argument_list|(
name|l
argument_list|,
name|parts
argument_list|,
name|KEY
argument_list|,
operator|new
name|ScanMarker
argument_list|(
name|VAL
argument_list|,
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
argument_list|,
operator|new
name|ScanMarker
argument_list|(
name|VAL
argument_list|,
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|operator
operator|=
name|Operator
operator|.
name|GREATERTHAN
expr_stmt|;
name|verifyPlan
argument_list|(
name|l
argument_list|,
name|parts
argument_list|,
name|KEY
argument_list|,
operator|new
name|ScanMarker
argument_list|(
name|VAL
argument_list|,
operator|!
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
argument_list|,
name|DEFAULT_SCANMARKER
argument_list|)
expr_stmt|;
name|l
operator|.
name|operator
operator|=
name|Operator
operator|.
name|GREATERTHANOREQUALTO
expr_stmt|;
name|verifyPlan
argument_list|(
name|l
argument_list|,
name|parts
argument_list|,
name|KEY
argument_list|,
operator|new
name|ScanMarker
argument_list|(
name|VAL
argument_list|,
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
argument_list|,
name|DEFAULT_SCANMARKER
argument_list|)
expr_stmt|;
name|l
operator|.
name|operator
operator|=
name|Operator
operator|.
name|LESSTHAN
expr_stmt|;
name|verifyPlan
argument_list|(
name|l
argument_list|,
name|parts
argument_list|,
name|KEY
argument_list|,
name|DEFAULT_SCANMARKER
argument_list|,
operator|new
name|ScanMarker
argument_list|(
name|VAL
argument_list|,
operator|!
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|.
name|operator
operator|=
name|Operator
operator|.
name|LESSTHANOREQUALTO
expr_stmt|;
name|verifyPlan
argument_list|(
name|l
argument_list|,
name|parts
argument_list|,
name|KEY
argument_list|,
name|DEFAULT_SCANMARKER
argument_list|,
operator|new
name|ScanMarker
argument_list|(
name|VAL
argument_list|,
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
comment|// following leaf node plans should currently have true for 'has unsupported condition',
comment|// because of the condition is not on first key
name|l
operator|.
name|operator
operator|=
name|Operator
operator|.
name|EQUALS
expr_stmt|;
name|verifyPlan
argument_list|(
name|l
argument_list|,
name|parts
argument_list|,
name|OTHERKEY
argument_list|,
name|DEFAULT_SCANMARKER
argument_list|,
name|DEFAULT_SCANMARKER
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// if tree is null, it should return equivalent of full scan, and true
comment|// for 'has unsupported condition'
name|verifyPlan
argument_list|(
literal|null
argument_list|,
name|parts
argument_list|,
name|KEY
argument_list|,
name|DEFAULT_SCANMARKER
argument_list|,
name|DEFAULT_SCANMARKER
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyPlan
parameter_list|(
name|TreeNode
name|l
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|parts
parameter_list|,
name|String
name|keyName
parameter_list|,
name|ScanMarker
name|startMarker
parameter_list|,
name|ScanMarker
name|endMarker
parameter_list|)
throws|throws
name|MetaException
block|{
name|verifyPlan
argument_list|(
name|l
argument_list|,
name|parts
argument_list|,
name|keyName
argument_list|,
name|startMarker
argument_list|,
name|endMarker
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|verifyPlan
parameter_list|(
name|TreeNode
name|l
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|parts
parameter_list|,
name|String
name|keyName
parameter_list|,
name|ScanMarker
name|startMarker
parameter_list|,
name|ScanMarker
name|endMarker
parameter_list|,
name|boolean
name|hasUnsupportedCondition
parameter_list|)
throws|throws
name|MetaException
block|{
name|ExpressionTree
name|e
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|l
operator|!=
literal|null
condition|)
block|{
name|e
operator|=
operator|new
name|ExpressionTree
argument_list|()
expr_stmt|;
name|e
operator|.
name|setRootForTest
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
name|PlanResult
name|planRes
init|=
name|HBaseFilterPlanUtil
operator|.
name|getFilterPlan
argument_list|(
name|e
argument_list|,
name|parts
argument_list|)
decl_stmt|;
name|FilterPlan
name|plan
init|=
name|planRes
operator|.
name|plan
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Has unsupported condition"
argument_list|,
name|hasUnsupportedCondition
argument_list|,
name|planRes
operator|.
name|hasUnsupportedCondition
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ScanPlan
name|splan
init|=
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|startMarker
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|startMarker
argument_list|,
name|splan
operator|.
name|markers
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|.
name|startMarker
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|splan
operator|.
name|markers
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|==
literal|null
operator|||
name|splan
operator|.
name|markers
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|.
name|startMarker
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endMarker
operator|!=
literal|null
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|endMarker
argument_list|,
name|splan
operator|.
name|markers
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|.
name|endMarker
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|splan
operator|.
name|markers
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|==
literal|null
operator|||
name|splan
operator|.
name|markers
operator|.
name|get
argument_list|(
name|keyName
argument_list|)
operator|.
name|endMarker
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Test plan generation from TreeNode    *    * @throws MetaException    */
annotation|@
name|Test
specifier|public
name|void
name|testTreeNodePlan
parameter_list|()
throws|throws
name|MetaException
block|{
specifier|final
name|String
name|KEY
init|=
literal|"k1"
decl_stmt|;
specifier|final
name|String
name|VAL1
init|=
literal|"10"
decl_stmt|;
specifier|final
name|String
name|VAL2
init|=
literal|"11"
decl_stmt|;
name|LeafNode
name|l
init|=
operator|new
name|LeafNode
argument_list|()
decl_stmt|;
name|l
operator|.
name|keyName
operator|=
name|KEY
expr_stmt|;
name|l
operator|.
name|value
operator|=
name|VAL1
expr_stmt|;
specifier|final
name|ScanMarker
name|DEFAULT_SCANMARKER
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"k1"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|LeafNode
name|r
init|=
operator|new
name|LeafNode
argument_list|()
decl_stmt|;
name|r
operator|.
name|keyName
operator|=
name|KEY
expr_stmt|;
name|r
operator|.
name|value
operator|=
name|VAL2
expr_stmt|;
name|TreeNode
name|tn
init|=
operator|new
name|TreeNode
argument_list|(
name|l
argument_list|,
name|LogicalOperator
operator|.
name|AND
argument_list|,
name|r
argument_list|)
decl_stmt|;
comment|// verify plan for - k1>= '10' and k1< '11'
name|l
operator|.
name|operator
operator|=
name|Operator
operator|.
name|GREATERTHANOREQUALTO
expr_stmt|;
name|r
operator|.
name|operator
operator|=
name|Operator
operator|.
name|LESSTHAN
expr_stmt|;
name|verifyPlan
argument_list|(
name|tn
argument_list|,
name|parts
argument_list|,
name|KEY
argument_list|,
operator|new
name|ScanMarker
argument_list|(
name|VAL1
argument_list|,
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
argument_list|,
operator|new
name|ScanMarker
argument_list|(
name|VAL2
argument_list|,
operator|!
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
argument_list|)
expr_stmt|;
comment|// verify plan for - k1>= '10' and k1> '11'
name|l
operator|.
name|operator
operator|=
name|Operator
operator|.
name|GREATERTHANOREQUALTO
expr_stmt|;
name|r
operator|.
name|operator
operator|=
name|Operator
operator|.
name|GREATERTHAN
expr_stmt|;
name|verifyPlan
argument_list|(
name|tn
argument_list|,
name|parts
argument_list|,
name|KEY
argument_list|,
operator|new
name|ScanMarker
argument_list|(
name|VAL2
argument_list|,
operator|!
name|INCLUSIVE
argument_list|,
literal|"int"
argument_list|)
argument_list|,
name|DEFAULT_SCANMARKER
argument_list|)
expr_stmt|;
comment|// verify plan for - k1>= '10' or k1> '11'
name|tn
operator|=
operator|new
name|TreeNode
argument_list|(
name|l
argument_list|,
name|LogicalOperator
operator|.
name|OR
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|ExpressionTree
name|e
init|=
operator|new
name|ExpressionTree
argument_list|()
decl_stmt|;
name|e
operator|.
name|setRootForTest
argument_list|(
name|tn
argument_list|)
expr_stmt|;
name|PlanResult
name|planRes
init|=
name|HBaseFilterPlanUtil
operator|.
name|getFilterPlan
argument_list|(
name|e
argument_list|,
name|parts
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|planRes
operator|.
name|hasUnsupportedCondition
argument_list|)
expr_stmt|;
comment|// verify plan for - k1>= '10' and (k1>= '10' or k1> '11')
name|TreeNode
name|tn2
init|=
operator|new
name|TreeNode
argument_list|(
name|l
argument_list|,
name|LogicalOperator
operator|.
name|AND
argument_list|,
name|tn
argument_list|)
decl_stmt|;
name|e
operator|=
operator|new
name|ExpressionTree
argument_list|()
expr_stmt|;
name|e
operator|.
name|setRootForTest
argument_list|(
name|tn2
argument_list|)
expr_stmt|;
name|planRes
operator|=
name|HBaseFilterPlanUtil
operator|.
name|getFilterPlan
argument_list|(
name|e
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|planRes
operator|.
name|hasUnsupportedCondition
argument_list|)
expr_stmt|;
comment|// verify plan for  (k1>= '10' and (k1>= '10' or k1> '11')) or k1 LIKE '2'
comment|// plan should return true for hasUnsupportedCondition
name|LeafNode
name|klike
init|=
operator|new
name|LeafNode
argument_list|()
decl_stmt|;
name|klike
operator|.
name|keyName
operator|=
name|KEY
expr_stmt|;
name|klike
operator|.
name|value
operator|=
name|VAL1
expr_stmt|;
name|klike
operator|.
name|operator
operator|=
name|Operator
operator|.
name|LIKE
expr_stmt|;
name|TreeNode
name|tn3
init|=
operator|new
name|TreeNode
argument_list|(
name|tn2
argument_list|,
name|LogicalOperator
operator|.
name|OR
argument_list|,
name|klike
argument_list|)
decl_stmt|;
name|e
operator|=
operator|new
name|ExpressionTree
argument_list|()
expr_stmt|;
name|e
operator|.
name|setRootForTest
argument_list|(
name|tn3
argument_list|)
expr_stmt|;
name|planRes
operator|=
name|HBaseFilterPlanUtil
operator|.
name|getFilterPlan
argument_list|(
name|e
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|false
argument_list|,
name|planRes
operator|.
name|hasUnsupportedCondition
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionKeyScannerAllString
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"year"
argument_list|,
literal|"string"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|parts
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"month"
argument_list|,
literal|"string"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|parts
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"state"
argument_list|,
literal|"string"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// One prefix key and one minor key range
name|ExpressionTree
name|exprTree
init|=
name|PartFilterExprUtil
operator|.
name|getFilterParser
argument_list|(
literal|"year = 2015 and state = 'CA'"
argument_list|)
operator|.
name|tree
decl_stmt|;
name|PlanResult
name|planRes
init|=
name|HBaseFilterPlanUtil
operator|.
name|getFilterPlan
argument_list|(
name|exprTree
argument_list|,
name|parts
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ScanPlan
name|sp
init|=
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|startRowSuffix
init|=
name|sp
operator|.
name|getStartRowSuffix
argument_list|(
literal|"testdb"
argument_list|,
literal|"testtb"
argument_list|,
name|parts
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endRowSuffix
init|=
name|sp
operator|.
name|getEndRowSuffix
argument_list|(
literal|"testdb"
argument_list|,
literal|"testtb"
argument_list|,
name|parts
argument_list|)
decl_stmt|;
name|RowFilter
name|filter
init|=
operator|(
name|RowFilter
operator|)
name|sp
operator|.
name|getFilter
argument_list|(
name|parts
argument_list|)
decl_stmt|;
comment|// scan range contains the major key year, rowfilter contains minor key state
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|startRowSuffix
argument_list|,
literal|"2015"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|endRowSuffix
argument_list|,
literal|"2015"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|startRowSuffix
argument_list|,
literal|"CA"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|endRowSuffix
argument_list|,
literal|"CA"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionKeyComparator
name|comparator
init|=
operator|(
name|PartitionKeyComparator
operator|)
name|filter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|comparator
operator|.
name|ranges
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|comparator
operator|.
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|keyName
argument_list|,
literal|"state"
argument_list|)
expr_stmt|;
comment|// Two prefix key and one LIKE operator
name|exprTree
operator|=
name|PartFilterExprUtil
operator|.
name|getFilterParser
argument_list|(
literal|"year = 2015 and month> 10 "
operator|+
literal|"and month<= 11 and state like 'C%'"
argument_list|)
operator|.
name|tree
expr_stmt|;
name|planRes
operator|=
name|HBaseFilterPlanUtil
operator|.
name|getFilterPlan
argument_list|(
name|exprTree
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sp
operator|=
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|startRowSuffix
operator|=
name|sp
operator|.
name|getStartRowSuffix
argument_list|(
literal|"testdb"
argument_list|,
literal|"testtb"
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|endRowSuffix
operator|=
name|sp
operator|.
name|getEndRowSuffix
argument_list|(
literal|"testdb"
argument_list|,
literal|"testtb"
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|(
name|RowFilter
operator|)
name|sp
operator|.
name|getFilter
argument_list|(
name|parts
argument_list|)
expr_stmt|;
comment|// scan range contains the major key value year/month, rowfilter contains LIKE operator
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|startRowSuffix
argument_list|,
literal|"2015"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|endRowSuffix
argument_list|,
literal|"2015"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|startRowSuffix
argument_list|,
literal|"10"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|endRowSuffix
argument_list|,
literal|"11"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|comparator
operator|=
operator|(
name|PartitionKeyComparator
operator|)
name|filter
operator|.
name|getComparator
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|comparator
operator|.
name|ops
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|comparator
operator|.
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|keyName
argument_list|,
literal|"state"
argument_list|)
expr_stmt|;
comment|// One prefix key, one minor key range and one LIKE operator
name|exprTree
operator|=
name|PartFilterExprUtil
operator|.
name|getFilterParser
argument_list|(
literal|"year>= 2014 and month> 10 "
operator|+
literal|"and month<= 11 and state like 'C%'"
argument_list|)
operator|.
name|tree
expr_stmt|;
name|planRes
operator|=
name|HBaseFilterPlanUtil
operator|.
name|getFilterPlan
argument_list|(
name|exprTree
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sp
operator|=
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|startRowSuffix
operator|=
name|sp
operator|.
name|getStartRowSuffix
argument_list|(
literal|"testdb"
argument_list|,
literal|"testtb"
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|endRowSuffix
operator|=
name|sp
operator|.
name|getEndRowSuffix
argument_list|(
literal|"testdb"
argument_list|,
literal|"testtb"
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|(
name|RowFilter
operator|)
name|sp
operator|.
name|getFilter
argument_list|(
name|parts
argument_list|)
expr_stmt|;
comment|// scan range contains the major key value year (low bound), rowfilter contains minor key state
comment|// and LIKE operator
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|startRowSuffix
argument_list|,
literal|"2014"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|comparator
operator|=
operator|(
name|PartitionKeyComparator
operator|)
name|filter
operator|.
name|getComparator
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|comparator
operator|.
name|ranges
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|comparator
operator|.
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|keyName
argument_list|,
literal|"month"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|comparator
operator|.
name|ops
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|comparator
operator|.
name|ops
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|keyName
argument_list|,
literal|"state"
argument_list|)
expr_stmt|;
comment|// Condition contains or
name|exprTree
operator|=
name|PartFilterExprUtil
operator|.
name|getFilterParser
argument_list|(
literal|"year = 2014 and (month> 10 "
operator|+
literal|"or month< 3)"
argument_list|)
operator|.
name|tree
expr_stmt|;
name|planRes
operator|=
name|HBaseFilterPlanUtil
operator|.
name|getFilterPlan
argument_list|(
name|exprTree
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|sp
operator|=
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|startRowSuffix
operator|=
name|sp
operator|.
name|getStartRowSuffix
argument_list|(
literal|"testdb"
argument_list|,
literal|"testtb"
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|endRowSuffix
operator|=
name|sp
operator|.
name|getEndRowSuffix
argument_list|(
literal|"testdb"
argument_list|,
literal|"testtb"
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|(
name|RowFilter
operator|)
name|sp
operator|.
name|getFilter
argument_list|(
name|parts
argument_list|)
expr_stmt|;
comment|// The first ScanPlan contains year = 2014 and month> 10
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|startRowSuffix
argument_list|,
literal|"2014"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|endRowSuffix
argument_list|,
literal|"2014"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|startRowSuffix
argument_list|,
literal|"10"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sp
operator|=
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|startRowSuffix
operator|=
name|sp
operator|.
name|getStartRowSuffix
argument_list|(
literal|"testdb"
argument_list|,
literal|"testtb"
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|endRowSuffix
operator|=
name|sp
operator|.
name|getEndRowSuffix
argument_list|(
literal|"testdb"
argument_list|,
literal|"testtb"
argument_list|,
name|parts
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|(
name|RowFilter
operator|)
name|sp
operator|.
name|getFilter
argument_list|(
name|parts
argument_list|)
expr_stmt|;
comment|// The first ScanPlan contains year = 2014 and month< 3
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|startRowSuffix
argument_list|,
literal|"2014"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|endRowSuffix
argument_list|,
literal|"2014"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|endRowSuffix
argument_list|,
literal|"3"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionKeyScannerMixedType
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"year"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|parts
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"month"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|parts
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"state"
argument_list|,
literal|"string"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// One prefix key and one minor key range
name|ExpressionTree
name|exprTree
init|=
name|PartFilterExprUtil
operator|.
name|getFilterParser
argument_list|(
literal|"year = 2015 and state = 'CA'"
argument_list|)
operator|.
name|tree
decl_stmt|;
name|PlanResult
name|planRes
init|=
name|HBaseFilterPlanUtil
operator|.
name|getFilterPlan
argument_list|(
name|exprTree
argument_list|,
name|parts
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|ScanPlan
name|sp
init|=
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|byte
index|[]
name|startRowSuffix
init|=
name|sp
operator|.
name|getStartRowSuffix
argument_list|(
literal|"testdb"
argument_list|,
literal|"testtb"
argument_list|,
name|parts
argument_list|)
decl_stmt|;
name|byte
index|[]
name|endRowSuffix
init|=
name|sp
operator|.
name|getEndRowSuffix
argument_list|(
literal|"testdb"
argument_list|,
literal|"testtb"
argument_list|,
name|parts
argument_list|)
decl_stmt|;
name|RowFilter
name|filter
init|=
operator|(
name|RowFilter
operator|)
name|sp
operator|.
name|getFilter
argument_list|(
name|parts
argument_list|)
decl_stmt|;
comment|// scan range contains the major key year, rowfilter contains minor key state
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|startRowSuffix
argument_list|,
name|Shorts
operator|.
name|toByteArray
argument_list|(
operator|(
name|short
operator|)
literal|2015
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|Bytes
operator|.
name|contains
argument_list|(
name|endRowSuffix
argument_list|,
name|Shorts
operator|.
name|toByteArray
argument_list|(
operator|(
name|short
operator|)
literal|2016
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PartitionKeyComparator
name|comparator
init|=
operator|(
name|PartitionKeyComparator
operator|)
name|filter
operator|.
name|getComparator
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|comparator
operator|.
name|ranges
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|comparator
operator|.
name|ranges
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|keyName
argument_list|,
literal|"state"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

