begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *<p>  * http://www.apache.org/licenses/LICENSE-2.0  *<p>  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CurrentNotificationEventId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FileMetadataExprType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|conf
operator|.
name|MetastoreConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|EventMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MNotificationLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MNotificationNextId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BrokenBarrierException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CyclicBarrier
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TestOldSchema
operator|.
name|dropAllStoreObjects
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|// Tests from TestObjectStore that can't be moved yet due to references to EventMessage.  Once
end_comment

begin_comment
comment|// EventMessage has been moved this should be recombined with TestObjectStore.
end_comment

begin_class
specifier|public
class|class
name|TestObjectStore2
block|{
specifier|private
name|ObjectStore
name|objectStore
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
class|class
name|MockPartitionExpressionProxy
implements|implements
name|PartitionExpressionProxy
block|{
annotation|@
name|Override
specifier|public
name|String
name|convertExprToFilter
parameter_list|(
name|byte
index|[]
name|expr
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterPartitionsByExpr
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partColumns
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileMetadataExprType
name|getMetadataType
parameter_list|(
name|String
name|inputFormat
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|SearchArgument
name|createSarg
parameter_list|(
name|byte
index|[]
name|expr
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileFormatProxy
name|getFileFormatProxy
parameter_list|(
name|FileMetadataExprType
name|type
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EXPRESSION_PROXY_CLASS
argument_list|,
name|MockPartitionExpressionProxy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|=
operator|new
name|ObjectStore
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|dropAllStoreObjects
argument_list|(
name|objectStore
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test notification operations    */
comment|// TODO MS-SPLIT uncomment once we move EventMessage over
annotation|@
name|Test
specifier|public
name|void
name|testNotificationOps
parameter_list|()
throws|throws
name|InterruptedException
block|{
specifier|final
name|int
name|NO_EVENT_ID
init|=
literal|0
decl_stmt|;
specifier|final
name|int
name|FIRST_EVENT_ID
init|=
literal|1
decl_stmt|;
specifier|final
name|int
name|SECOND_EVENT_ID
init|=
literal|2
decl_stmt|;
name|NotificationEvent
name|event
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|EventMessage
operator|.
name|EventType
operator|.
name|CREATE_DATABASE
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|NotificationEventResponse
name|eventResponse
decl_stmt|;
name|CurrentNotificationEventId
name|eventId
decl_stmt|;
comment|// Verify that there is no notifications available yet
name|eventId
operator|=
name|objectStore
operator|.
name|getCurrentNotificationEventId
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|NO_EVENT_ID
argument_list|,
name|eventId
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that addNotificationEvent() updates the NotificationEvent with the new event ID
name|objectStore
operator|.
name|addNotificationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FIRST_EVENT_ID
argument_list|,
name|event
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|addNotificationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SECOND_EVENT_ID
argument_list|,
name|event
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that objectStore fetches the latest notification event ID
name|eventId
operator|=
name|objectStore
operator|.
name|getCurrentNotificationEventId
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|SECOND_EVENT_ID
argument_list|,
name|eventId
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that getNextNotification() returns all events
name|eventResponse
operator|=
name|objectStore
operator|.
name|getNextNotification
argument_list|(
operator|new
name|NotificationEventRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|eventResponse
operator|.
name|getEventsSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|FIRST_EVENT_ID
argument_list|,
name|eventResponse
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SECOND_EVENT_ID
argument_list|,
name|eventResponse
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that getNextNotification(last) returns events after a specified event
name|eventResponse
operator|=
name|objectStore
operator|.
name|getNextNotification
argument_list|(
operator|new
name|NotificationEventRequest
argument_list|(
name|FIRST_EVENT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|eventResponse
operator|.
name|getEventsSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|SECOND_EVENT_ID
argument_list|,
name|eventResponse
operator|.
name|getEvents
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that getNextNotification(last) returns zero events if there are no more notifications available
name|eventResponse
operator|=
name|objectStore
operator|.
name|getNextNotification
argument_list|(
operator|new
name|NotificationEventRequest
argument_list|(
name|SECOND_EVENT_ID
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|eventResponse
operator|.
name|getEventsSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Verify that cleanNotificationEvents() cleans up all old notifications
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|cleanNotificationEvents
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|eventResponse
operator|=
name|objectStore
operator|.
name|getNextNotification
argument_list|(
operator|new
name|NotificationEventRequest
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|eventResponse
operator|.
name|getEventsSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"This test is here to allow testing with other databases like mysql / postgres etc\n"
operator|+
literal|" with  user changes to the code. This cannot be run on apache derby because of\n"
operator|+
literal|" https://db.apache.org/derby/docs/10.10/devguide/cdevconcepts842385.html"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|testConcurrentAddNotifications
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|int
name|NUM_THREADS
init|=
literal|10
decl_stmt|;
name|CyclicBarrier
name|cyclicBarrier
init|=
operator|new
name|CyclicBarrier
argument_list|(
name|NUM_THREADS
argument_list|,
parameter_list|()
lambda|->
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"test"
argument_list|)
operator|.
name|debug
argument_list|(
name|NUM_THREADS
operator|+
literal|" threads going to add notification"
argument_list|)
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|MetastoreConf
operator|.
name|newMetastoreConf
argument_list|()
decl_stmt|;
name|MetastoreConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|MetastoreConf
operator|.
name|ConfVars
operator|.
name|EXPRESSION_PROXY_CLASS
argument_list|,
name|MockPartitionExpressionProxy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|/*        Below are the properties that need to be set based on what database this test is going to be run      */
comment|//    conf.setVar(HiveConf.ConfVars.METASTORE_CONNECTION_DRIVER, "com.mysql.jdbc.Driver");
comment|//    conf.setVar(HiveConf.ConfVars.METASTORECONNECTURLKEY,
comment|//        "jdbc:mysql://localhost:3306/metastore_db");
comment|//    conf.setVar(HiveConf.ConfVars.METASTORE_CONNECTION_USER_NAME, "");
comment|//    conf.setVar(HiveConf.ConfVars.METASTOREPWD, "");
comment|/*      we have to  add this one manually as for tests the db is initialized via the metastoreDiretSQL      and we don't run the schema creation sql that includes the an insert for notification_sequence      which can be locked. the entry in notification_sequence happens via notification_event insertion.     */
name|objectStore
operator|.
name|getPersistenceManager
argument_list|()
operator|.
name|newQuery
argument_list|(
name|MNotificationLog
operator|.
name|class
argument_list|,
literal|"eventType==''"
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|getPersistenceManager
argument_list|()
operator|.
name|newQuery
argument_list|(
name|MNotificationNextId
operator|.
name|class
argument_list|,
literal|"nextEventId==-1"
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|addNotificationEvent
argument_list|(
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|EventMessage
operator|.
name|EventType
operator|.
name|CREATE_DATABASE
operator|.
name|toString
argument_list|()
argument_list|,
literal|"CREATE DATABASE DB initial"
argument_list|)
argument_list|)
expr_stmt|;
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|NUM_THREADS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_THREADS
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|n
init|=
name|i
decl_stmt|;
name|executorService
operator|.
name|execute
argument_list|(
parameter_list|()
lambda|->
block|{
name|ObjectStore
name|store
init|=
operator|new
name|ObjectStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|String
name|eventType
init|=
name|EventMessage
operator|.
name|EventType
operator|.
name|CREATE_DATABASE
operator|.
name|toString
argument_list|()
decl_stmt|;
name|NotificationEvent
name|dbEvent
init|=
operator|new
name|NotificationEvent
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|eventType
argument_list|,
literal|"CREATE DATABASE DB"
operator|+
name|n
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ADDING NOTIFICATION"
argument_list|)
expr_stmt|;
try|try
block|{
name|cyclicBarrier
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
decl||
name|BrokenBarrierException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|store
operator|.
name|addNotificationEvent
argument_list|(
name|dbEvent
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"FINISH NOTIFICATION"
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|15
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
comment|// we have to setup this again as the underlying PMF keeps getting reinitialized with original
comment|// reference closed
name|ObjectStore
name|store
init|=
operator|new
name|ObjectStore
argument_list|()
decl_stmt|;
name|store
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|NotificationEventResponse
name|eventResponse
init|=
name|store
operator|.
name|getNextNotification
argument_list|(
operator|new
name|NotificationEventRequest
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NUM_THREADS
operator|+
literal|1
argument_list|,
name|eventResponse
operator|.
name|getEventsSize
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|previousId
init|=
literal|0
decl_stmt|;
for|for
control|(
name|NotificationEvent
name|event
range|:
name|eventResponse
operator|.
name|getEvents
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"previous:"
operator|+
name|previousId
operator|+
literal|" current:"
operator|+
name|event
operator|.
name|getEventId
argument_list|()
argument_list|,
name|previousId
operator|<
name|event
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|previousId
operator|+
literal|1
operator|==
name|event
operator|.
name|getEventId
argument_list|()
argument_list|)
expr_stmt|;
name|previousId
operator|=
name|event
operator|.
name|getEventId
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

