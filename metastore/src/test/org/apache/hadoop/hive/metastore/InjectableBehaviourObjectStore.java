begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * A wrapper around {@link ObjectStore} that allows us to inject custom behaviour  * on to some of the methods for testing.  */
end_comment

begin_class
specifier|public
class|class
name|InjectableBehaviourObjectStore
extends|extends
name|ObjectStore
block|{
specifier|public
name|InjectableBehaviourObjectStore
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/**    * A utility class that allows people injecting behaviour to determine if their injections occurred.    */
specifier|public
specifier|static
specifier|abstract
class|class
name|BehaviourInjection
parameter_list|<
name|T
parameter_list|,
name|F
parameter_list|>
implements|implements
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
argument_list|<
name|T
argument_list|,
name|F
argument_list|>
block|{
specifier|protected
name|boolean
name|injectionPathCalled
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|nonInjectedPathCalled
init|=
literal|false
decl_stmt|;
specifier|public
name|void
name|assertInjectionsPerformed
parameter_list|(
name|boolean
name|expectedInjectionCalled
parameter_list|,
name|boolean
name|expectedNonInjectedPathCalled
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectedInjectionCalled
argument_list|,
name|injectionPathCalled
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNonInjectedPathCalled
argument_list|,
name|nonInjectedPathCalled
argument_list|)
expr_stmt|;
block|}
block|}
empty_stmt|;
specifier|private
specifier|static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
argument_list|<
name|Table
argument_list|,
name|Table
argument_list|>
name|getTableModifier
init|=
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Functions
operator|.
name|identity
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|setGetTableBehaviour
parameter_list|(
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
argument_list|<
name|Table
argument_list|,
name|Table
argument_list|>
name|modifier
parameter_list|)
block|{
name|getTableModifier
operator|=
operator|(
name|modifier
operator|==
literal|null
operator|)
condition|?
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Functions
operator|.
name|identity
argument_list|()
else|:
name|modifier
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|resetGetTableBehaviour
parameter_list|()
block|{
name|setGetTableBehaviour
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
argument_list|<
name|Table
argument_list|,
name|Table
argument_list|>
name|getGetTableBehaviour
parameter_list|()
block|{
return|return
name|getTableModifier
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|getTableModifier
operator|.
name|apply
argument_list|(
name|super
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

