begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|ResultSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Tests for TxnUtils  */
end_comment

begin_class
specifier|public
class|class
name|TestTxnUtils
block|{
specifier|private
name|HiveConf
name|conf
decl_stmt|;
specifier|public
name|TestTxnUtils
parameter_list|()
throws|throws
name|Exception
block|{   }
annotation|@
name|Test
specifier|public
name|void
name|testBuildQueryWithINClause
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|queries
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|StringBuilder
name|prefix
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|suffix
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
comment|// Note, this is a "real" query that depends on one of the metastore tables
name|prefix
operator|.
name|append
argument_list|(
literal|"select count(*) from TXNS where "
argument_list|)
expr_stmt|;
name|suffix
operator|.
name|append
argument_list|(
literal|" and TXN_STATE = 'o'"
argument_list|)
expr_stmt|;
comment|// Case 1 - Max in list members: 10; Max query string length: 1KB
comment|//          The first query happens to have 2 full batches.
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_DIRECT_SQL_MAX_QUERY_LENGTH
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_DIRECT_SQL_MAX_ELEMENTS_IN_CLAUSE
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|inList
init|=
operator|new
name|ArrayList
argument_list|<
name|Long
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|200
condition|;
name|i
operator|++
control|)
block|{
name|inList
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|TxnUtils
operator|.
name|buildQueryWithINClause
argument_list|(
name|conf
argument_list|,
name|queries
argument_list|,
name|prefix
argument_list|,
name|suffix
argument_list|,
name|inList
argument_list|,
literal|"TXN_ID"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|queries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|runAgainstDerby
argument_list|(
name|queries
argument_list|)
expr_stmt|;
comment|// Case 2 - Max in list members: 10; Max query string length: 1KB
comment|//          The first query has 2 full batches, and the second query only has 1 batch which only contains 1 member
name|queries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|inList
operator|.
name|add
argument_list|(
operator|(
name|long
operator|)
literal|201
argument_list|)
expr_stmt|;
name|TxnUtils
operator|.
name|buildQueryWithINClause
argument_list|(
name|conf
argument_list|,
name|queries
argument_list|,
name|prefix
argument_list|,
name|suffix
argument_list|,
name|inList
argument_list|,
literal|"TXN_ID"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|queries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|runAgainstDerby
argument_list|(
name|queries
argument_list|)
expr_stmt|;
comment|// Case 3 - Max in list members: 1000; Max query string length: 5KB
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_DIRECT_SQL_MAX_QUERY_LENGTH
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_DIRECT_SQL_MAX_ELEMENTS_IN_CLAUSE
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|queries
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|202
init|;
name|i
operator|<=
literal|4321
condition|;
name|i
operator|++
control|)
block|{
name|inList
operator|.
name|add
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|TxnUtils
operator|.
name|buildQueryWithINClause
argument_list|(
name|conf
argument_list|,
name|queries
argument_list|,
name|prefix
argument_list|,
name|suffix
argument_list|,
name|inList
argument_list|,
literal|"TXN_ID"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|runAgainstDerby
argument_list|(
name|queries
argument_list|)
expr_stmt|;
comment|// Case 4 - NOT IN list
name|queries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|TxnUtils
operator|.
name|buildQueryWithINClause
argument_list|(
name|conf
argument_list|,
name|queries
argument_list|,
name|prefix
argument_list|,
name|suffix
argument_list|,
name|inList
argument_list|,
literal|"TXN_ID"
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|runAgainstDerby
argument_list|(
name|queries
argument_list|)
expr_stmt|;
comment|// Case 5 - No parenthesis
name|queries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|suffix
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|suffix
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|TxnUtils
operator|.
name|buildQueryWithINClause
argument_list|(
name|conf
argument_list|,
name|queries
argument_list|,
name|prefix
argument_list|,
name|suffix
argument_list|,
name|inList
argument_list|,
literal|"TXN_ID"
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|queries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|runAgainstDerby
argument_list|(
name|queries
argument_list|)
expr_stmt|;
block|}
comment|/** Verify queries can run against Derby DB.    *  As long as Derby doesn't complain, we assume the query is syntactically/semantically correct.    */
specifier|private
name|void
name|runAgainstDerby
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|queries
parameter_list|)
throws|throws
name|Exception
block|{
name|Connection
name|conn
init|=
literal|null
decl_stmt|;
name|Statement
name|stmt
init|=
literal|null
decl_stmt|;
name|ResultSet
name|rs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|conn
operator|=
name|TxnDbUtil
operator|.
name|getConnection
argument_list|()
expr_stmt|;
name|stmt
operator|=
name|conn
operator|.
name|createStatement
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|query
range|:
name|queries
control|)
block|{
name|rs
operator|=
name|stmt
operator|.
name|executeQuery
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"The query is not valid"
argument_list|,
name|rs
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|TxnDbUtil
operator|.
name|closeResources
argument_list|(
name|conn
argument_list|,
name|stmt
argument_list|,
name|rs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|tearDown
argument_list|()
expr_stmt|;
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|TxnDbUtil
operator|.
name|prepDb
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

