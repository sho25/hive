begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|utils
operator|.
name|BitVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestBitVector
block|{
specifier|static
name|int
name|BIT_VECTOR_SIZE
init|=
literal|32
decl_stmt|;
name|BitVector
name|bitVector
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
block|{   }
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
block|{   }
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
comment|// Create a new BitVector
name|bitVector
operator|=
operator|new
name|BitVector
argument_list|(
name|BIT_VECTOR_SIZE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{   }
annotation|@
name|Test
specifier|public
name|void
name|testSetAll
parameter_list|()
block|{
comment|// Set bits
name|bitVector
operator|.
name|setAll
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"11111111111111111111111111111111"
argument_list|,
name|bitVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testClearAll
parameter_list|()
block|{
comment|// Clear all bits
name|bitVector
operator|.
name|clearAll
argument_list|()
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"00000000000000000000000000000000"
argument_list|,
name|bitVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetUnsetBit
parameter_list|()
block|{
comment|// Set 3rd bit
name|bitVector
operator|.
name|setBit
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"00100000000000000000000000000000"
argument_list|,
name|bitVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now check if 3rd bit is set
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bitVector
operator|.
name|isBitSet
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now set 30th bit
name|bitVector
operator|.
name|setBit
argument_list|(
literal|29
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"00100000000000000000000000000100"
argument_list|,
name|bitVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now check if 30th bit is set
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bitVector
operator|.
name|isBitSet
argument_list|(
literal|29
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now unset 3rd bit
name|bitVector
operator|.
name|unSetBit
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"00000000000000000000000000000100"
argument_list|,
name|bitVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now check if 3rd bit is unset
name|Assert
operator|.
name|assertFalse
argument_list|(
name|bitVector
operator|.
name|isBitSet
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now unset 30th bit
name|bitVector
operator|.
name|unSetBit
argument_list|(
literal|29
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"00000000000000000000000000000000"
argument_list|,
name|bitVector
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Now check if 30th bit is unset
name|Assert
operator|.
name|assertFalse
argument_list|(
name|bitVector
operator|.
name|isBitSet
argument_list|(
literal|29
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

