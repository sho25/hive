begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|AggregateStatsCache
operator|.
name|AggrColStatsCached
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|utils
operator|.
name|BloomFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestAggregateStatsCache
block|{
specifier|static
name|int
name|MAX_CACHE_NODES
init|=
literal|10
decl_stmt|;
specifier|static
name|int
name|MAX_PARTITIONS_PER_CACHE_NODE
init|=
literal|10
decl_stmt|;
specifier|static
name|String
name|TIME_TO_LIVE
init|=
literal|"20s"
decl_stmt|;
specifier|static
name|float
name|FALSE_POSITIVE_PROBABILITY
init|=
operator|(
name|float
operator|)
literal|0.01
decl_stmt|;
specifier|static
name|float
name|MAX_VARIANCE
init|=
operator|(
name|float
operator|)
literal|0.1
decl_stmt|;
specifier|static
name|AggregateStatsCache
name|cache
decl_stmt|;
specifier|static
name|String
name|dbName
init|=
literal|"db"
decl_stmt|;
specifier|static
name|String
name|tablePrefix
init|=
literal|"tab"
decl_stmt|;
specifier|static
name|String
name|partitionPrefix
init|=
literal|"part"
decl_stmt|;
specifier|static
name|String
name|columnPrefix
init|=
literal|"col"
decl_stmt|;
specifier|static
name|int
name|numTables
init|=
literal|2
decl_stmt|;
specifier|static
name|int
name|numPartitions
init|=
literal|20
decl_stmt|;
specifier|static
name|int
name|numColumns
init|=
literal|5
decl_stmt|;
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|tabParts
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|tabCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
block|{
comment|// All data intitializations
name|initializeTables
argument_list|()
expr_stmt|;
name|initializePartitions
argument_list|()
expr_stmt|;
name|initializeColumns
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|initializeTables
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numTables
condition|;
name|i
operator|++
control|)
block|{
comment|// tab1, tab2
name|tables
operator|.
name|add
argument_list|(
name|tablePrefix
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|initializePartitions
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numPartitions
condition|;
name|i
operator|++
control|)
block|{
comment|// part1 ... part20
name|tabParts
operator|.
name|add
argument_list|(
name|partitionPrefix
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|initializeColumns
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numColumns
condition|;
name|i
operator|++
control|)
block|{
comment|// part1 ... part20
name|tabCols
operator|.
name|add
argument_list|(
name|columnPrefix
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
block|{   }
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_HBASE_AGGREGATE_STATS_CACHE_SIZE
argument_list|,
name|MAX_CACHE_NODES
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_HBASE_AGGREGATE_STATS_CACHE_MAX_PARTITIONS
argument_list|,
name|MAX_PARTITIONS_PER_CACHE_NODE
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setFloatVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_HBASE_AGGREGATE_STATS_CACHE_FALSE_POSITIVE_PROBABILITY
argument_list|,
name|FALSE_POSITIVE_PROBABILITY
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setFloatVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_HBASE_AGGREGATE_STATS_CACHE_MAX_VARIANCE
argument_list|,
name|MAX_VARIANCE
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_HBASE_CACHE_TIME_TO_LIVE
argument_list|,
name|TIME_TO_LIVE
argument_list|)
expr_stmt|;
name|cache
operator|=
name|AggregateStatsCache
operator|.
name|getInstance
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{   }
annotation|@
name|Test
specifier|public
name|void
name|testBasicAddAndGet
parameter_list|()
block|{
comment|// Add a dummy aggregate stats object for parts 1-9 of tab1 for col1
name|int
name|minPart
init|=
literal|1
decl_stmt|;
name|int
name|maxPart
init|=
literal|9
decl_stmt|;
name|String
name|tblName
init|=
name|tables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|colName
init|=
name|tabCols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ColumnStatisticsObj
name|aggrColStats
init|=
name|getDummyLongColStat
argument_list|(
name|colName
argument_list|)
decl_stmt|;
comment|// Prepare the bloom filter
name|BloomFilter
name|bloomFilter
init|=
operator|new
name|BloomFilter
argument_list|(
name|MAX_PARTITIONS_PER_CACHE_NODE
argument_list|,
name|FALSE_POSITIVE_PROBABILITY
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|minPart
init|;
name|i
operator|<=
name|maxPart
condition|;
name|i
operator|++
control|)
block|{
name|String
name|partName
init|=
name|tabParts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|bloomFilter
operator|.
name|addToFilter
argument_list|(
name|partName
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now add to cache
name|cache
operator|.
name|add
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|maxPart
operator|-
name|minPart
operator|+
literal|1
argument_list|,
name|aggrColStats
argument_list|,
name|bloomFilter
argument_list|)
expr_stmt|;
comment|// Now get from cache
name|AggrColStatsCached
name|aggrStatsCached
init|=
name|cache
operator|.
name|get
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|partNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|aggrStatsCached
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|aggrColStatsCached
init|=
name|aggrStatsCached
operator|.
name|getColStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrColStats
argument_list|,
name|aggrColStatsCached
argument_list|)
expr_stmt|;
comment|// Now get a non-existant entry
name|aggrStatsCached
operator|=
name|cache
operator|.
name|get
argument_list|(
literal|"dbNotThere"
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|aggrStatsCached
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddGetWithVariance
parameter_list|()
block|{
comment|// Add a dummy aggregate stats object for parts 1-9 of tab1 for col1
name|int
name|minPart
init|=
literal|1
decl_stmt|;
name|int
name|maxPart
init|=
literal|9
decl_stmt|;
name|String
name|tblName
init|=
name|tables
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|String
name|colName
init|=
name|tabCols
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ColumnStatisticsObj
name|aggrColStats
init|=
name|getDummyLongColStat
argument_list|(
name|colName
argument_list|)
decl_stmt|;
comment|// Prepare the bloom filter
name|BloomFilter
name|bloomFilter
init|=
operator|new
name|BloomFilter
argument_list|(
name|MAX_PARTITIONS_PER_CACHE_NODE
argument_list|,
name|FALSE_POSITIVE_PROBABILITY
argument_list|)
decl_stmt|;
comment|// The paritions we'll eventually request from the cache
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|minPart
init|;
name|i
operator|<=
name|maxPart
condition|;
name|i
operator|++
control|)
block|{
name|String
name|partName
init|=
name|tabParts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// Only add 50% partitions to partnames so that we can see if the request fails
if|if
condition|(
name|i
operator|<
name|maxPart
operator|/
literal|2
condition|)
block|{
name|partNames
operator|.
name|add
argument_list|(
name|partName
argument_list|)
expr_stmt|;
block|}
name|bloomFilter
operator|.
name|addToFilter
argument_list|(
name|partName
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Now add to cache
name|cache
operator|.
name|add
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|maxPart
operator|-
name|minPart
operator|+
literal|1
argument_list|,
name|aggrColStats
argument_list|,
name|bloomFilter
argument_list|)
expr_stmt|;
comment|// Now get from cache
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|partNames
argument_list|)
expr_stmt|;
name|AggrColStatsCached
name|aggrStatsCached
init|=
name|cache
operator|.
name|get
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|,
name|partNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|aggrStatsCached
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiThreaded
parameter_list|()
block|{   }
specifier|private
name|ColumnStatisticsObj
name|getDummyLongColStat
parameter_list|(
name|String
name|colName
parameter_list|)
block|{
name|ColumnStatisticsObj
name|aggrColStats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|aggrColStats
operator|.
name|setColName
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|aggrColStats
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|LongColumnStatsData
name|longStatsData
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
comment|// Set some random values
name|int
name|highVal
init|=
literal|100
decl_stmt|;
name|int
name|lowVal
init|=
literal|10
decl_stmt|;
name|int
name|numDVs
init|=
literal|50
decl_stmt|;
name|int
name|numNulls
init|=
literal|5
decl_stmt|;
name|longStatsData
operator|.
name|setHighValue
argument_list|(
name|highVal
argument_list|)
expr_stmt|;
name|longStatsData
operator|.
name|setLowValue
argument_list|(
name|lowVal
argument_list|)
expr_stmt|;
name|longStatsData
operator|.
name|setNumDVs
argument_list|(
name|numDVs
argument_list|)
expr_stmt|;
name|longStatsData
operator|.
name|setNumNulls
argument_list|(
name|numNulls
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|aggrColStatsData
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|aggrColStatsData
operator|.
name|setLongStats
argument_list|(
name|longStatsData
argument_list|)
expr_stmt|;
name|aggrColStats
operator|.
name|setStatsData
argument_list|(
name|aggrColStatsData
argument_list|)
expr_stmt|;
return|return
name|aggrColStats
return|;
block|}
block|}
end_class

end_unit

