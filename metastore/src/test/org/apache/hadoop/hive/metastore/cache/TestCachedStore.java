begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ndv
operator|.
name|hll
operator|.
name|HyperLogLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ndv
operator|.
name|hll
operator|.
name|HyperLogLogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TestObjectStore
operator|.
name|MockPartitionExpressionProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StringColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestCachedStore
block|{
specifier|private
name|ObjectStore
name|objectStore
decl_stmt|;
specifier|private
name|CachedStore
name|cachedStore
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
operator|.
name|varname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_EXPRESSION_PROXY_CLASS
argument_list|,
name|MockPartitionExpressionProxy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|=
operator|new
name|ObjectStore
argument_list|()
expr_stmt|;
name|objectStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|cachedStore
operator|=
operator|new
name|CachedStore
argument_list|()
expr_stmt|;
name|cachedStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// Stop the CachedStore cache update service. We'll start it explicitly to control the test
name|cachedStore
operator|.
name|stopCacheUpdateService
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// Stop the CachedStore cache update service. We'll start it explicitly to control the test
name|cachedStore
operator|.
name|stopCacheUpdateService
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|getDatabaseCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|SharedCache
operator|.
name|getTableCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|SharedCache
operator|.
name|getPartitionCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|SharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|SharedCache
operator|.
name|getPartitionColStatsCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**********************************************************************************************    * Methods that test CachedStore    *********************************************************************************************/
annotation|@
name|Test
specifier|public
name|void
name|testDatabaseOps
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add a db via ObjectStore
name|String
name|dbName
init|=
literal|"testDatabaseOps"
decl_stmt|;
name|String
name|dbDescription
init|=
literal|"testDatabaseOps"
decl_stmt|;
name|String
name|dbLocation
init|=
literal|"file:/tmp"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|dbOwner
init|=
literal|"user1"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
name|dbDescription
argument_list|,
name|dbLocation
argument_list|,
name|dbParams
argument_list|)
decl_stmt|;
name|db
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|db
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
comment|// Prewarm CachedStore
name|cachedStore
operator|.
name|prewarm
argument_list|()
expr_stmt|;
comment|// Read database via CachedStore
name|Database
name|dbNew
init|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dbNew
argument_list|)
expr_stmt|;
comment|// Add another db via CachedStore
specifier|final
name|String
name|dbName1
init|=
literal|"testDatabaseOps1"
decl_stmt|;
specifier|final
name|String
name|dbDescription1
init|=
literal|"testDatabaseOps1"
decl_stmt|;
name|Database
name|db1
init|=
operator|new
name|Database
argument_list|(
name|dbName1
argument_list|,
name|dbDescription1
argument_list|,
name|dbLocation
argument_list|,
name|dbParams
argument_list|)
decl_stmt|;
name|db1
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|db1
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|createDatabase
argument_list|(
name|db1
argument_list|)
expr_stmt|;
name|db1
operator|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|dbName1
argument_list|)
expr_stmt|;
comment|// Read db via ObjectStore
name|dbNew
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|dbName1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db1
argument_list|,
name|dbNew
argument_list|)
expr_stmt|;
comment|// Alter the db via CachedStore (can only alter owner or parameters)
name|db
operator|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
name|dbDescription
argument_list|,
name|dbLocation
argument_list|,
name|dbParams
argument_list|)
expr_stmt|;
name|dbOwner
operator|=
literal|"user2"
expr_stmt|;
name|db
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|db
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|alterDatabase
argument_list|(
name|dbName
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
comment|// Read db via ObjectStore
name|dbNew
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dbNew
argument_list|)
expr_stmt|;
comment|// Add another db via ObjectStore
specifier|final
name|String
name|dbName2
init|=
literal|"testDatabaseOps2"
decl_stmt|;
specifier|final
name|String
name|dbDescription2
init|=
literal|"testDatabaseOps2"
decl_stmt|;
name|Database
name|db2
init|=
operator|new
name|Database
argument_list|(
name|dbName2
argument_list|,
name|dbDescription2
argument_list|,
name|dbLocation
argument_list|,
name|dbParams
argument_list|)
decl_stmt|;
name|db2
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|db2
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db2
argument_list|)
expr_stmt|;
name|db2
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|dbName2
argument_list|)
expr_stmt|;
comment|// Alter db "testDatabaseOps" via ObjectStore
name|dbOwner
operator|=
literal|"user1"
expr_stmt|;
name|db
operator|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
name|dbDescription
argument_list|,
name|dbLocation
argument_list|,
name|dbParams
argument_list|)
expr_stmt|;
name|db
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|db
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|alterDatabase
argument_list|(
name|dbName
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
comment|// Drop db "testDatabaseOps1" via ObjectStore
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|dbName1
argument_list|)
expr_stmt|;
comment|// We update twice to accurately detect if cache is dirty or not
name|updateCache
argument_list|(
name|cachedStore
argument_list|,
literal|100
argument_list|,
literal|500
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|cachedStore
argument_list|,
literal|100
argument_list|,
literal|500
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Read the newly added db via CachedStore
name|dbNew
operator|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|dbName2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db2
argument_list|,
name|dbNew
argument_list|)
expr_stmt|;
comment|// Read the altered db via CachedStore (altered user from "user2" to "user1")
name|dbNew
operator|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dbNew
argument_list|)
expr_stmt|;
comment|// Try to read the dropped db after cache update
try|try
block|{
name|dbNew
operator|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|dbName1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The database: "
operator|+
name|dbName1
operator|+
literal|" should have been removed from the cache after running the update service"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
comment|// Clean up
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|dbName2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTableOps
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add a db via ObjectStore
name|String
name|dbName
init|=
literal|"testTableOps"
decl_stmt|;
name|String
name|dbDescription
init|=
literal|"testTableOps"
decl_stmt|;
name|String
name|dbLocation
init|=
literal|"file:/tmp"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|dbOwner
init|=
literal|"user1"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
name|dbDescription
argument_list|,
name|dbLocation
argument_list|,
name|dbParams
argument_list|)
decl_stmt|;
name|db
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|db
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
comment|// Add a table via ObjectStore
name|String
name|tblName
init|=
literal|"tbl"
decl_stmt|;
name|String
name|tblOwner
init|=
literal|"user1"
decl_stmt|;
name|String
name|serdeLocation
init|=
literal|"file:/tmp"
decl_stmt|;
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"integer column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"string"
argument_list|,
literal|"string column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col1
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SerDeInfo
name|serdeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
name|serdeLocation
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serdeInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|serdeParams
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setStoredAsSubDirectories
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
name|tblOwner
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|,
name|tblParams
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// Prewarm CachedStore
name|cachedStore
operator|.
name|prewarm
argument_list|()
expr_stmt|;
comment|// Read database, table via CachedStore
name|Database
name|dbNew
init|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dbNew
argument_list|)
expr_stmt|;
name|Table
name|tblNew
init|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl
argument_list|,
name|tblNew
argument_list|)
expr_stmt|;
comment|// Add a new table via CachedStore
name|String
name|tblName1
init|=
literal|"tbl1"
decl_stmt|;
name|Table
name|tbl1
init|=
operator|new
name|Table
argument_list|(
name|tblName1
argument_list|,
name|dbName
argument_list|,
name|tblOwner
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|,
name|tblParams
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|createTable
argument_list|(
name|tbl1
argument_list|)
expr_stmt|;
name|tbl1
operator|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName1
argument_list|)
expr_stmt|;
comment|// Read via object store
name|tblNew
operator|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl1
argument_list|,
name|tblNew
argument_list|)
expr_stmt|;
comment|// Add a new table via ObjectStore
name|String
name|tblName2
init|=
literal|"tbl2"
decl_stmt|;
name|Table
name|tbl2
init|=
operator|new
name|Table
argument_list|(
name|tblName2
argument_list|,
name|dbName
argument_list|,
name|tblOwner
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|,
name|tblParams
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|tbl2
argument_list|)
expr_stmt|;
name|tbl2
operator|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName2
argument_list|)
expr_stmt|;
comment|// Alter table "tbl" via ObjectStore
name|tblOwner
operator|=
literal|"user2"
expr_stmt|;
name|tbl
operator|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
name|tblOwner
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|,
name|tblParams
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|alterTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// Drop table "tbl1" via ObjectStore
name|objectStore
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName1
argument_list|)
expr_stmt|;
comment|// We update twice to accurately detect if cache is dirty or not
name|updateCache
argument_list|(
name|cachedStore
argument_list|,
literal|100
argument_list|,
literal|500
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|cachedStore
argument_list|,
literal|100
argument_list|,
literal|500
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Read "tbl2" via CachedStore
name|tblNew
operator|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl2
argument_list|,
name|tblNew
argument_list|)
expr_stmt|;
comment|// Read the altered "tbl" via CachedStore
name|tblNew
operator|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl
argument_list|,
name|tblNew
argument_list|)
expr_stmt|;
comment|// Try to read the dropped "tbl1" via CachedStore (should throw exception)
name|tblNew
operator|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertNull
argument_list|(
name|tblNew
argument_list|)
expr_stmt|;
comment|// Should return "tbl" and "tbl2"
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
init|=
name|cachedStore
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tblNames
operator|.
name|contains
argument_list|(
name|tblName
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
operator|!
name|tblNames
operator|.
name|contains
argument_list|(
name|tblName1
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|tblNames
operator|.
name|contains
argument_list|(
name|tblName2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Clean up
name|objectStore
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName2
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionOps
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add a db via ObjectStore
name|String
name|dbName
init|=
literal|"testPartitionOps"
decl_stmt|;
name|String
name|dbDescription
init|=
literal|"testPartitionOps"
decl_stmt|;
name|String
name|dbLocation
init|=
literal|"file:/tmp"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|dbOwner
init|=
literal|"user1"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
name|dbDescription
argument_list|,
name|dbLocation
argument_list|,
name|dbParams
argument_list|)
decl_stmt|;
name|db
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|db
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
comment|// Add a table via ObjectStore
name|String
name|tblName
init|=
literal|"tbl"
decl_stmt|;
name|String
name|tblOwner
init|=
literal|"user1"
decl_stmt|;
name|String
name|serdeLocation
init|=
literal|"file:/tmp"
decl_stmt|;
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"integer column"
argument_list|)
decl_stmt|;
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"string"
argument_list|,
literal|"string column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col1
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col2
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|SerDeInfo
name|serdeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
name|serdeLocation
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serdeInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|serdeParams
argument_list|)
decl_stmt|;
name|FieldSchema
name|ptnCol1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"part1"
argument_list|,
literal|"string"
argument_list|,
literal|"string partition column"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ptnCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|ptnCols
operator|.
name|add
argument_list|(
name|ptnCol1
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
name|tblOwner
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|ptnCols
argument_list|,
name|tblParams
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
specifier|final
name|String
name|ptnColVal1
init|=
literal|"aaa"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Partition
name|ptn1
init|=
operator|new
name|Partition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|addPartition
argument_list|(
name|ptn1
argument_list|)
expr_stmt|;
name|ptn1
operator|=
name|objectStore
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|ptnColVal2
init|=
literal|"bbb"
decl_stmt|;
name|Partition
name|ptn2
init|=
operator|new
name|Partition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal2
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|addPartition
argument_list|(
name|ptn2
argument_list|)
expr_stmt|;
name|ptn2
operator|=
name|objectStore
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal2
argument_list|)
argument_list|)
expr_stmt|;
comment|// Prewarm CachedStore
name|cachedStore
operator|.
name|prewarm
argument_list|()
expr_stmt|;
comment|// Read database, table, partition via CachedStore
name|Database
name|dbNew
init|=
name|cachedStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|db
argument_list|,
name|dbNew
argument_list|)
expr_stmt|;
name|Table
name|tblNew
init|=
name|cachedStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tbl
argument_list|,
name|tblNew
argument_list|)
expr_stmt|;
name|Partition
name|newPtn1
init|=
name|cachedStore
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ptn1
argument_list|,
name|newPtn1
argument_list|)
expr_stmt|;
name|Partition
name|newPtn2
init|=
name|cachedStore
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal2
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ptn2
argument_list|,
name|newPtn2
argument_list|)
expr_stmt|;
comment|// Add a new partition via ObjectStore
specifier|final
name|String
name|ptnColVal3
init|=
literal|"ccc"
decl_stmt|;
name|Partition
name|ptn3
init|=
operator|new
name|Partition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal3
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|addPartition
argument_list|(
name|ptn3
argument_list|)
expr_stmt|;
name|ptn3
operator|=
name|objectStore
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Alter an existing partition ("aaa") via ObjectStore
specifier|final
name|String
name|ptnColVal1Alt
init|=
literal|"aaaAlt"
decl_stmt|;
name|Partition
name|ptn1Atl
init|=
operator|new
name|Partition
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1Alt
argument_list|)
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partParams
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|alterPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1
argument_list|)
argument_list|,
name|ptn1Atl
argument_list|)
expr_stmt|;
name|ptn1Atl
operator|=
name|objectStore
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1Alt
argument_list|)
argument_list|)
expr_stmt|;
comment|// Drop an existing partition ("bbb") via ObjectStore
name|objectStore
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal2
argument_list|)
argument_list|)
expr_stmt|;
comment|// We update twice to accurately detect if cache is dirty or not
name|updateCache
argument_list|(
name|cachedStore
argument_list|,
literal|100
argument_list|,
literal|500
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|updateCache
argument_list|(
name|cachedStore
argument_list|,
literal|100
argument_list|,
literal|500
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// Read the newly added partition via CachedStore
name|Partition
name|newPtn
init|=
name|cachedStore
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal3
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ptn3
argument_list|,
name|newPtn
argument_list|)
expr_stmt|;
comment|// Read the altered partition via CachedStore
name|newPtn
operator|=
name|cachedStore
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal1Alt
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ptn1Atl
argument_list|,
name|newPtn
argument_list|)
expr_stmt|;
comment|// Try to read the dropped partition via CachedStore
try|try
block|{
name|newPtn
operator|=
name|cachedStore
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ptnColVal2
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|(
literal|"The partition: "
operator|+
name|ptnColVal2
operator|+
literal|" should have been removed from the cache after running the update service"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// Expected
block|}
block|}
comment|//@Test
specifier|public
name|void
name|testTableColStatsOps
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Add a db via ObjectStore
name|String
name|dbName
init|=
literal|"testTableColStatsOps"
decl_stmt|;
name|String
name|dbDescription
init|=
literal|"testTableColStatsOps"
decl_stmt|;
name|String
name|dbLocation
init|=
literal|"file:/tmp"
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|dbParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|dbOwner
init|=
literal|"user1"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
name|dbDescription
argument_list|,
name|dbLocation
argument_list|,
name|dbParams
argument_list|)
decl_stmt|;
name|db
operator|.
name|setOwnerName
argument_list|(
name|dbOwner
argument_list|)
expr_stmt|;
name|db
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|)
expr_stmt|;
name|objectStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|objectStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
comment|// Add a table via ObjectStore
specifier|final
name|String
name|tblName
init|=
literal|"tbl"
decl_stmt|;
specifier|final
name|String
name|tblOwner
init|=
literal|"user1"
decl_stmt|;
specifier|final
name|String
name|serdeLocation
init|=
literal|"file:/tmp"
decl_stmt|;
specifier|final
name|FieldSchema
name|col1
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|"integer column"
argument_list|)
decl_stmt|;
comment|// Stats values for col1
name|long
name|col1LowVal
init|=
literal|5
decl_stmt|;
name|long
name|col1HighVal
init|=
literal|500
decl_stmt|;
name|long
name|col1Nulls
init|=
literal|10
decl_stmt|;
name|long
name|col1DV
init|=
literal|20
decl_stmt|;
specifier|final
name|FieldSchema
name|col2
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"string"
argument_list|,
literal|"string column"
argument_list|)
decl_stmt|;
comment|// Stats values for col2
name|long
name|col2MaxColLen
init|=
literal|100
decl_stmt|;
name|double
name|col2AvgColLen
init|=
literal|45.5
decl_stmt|;
name|long
name|col2Nulls
init|=
literal|5
decl_stmt|;
name|long
name|col2DV
init|=
literal|40
decl_stmt|;
specifier|final
name|FieldSchema
name|col3
init|=
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
literal|"boolean"
argument_list|,
literal|"boolean column"
argument_list|)
decl_stmt|;
comment|// Stats values for col3
name|long
name|col3NumTrues
init|=
literal|100
decl_stmt|;
name|long
name|col3NumFalses
init|=
literal|30
decl_stmt|;
name|long
name|col3Nulls
init|=
literal|10
decl_stmt|;
specifier|final
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col1
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col2
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
name|col3
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|serdeParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblParams
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|final
name|SerDeInfo
name|serdeInfo
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
name|serdeLocation
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serdeInfo
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|serdeParams
argument_list|)
decl_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
name|tblOwner
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|,
name|tblParams
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|objectStore
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|objectStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
comment|// Add ColumnStatistics for tbl to metastore DB via ObjectStore
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
comment|// Col1
name|ColumnStatisticsData
name|data1
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|col1Stats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|col1
operator|.
name|getName
argument_list|()
argument_list|,
name|col1
operator|.
name|getType
argument_list|()
argument_list|,
name|data1
argument_list|)
decl_stmt|;
name|LongColumnStatsData
name|longStats
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|longStats
operator|.
name|setLowValue
argument_list|(
name|col1LowVal
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setHighValue
argument_list|(
name|col1HighVal
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumNulls
argument_list|(
name|col1Nulls
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
name|col1DV
argument_list|)
expr_stmt|;
name|data1
operator|.
name|setLongStats
argument_list|(
name|longStats
argument_list|)
expr_stmt|;
name|colStatObjs
operator|.
name|add
argument_list|(
name|col1Stats
argument_list|)
expr_stmt|;
comment|// Col2
name|ColumnStatisticsData
name|data2
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|col2Stats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|col2
operator|.
name|getName
argument_list|()
argument_list|,
name|col2
operator|.
name|getType
argument_list|()
argument_list|,
name|data2
argument_list|)
decl_stmt|;
name|StringColumnStatsData
name|stringStats
init|=
operator|new
name|StringColumnStatsData
argument_list|()
decl_stmt|;
name|stringStats
operator|.
name|setMaxColLen
argument_list|(
name|col2MaxColLen
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setAvgColLen
argument_list|(
name|col2AvgColLen
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setNumNulls
argument_list|(
name|col2Nulls
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setNumDVs
argument_list|(
name|col2DV
argument_list|)
expr_stmt|;
name|data2
operator|.
name|setStringStats
argument_list|(
name|stringStats
argument_list|)
expr_stmt|;
name|colStatObjs
operator|.
name|add
argument_list|(
name|col2Stats
argument_list|)
expr_stmt|;
comment|// Col3
name|ColumnStatisticsData
name|data3
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|col3Stats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|col3
operator|.
name|getName
argument_list|()
argument_list|,
name|col3
operator|.
name|getType
argument_list|()
argument_list|,
name|data3
argument_list|)
decl_stmt|;
name|BooleanColumnStatsData
name|boolStats
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|boolStats
operator|.
name|setNumTrues
argument_list|(
name|col3NumTrues
argument_list|)
expr_stmt|;
name|boolStats
operator|.
name|setNumFalses
argument_list|(
name|col3NumFalses
argument_list|)
expr_stmt|;
name|boolStats
operator|.
name|setNumNulls
argument_list|(
name|col3Nulls
argument_list|)
expr_stmt|;
name|data3
operator|.
name|setBooleanStats
argument_list|(
name|boolStats
argument_list|)
expr_stmt|;
name|colStatObjs
operator|.
name|add
argument_list|(
name|col3Stats
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsObj
argument_list|(
name|colStatObjs
argument_list|)
expr_stmt|;
comment|// Save to DB
name|objectStore
operator|.
name|updateTableColumnStatistics
argument_list|(
name|stats
argument_list|)
expr_stmt|;
comment|// Prewarm CachedStore
name|cachedStore
operator|.
name|prewarm
argument_list|()
expr_stmt|;
comment|// Read table stats via CachedStore
name|ColumnStatistics
name|newStats
init|=
name|cachedStore
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|col1
operator|.
name|getName
argument_list|()
argument_list|,
name|col2
operator|.
name|getName
argument_list|()
argument_list|,
name|col3
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|stats
argument_list|,
name|newStats
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateCache
parameter_list|(
name|CachedStore
name|cachedStore
parameter_list|,
name|long
name|frequency
parameter_list|,
name|long
name|sleepTime
parameter_list|,
name|long
name|shutdownTimeout
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// Set cache refresh period to 100 milliseconds
name|cachedStore
operator|.
name|setCacheRefreshPeriod
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// Start the CachedStore update service
name|cachedStore
operator|.
name|startCacheUpdateService
argument_list|()
expr_stmt|;
comment|// Sleep for 500 ms so that cache update is complete
name|Thread
operator|.
name|sleep
argument_list|(
literal|500
argument_list|)
expr_stmt|;
comment|// Stop cache update service
name|cachedStore
operator|.
name|stopCacheUpdateService
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
comment|/**********************************************************************************************    * Methods that test SharedCache    *********************************************************************************************/
annotation|@
name|Test
specifier|public
name|void
name|testSharedStoreDb
parameter_list|()
block|{
name|Database
name|db1
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|Database
name|db2
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|Database
name|db3
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|Database
name|newDb1
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|newDb1
operator|.
name|setName
argument_list|(
literal|"db1"
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addDatabaseToCache
argument_list|(
literal|"db1"
argument_list|,
name|db1
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addDatabaseToCache
argument_list|(
literal|"db2"
argument_list|,
name|db2
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addDatabaseToCache
argument_list|(
literal|"db3"
argument_list|,
name|db3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getCachedDatabaseCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|alterDatabaseInCache
argument_list|(
literal|"db1"
argument_list|,
name|newDb1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getCachedDatabaseCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|removeDatabaseFromCache
argument_list|(
literal|"db2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getCachedDatabaseCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dbs
init|=
name|SharedCache
operator|.
name|listCachedDatabases
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbs
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dbs
operator|.
name|contains
argument_list|(
literal|"db1"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|dbs
operator|.
name|contains
argument_list|(
literal|"db3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSharedStoreTable
parameter_list|()
block|{
name|Table
name|tbl1
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd1
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols1
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols1
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params1
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setCols
argument_list|(
name|cols1
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setParameters
argument_list|(
name|params1
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setLocation
argument_list|(
literal|"loc1"
argument_list|)
expr_stmt|;
name|tbl1
operator|.
name|setSd
argument_list|(
name|sd1
argument_list|)
expr_stmt|;
name|tbl1
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl2
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd2
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols2
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols2
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params2
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setCols
argument_list|(
name|cols2
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setParameters
argument_list|(
name|params2
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setLocation
argument_list|(
literal|"loc2"
argument_list|)
expr_stmt|;
name|tbl2
operator|.
name|setSd
argument_list|(
name|sd2
argument_list|)
expr_stmt|;
name|tbl2
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|tbl3
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd3
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols3
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols3
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params3
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params3
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setCols
argument_list|(
name|cols3
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setParameters
argument_list|(
name|params3
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setLocation
argument_list|(
literal|"loc3"
argument_list|)
expr_stmt|;
name|tbl3
operator|.
name|setSd
argument_list|(
name|sd3
argument_list|)
expr_stmt|;
name|tbl3
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|Table
name|newTbl1
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|newTbl1
operator|.
name|setDbName
argument_list|(
literal|"db2"
argument_list|)
expr_stmt|;
name|newTbl1
operator|.
name|setTableName
argument_list|(
literal|"tbl1"
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|newSd1
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols1
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|newCols1
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"newcol1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|newParams1
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setCols
argument_list|(
name|newCols1
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setParameters
argument_list|(
name|params1
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setLocation
argument_list|(
literal|"loc1"
argument_list|)
expr_stmt|;
name|newTbl1
operator|.
name|setSd
argument_list|(
name|newSd1
argument_list|)
expr_stmt|;
name|newTbl1
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addTableToCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl1"
argument_list|,
name|tbl1
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addTableToCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl2"
argument_list|,
name|tbl2
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addTableToCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl3"
argument_list|,
name|tbl3
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addTableToCache
argument_list|(
literal|"db2"
argument_list|,
literal|"tbl1"
argument_list|,
name|tbl1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getCachedTableCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|SharedCache
operator|.
name|getTableFromCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl1"
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"loc1"
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|removeTableFromCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getCachedTableCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|alterTableInCache
argument_list|(
literal|"db2"
argument_list|,
literal|"tbl1"
argument_list|,
name|newTbl1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getCachedTableCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|removeTableFromCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl2"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getCachedTableCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSharedStorePartition
parameter_list|()
block|{
name|Partition
name|part1
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd1
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols1
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols1
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params1
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setCols
argument_list|(
name|cols1
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setParameters
argument_list|(
name|params1
argument_list|)
expr_stmt|;
name|sd1
operator|.
name|setLocation
argument_list|(
literal|"loc1"
argument_list|)
expr_stmt|;
name|part1
operator|.
name|setSd
argument_list|(
name|sd1
argument_list|)
expr_stmt|;
name|part1
operator|.
name|setValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part2
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd2
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols2
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols2
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params2
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params2
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setCols
argument_list|(
name|cols2
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setParameters
argument_list|(
name|params2
argument_list|)
expr_stmt|;
name|sd2
operator|.
name|setLocation
argument_list|(
literal|"loc2"
argument_list|)
expr_stmt|;
name|part2
operator|.
name|setSd
argument_list|(
name|sd2
argument_list|)
expr_stmt|;
name|part2
operator|.
name|setValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201702"
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|part3
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|StorageDescriptor
name|sd3
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols3
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols3
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params3
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params3
operator|.
name|put
argument_list|(
literal|"key2"
argument_list|,
literal|"value2"
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setCols
argument_list|(
name|cols3
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setParameters
argument_list|(
name|params3
argument_list|)
expr_stmt|;
name|sd3
operator|.
name|setLocation
argument_list|(
literal|"loc3"
argument_list|)
expr_stmt|;
name|part3
operator|.
name|setSd
argument_list|(
name|sd3
argument_list|)
expr_stmt|;
name|part3
operator|.
name|setValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201703"
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|newPart1
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|newPart1
operator|.
name|setDbName
argument_list|(
literal|"db1"
argument_list|)
expr_stmt|;
name|newPart1
operator|.
name|setTableName
argument_list|(
literal|"tbl1"
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|newSd1
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|newCols1
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|newCols1
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"newcol1"
argument_list|,
literal|"int"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newParams1
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|newParams1
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setCols
argument_list|(
name|newCols1
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setParameters
argument_list|(
name|params1
argument_list|)
expr_stmt|;
name|newSd1
operator|.
name|setLocation
argument_list|(
literal|"loc1"
argument_list|)
expr_stmt|;
name|newPart1
operator|.
name|setSd
argument_list|(
name|newSd1
argument_list|)
expr_stmt|;
name|newPart1
operator|.
name|setValues
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addPartitionToCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl1"
argument_list|,
name|part1
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addPartitionToCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl1"
argument_list|,
name|part2
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addPartitionToCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl1"
argument_list|,
name|part3
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addPartitionToCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl2"
argument_list|,
name|part1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getCachedPartitionCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Partition
name|t
init|=
name|SharedCache
operator|.
name|getPartitionFromCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl1"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|t
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|"loc1"
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|removePartitionFromCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl2"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getCachedPartitionCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|alterPartitionInCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl1"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201701"
argument_list|)
argument_list|,
name|newPart1
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getCachedPartitionCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|removePartitionFromCache
argument_list|(
literal|"db1"
argument_list|,
literal|"tbl1"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"201702"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getCachedPartitionCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|SharedCache
operator|.
name|getSdCache
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggrStatsRepeatedRead
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"testTableColStatsOps"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl"
decl_stmt|;
name|String
name|colName
init|=
literal|"f1"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
literal|"some_location"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|colName
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|null
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partVals1
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partVals2
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|Partition
name|ptn1
init|=
operator|new
name|Partition
argument_list|(
name|partVals1
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|addPartition
argument_list|(
name|ptn1
argument_list|)
expr_stmt|;
name|Partition
name|ptn2
init|=
operator|new
name|Partition
argument_list|(
name|partVals2
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|addPartition
argument_list|(
name|ptn2
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
literal|"col"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|colStats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colName
argument_list|,
literal|"int"
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|LongColumnStatsData
name|longStats
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|longStats
operator|.
name|setLowValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setHighValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumNulls
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|longStats
argument_list|)
expr_stmt|;
name|colStatObjs
operator|.
name|add
argument_list|(
name|colStats
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsObj
argument_list|(
name|colStatObjs
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
operator|.
name|deepCopy
argument_list|()
argument_list|,
name|partVals1
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
operator|.
name|deepCopy
argument_list|()
argument_list|,
name|partVals2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aggrPartVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|aggrPartVals
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|aggrPartVals
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStats
init|=
name|cachedStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrPartVals
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|aggrStats
operator|=
name|cachedStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrPartVals
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionAggrStats
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"testTableColStatsOps1"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl1"
decl_stmt|;
name|String
name|colName
init|=
literal|"f1"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
literal|"some_location"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|colName
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|null
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partVals1
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partVals2
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|Partition
name|ptn1
init|=
operator|new
name|Partition
argument_list|(
name|partVals1
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|addPartition
argument_list|(
name|ptn1
argument_list|)
expr_stmt|;
name|Partition
name|ptn2
init|=
operator|new
name|Partition
argument_list|(
name|partVals2
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|addPartition
argument_list|(
name|ptn2
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
literal|"col"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|colStats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colName
argument_list|,
literal|"int"
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|LongColumnStatsData
name|longStats
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|longStats
operator|.
name|setLowValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setHighValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumNulls
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|longStats
argument_list|)
expr_stmt|;
name|colStatObjs
operator|.
name|add
argument_list|(
name|colStats
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsObj
argument_list|(
name|colStatObjs
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
operator|.
name|deepCopy
argument_list|()
argument_list|,
name|partVals1
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
operator|.
name|deepCopy
argument_list|()
argument_list|,
name|partVals2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aggrPartVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|aggrPartVals
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|aggrPartVals
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStats
init|=
name|cachedStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrPartVals
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|aggrStats
operator|=
name|cachedStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrPartVals
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPartitionAggrStatsBitVector
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"testTableColStatsOps2"
decl_stmt|;
name|String
name|tblName
init|=
literal|"tbl2"
decl_stmt|;
name|String
name|colName
init|=
literal|"f1"
decl_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|,
literal|"some_location"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|colName
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col"
argument_list|,
literal|"int"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|null
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|(
name|tblName
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partVals1
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partVals2
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|Partition
name|ptn1
init|=
operator|new
name|Partition
argument_list|(
name|partVals1
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|addPartition
argument_list|(
name|ptn1
argument_list|)
expr_stmt|;
name|Partition
name|ptn2
init|=
operator|new
name|Partition
argument_list|(
name|partVals2
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
decl_stmt|;
name|cachedStore
operator|.
name|addPartition
argument_list|(
name|ptn2
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|stats
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
literal|"col"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatObjs
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|colStats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colName
argument_list|,
literal|"int"
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|LongColumnStatsData
name|longStats
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|longStats
operator|.
name|setLowValue
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setHighValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumNulls
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|HyperLogLog
name|hll
init|=
name|HyperLogLog
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setBitVectors
argument_list|(
name|hll
operator|.
name|serialize
argument_list|()
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|longStats
argument_list|)
expr_stmt|;
name|colStatObjs
operator|.
name|add
argument_list|(
name|colStats
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|stats
operator|.
name|setStatsObj
argument_list|(
name|colStatObjs
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
operator|.
name|deepCopy
argument_list|()
argument_list|,
name|partVals1
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|hll
operator|=
name|HyperLogLog
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|hll
operator|.
name|addLong
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setBitVectors
argument_list|(
name|hll
operator|.
name|serialize
argument_list|()
argument_list|)
expr_stmt|;
name|cachedStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|stats
operator|.
name|deepCopy
argument_list|()
argument_list|,
name|partVals2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|colNames
operator|.
name|add
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|aggrPartVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|aggrPartVals
operator|.
name|add
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|aggrPartVals
operator|.
name|add
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|AggrStats
name|aggrStats
init|=
name|cachedStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrPartVals
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|aggrStats
operator|=
name|cachedStore
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|aggrPartVals
argument_list|,
name|colNames
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

