begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|utils
operator|.
name|BloomFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|TestBloomFilter
block|{
specifier|static
specifier|final
name|int
name|SET_SIZE
init|=
literal|50
decl_stmt|;
specifier|static
specifier|final
name|double
name|FALSE_POSITIVE_PROBABILITY
init|=
literal|0.01
decl_stmt|;
comment|// Pre-calculated for the above set size and fpp
specifier|static
specifier|final
name|int
name|FILTER_SIZE
init|=
literal|480
decl_stmt|;
specifier|static
specifier|final
name|int
name|NUM_HASH_FUNCTIONS
init|=
literal|7
decl_stmt|;
name|BloomFilter
name|bloomFilter
decl_stmt|;
comment|// Items that we'll add to the filter
name|String
index|[]
name|items
init|=
block|{
literal|"Part1=Val1"
block|,
literal|"Part2=Val2"
block|,
literal|"Part3=Val3"
block|,
literal|"Part4=Val4"
block|,
literal|"Part5=Val5"
block|}
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeTest
parameter_list|()
block|{   }
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterTest
parameter_list|()
block|{   }
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|bloomFilter
operator|=
operator|new
name|BloomFilter
argument_list|(
name|SET_SIZE
argument_list|,
name|FALSE_POSITIVE_PROBABILITY
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{   }
annotation|@
name|Test
specifier|public
name|void
name|testFilterAndHashSize
parameter_list|()
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bloomFilter
operator|.
name|getFilterSize
argument_list|()
argument_list|,
name|FILTER_SIZE
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|bloomFilter
operator|.
name|getNumHashFunctions
argument_list|()
argument_list|,
name|NUM_HASH_FUNCTIONS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFilterFunctions
parameter_list|()
block|{
comment|// Add all items to the bloom filter
comment|// (since bloom filter returns false positives, no point testing for negative cases)
for|for
control|(
name|String
name|item
range|:
name|items
control|)
block|{
name|bloomFilter
operator|.
name|addToFilter
argument_list|(
name|item
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Test for presence
for|for
control|(
name|String
name|item
range|:
name|items
control|)
block|{
name|Assert
operator|.
name|assertTrue
argument_list|(
name|bloomFilter
operator|.
name|contains
argument_list|(
name|item
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Clear all bits
name|bloomFilter
operator|.
name|getBitVector
argument_list|()
operator|.
name|clearAll
argument_list|()
expr_stmt|;
comment|// Test for presence now - should fail
for|for
control|(
name|String
name|item
range|:
name|items
control|)
block|{
name|Assert
operator|.
name|assertFalse
argument_list|(
name|bloomFilter
operator|.
name|contains
argument_list|(
name|item
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

