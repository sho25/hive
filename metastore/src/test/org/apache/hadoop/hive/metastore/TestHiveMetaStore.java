begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ConfigValSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|TestHiveMetaStore
extends|extends
name|TestCase
block|{
specifier|protected
specifier|static
name|HiveMetaStoreClient
name|client
decl_stmt|;
specifier|protected
specifier|static
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|protected
specifier|static
name|Warehouse
name|warehouse
decl_stmt|;
specifier|protected
specifier|static
name|boolean
name|isThriftClient
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DB1_NAME
init|=
literal|"testdb1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DB2_NAME
init|=
literal|"testdb2"
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|warehouse
operator|=
operator|new
name|Warehouse
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// set some values to use for getting conf. vars
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.key1"
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.key2"
argument_list|,
literal|"http://www.example.com"
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.key3"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|set
argument_list|(
literal|"hive.key4"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testNameMethods
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|spec
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|spec
operator|.
name|put
argument_list|(
literal|"ds"
argument_list|,
literal|"2008-07-01 14:13:12"
argument_list|)
expr_stmt|;
name|spec
operator|.
name|put
argument_list|(
literal|"hr"
argument_list|,
literal|"14"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|v
range|:
name|spec
operator|.
name|values
argument_list|()
control|)
block|{
name|vals
operator|.
name|add
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
name|String
name|partName
init|=
literal|"ds=2008-07-01 14%3A13%3A12/hr=14"
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|testVals
init|=
name|client
operator|.
name|partitionNameToVals
argument_list|(
name|partName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Values from name are incorrect"
argument_list|,
name|vals
operator|.
name|equals
argument_list|(
name|testVals
argument_list|)
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|testSpec
init|=
name|client
operator|.
name|partitionNameToSpec
argument_list|(
name|partName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Spec from name is incorrect"
argument_list|,
name|spec
operator|.
name|equals
argument_list|(
name|testSpec
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|emptyVals
init|=
name|client
operator|.
name|partitionNameToVals
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Values should be empty"
argument_list|,
name|emptyVals
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|emptySpec
init|=
name|client
operator|.
name|partitionNameToSpec
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Spec should be empty"
argument_list|,
name|emptySpec
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
block|}
comment|/**    * tests create table and partition and tries to drop the table without    * droppping the partition    *    * @throws Exception    */
specifier|public
name|void
name|testPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|partitionTester
argument_list|(
name|client
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|partitionTester
parameter_list|(
name|HiveMetaStoreClient
name|client
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|dbName
init|=
literal|"compdb"
decl_stmt|;
name|String
name|tblName
init|=
literal|"comptbl"
decl_stmt|;
name|String
name|typeName
init|=
literal|"Person"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
literal|"2008-07-01 14:13:12"
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
literal|"14"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|vals2
operator|.
name|add
argument_list|(
literal|"2008-07-01 14:13:12"
argument_list|)
expr_stmt|;
name|vals2
operator|.
name|add
argument_list|(
literal|"15"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals3
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|vals3
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|vals3
operator|.
name|add
argument_list|(
literal|"2008-07-02 14:13:12"
argument_list|)
expr_stmt|;
name|vals3
operator|.
name|add
argument_list|(
literal|"15"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals4
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|vals4
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|vals4
operator|.
name|add
argument_list|(
literal|"2008-07-03 14:13:12"
argument_list|)
expr_stmt|;
name|vals4
operator|.
name|add
argument_list|(
literal|"151"
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|Type
name|typ1
init|=
operator|new
name|Type
argument_list|()
decl_stmt|;
name|typ1
operator|.
name|setName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|setFields
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"name"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"income"
argument_list|,
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|createType
argument_list|(
name|typ1
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|typ1
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCompressed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"test_param_1"
argument_list|,
literal|"Use this for comments etc"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getBucketCols
argument_list|()
operator|.
name|add
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSortCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"hr"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|isThriftClient
condition|)
block|{
comment|// the createTable() above does not update the location in the 'tbl'
comment|// object when the client is a thrift client and the code below relies
comment|// on the location being present in the 'tbl' object - so get the table
comment|// from the metastore
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|part
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setValues
argument_list|(
name|vals
argument_list|)
expr_stmt|;
name|part
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setSd
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setSerdeInfo
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/part1"
argument_list|)
expr_stmt|;
name|Partition
name|part2
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|part2
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|part2
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|part2
operator|.
name|setValues
argument_list|(
name|vals2
argument_list|)
expr_stmt|;
name|part2
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|part2
operator|.
name|setSd
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|part2
operator|.
name|getSd
argument_list|()
operator|.
name|setSerdeInfo
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|part2
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/part2"
argument_list|)
expr_stmt|;
name|Partition
name|part3
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|part3
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|part3
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|part3
operator|.
name|setValues
argument_list|(
name|vals3
argument_list|)
expr_stmt|;
name|part3
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|part3
operator|.
name|setSd
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|part3
operator|.
name|getSd
argument_list|()
operator|.
name|setSerdeInfo
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|part3
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/part3"
argument_list|)
expr_stmt|;
name|Partition
name|part4
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|part4
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|part4
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|part4
operator|.
name|setValues
argument_list|(
name|vals4
argument_list|)
expr_stmt|;
name|part4
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|part4
operator|.
name|setSd
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|part4
operator|.
name|getSd
argument_list|()
operator|.
name|setSerdeInfo
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|part4
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/part4"
argument_list|)
expr_stmt|;
comment|// check if the partition exists (it shouldn;t)
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|Partition
name|p
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|vals
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertEquals
argument_list|(
literal|"partition should not have existed"
argument_list|,
name|NoSuchObjectException
operator|.
name|class
argument_list|,
name|e
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"getPartition() should have thrown NoSuchObjectException"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
name|Partition
name|retp
init|=
name|client
operator|.
name|add_partition
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to create partition "
operator|+
name|part
argument_list|,
name|retp
argument_list|)
expr_stmt|;
name|Partition
name|retp2
init|=
name|client
operator|.
name|add_partition
argument_list|(
name|part2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to create partition "
operator|+
name|part2
argument_list|,
name|retp2
argument_list|)
expr_stmt|;
name|Partition
name|retp3
init|=
name|client
operator|.
name|add_partition
argument_list|(
name|part3
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to create partition "
operator|+
name|part3
argument_list|,
name|retp3
argument_list|)
expr_stmt|;
name|Partition
name|retp4
init|=
name|client
operator|.
name|add_partition
argument_list|(
name|part4
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to create partition "
operator|+
name|part4
argument_list|,
name|retp4
argument_list|)
expr_stmt|;
name|Partition
name|part_get
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isThriftClient
condition|)
block|{
comment|// since we are using thrift, 'part' will not have the create time and
comment|// last DDL time set since it does not get updated in the add_partition()
comment|// call - likewise part2 and part3 - set it correctly so that equals check
comment|// doesn't fail
name|adjust
argument_list|(
name|client
argument_list|,
name|part
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|adjust
argument_list|(
name|client
argument_list|,
name|part2
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|adjust
argument_list|(
name|client
argument_list|,
name|part3
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Partitions are not same"
argument_list|,
name|part
operator|.
name|equals
argument_list|(
name|part_get
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|partName
init|=
literal|"ds=2008-07-01 14%3A13%3A12/hr=14"
decl_stmt|;
name|String
name|part2Name
init|=
literal|"ds=2008-07-01 14%3A13%3A12/hr=15"
decl_stmt|;
name|String
name|part3Name
init|=
literal|"ds=2008-07-02 14%3A13%3A12/hr=15"
decl_stmt|;
name|part_get
operator|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Partitions are not the same"
argument_list|,
name|part
operator|.
name|equals
argument_list|(
name|part_get
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test partition listing with a partial spec - ds is specified but hr is not
name|List
argument_list|<
name|String
argument_list|>
name|partialVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partialVals
operator|.
name|add
argument_list|(
name|vals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|HashSet
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|part2
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partial
init|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partialVals
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have returned 2 partitions"
argument_list|,
name|partial
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not all parts returned"
argument_list|,
name|partial
operator|.
name|containsAll
argument_list|(
name|parts
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|part2Name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partialNames
init|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partialVals
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Should have returned 2 partition names"
argument_list|,
name|partialNames
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not all part names returned"
argument_list|,
name|partialNames
operator|.
name|containsAll
argument_list|(
name|partNames
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test partition listing with a partial spec - hr is specified but ds is not
name|parts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|part2
argument_list|)
expr_stmt|;
name|parts
operator|.
name|add
argument_list|(
name|part3
argument_list|)
expr_stmt|;
name|partialVals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|partialVals
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|partialVals
operator|.
name|add
argument_list|(
name|vals2
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|partial
operator|=
name|client
operator|.
name|listPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partialVals
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have returned 2 partitions"
argument_list|,
literal|2
argument_list|,
name|partial
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not all parts returned"
argument_list|,
name|partial
operator|.
name|containsAll
argument_list|(
name|parts
argument_list|)
argument_list|)
expr_stmt|;
name|partNames
operator|.
name|clear
argument_list|()
expr_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|part2Name
argument_list|)
expr_stmt|;
name|partNames
operator|.
name|add
argument_list|(
name|part3Name
argument_list|)
expr_stmt|;
name|partialNames
operator|=
name|client
operator|.
name|listPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partialVals
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Should have returned 2 partition names"
argument_list|,
literal|2
argument_list|,
name|partialNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Not all part names returned"
argument_list|,
name|partialNames
operator|.
name|containsAll
argument_list|(
name|partNames
argument_list|)
argument_list|)
expr_stmt|;
comment|// Verify escaped partition names don't return partitions
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|String
name|badPartName
init|=
literal|"ds=2008-07-01 14%3A13%3A12/hrs=14"
decl_stmt|;
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|badPartName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Bad partition spec should have thrown an exception"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
name|Path
name|partPath
init|=
operator|new
name|Path
argument_list|(
name|part2
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|partPath
operator|.
name|toUri
argument_list|()
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|partPath
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|partPath
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test append_partition_by_name
name|client
operator|.
name|appendPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|)
expr_stmt|;
name|Partition
name|part5
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Append partition by name failed"
argument_list|,
name|part5
operator|.
name|getValues
argument_list|()
operator|.
name|equals
argument_list|(
name|vals
argument_list|)
argument_list|)
expr_stmt|;
empty_stmt|;
name|Path
name|part5Path
init|=
operator|new
name|Path
argument_list|(
name|part5
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|part5Path
argument_list|)
argument_list|)
expr_stmt|;
comment|// Test drop_partition_by_name
name|assertTrue
argument_list|(
literal|"Drop partition by name failed"
argument_list|,
name|client
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|part5Path
argument_list|)
argument_list|)
expr_stmt|;
comment|// add the partition again so that drop table with a partition can be
comment|// tested
name|retp
operator|=
name|client
operator|.
name|add_partition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
literal|"Unable to create partition "
operator|+
name|part
argument_list|,
name|retp
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
comment|// recreate table as external, drop partition and it should
comment|// still exist
name|tbl
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|retp
operator|=
name|client
operator|.
name|add_partition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|partPath
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
name|partPath
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|client
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
literal|"*"
argument_list|)
control|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testPartition() failed."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testAlterPartition
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|String
name|dbName
init|=
literal|"compdb"
decl_stmt|;
name|String
name|tblName
init|=
literal|"comptbl"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
literal|"2008-07-01"
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
literal|"14"
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|db
operator|.
name|setDescription
argument_list|(
literal|"Alter Partition Test database"
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"name"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"income"
argument_list|,
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCompressed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"test_param_1"
argument_list|,
literal|"Use this for comments etc"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getBucketCols
argument_list|()
operator|.
name|add
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSortCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"hr"
argument_list|,
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|isThriftClient
condition|)
block|{
comment|// the createTable() above does not update the location in the 'tbl'
comment|// object when the client is a thrift client and the code below relies
comment|// on the location being present in the 'tbl' object - so get the table
comment|// from the metastore
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|part
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setValues
argument_list|(
name|vals
argument_list|)
expr_stmt|;
name|part
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setSd
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setSerdeInfo
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"/part1"
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|Partition
name|part2
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|part2
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"retention"
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|part2
operator|.
name|getSd
argument_list|()
operator|.
name|setNumBuckets
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|part2
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"abc"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_partition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part2
argument_list|)
expr_stmt|;
name|Partition
name|part3
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"couldn't alter partition"
argument_list|,
name|part3
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"retention"
argument_list|)
argument_list|,
literal|"10"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"couldn't alter partition"
argument_list|,
name|part3
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"abc"
argument_list|)
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"couldn't alter partition"
argument_list|,
name|part3
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testPartition() failed."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testDatabase
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
comment|// clear up any existing databases
name|silentDropDatabase
argument_list|(
name|TEST_DB1_NAME
argument_list|)
expr_stmt|;
name|silentDropDatabase
argument_list|(
name|TEST_DB2_NAME
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|TEST_DB1_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|db
operator|=
name|client
operator|.
name|getDatabase
argument_list|(
name|TEST_DB1_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name of returned db is different from that of inserted db"
argument_list|,
name|TEST_DB1_NAME
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"location of the returned db is different from that of inserted db"
argument_list|,
name|warehouse
operator|.
name|getDefaultDatabasePath
argument_list|(
name|TEST_DB1_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|Database
name|db2
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db2
operator|.
name|setName
argument_list|(
name|TEST_DB2_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db2
argument_list|)
expr_stmt|;
name|db2
operator|=
name|client
operator|.
name|getDatabase
argument_list|(
name|TEST_DB2_NAME
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name of returned db is different from that of inserted db"
argument_list|,
name|TEST_DB2_NAME
argument_list|,
name|db2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"location of the returned db is different from that of inserted db"
argument_list|,
name|warehouse
operator|.
name|getDefaultDatabasePath
argument_list|(
name|TEST_DB2_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|db2
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dbs
init|=
name|client
operator|.
name|getDatabases
argument_list|(
literal|".*"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"first database is not "
operator|+
name|TEST_DB1_NAME
argument_list|,
name|dbs
operator|.
name|contains
argument_list|(
name|TEST_DB1_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"second database is not "
operator|+
name|TEST_DB2_NAME
argument_list|,
name|dbs
operator|.
name|contains
argument_list|(
name|TEST_DB2_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|TEST_DB1_NAME
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|TEST_DB2_NAME
argument_list|)
expr_stmt|;
name|silentDropDatabase
argument_list|(
name|TEST_DB1_NAME
argument_list|)
expr_stmt|;
name|silentDropDatabase
argument_list|(
name|TEST_DB2_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testDatabase() failed."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testSimpleTypeApi
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|dropType
argument_list|(
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|)
expr_stmt|;
name|Type
name|typ1
init|=
operator|new
name|Type
argument_list|()
decl_stmt|;
name|typ1
operator|.
name|setName
argument_list|(
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|client
operator|.
name|createType
argument_list|(
name|typ1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create type"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|Type
name|typ1_2
init|=
name|client
operator|.
name|getType
argument_list|(
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|typ1_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|typ1
operator|.
name|getName
argument_list|()
argument_list|,
name|typ1_2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|client
operator|.
name|dropType
argument_list|(
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"unable to drop type integer"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|client
operator|.
name|getType
argument_list|(
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected NoSuchObjectException"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testSimpleTypeApi() failed."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|// TODO:pc need to enhance this with complex fields and getType_all function
specifier|public
name|void
name|testComplexTypeApi
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|client
operator|.
name|dropType
argument_list|(
literal|"Person"
argument_list|)
expr_stmt|;
name|Type
name|typ1
init|=
operator|new
name|Type
argument_list|()
decl_stmt|;
name|typ1
operator|.
name|setName
argument_list|(
literal|"Person"
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|setFields
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"name"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"income"
argument_list|,
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|client
operator|.
name|createType
argument_list|(
name|typ1
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create type"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|Type
name|typ1_2
init|=
name|client
operator|.
name|getType
argument_list|(
literal|"Person"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"type Person not found"
argument_list|,
name|typ1_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|typ1
operator|.
name|getName
argument_list|()
argument_list|,
name|typ1_2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|typ1_2
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|typ1_2
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|typ1_2
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropType
argument_list|(
literal|"Family"
argument_list|)
expr_stmt|;
name|Type
name|fam
init|=
operator|new
name|Type
argument_list|()
decl_stmt|;
name|fam
operator|.
name|setName
argument_list|(
literal|"Family"
argument_list|)
expr_stmt|;
name|fam
operator|.
name|setFields
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fam
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"name"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|fam
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"members"
argument_list|,
name|MetaStoreUtils
operator|.
name|getListType
argument_list|(
name|typ1
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|client
operator|.
name|createType
argument_list|(
name|fam
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to create type "
operator|+
name|fam
operator|.
name|getName
argument_list|()
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|Type
name|fam2
init|=
name|client
operator|.
name|getType
argument_list|(
literal|"Family"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"type Person not found"
argument_list|,
name|fam2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fam
operator|.
name|getName
argument_list|()
argument_list|,
name|fam2
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fam
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|fam2
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fam
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|fam2
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fam
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fam2
operator|.
name|getFields
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|client
operator|.
name|dropType
argument_list|(
literal|"Family"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"unable to drop type Family"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|ret
operator|=
name|client
operator|.
name|dropType
argument_list|(
literal|"Person"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"unable to drop type Person"
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
try|try
block|{
name|client
operator|.
name|getType
argument_list|(
literal|"Person"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"Expected NoSuchObjectException"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testComplexTypeApi() failed."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testSimpleTable
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|dbName
init|=
literal|"simpdb"
decl_stmt|;
name|String
name|tblName
init|=
literal|"simptbl"
decl_stmt|;
name|String
name|tblName2
init|=
literal|"simptbl2"
decl_stmt|;
name|String
name|typeName
init|=
literal|"Person"
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|Type
name|typ1
init|=
operator|new
name|Type
argument_list|()
decl_stmt|;
name|typ1
operator|.
name|setName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|setFields
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"name"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"income"
argument_list|,
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|createType
argument_list|(
name|typ1
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|typ1
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCompressed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"test_param_1"
argument_list|,
literal|"Use this for comments etc"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getBucketCols
argument_list|()
operator|.
name|add
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|isThriftClient
condition|)
block|{
comment|// the createTable() above does not update the location in the 'tbl'
comment|// object when the client is a thrift client and the code below relies
comment|// on the location being present in the 'tbl' object - so get the table
comment|// from the metastore
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
name|Table
name|tbl2
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tbl2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl2
operator|.
name|getDbName
argument_list|()
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl2
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|isCompressed
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|tbl2
operator|.
name|setTableName
argument_list|(
name|tblName2
argument_list|)
expr_stmt|;
name|tbl2
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tbl2
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"EXTERNAL"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"-2"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
init|=
name|client
operator|.
name|getFields
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldSchemas
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldSchemas
operator|.
name|size
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|fieldSchemas
operator|.
name|contains
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemasFull
init|=
name|client
operator|.
name|getSchema
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldSchemasFull
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldSchemasFull
operator|.
name|size
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|fieldSchemasFull
operator|.
name|contains
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|fieldSchemasFull
operator|.
name|contains
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|createTable
argument_list|(
name|tbl2
argument_list|)
expr_stmt|;
if|if
condition|(
name|isThriftClient
condition|)
block|{
name|tbl2
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|tbl2
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Table
name|tbl3
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|tbl3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl3
operator|.
name|getDbName
argument_list|()
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl3
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblName2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl3
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl3
operator|.
name|getSd
argument_list|()
operator|.
name|isCompressed
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl3
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl3
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl3
operator|.
name|getParameters
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|fieldSchemas
operator|=
name|client
operator|.
name|getFields
argument_list|(
name|dbName
argument_list|,
name|tblName2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fieldSchemas
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldSchemas
operator|.
name|size
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|fieldSchemas
operator|.
name|contains
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fieldSchemasFull
operator|=
name|client
operator|.
name|getSchema
argument_list|(
name|dbName
argument_list|,
name|tblName2
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|fieldSchemasFull
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldSchemasFull
operator|.
name|size
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|tbl2
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|fieldSchemasFull
operator|.
name|contains
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tbl2
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|fieldSchemasFull
operator|.
name|contains
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|"Use this for comments etc"
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"test_param_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Partition key list is not empty"
argument_list|,
operator|(
name|tbl2
operator|.
name|getPartitionKeys
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
name|tbl2
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
argument_list|)
expr_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|(
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|)
operator|.
name|toUri
argument_list|()
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testSimpleTable() failed."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|testAlterTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"alterdb"
decl_stmt|;
name|String
name|invTblName
init|=
literal|"alter-tbl"
decl_stmt|;
name|String
name|tblName
init|=
literal|"altertbl"
decl_stmt|;
try|try
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|invCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|invCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"n-ame"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|invCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"in.come"
argument_list|,
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|invTblName
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|invCols
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCompressed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"test_param_1"
argument_list|,
literal|"Use this for comments etc"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getBucketCols
argument_list|()
operator|.
name|add
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|boolean
name|failed
init|=
literal|false
decl_stmt|;
try|try
block|{
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|ex
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|failed
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Able to create table with invalid name: "
operator|+
name|invTblName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"name"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"income"
argument_list|,
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a valid table
name|tbl
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|isThriftClient
condition|)
block|{
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// now try to invalid alter table
name|Table
name|tbl2
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|tbl2
operator|.
name|setTableName
argument_list|(
name|invTblName
argument_list|)
expr_stmt|;
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|invCols
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tbl2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|ex
parameter_list|)
block|{
name|failed
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|failed
condition|)
block|{
name|assertTrue
argument_list|(
literal|"Able to rename table with invalid name: "
operator|+
name|invTblName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// try a valid alter table
name|tbl2
operator|.
name|setTableName
argument_list|(
name|tblName
operator|+
literal|"_renamed"
argument_list|)
expr_stmt|;
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|setNumBuckets
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|client
operator|.
name|alter_table
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|tbl2
argument_list|)
expr_stmt|;
name|Table
name|tbl3
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tbl2
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Alter table didn't succeed. Num buckets is different "
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
name|tbl3
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that data has moved
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
operator|(
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|)
operator|.
name|toUri
argument_list|()
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
literal|"old table location still exists"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"data did not move to new location"
argument_list|,
name|fs
operator|.
name|exists
argument_list|(
operator|new
name|Path
argument_list|(
name|tbl3
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isThriftClient
condition|)
block|{
name|assertEquals
argument_list|(
literal|"alter table didn't move data correct location"
argument_list|,
name|tbl3
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testSimpleTable() failed."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testComplexTable
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"compdb"
decl_stmt|;
name|String
name|tblName
init|=
literal|"comptbl"
decl_stmt|;
name|String
name|typeName
init|=
literal|"Person"
decl_stmt|;
try|try
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropType
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|Type
name|typ1
init|=
operator|new
name|Type
argument_list|()
decl_stmt|;
name|typ1
operator|.
name|setName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|setFields
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"name"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"income"
argument_list|,
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|createType
argument_list|(
name|typ1
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|typ1
operator|.
name|getFields
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCompressed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
literal|"test_param_1"
argument_list|,
literal|"Use this for comments etc"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getBucketCols
argument_list|()
operator|.
name|add
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"9"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setSerializationLib
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|lazy
operator|.
name|LazySimpleSerDe
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartitionKeys
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|DATE_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"hr"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|Table
name|tbl2
init|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|tbl2
operator|.
name|getDbName
argument_list|()
argument_list|,
name|dbName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl2
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|typ1
operator|.
name|getFields
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getNumBuckets
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Use this for comments etc"
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"test_param_1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"name"
argument_list|,
name|tbl2
operator|.
name|getSd
argument_list|()
operator|.
name|getBucketCols
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|tbl2
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|tbl2
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|DATE_TYPE_NAME
argument_list|,
name|tbl2
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
name|tbl2
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ds"
argument_list|,
name|tbl2
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"hr"
argument_list|,
name|tbl2
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
init|=
name|client
operator|.
name|getFields
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldSchemas
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldSchemas
operator|.
name|size
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|fieldSchemas
operator|.
name|contains
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemasFull
init|=
name|client
operator|.
name|getSchema
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|fieldSchemasFull
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|fieldSchemasFull
operator|.
name|size
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
operator|.
name|size
argument_list|()
operator|+
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|fieldSchemasFull
operator|.
name|contains
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|fieldSchemasFull
operator|.
name|contains
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"testComplexTable() failed."
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
name|client
operator|.
name|dropType
argument_list|(
name|typeName
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Unable to drop type "
operator|+
name|typeName
argument_list|,
name|ret
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testGetConfigValue
parameter_list|()
block|{
name|String
name|val
init|=
literal|"value"
decl_stmt|;
if|if
condition|(
operator|!
name|isThriftClient
condition|)
block|{
try|try
block|{
name|assertEquals
argument_list|(
name|client
operator|.
name|getConfigValue
argument_list|(
literal|"hive.key1"
argument_list|,
name|val
argument_list|)
argument_list|,
literal|"value1"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|client
operator|.
name|getConfigValue
argument_list|(
literal|"hive.key2"
argument_list|,
name|val
argument_list|)
argument_list|,
literal|"http://www.example.com"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|client
operator|.
name|getConfigValue
argument_list|(
literal|"hive.key3"
argument_list|,
name|val
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|client
operator|.
name|getConfigValue
argument_list|(
literal|"hive.key4"
argument_list|,
name|val
argument_list|)
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|client
operator|.
name|getConfigValue
argument_list|(
literal|"hive.key5"
argument_list|,
name|val
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|client
operator|.
name|getConfigValue
argument_list|(
literal|null
argument_list|,
name|val
argument_list|)
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
catch|catch
parameter_list|(
name|ConfigValSecurityException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
block|}
name|boolean
name|threwException
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Attempting to get the password should throw an exception
name|client
operator|.
name|getConfigValue
argument_list|(
literal|"javax.jdo.option.ConnectionPassword"
argument_list|,
literal|"password"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
assert|assert
operator|(
literal|false
operator|)
assert|;
block|}
catch|catch
parameter_list|(
name|ConfigValSecurityException
name|e
parameter_list|)
block|{
name|threwException
operator|=
literal|true
expr_stmt|;
block|}
assert|assert
operator|(
name|threwException
operator|)
assert|;
block|}
specifier|private
specifier|static
name|void
name|adjust
parameter_list|(
name|HiveMetaStoreClient
name|client
parameter_list|,
name|Partition
name|part
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|Partition
name|part_get
init|=
name|client
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|part
operator|.
name|setCreateTime
argument_list|(
name|part_get
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|putToParameters
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Constants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|part_get
operator|.
name|getCreateTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|silentDropDatabase
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
try|try
block|{
for|for
control|(
name|String
name|tableName
range|:
name|client
operator|.
name|getTables
argument_list|(
name|dbName
argument_list|,
literal|"*"
argument_list|)
control|)
block|{
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{     }
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{     }
block|}
comment|/**    * Tests for list partition by filter functionality.    * @throws Exception    */
specifier|public
name|void
name|testPartitionFilter
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"filterdb"
decl_stmt|;
name|String
name|tblName
init|=
literal|"filtertbl"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
literal|"p11"
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
literal|"p21"
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
literal|"p31"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|vals2
operator|.
name|add
argument_list|(
literal|"p11"
argument_list|)
expr_stmt|;
name|vals2
operator|.
name|add
argument_list|(
literal|"p22"
argument_list|)
expr_stmt|;
name|vals2
operator|.
name|add
argument_list|(
literal|"p31"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals3
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|vals3
operator|.
name|add
argument_list|(
literal|"p12"
argument_list|)
expr_stmt|;
name|vals3
operator|.
name|add
argument_list|(
literal|"p21"
argument_list|)
expr_stmt|;
name|vals3
operator|.
name|add
argument_list|(
literal|"p31"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals4
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|vals4
operator|.
name|add
argument_list|(
literal|"p12"
argument_list|)
expr_stmt|;
name|vals4
operator|.
name|add
argument_list|(
literal|"p23"
argument_list|)
expr_stmt|;
name|vals4
operator|.
name|add
argument_list|(
literal|"p31"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals5
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|vals5
operator|.
name|add
argument_list|(
literal|"p13"
argument_list|)
expr_stmt|;
name|vals5
operator|.
name|add
argument_list|(
literal|"p24"
argument_list|)
expr_stmt|;
name|vals5
operator|.
name|add
argument_list|(
literal|"p31"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals6
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|vals6
operator|.
name|add
argument_list|(
literal|"p13"
argument_list|)
expr_stmt|;
name|vals6
operator|.
name|add
argument_list|(
literal|"p25"
argument_list|)
expr_stmt|;
name|vals6
operator|.
name|add
argument_list|(
literal|"p31"
argument_list|)
expr_stmt|;
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"c1"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"c2"
argument_list|,
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"p1"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"p2"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"p3"
argument_list|,
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCompressed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSortCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartitionKeys
argument_list|(
name|partCols
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|add_partition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals
argument_list|,
literal|"part1"
argument_list|)
expr_stmt|;
name|add_partition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals2
argument_list|,
literal|"part2"
argument_list|)
expr_stmt|;
name|add_partition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals3
argument_list|,
literal|"part3"
argument_list|)
expr_stmt|;
name|add_partition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals4
argument_list|,
literal|"part4"
argument_list|)
expr_stmt|;
name|add_partition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals5
argument_list|,
literal|"part5"
argument_list|)
expr_stmt|;
name|add_partition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals6
argument_list|,
literal|"part6"
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1 = \"p11\""
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1 = \"p12\""
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p2 = \"p21\""
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p2 = \"p23\""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1 = \"p11\" and p2=\"p22\""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1 = \"p11\" or p2=\"p23\""
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1 = \"p11\" or p1=\"p12\""
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1 = \"p11\" or (p1=\"p12\" and p2=\"p21\")"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1 = \"p11\" or (p1=\"p12\" and p2=\"p21\") Or "
operator|+
literal|"(p1=\"p13\" aNd p2=\"p24\")"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|//test for and or precedence
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1=\"p12\" and (p2=\"p27\" Or p2=\"p21\")"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1=\"p12\" and p2=\"p27\" Or p2=\"p21\""
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1> \"p12\""
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1>= \"p12\""
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1< \"p12\""
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1<= \"p12\""
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1<> \"p12\""
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1 like \"p1.*\""
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p2 like \"p.*3\""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|//Test for setting the maximum partition count
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1>= \"p12\""
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"User specified row limit for partitions"
argument_list|,
literal|2
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|//Negative tests
name|Exception
name|me
init|=
literal|null
decl_stmt|;
try|try
block|{
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p3>= \"p12\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|me
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Filter on int partition key"
argument_list|,
name|me
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Filtering is supported only on partition keys of type string"
argument_list|)
argument_list|)
expr_stmt|;
name|me
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"c1>= \"p12\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|me
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Filter on invalid key"
argument_list|,
name|me
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"<c1> is not a partitioning key for the table"
argument_list|)
argument_list|)
expr_stmt|;
name|me
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"c1>= "
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|me
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Invalid filter string"
argument_list|,
name|me
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Error parsing partition filter"
argument_list|)
argument_list|)
expr_stmt|;
name|me
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
literal|"invDBName"
argument_list|,
literal|"invTableName"
argument_list|,
literal|"p1 = \"p11\""
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|me
operator|=
name|e
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|me
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"NoSuchObject exception"
argument_list|,
name|me
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"database/table does not exist"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test filtering on table with single partition    * @throws Exception    */
specifier|public
name|void
name|testFilterSinglePartition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"filterdb"
decl_stmt|;
name|String
name|tblName
init|=
literal|"filtertbl"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
literal|"p11"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|vals2
operator|.
name|add
argument_list|(
literal|"p12"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals3
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|vals3
operator|.
name|add
argument_list|(
literal|"p13"
argument_list|)
expr_stmt|;
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"c1"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"c2"
argument_list|,
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"p1"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCompressed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSortCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartitionKeys
argument_list|(
name|partCols
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|add_partition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals
argument_list|,
literal|"part1"
argument_list|)
expr_stmt|;
name|add_partition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals2
argument_list|,
literal|"part2"
argument_list|)
expr_stmt|;
name|add_partition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals3
argument_list|,
literal|"part3"
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1 = \"p12\""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1< \"p12\""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1> \"p12\""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1>= \"p12\""
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1<= \"p12\""
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1<> \"p12\""
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1 like \"p1.*\""
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p1 like \"p.*2\""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
comment|/**    * Test filtering based on the value of the last partition    * @throws Exception    */
specifier|public
name|void
name|testFilterLastPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"filterdb"
decl_stmt|;
name|String
name|tblName
init|=
literal|"filtertbl"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|vals
operator|.
name|add
argument_list|(
literal|"p11"
argument_list|)
expr_stmt|;
name|vals
operator|.
name|add
argument_list|(
literal|"p21"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals2
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|vals2
operator|.
name|add
argument_list|(
literal|"p11"
argument_list|)
expr_stmt|;
name|vals2
operator|.
name|add
argument_list|(
literal|"p22"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|vals3
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|vals3
operator|.
name|add
argument_list|(
literal|"p12"
argument_list|)
expr_stmt|;
name|vals3
operator|.
name|add
argument_list|(
literal|"p21"
argument_list|)
expr_stmt|;
name|silentDropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|client
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"c1"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"c2"
argument_list|,
name|Constants
operator|.
name|INT_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"p1"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"p2"
argument_list|,
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|tbl
operator|.
name|setSd
argument_list|(
name|sd
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCompressed
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSortCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|setPartitionKeys
argument_list|(
name|partCols
argument_list|)
expr_stmt|;
name|client
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|client
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|add_partition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals
argument_list|,
literal|"part1"
argument_list|)
expr_stmt|;
name|add_partition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals2
argument_list|,
literal|"part2"
argument_list|)
expr_stmt|;
name|add_partition
argument_list|(
name|client
argument_list|,
name|tbl
argument_list|,
name|vals3
argument_list|,
literal|"part3"
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p2 = \"p21\""
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p2< \"p23\""
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p2> \"p21\""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p2>= \"p21\""
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p2<= \"p21\""
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p2<> \"p12\""
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p2 like \"p2.*\""
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|checkFilter
argument_list|(
name|client
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
literal|"p2 like \"p.*2\""
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|client
operator|.
name|dropDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkFilter
parameter_list|(
name|HiveMetaStoreClient
name|client
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
name|int
name|expectedCount
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|client
operator|.
name|listPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Partition count expected for filter "
operator|+
name|filter
argument_list|,
name|expectedCount
argument_list|,
name|partitions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|add_partition
parameter_list|(
name|HiveMetaStoreClient
name|client
parameter_list|,
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|vals
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|part
operator|.
name|setDbName
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTableName
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setValues
argument_list|(
name|vals
argument_list|)
expr_stmt|;
name|part
operator|.
name|setParameters
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setSd
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setSerdeInfo
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
name|location
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_partition
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
comment|/**    * Tests {@link HiveMetaStoreClient#newSynchronizedClient}.  Does not    * actually test multithreading, but does verify that the proxy    * at least works correctly.    */
specifier|public
name|void
name|testSynchronized
parameter_list|()
throws|throws
name|Exception
block|{
name|IMetaStoreClient
name|synchronizedClient
init|=
name|HiveMetaStoreClient
operator|.
name|newSynchronizedClient
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|databases
init|=
name|synchronizedClient
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|databases
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

