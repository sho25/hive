begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreAddPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreEventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|// Validate CharacterWhitelistPreEventHook to ensure it refuses to process
end_comment

begin_comment
comment|// a partition add or append request if partition fields contain
end_comment

begin_comment
comment|// Unicode characters or commas
end_comment

begin_class
specifier|public
class|class
name|TestPartitionNameWhitelistPreEventHook
block|{
comment|// Runs an instance of DisallowUnicodePreEventListener
comment|// Returns whether or not it succeeded
specifier|private
name|boolean
name|runHook
parameter_list|(
name|PreEventContext
name|event
parameter_list|)
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
comment|// match the printable ASCII characters except for commas
name|config
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PARTITION_NAME_WHITELIST_PATTERN
operator|.
name|varname
argument_list|,
literal|"[\\x20-\\x7E&&[^,]]*"
argument_list|)
expr_stmt|;
name|PartitionNameWhitelistPreEventListener
name|hook
init|=
operator|new
name|PartitionNameWhitelistPreEventListener
argument_list|(
name|config
argument_list|)
decl_stmt|;
try|try
block|{
name|hook
operator|.
name|onEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|// Sample data
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPartValsWithUnicode
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
literal|"klâwen"
argument_list|)
expr_stmt|;
name|partVals
operator|.
name|add
argument_list|(
literal|"tägelîch"
argument_list|)
expr_stmt|;
return|return
name|partVals
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPartValsWithCommas
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
literal|"a,b"
argument_list|)
expr_stmt|;
name|partVals
operator|.
name|add
argument_list|(
literal|"c,d,e,f"
argument_list|)
expr_stmt|;
return|return
name|partVals
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPartValsWithValidCharacters
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
literal|"part1"
argument_list|)
expr_stmt|;
name|partVals
operator|.
name|add
argument_list|(
literal|"part2"
argument_list|)
expr_stmt|;
return|return
name|partVals
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionWithCommas
parameter_list|()
block|{
name|Partition
name|partition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|partition
operator|.
name|setValues
argument_list|(
name|getPartValsWithCommas
argument_list|()
argument_list|)
expr_stmt|;
name|PreAddPartitionEvent
name|event
init|=
operator|new
name|PreAddPartitionEvent
argument_list|(
name|partition
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Add a partition with commas in name"
argument_list|,
name|runHook
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionWithUnicode
parameter_list|()
block|{
name|Partition
name|partition
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|partition
operator|.
name|setValues
argument_list|(
name|getPartValsWithUnicode
argument_list|()
argument_list|)
expr_stmt|;
name|PreAddPartitionEvent
name|event
init|=
operator|new
name|PreAddPartitionEvent
argument_list|(
name|partition
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Add a partition with unicode characters in name"
argument_list|,
name|runHook
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddPartitionWithValidPartVal
parameter_list|()
block|{
name|Partition
name|p
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|p
operator|.
name|setValues
argument_list|(
name|getPartValsWithValidCharacters
argument_list|()
argument_list|)
expr_stmt|;
name|PreAddPartitionEvent
name|event
init|=
operator|new
name|PreAddPartitionEvent
argument_list|(
name|p
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Add a partition with unicode characters in name"
argument_list|,
name|runHook
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendPartitionWithUnicode
parameter_list|()
block|{
name|Partition
name|p
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|p
operator|.
name|setValues
argument_list|(
name|getPartValsWithUnicode
argument_list|()
argument_list|)
expr_stmt|;
name|PreAddPartitionEvent
name|event
init|=
operator|new
name|PreAddPartitionEvent
argument_list|(
name|p
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Append a partition with unicode characters in name"
argument_list|,
name|runHook
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendPartitionWithCommas
parameter_list|()
block|{
name|Partition
name|p
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|p
operator|.
name|setValues
argument_list|(
name|getPartValsWithCommas
argument_list|()
argument_list|)
expr_stmt|;
name|PreAddPartitionEvent
name|event
init|=
operator|new
name|PreAddPartitionEvent
argument_list|(
name|p
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
literal|"Append a partition with unicode characters in name"
argument_list|,
name|runHook
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendPartitionWithValidCharacters
parameter_list|()
block|{
name|Partition
name|p
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|p
operator|.
name|setValues
argument_list|(
name|getPartValsWithValidCharacters
argument_list|()
argument_list|)
expr_stmt|;
name|PreAddPartitionEvent
name|event
init|=
operator|new
name|PreAddPartitionEvent
argument_list|(
name|p
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
literal|"Append a partition with no unicode characters in name"
argument_list|,
name|runHook
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

