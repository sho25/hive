begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_class
specifier|public
class|class
name|MetaStoreTestBase
extends|extends
name|TestCase
block|{
comment|/**    * Set things up - create mini dfs cluster and mount the fuse filesystem.    */
specifier|static
specifier|final
specifier|protected
name|Configuration
name|conf_
decl_stmt|;
specifier|static
specifier|final
specifier|protected
name|Path
name|whRoot_
decl_stmt|;
specifier|static
specifier|final
specifier|protected
name|File
name|msRoot_
decl_stmt|;
specifier|static
specifier|final
specifier|protected
name|FileSystem
name|fileSys_
decl_stmt|;
static|static
block|{
try|try
block|{
name|conf_
operator|=
operator|new
name|Configuration
argument_list|()
expr_stmt|;
name|File
name|testRoot
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"hive.metastore.test"
argument_list|,
literal|".dir"
argument_list|)
decl_stmt|;
name|testRoot
operator|.
name|delete
argument_list|()
expr_stmt|;
name|testRoot
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|msRoot_
operator|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|,
literal|"metadb"
argument_list|)
expr_stmt|;
name|msRoot_
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|msRoot_
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
name|File
name|whRootFile
init|=
operator|new
name|File
argument_list|(
name|testRoot
argument_list|,
literal|"hdfs"
argument_list|)
decl_stmt|;
name|whRootFile
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|whRoot_
operator|=
operator|new
name|Path
argument_list|(
name|whRootFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|conf_
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREDIRECTORY
operator|.
name|varname
argument_list|,
name|msRoot_
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|conf_
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
argument_list|,
name|whRootFile
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|whRoot_
operator|.
name|getFileSystem
argument_list|(
name|conf_
argument_list|)
operator|.
name|mkdirs
argument_list|(
name|whRoot_
argument_list|)
expr_stmt|;
name|fileSys_
operator|=
name|whRoot_
operator|.
name|getFileSystem
argument_list|(
name|conf_
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|MetaStoreTestBase
parameter_list|()
throws|throws
name|Exception
block|{   }
specifier|public
name|void
name|createDB
parameter_list|(
name|String
name|db
parameter_list|)
throws|throws
name|Exception
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|msRoot_
argument_list|,
name|db
operator|+
literal|".db"
argument_list|)
decl_stmt|;
name|f
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|Exception
block|{
name|MetaStoreUtils
operator|.
name|recursiveDelete
argument_list|(
name|msRoot_
argument_list|)
expr_stmt|;
name|msRoot_
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|fileSys_
operator|.
name|delete
argument_list|(
name|whRoot_
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileSys_
operator|.
name|mkdirs
argument_list|(
name|whRoot_
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|public
name|Properties
name|createSchema
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|schema
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|schema
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Constants
operator|.
name|META_TABLE_NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Constants
operator|.
name|META_TABLE_DB
argument_list|,
name|db
argument_list|)
expr_stmt|;
comment|//schema.setProperty(org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_SERDE, org.apache.hadoop.hive.metastore.api.Constants.META_SERDE);
name|schema
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Constants
operator|.
name|META_TABLE_COLUMNS
argument_list|,
literal|"foo,bar"
argument_list|)
expr_stmt|;
name|schema
operator|.
name|setProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|SERIALIZATION_FORMAT
argument_list|,
literal|"\t"
argument_list|)
expr_stmt|;
comment|//Path tPath = whRoot_.suffix("/" + db + ".db/" + name);
comment|//        schema.setProperty(Constants.META_TABLE_LOCATION, tPath.toString());
return|return
name|schema
return|;
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|Properties
name|schema
init|=
name|createSchema
argument_list|(
name|db
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|fileSys_
operator|.
name|mkdirs
argument_list|(
operator|new
name|Path
argument_list|(
name|schema
operator|.
name|getProperty
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Constants
operator|.
name|META_TABLE_LOCATION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|msRoot_
argument_list|,
name|db
operator|+
literal|".db/"
operator|+
name|name
argument_list|)
decl_stmt|;
name|f
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|f
operator|=
operator|new
name|File
argument_list|(
name|f
argument_list|,
literal|"schema"
argument_list|)
expr_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|schema
operator|.
name|store
argument_list|(
name|fos
argument_list|,
literal|"meta data"
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

