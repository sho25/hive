begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Put
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DoubleColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|invocation
operator|.
name|InvocationOnMock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|stubbing
operator|.
name|Answer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_class
specifier|public
class|class
name|TestStatsCache
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|TestStatsCache
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Mock
name|HTableInterface
name|htable
decl_stmt|;
specifier|static
name|Put
index|[]
name|puts
init|=
operator|new
name|Put
index|[
literal|2
index|]
decl_stmt|;
name|HBaseReadWrite
name|hrw
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|MockitoAnnotations
operator|.
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// For reasons I don't understand we have to do the mockito setup here in before, so we allow
comment|// each method to place one put in puts[], and then we return that.
name|Mockito
operator|.
name|when
argument_list|(
name|htable
operator|.
name|get
argument_list|(
name|Mockito
operator|.
name|any
argument_list|(
name|Get
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Result
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Result
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|puts
index|[
literal|0
index|]
operator|==
literal|null
condition|)
return|return
operator|new
name|Result
argument_list|()
return|;
for|for
control|(
name|Cell
name|cell
range|:
name|puts
index|[
literal|0
index|]
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|firstEntry
argument_list|()
operator|.
name|getValue
argument_list|()
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
return|return
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|htable
operator|.
name|get
argument_list|(
name|Mockito
operator|.
name|anyList
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenAnswer
argument_list|(
operator|new
name|Answer
argument_list|<
name|Result
index|[]
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Result
index|[]
name|answer
parameter_list|(
name|InvocationOnMock
name|invocation
parameter_list|)
throws|throws
name|Throwable
block|{
name|Result
index|[]
name|results
init|=
operator|new
name|Result
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|Cell
argument_list|>
name|cells
init|=
operator|new
name|ArrayList
argument_list|<
name|Cell
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|puts
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
name|results
index|[
name|i
index|]
operator|=
operator|new
name|Result
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Cell
name|cell
range|:
name|puts
index|[
name|i
index|]
operator|.
name|getFamilyCellMap
argument_list|()
operator|.
name|firstEntry
argument_list|()
operator|.
name|getValue
argument_list|()
control|)
block|{
name|cells
operator|.
name|add
argument_list|(
name|cell
argument_list|)
expr_stmt|;
block|}
name|results
index|[
name|i
index|]
operator|=
name|Result
operator|.
name|create
argument_list|(
name|cells
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|HBaseConnection
name|hconn
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|HBaseConnection
operator|.
name|class
argument_list|)
decl_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|hconn
operator|.
name|getHBaseTable
argument_list|(
name|Mockito
operator|.
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|htable
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_HBASE_CACHE_SIZE
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_HBASE_CONNECTION_CLASS
argument_list|,
name|HBaseReadWrite
operator|.
name|TEST_CONN
argument_list|)
expr_stmt|;
name|HBaseReadWrite
operator|.
name|setTestConnection
argument_list|(
name|hconn
argument_list|)
expr_stmt|;
name|hrw
operator|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|StatsCache
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|puts
index|[
literal|0
index|]
operator|=
name|puts
index|[
literal|1
index|]
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|tableAllHit
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"mytable"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
operator|new
name|BooleanColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
operator|new
name|LongColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|hrw
operator|.
name|updateStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|cs
operator|=
operator|new
name|ColumnStatistics
argument_list|()
expr_stmt|;
name|desc
operator|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col3"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|data
operator|.
name|setDoubleStats
argument_list|(
operator|new
name|DoubleColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|hrw
operator|.
name|updateStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|cs
argument_list|)
expr_stmt|;
comment|// Now, ask for all 3 of these.  We should hit all on the cache.  We'll know if we don't
comment|// because we've mocked hbase and it will return null on the get.
name|cs
operator|=
name|hrw
operator|.
name|getTableStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// There's no need to check every last field in each obj, as the objects aren't de/serialized
comment|// in the cache.  Just make sure we found the objects we expected.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cs
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|csobj
range|:
name|cs
operator|.
name|getStatsObj
argument_list|()
control|)
block|{
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col1"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|BOOLEAN_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col2"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|LONG_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col3"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|DOUBLE_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unknown column"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|tableAllMiss
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"misstable"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Build a column stats object to return from mockito hbase
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
operator|new
name|BooleanColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|byte
index|[]
name|serialized
init|=
name|HBaseUtils
operator|.
name|serializeStatsForOneColumn
argument_list|(
name|cs
argument_list|,
name|obj
argument_list|)
decl_stmt|;
comment|// The easiest way to get this into hbase format is to shove it into a put and then pull out
comment|// the result for mockito to return.
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|HBaseUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HBaseReadWrite
operator|.
name|STATS_CF
argument_list|,
literal|"col1"
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|serialized
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
operator|new
name|LongColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|serialized
operator|=
name|HBaseUtils
operator|.
name|serializeStatsForOneColumn
argument_list|(
name|cs
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HBaseReadWrite
operator|.
name|STATS_CF
argument_list|,
literal|"col2"
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|serialized
argument_list|)
expr_stmt|;
name|puts
index|[
literal|0
index|]
operator|=
name|put
expr_stmt|;
comment|// Now, ask for all 3 of these.  We should miss all on the cache.
name|cs
operator|=
name|hrw
operator|.
name|getTableStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// There's no need to check every last field in each obj, as the objects aren't de/serialized
comment|// in the cache.  Just make sure we found the objects we expected.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|cs
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|csobj
range|:
name|cs
operator|.
name|getStatsObj
argument_list|()
control|)
block|{
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col1"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|BOOLEAN_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col2"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|LONG_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unknown column"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|tableSomeHit
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"sometable"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
operator|new
name|BooleanColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
operator|new
name|LongColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|hrw
operator|.
name|updateStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|cs
operator|=
operator|new
name|ColumnStatistics
argument_list|()
expr_stmt|;
name|desc
operator|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col3"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|data
operator|.
name|setDoubleStats
argument_list|(
operator|new
name|DoubleColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|HBaseUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|serialized
init|=
name|HBaseUtils
operator|.
name|serializeStatsForOneColumn
argument_list|(
name|cs
argument_list|,
name|obj
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HBaseReadWrite
operator|.
name|STATS_CF
argument_list|,
literal|"col3"
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|serialized
argument_list|)
expr_stmt|;
name|puts
index|[
literal|0
index|]
operator|=
name|put
expr_stmt|;
comment|// Now, ask for all 3 of these.  We should hit the first two on the cache and the third from
comment|// the get
name|cs
operator|=
name|hrw
operator|.
name|getTableStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
comment|// There's no need to check every last field in each obj, as the objects aren't de/serialized
comment|// in the cache.  Just make sure we found the objects we expected.
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|cs
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|csobj
range|:
name|cs
operator|.
name|getStatsObj
argument_list|()
control|)
block|{
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col1"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|BOOLEAN_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col2"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|LONG_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col3"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|DOUBLE_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unknown column"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|tableTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"timeouttable"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
operator|new
name|BooleanColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
operator|new
name|LongColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|hrw
operator|.
name|updateStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|StatsCache
operator|.
name|getInstance
argument_list|(
literal|null
argument_list|)
operator|.
name|makeWayOld
argument_list|()
expr_stmt|;
comment|// Now, ask for all 3 of these.  We should hit all on the cache.  We'll know if we don't
comment|// because we've mocked hbase and it will return null on the get.
name|cs
operator|=
name|hrw
operator|.
name|getTableStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cs
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|partAllHit
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"partallhit"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals1
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"today"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals2
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yesterday"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=today"
argument_list|,
literal|"ds=yeserday"
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
name|partNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
operator|new
name|BooleanColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|hrw
operator|.
name|updateStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|partVals1
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|cs
operator|=
operator|new
name|ColumnStatistics
argument_list|()
expr_stmt|;
name|desc
operator|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
name|partNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
operator|new
name|LongColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|hrw
operator|.
name|updateStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|partVals1
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|cs
operator|=
operator|new
name|ColumnStatistics
argument_list|()
expr_stmt|;
name|desc
operator|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
name|partNames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
operator|new
name|BooleanColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|hrw
operator|.
name|updateStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
name|partVals2
argument_list|,
name|cs
argument_list|)
expr_stmt|;
comment|// Now, ask for all 3 of these.  We should hit all on the cache.  We'll know if we don't
comment|// because we've mocked hbase and it will return null on the get.
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|results
init|=
name|hrw
operator|.
name|getPartitionStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals1
argument_list|,
name|partVals2
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getPartName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|csobj
range|:
name|cs
operator|.
name|getStatsObj
argument_list|()
control|)
block|{
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col1"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|BOOLEAN_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col2"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|LONG_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unknown column"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|partAllMiss
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"misspart"
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yesterday"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=today"
argument_list|,
literal|"ds=yeserday"
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Build a column stats object to return from mockito hbase
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
name|partNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
operator|new
name|BooleanColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|byte
index|[]
name|serialized
init|=
name|HBaseUtils
operator|.
name|serializeStatsForOneColumn
argument_list|(
name|cs
argument_list|,
name|obj
argument_list|)
decl_stmt|;
comment|// The easiest way to get this into hbase format is to shove it into a put and then pull out
comment|// the result for mockito to return.
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|HBaseUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HBaseReadWrite
operator|.
name|STATS_CF
argument_list|,
literal|"col1"
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|serialized
argument_list|)
expr_stmt|;
name|puts
index|[
literal|0
index|]
operator|=
name|put
expr_stmt|;
name|cs
operator|=
operator|new
name|ColumnStatistics
argument_list|()
expr_stmt|;
name|desc
operator|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
name|partNames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
operator|new
name|LongColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|serialized
operator|=
name|HBaseUtils
operator|.
name|serializeStatsForOneColumn
argument_list|(
name|cs
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|HBaseUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HBaseReadWrite
operator|.
name|STATS_CF
argument_list|,
literal|"col2"
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|serialized
argument_list|)
expr_stmt|;
name|puts
index|[
literal|1
index|]
operator|=
name|put
expr_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|results
init|=
name|hrw
operator|.
name|getPartitionStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|partVals
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getPartName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|csobj
range|:
name|cs
operator|.
name|getStatsObj
argument_list|()
control|)
block|{
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col1"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|BOOLEAN_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col2"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|LONG_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unknown column"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|partSomeHit
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"partialpart"
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
literal|"today"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"yesterday"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"ds=today"
argument_list|,
literal|"ds=yeserday"
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// Build a column stats object to return from mockito hbase
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
name|partNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
operator|new
name|BooleanColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|byte
index|[]
name|serialized
init|=
name|HBaseUtils
operator|.
name|serializeStatsForOneColumn
argument_list|(
name|cs
argument_list|,
name|obj
argument_list|)
decl_stmt|;
comment|// The easiest way to get this into hbase format is to shove it into a put and then pull out
comment|// the result for mockito to return.
name|Put
name|put
init|=
operator|new
name|Put
argument_list|(
name|HBaseUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HBaseReadWrite
operator|.
name|STATS_CF
argument_list|,
literal|"col1"
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|serialized
argument_list|)
expr_stmt|;
name|puts
index|[
literal|0
index|]
operator|=
name|put
expr_stmt|;
comment|// col2 partition 1 goes into the cache
name|cs
operator|=
operator|new
name|ColumnStatistics
argument_list|()
expr_stmt|;
name|desc
operator|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
name|partNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
operator|new
name|LongColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|hrw
operator|.
name|updateStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|partVals
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|cs
operator|=
operator|new
name|ColumnStatistics
argument_list|()
expr_stmt|;
name|desc
operator|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
name|partNames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|obj
operator|=
operator|new
name|ColumnStatisticsObj
argument_list|()
expr_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|ColumnStatisticsData
argument_list|()
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
operator|new
name|LongColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|serialized
operator|=
name|HBaseUtils
operator|.
name|serializeStatsForOneColumn
argument_list|(
name|cs
argument_list|,
name|obj
argument_list|)
expr_stmt|;
name|put
operator|=
operator|new
name|Put
argument_list|(
name|HBaseUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|put
operator|.
name|add
argument_list|(
name|HBaseReadWrite
operator|.
name|STATS_CF
argument_list|,
literal|"col2"
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|,
name|serialized
argument_list|)
expr_stmt|;
name|puts
index|[
literal|1
index|]
operator|=
name|put
expr_stmt|;
comment|// Now, ask for all 3 of these.  We should miss all on the cache.
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|results
init|=
name|hrw
operator|.
name|getPartitionStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|partVals
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|results
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|now
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|dbName
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|tableName
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|partNames
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|results
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getPartName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|cs
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|isIsTblLevel
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|csobj
range|:
name|cs
operator|.
name|getStatsObj
argument_list|()
control|)
block|{
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col1"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|BOOLEAN_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|csobj
operator|.
name|getColName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"col2"
argument_list|)
condition|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|LONG_STATS
argument_list|,
name|csobj
operator|.
name|getStatsData
argument_list|()
operator|.
name|getSetField
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Unknown column"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|partTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"timeoutpart"
decl_stmt|;
name|String
name|partName
init|=
literal|"ds=today"
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"today"
argument_list|)
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
operator|new
name|BooleanColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|hrw
operator|.
name|updateStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|partVals
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|StatsCache
operator|.
name|getInstance
argument_list|(
literal|null
argument_list|)
operator|.
name|makeWayOld
argument_list|()
expr_stmt|;
comment|// Because our mocked 'get' always returns two results, I have to pass two part names, even
comment|// though both will return nothing.
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|results
init|=
name|hrw
operator|.
name|getPartitionStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partName
argument_list|,
literal|"fred"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"fred"
argument_list|)
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|,
literal|"col2"
argument_list|,
literal|"col3"
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|results
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|results
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getStatsObjSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|cleaning
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"cleaning"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col"
operator|+
name|i
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
operator|new
name|BooleanColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
block|}
name|hrw
operator|.
name|updateStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|cs
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|15
argument_list|,
name|StatsCache
operator|.
name|getInstance
argument_list|(
literal|null
argument_list|)
operator|.
name|cacheSize
argument_list|()
argument_list|)
expr_stmt|;
name|StatsCache
operator|.
name|getInstance
argument_list|(
literal|null
argument_list|)
operator|.
name|makeWayOld
argument_list|()
expr_stmt|;
comment|// Put one more in.  This should throw it over the edge and cause it to clean.
name|cs
operator|=
operator|new
name|ColumnStatistics
argument_list|()
expr_stmt|;
name|desc
operator|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|true
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col16"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"boolean"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|data
operator|.
name|setBooleanStats
argument_list|(
operator|new
name|BooleanColumnStatsData
argument_list|()
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|hrw
operator|.
name|updateStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|cs
argument_list|)
expr_stmt|;
while|while
condition|(
name|StatsCache
operator|.
name|getInstance
argument_list|(
literal|null
argument_list|)
operator|.
name|cleaning
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|250
argument_list|)
expr_stmt|;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|StatsCache
operator|.
name|getInstance
argument_list|(
literal|null
argument_list|)
operator|.
name|cacheSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO test cleaning
block|}
end_class

end_unit

