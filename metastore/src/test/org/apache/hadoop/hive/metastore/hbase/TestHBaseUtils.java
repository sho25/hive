begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_class
specifier|public
class|class
name|TestHBaseUtils
block|{
annotation|@
name|Test
specifier|public
name|void
name|privilegeSerialization
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPrivilegeSet
name|pps
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
name|pps
operator|.
name|setUserPrivileges
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|pps
operator|.
name|setRolePrivileges
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|put
argument_list|(
literal|"fred"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"read"
argument_list|,
literal|1
argument_list|,
literal|"daphne"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|put
argument_list|(
literal|"wilma"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"write"
argument_list|,
literal|1
argument_list|,
literal|"scooby"
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|put
argument_list|(
literal|"role1"
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"exec"
argument_list|,
literal|1
argument_list|,
literal|"shaggy"
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|serialized
init|=
name|HBaseUtils
operator|.
name|writePrivileges
argument_list|(
name|pps
argument_list|)
decl_stmt|;
name|pps
operator|=
name|HBaseUtils
operator|.
name|readPrivileges
argument_list|(
name|serialized
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
literal|"fred"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegeGrantInfo
name|pgi
init|=
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
literal|"fred"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"read"
argument_list|,
name|pgi
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pgi
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"daphne"
argument_list|,
name|pgi
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|pgi
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pgi
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
literal|"wilma"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pgi
operator|=
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
literal|"wilma"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"write"
argument_list|,
name|pgi
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pgi
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"scooby"
argument_list|,
name|pgi
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|USER
argument_list|,
name|pgi
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|pgi
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
literal|"role1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|pgi
operator|=
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
literal|"role1"
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"exec"
argument_list|,
name|pgi
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|pgi
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"shaggy"
argument_list|,
name|pgi
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|pgi
operator|.
name|getGrantorType
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|pgi
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

