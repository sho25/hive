begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|StatObjectConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsDesc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DecimalColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DoubleColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|MockitoAnnotations
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_class
specifier|public
class|class
name|TestHBaseAggregateStatsNDVUniformDist
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestHBaseAggregateStatsNDVUniformDist
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Mock
name|HTableInterface
name|htable
decl_stmt|;
specifier|private
name|HBaseStore
name|store
decl_stmt|;
name|SortedMap
argument_list|<
name|String
argument_list|,
name|Cell
argument_list|>
name|rows
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// NDV will be 3 for bitVectors[0] and 12 for bitVectors[1]
name|String
name|bitVectors
index|[]
init|=
block|{
literal|"{0, 4, 5, 7}{0, 1}{0, 1, 2}{0, 1, 4}{0}{0, 2}{0, 3}{0, 2, 3, 4}{0, 1, 4}{0, 1}{0}{0, 1, 3, 8}{0, 2}{0, 2}{0, 9}{0, 1, 4}"
block|,
literal|"{1, 2}{1, 2}{1, 2}{1, 2}{1, 2}{1, 2}{1, 2}{1, 2}{1, 2}{1, 2}{1, 2}{1, 2}{1, 2}{1, 2}{1, 2}{1, 2}"
block|}
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|IOException
block|{
name|MockitoAnnotations
operator|.
name|initMocks
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HBaseReadWrite
operator|.
name|NO_CACHE_CONF
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setBoolean
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_METASTORE_STATS_NDV_DENSITY_FUNCTION
operator|.
name|varname
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|=
name|MockUtils
operator|.
name|init
argument_list|(
name|conf
argument_list|,
name|htable
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|store
operator|.
name|backdoor
argument_list|()
operator|.
name|getStatsCache
argument_list|()
operator|.
name|resetCounters
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
interface|interface
name|Checker
block|{
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
function_decl|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|allPartitionsHaveBitVectorStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"snp"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col1"
argument_list|,
literal|"long"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVal
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/default/hit/ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|partVal
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|psd
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col1"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|LongColumnStatsData
name|dcsd
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|dcsd
operator|.
name|setHighValue
argument_list|(
literal|1000
operator|+
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setLowValue
argument_list|(
operator|-
literal|1000
operator|-
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumNulls
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumDVs
argument_list|(
literal|10
operator|*
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setBitVectors
argument_list|(
name|bitVectors
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|dcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVal
argument_list|)
expr_stmt|;
block|}
name|Checker
name|statChecker
init|=
operator|new
name|Checker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col1"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"long"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|LongColumnStatsData
name|lcsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1009
argument_list|,
name|lcsd
operator|.
name|getHighValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1009
argument_list|,
name|lcsd
operator|.
name|getLowValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|45
argument_list|,
name|lcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|lcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
literal|"ds="
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|AggrStats
name|aggrStats
init|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col1"
argument_list|)
argument_list|)
decl_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noPartitionsHaveBitVectorStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"snp"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col2"
argument_list|,
literal|"long"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVal
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/default/hit/ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|partVal
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|psd
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col2"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|LongColumnStatsData
name|dcsd
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|dcsd
operator|.
name|setHighValue
argument_list|(
literal|1000
operator|+
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setLowValue
argument_list|(
operator|-
literal|1000
operator|-
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumNulls
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumDVs
argument_list|(
literal|10
operator|*
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|dcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVal
argument_list|)
expr_stmt|;
block|}
name|Checker
name|statChecker
init|=
operator|new
name|Checker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col2"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"long"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|LongColumnStatsData
name|lcsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1009
argument_list|,
name|lcsd
operator|.
name|getHighValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1009
argument_list|,
name|lcsd
operator|.
name|getLowValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|45
argument_list|,
name|lcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|91
argument_list|,
name|lcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
literal|"ds="
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|AggrStats
name|aggrStats
init|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col2"
argument_list|)
argument_list|)
decl_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|TwoEndsOfPartitionsHaveBitVectorStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"snp"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col3"
argument_list|,
literal|"long"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVal
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/default/hit/ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|partVal
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|psd
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
argument_list|<
literal|2
operator|||
name|i
argument_list|>
literal|7
condition|)
block|{
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col3"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|LongColumnStatsData
name|dcsd
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|dcsd
operator|.
name|setHighValue
argument_list|(
literal|1000
operator|+
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setLowValue
argument_list|(
operator|-
literal|1000
operator|-
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumNulls
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumDVs
argument_list|(
literal|10
operator|*
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setBitVectors
argument_list|(
name|bitVectors
index|[
name|i
operator|/
literal|5
index|]
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|dcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVal
argument_list|)
expr_stmt|;
block|}
block|}
name|Checker
name|statChecker
init|=
operator|new
name|Checker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col3"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"long"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|LongColumnStatsData
name|lcsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1010
argument_list|,
name|lcsd
operator|.
name|getHighValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1010
argument_list|,
name|lcsd
operator|.
name|getLowValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|45
argument_list|,
name|lcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|lcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
literal|"ds="
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|AggrStats
name|aggrStats
init|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col3"
argument_list|)
argument_list|)
decl_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|MiddleOfPartitionsHaveBitVectorStatus
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"snp"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col4"
argument_list|,
literal|"long"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVal
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/default/hit/ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|partVal
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|psd
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|2
operator|&&
name|i
operator|<
literal|7
condition|)
block|{
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col4"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|LongColumnStatsData
name|dcsd
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|dcsd
operator|.
name|setHighValue
argument_list|(
literal|1000
operator|+
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setLowValue
argument_list|(
operator|-
literal|1000
operator|-
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumNulls
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumDVs
argument_list|(
literal|10
operator|*
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setBitVectors
argument_list|(
name|bitVectors
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|dcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVal
argument_list|)
expr_stmt|;
block|}
block|}
name|Checker
name|statChecker
init|=
operator|new
name|Checker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col4"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"long"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|LongColumnStatsData
name|lcsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1006
argument_list|,
name|lcsd
operator|.
name|getHighValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1006
argument_list|,
name|lcsd
operator|.
name|getLowValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|45
argument_list|,
name|lcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|lcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
literal|"ds="
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|AggrStats
name|aggrStats
init|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col4"
argument_list|)
argument_list|)
decl_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|TwoEndsAndMiddleOfPartitionsHaveBitVectorStatusLong
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"snp"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col5_long"
argument_list|,
literal|"long"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVal
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/default/hit/ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|partVal
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|psd
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
literal|2
operator|||
name|i
operator|==
literal|3
operator|||
name|i
operator|==
literal|5
operator|||
name|i
operator|==
literal|6
operator|||
name|i
operator|==
literal|8
condition|)
block|{
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col5_long"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"long"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|LongColumnStatsData
name|dcsd
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|dcsd
operator|.
name|setHighValue
argument_list|(
literal|1000
operator|+
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setLowValue
argument_list|(
operator|-
literal|1000
operator|-
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumNulls
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumDVs
argument_list|(
literal|10
operator|*
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setBitVectors
argument_list|(
name|bitVectors
index|[
name|i
operator|/
literal|5
index|]
argument_list|)
expr_stmt|;
name|data
operator|.
name|setLongStats
argument_list|(
name|dcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVal
argument_list|)
expr_stmt|;
block|}
block|}
name|Checker
name|statChecker
init|=
operator|new
name|Checker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col5_long"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"long"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|LongColumnStatsData
name|lcsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1010
argument_list|,
name|lcsd
operator|.
name|getHighValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1010
argument_list|,
name|lcsd
operator|.
name|getLowValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|lcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|lcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
literal|"ds="
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|AggrStats
name|aggrStats
init|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col5_long"
argument_list|)
argument_list|)
decl_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|TwoEndsAndMiddleOfPartitionsHaveBitVectorStatusDecimal
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"snp"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col5_decimal"
argument_list|,
literal|"decimal"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVal
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/default/hit/ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|partVal
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|psd
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
literal|2
operator|||
name|i
operator|==
literal|3
operator|||
name|i
operator|==
literal|5
operator|||
name|i
operator|==
literal|6
operator|||
name|i
operator|==
literal|8
condition|)
block|{
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col5_decimal"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"decimal"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|DecimalColumnStatsData
name|dcsd
init|=
operator|new
name|DecimalColumnStatsData
argument_list|()
decl_stmt|;
name|dcsd
operator|.
name|setHighValue
argument_list|(
name|StatObjectConverter
operator|.
name|createThriftDecimal
argument_list|(
literal|""
operator|+
operator|(
literal|1000
operator|+
name|i
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setLowValue
argument_list|(
name|StatObjectConverter
operator|.
name|createThriftDecimal
argument_list|(
literal|""
operator|+
operator|(
operator|-
literal|1000
operator|-
name|i
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumNulls
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumDVs
argument_list|(
literal|10
operator|*
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setBitVectors
argument_list|(
name|bitVectors
index|[
name|i
operator|/
literal|5
index|]
argument_list|)
expr_stmt|;
name|data
operator|.
name|setDecimalStats
argument_list|(
name|dcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVal
argument_list|)
expr_stmt|;
block|}
block|}
name|Checker
name|statChecker
init|=
operator|new
name|Checker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col5_decimal"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"decimal"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|DecimalColumnStatsData
name|lcsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDecimalStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1010
argument_list|,
name|HBaseUtils
operator|.
name|getDoubleValue
argument_list|(
name|lcsd
operator|.
name|getHighValue
argument_list|()
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1010
argument_list|,
name|HBaseUtils
operator|.
name|getDoubleValue
argument_list|(
name|lcsd
operator|.
name|getLowValue
argument_list|()
argument_list|)
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|lcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|lcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
literal|"ds="
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|AggrStats
name|aggrStats
init|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col5_decimal"
argument_list|)
argument_list|)
decl_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|TwoEndsAndMiddleOfPartitionsHaveBitVectorStatusDouble
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|String
name|tableName
init|=
literal|"snp"
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"col5_double"
argument_list|,
literal|"double"
argument_list|,
literal|"nocomment"
argument_list|)
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
literal|"serde"
argument_list|,
literal|"seriallib"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|cols
argument_list|,
literal|"file:/tmp"
argument_list|,
literal|"input"
argument_list|,
literal|"output"
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|serde
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|partCols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
literal|"ds"
argument_list|,
literal|"string"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|(
name|tableName
argument_list|,
name|dbName
argument_list|,
literal|"me"
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
literal|0
argument_list|,
name|sd
argument_list|,
name|partCols
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|store
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVal
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|""
operator|+
name|i
argument_list|)
decl_stmt|;
name|partVals
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
name|StorageDescriptor
name|psd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sd
argument_list|)
decl_stmt|;
name|psd
operator|.
name|setLocation
argument_list|(
literal|"file:/tmp/default/hit/ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|(
name|partVal
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
operator|(
name|int
operator|)
name|now
argument_list|,
name|psd
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|emptyMap
argument_list|()
argument_list|)
decl_stmt|;
name|store
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|i
operator|==
literal|2
operator|||
name|i
operator|==
literal|3
operator|||
name|i
operator|==
literal|5
operator|||
name|i
operator|==
literal|6
operator|||
name|i
operator|==
literal|8
condition|)
block|{
name|ColumnStatistics
name|cs
init|=
operator|new
name|ColumnStatistics
argument_list|()
decl_stmt|;
name|ColumnStatisticsDesc
name|desc
init|=
operator|new
name|ColumnStatisticsDesc
argument_list|(
literal|false
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|desc
operator|.
name|setLastAnalyzed
argument_list|(
name|now
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPartName
argument_list|(
literal|"ds="
operator|+
name|partVal
argument_list|)
expr_stmt|;
name|cs
operator|.
name|setStatsDesc
argument_list|(
name|desc
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|obj
operator|.
name|setColName
argument_list|(
literal|"col5_double"
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
literal|"double"
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|data
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|DoubleColumnStatsData
name|dcsd
init|=
operator|new
name|DoubleColumnStatsData
argument_list|()
decl_stmt|;
name|dcsd
operator|.
name|setHighValue
argument_list|(
literal|1000
operator|+
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setLowValue
argument_list|(
operator|-
literal|1000
operator|-
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumNulls
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setNumDVs
argument_list|(
literal|10
operator|*
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dcsd
operator|.
name|setBitVectors
argument_list|(
name|bitVectors
index|[
name|i
operator|/
literal|5
index|]
argument_list|)
expr_stmt|;
name|data
operator|.
name|setDoubleStats
argument_list|(
name|dcsd
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setStatsData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|cs
operator|.
name|addToStatsObj
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|store
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|cs
argument_list|,
name|partVal
argument_list|)
expr_stmt|;
block|}
block|}
name|Checker
name|statChecker
init|=
operator|new
name|Checker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|checkStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|Exception
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
name|aggrStats
operator|.
name|getColStats
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"col5_double"
argument_list|,
name|cso
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"double"
argument_list|,
name|cso
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|DoubleColumnStatsData
name|lcsd
init|=
name|cso
operator|.
name|getStatsData
argument_list|()
operator|.
name|getDoubleStats
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|1010
argument_list|,
name|lcsd
operator|.
name|getHighValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
operator|-
literal|1010
argument_list|,
name|lcsd
operator|.
name|getLowValue
argument_list|()
argument_list|,
literal|0.01
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|40
argument_list|,
name|lcsd
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|12
argument_list|,
name|lcsd
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
literal|"ds="
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|AggrStats
name|aggrStats
init|=
name|store
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"col5_double"
argument_list|)
argument_list|)
decl_stmt|;
name|statChecker
operator|.
name|checkStats
argument_list|(
name|aggrStats
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

