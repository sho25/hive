begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Connection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|SQLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Statement
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AbortTxnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CheckLockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CommitTxnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetOpenTxnsInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetOpenTxnsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HeartbeatRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HeartbeatTxnRangeRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HeartbeatTxnRangeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockComponent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockLevel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchLockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchTxnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|OpenTxnRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|OpenTxnsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponseElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnAbortedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnOpenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnlockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|LoggerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|core
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Tests for TxnHandler.  */
end_comment

begin_class
specifier|public
class|class
name|TestTxnHandler
block|{
specifier|static
specifier|final
specifier|private
name|String
name|CLASS_NAME
init|=
name|TxnHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CLASS_NAME
argument_list|)
decl_stmt|;
specifier|private
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|()
decl_stmt|;
specifier|private
name|TxnHandler
name|txnHandler
decl_stmt|;
specifier|public
name|TestTxnHandler
parameter_list|()
throws|throws
name|Exception
block|{
name|TxnDbUtil
operator|.
name|setConfValues
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|LoggerContext
name|ctx
init|=
operator|(
name|LoggerContext
operator|)
name|LogManager
operator|.
name|getContext
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|Configuration
name|conf
init|=
name|ctx
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|getLoggerConfig
argument_list|(
name|CLASS_NAME
argument_list|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|updateLoggers
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|tearDown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidTxnsEmpty
parameter_list|()
throws|throws
name|Exception
block|{
name|GetOpenTxnsInfoResponse
name|txnsInfo
init|=
name|txnHandler
operator|.
name|getOpenTxnsInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|txnsInfo
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|GetOpenTxnsResponse
name|txns
init|=
name|txnHandler
operator|.
name|getOpenTxns
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|txns
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|txns
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOpenTxn
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|first
init|=
name|openTxn
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|long
name|second
init|=
name|openTxn
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|GetOpenTxnsInfoResponse
name|txnsInfo
init|=
name|txnHandler
operator|.
name|getOpenTxnsInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|txnsInfo
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|GetOpenTxnsResponse
name|txns
init|=
name|txnHandler
operator|.
name|getOpenTxns
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|txns
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|txns
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|saw
init|=
operator|new
name|boolean
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|saw
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|saw
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Long
name|tid
range|:
name|txns
operator|.
name|getOpen_txns
argument_list|()
control|)
block|{
name|saw
index|[
name|tid
operator|.
name|intValue
argument_list|()
index|]
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|saw
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|assertTrue
argument_list|(
name|saw
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbortTxn
parameter_list|()
throws|throws
name|Exception
block|{
name|OpenTxnsResponse
name|openedTxns
init|=
name|txnHandler
operator|.
name|openTxns
argument_list|(
operator|new
name|OpenTxnRequest
argument_list|(
literal|2
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|txnList
init|=
name|openedTxns
operator|.
name|getTxn_ids
argument_list|()
decl_stmt|;
name|long
name|first
init|=
name|txnList
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|long
name|second
init|=
name|txnList
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|second
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|abortTxn
argument_list|(
operator|new
name|AbortTxnRequest
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|GetOpenTxnsInfoResponse
name|txnsInfo
init|=
name|txnHandler
operator|.
name|getOpenTxnsInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|txnsInfo
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|GetOpenTxnsResponse
name|txns
init|=
name|txnHandler
operator|.
name|getOpenTxns
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|txns
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|txns
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|saw
init|=
operator|new
name|boolean
index|[
literal|3
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|saw
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|saw
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Long
name|tid
range|:
name|txns
operator|.
name|getOpen_txns
argument_list|()
control|)
block|{
name|saw
index|[
name|tid
operator|.
name|intValue
argument_list|()
index|]
operator|=
literal|true
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|saw
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|assertTrue
argument_list|(
name|saw
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAbortInvalidTxn
parameter_list|()
throws|throws
name|Exception
block|{
name|boolean
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|txnHandler
operator|.
name|abortTxn
argument_list|(
operator|new
name|AbortTxnRequest
argument_list|(
literal|195L
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchTxnException
name|e
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidTxnsNoneOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|txnHandler
operator|.
name|openTxns
argument_list|(
operator|new
name|OpenTxnRequest
argument_list|(
literal|2
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|commitTxn
argument_list|(
operator|new
name|CommitTxnRequest
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|commitTxn
argument_list|(
operator|new
name|CommitTxnRequest
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|GetOpenTxnsInfoResponse
name|txnsInfo
init|=
name|txnHandler
operator|.
name|getOpenTxnsInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|txnsInfo
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|GetOpenTxnsResponse
name|txns
init|=
name|txnHandler
operator|.
name|getOpenTxns
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2L
argument_list|,
name|txns
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txns
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidTxnsSomeOpen
parameter_list|()
throws|throws
name|Exception
block|{
name|txnHandler
operator|.
name|openTxns
argument_list|(
operator|new
name|OpenTxnRequest
argument_list|(
literal|3
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|abortTxn
argument_list|(
operator|new
name|AbortTxnRequest
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|commitTxn
argument_list|(
operator|new
name|CommitTxnRequest
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|GetOpenTxnsInfoResponse
name|txnsInfo
init|=
name|txnHandler
operator|.
name|getOpenTxnsInfo
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|txnsInfo
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TxnState
operator|.
name|OPEN
argument_list|,
name|txnsInfo
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|GetOpenTxnsResponse
name|txns
init|=
name|txnHandler
operator|.
name|getOpenTxns
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|txns
operator|.
name|getTxn_high_water_mark
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|txns
operator|.
name|getOpen_txns
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|saw
init|=
operator|new
name|boolean
index|[
literal|4
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|saw
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|saw
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|Long
name|tid
range|:
name|txns
operator|.
name|getOpen_txns
argument_list|()
control|)
block|{
name|saw
index|[
name|tid
operator|.
name|intValue
argument_list|()
index|]
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|saw
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|saw
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|saw
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockDifferentDBs
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that two different databases don't collide on their locks
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"yourdb"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockSameDB
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that two different databases don't collide on their locks
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockDbLocksTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that locking a database prevents locking of tables in the database
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockDbDoesNotLockTableInDifferentDB
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that locking a database prevents locking of tables in the database
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"yourdb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockDifferentTables
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that two different tables don't collide on their locks
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"yourtable"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockSameTable
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that two different tables don't collide on their locks
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockTableLocksPartition
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that locking a table prevents locking of partitions of the table
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockDifferentTableDoesntLockPartition
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that locking a table prevents locking of partitions of the table
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"yourtable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockDifferentPartitions
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that two different partitions don't collide on their locks
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"yourpartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockSamePartition
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that two different partitions don't collide on their locks
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockSRSR
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that two shared read locks can share a partition
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockESRSR
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that exclusive lock blocks shared reads
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockSRSW
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that write can acquire after read
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockESRSW
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that exclusive lock blocks read and write
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockSRE
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that read blocks exclusive
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockESRE
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that exclusive blocks read and exclusive
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockSWSR
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that read can acquire after write
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockSWSWSR
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that write blocks write but read can still acquire
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockSWSWSW
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that write blocks two writes
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockEESW
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that exclusive blocks exclusive and write
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockEESR
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that exclusive blocks exclusive and read
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckLockAcquireAfterWaiting
parameter_list|()
throws|throws
name|Exception
block|{
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|long
name|lockid1
init|=
name|res
operator|.
name|getLockid
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|clear
argument_list|()
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|long
name|lockid2
init|=
name|res
operator|.
name|getLockid
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|unlock
argument_list|(
operator|new
name|UnlockRequest
argument_list|(
name|lockid1
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|checkLock
argument_list|(
operator|new
name|CheckLockRequest
argument_list|(
name|lockid2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckLockNoSuchLock
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|txnHandler
operator|.
name|checkLock
argument_list|(
operator|new
name|CheckLockRequest
argument_list|(
literal|23L
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Allowed to check lock on non-existent lock"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchLockException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckLockTxnAborted
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that when a transaction is aborted, the heartbeat fails
name|long
name|txnid
init|=
name|openTxn
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|req
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|long
name|lockid
init|=
name|res
operator|.
name|getLockid
argument_list|()
decl_stmt|;
name|txnHandler
operator|.
name|abortTxn
argument_list|(
operator|new
name|AbortTxnRequest
argument_list|(
name|txnid
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
comment|// This will throw NoSuchLockException (even though it's the
comment|// transaction we've closed) because that will have deleted the lock.
name|txnHandler
operator|.
name|checkLock
argument_list|(
operator|new
name|CheckLockRequest
argument_list|(
name|lockid
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Allowed to check lock on aborted transaction."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchLockException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleLock
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test more than one lock can be handled in a lock request
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"anotherpartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|long
name|lockid
init|=
name|res
operator|.
name|getLockid
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|checkLock
argument_list|(
operator|new
name|CheckLockRequest
argument_list|(
name|lockid
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|unlock
argument_list|(
operator|new
name|UnlockRequest
argument_list|(
name|lockid
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnHandler
operator|.
name|numLocksInLockTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleLockWait
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that two shared read locks can share a partition
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"anotherpartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|long
name|lockid1
init|=
name|res
operator|.
name|getLockid
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|components
operator|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|long
name|lockid2
init|=
name|res
operator|.
name|getLockid
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|WAITING
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|unlock
argument_list|(
operator|new
name|UnlockRequest
argument_list|(
name|lockid1
argument_list|)
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|checkLock
argument_list|(
operator|new
name|CheckLockRequest
argument_list|(
name|lockid2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnlockOnCommit
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that committing unlocks
name|long
name|txnid
init|=
name|openTxn
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|req
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|commitTxn
argument_list|(
operator|new
name|CommitTxnRequest
argument_list|(
name|txnid
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnHandler
operator|.
name|numLocksInLockTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnlockOnAbort
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that committing unlocks
name|long
name|txnid
init|=
name|openTxn
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|req
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|abortTxn
argument_list|(
operator|new
name|AbortTxnRequest
argument_list|(
name|txnid
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|txnHandler
operator|.
name|numLocksInLockTable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnlockWithTxn
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting testUnlockWithTxn"
argument_list|)
expr_stmt|;
comment|// Test that attempting to unlock locks associated with a transaction
comment|// generates an error
name|long
name|txnid
init|=
name|openTxn
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|req
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|long
name|lockid
init|=
name|res
operator|.
name|getLockid
argument_list|()
decl_stmt|;
try|try
block|{
name|txnHandler
operator|.
name|unlock
argument_list|(
operator|new
name|UnlockRequest
argument_list|(
name|lockid
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Allowed to unlock lock associated with transaction."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TxnOpenException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeartbeatTxnAborted
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that when a transaction is aborted, the heartbeat fails
name|openTxn
argument_list|()
expr_stmt|;
name|txnHandler
operator|.
name|abortTxn
argument_list|(
operator|new
name|AbortTxnRequest
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|HeartbeatRequest
name|h
init|=
operator|new
name|HeartbeatRequest
argument_list|()
decl_stmt|;
name|h
operator|.
name|setTxnid
argument_list|(
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|txnHandler
operator|.
name|heartbeat
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Told there was a txn, when it should have been aborted."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TxnAbortedException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeartbeatNoTxn
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Test that when a transaction is aborted, the heartbeat fails
name|HeartbeatRequest
name|h
init|=
operator|new
name|HeartbeatRequest
argument_list|()
decl_stmt|;
name|h
operator|.
name|setTxnid
argument_list|(
literal|939393L
argument_list|)
expr_stmt|;
try|try
block|{
name|txnHandler
operator|.
name|heartbeat
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Told there was a txn, when there wasn't."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchTxnException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeartbeatLock
parameter_list|()
throws|throws
name|Exception
block|{
name|conf
operator|.
name|setTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_TIMEOUT
argument_list|,
literal|1
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|HeartbeatRequest
name|h
init|=
operator|new
name|HeartbeatRequest
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|h
operator|.
name|setLockid
argument_list|(
name|res
operator|.
name|getLockid
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|30
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|txnHandler
operator|.
name|heartbeat
argument_list|(
name|h
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchLockException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
literal|"Told there was no lock, when the heartbeat should have kept it."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|heartbeatTxnRange
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|txnid
init|=
name|openTxn
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|txnid
argument_list|)
expr_stmt|;
name|txnid
operator|=
name|openTxn
argument_list|()
expr_stmt|;
name|txnid
operator|=
name|openTxn
argument_list|()
expr_stmt|;
name|HeartbeatTxnRangeResponse
name|rsp
init|=
name|txnHandler
operator|.
name|heartbeatTxnRange
argument_list|(
operator|new
name|HeartbeatTxnRangeRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getAborted
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getNosuch
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|heartbeatTxnRangeOneCommitted
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|txnid
init|=
name|openTxn
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|txnid
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|commitTxn
argument_list|(
operator|new
name|CommitTxnRequest
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|txnid
operator|=
name|openTxn
argument_list|()
expr_stmt|;
name|txnid
operator|=
name|openTxn
argument_list|()
expr_stmt|;
name|HeartbeatTxnRangeResponse
name|rsp
init|=
name|txnHandler
operator|.
name|heartbeatTxnRange
argument_list|(
operator|new
name|HeartbeatTxnRangeRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getNosuchSize
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|txn
init|=
name|rsp
operator|.
name|getNosuch
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
operator|(
name|long
operator|)
name|txn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getAborted
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|heartbeatTxnRangeOneAborted
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|txnid
init|=
name|openTxn
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|txnid
argument_list|)
expr_stmt|;
name|txnid
operator|=
name|openTxn
argument_list|()
expr_stmt|;
name|txnid
operator|=
name|openTxn
argument_list|()
expr_stmt|;
name|txnHandler
operator|.
name|abortTxn
argument_list|(
operator|new
name|AbortTxnRequest
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|HeartbeatTxnRangeResponse
name|rsp
init|=
name|txnHandler
operator|.
name|heartbeatTxnRange
argument_list|(
operator|new
name|HeartbeatTxnRangeRequest
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rsp
operator|.
name|getAbortedSize
argument_list|()
argument_list|)
expr_stmt|;
name|Long
name|txn
init|=
name|rsp
operator|.
name|getAborted
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
operator|(
name|long
operator|)
name|txn
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rsp
operator|.
name|getNosuch
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLockTimeout
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|timeout
init|=
name|txnHandler
operator|.
name|setTimeout
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"mypartition"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|res
operator|.
name|getState
argument_list|()
operator|==
name|LockState
operator|.
name|ACQUIRED
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|checkLock
argument_list|(
operator|new
name|CheckLockRequest
argument_list|(
name|res
operator|.
name|getLockid
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Told there was a lock, when it should have timed out."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchLockException
name|e
parameter_list|)
block|{     }
finally|finally
block|{
name|txnHandler
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRecoverManyTimeouts
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|timeout
init|=
name|txnHandler
operator|.
name|setTimeout
argument_list|(
literal|1
argument_list|)
decl_stmt|;
try|try
block|{
name|txnHandler
operator|.
name|openTxns
argument_list|(
operator|new
name|OpenTxnRequest
argument_list|(
literal|503
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|getOpenTxns
argument_list|()
expr_stmt|;
name|GetOpenTxnsInfoResponse
name|rsp
init|=
name|txnHandler
operator|.
name|getOpenTxnsInfo
argument_list|()
decl_stmt|;
name|int
name|numAborted
init|=
literal|0
decl_stmt|;
for|for
control|(
name|TxnInfo
name|txnInfo
range|:
name|rsp
operator|.
name|getOpen_txns
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|TxnState
operator|.
name|ABORTED
argument_list|,
name|txnInfo
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|numAborted
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|503
argument_list|,
name|numAborted
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|txnHandler
operator|.
name|setTimeout
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHeartbeatNoLock
parameter_list|()
throws|throws
name|Exception
block|{
name|HeartbeatRequest
name|h
init|=
operator|new
name|HeartbeatRequest
argument_list|()
decl_stmt|;
name|h
operator|.
name|setLockid
argument_list|(
literal|29389839L
argument_list|)
expr_stmt|;
try|try
block|{
name|txnHandler
operator|.
name|heartbeat
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Told there was a lock, when there wasn't."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchLockException
name|e
parameter_list|)
block|{     }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactMajorWithPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|CompactionType
operator|.
name|MAJOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setPartitionname
argument_list|(
literal|"ds=today"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ShowCompactResponseElement
name|c
init|=
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|c
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|c
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ds=today"
argument_list|,
name|c
operator|.
name|getPartitionname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CompactionType
operator|.
name|MAJOR
argument_list|,
name|c
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"initiated"
argument_list|,
name|c
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|c
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCompactMinorNoPartition
parameter_list|()
throws|throws
name|Exception
block|{
name|CompactionRequest
name|rqst
init|=
operator|new
name|CompactionRequest
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|,
name|CompactionType
operator|.
name|MINOR
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setRunas
argument_list|(
literal|"fred"
argument_list|)
expr_stmt|;
name|txnHandler
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
name|ShowCompactResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showCompact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowCompactResponseElement
argument_list|>
name|compacts
init|=
name|rsp
operator|.
name|getCompacts
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compacts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ShowCompactResponseElement
name|c
init|=
name|compacts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|c
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|c
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|c
operator|.
name|getPartitionname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|CompactionType
operator|.
name|MINOR
argument_list|,
name|c
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"initiated"
argument_list|,
name|c
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0L
argument_list|,
name|c
operator|.
name|getStart
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"fred"
argument_list|,
name|c
operator|.
name|getRunAs
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|showLocks
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|begining
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|txnid
init|=
name|openTxn
argument_list|()
decl_stmt|;
name|LockComponent
name|comp
init|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|LockLevel
operator|.
name|DB
argument_list|,
literal|"mydb"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|LockComponent
argument_list|>
name|components
init|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|LockRequest
name|req
init|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
decl_stmt|;
name|req
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|LockResponse
name|res
init|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
decl_stmt|;
comment|// Open txn
name|txnid
operator|=
name|openTxn
argument_list|()
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|LockLevel
operator|.
name|TABLE
argument_list|,
literal|"mydb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"mytable"
argument_list|)
expr_stmt|;
name|components
operator|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
comment|// Locks not associated with a txn
name|components
operator|=
operator|new
name|ArrayList
argument_list|<
name|LockComponent
argument_list|>
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|comp
operator|=
operator|new
name|LockComponent
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|LockLevel
operator|.
name|PARTITION
argument_list|,
literal|"yourdb"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setTablename
argument_list|(
literal|"yourtable"
argument_list|)
expr_stmt|;
name|comp
operator|.
name|setPartitionname
argument_list|(
literal|"yourpartition"
argument_list|)
expr_stmt|;
name|components
operator|.
name|add
argument_list|(
name|comp
argument_list|)
expr_stmt|;
name|req
operator|=
operator|new
name|LockRequest
argument_list|(
name|components
argument_list|,
literal|"you"
argument_list|,
literal|"remotehost"
argument_list|)
expr_stmt|;
name|res
operator|=
name|txnHandler
operator|.
name|lock
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|ShowLocksResponse
name|rsp
init|=
name|txnHandler
operator|.
name|showLocks
argument_list|(
operator|new
name|ShowLocksRequest
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ShowLocksResponseElement
argument_list|>
name|locks
init|=
name|rsp
operator|.
name|getLocks
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|locks
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|saw
init|=
operator|new
name|boolean
index|[
name|locks
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|saw
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|saw
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|ShowLocksResponseElement
name|lock
range|:
name|locks
control|)
block|{
if|if
condition|(
name|lock
operator|.
name|getLockid
argument_list|()
operator|==
literal|1
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|lock
operator|.
name|getTxnid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mydb"
argument_list|,
name|lock
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lock
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lock
operator|.
name|getPartname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockState
operator|.
name|ACQUIRED
argument_list|,
name|lock
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockType
operator|.
name|EXCLUSIVE
argument_list|,
name|lock
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|begining
operator|<=
name|lock
operator|.
name|getLastheartbeat
argument_list|()
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
name|lock
operator|.
name|getLastheartbeat
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Expected acquired at "
operator|+
name|lock
operator|.
name|getAcquiredat
argument_list|()
operator|+
literal|" to be between "
operator|+
name|begining
operator|+
literal|" and "
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|,
name|begining
operator|<=
name|lock
operator|.
name|getAcquiredat
argument_list|()
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
name|lock
operator|.
name|getAcquiredat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|lock
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|lock
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|saw
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lock
operator|.
name|getLockid
argument_list|()
operator|==
literal|2
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|lock
operator|.
name|getTxnid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mydb"
argument_list|,
name|lock
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"mytable"
argument_list|,
name|lock
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|lock
operator|.
name|getPartname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockState
operator|.
name|WAITING
argument_list|,
name|lock
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_READ
argument_list|,
name|lock
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|begining
operator|<=
name|lock
operator|.
name|getLastheartbeat
argument_list|()
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
name|lock
operator|.
name|getLastheartbeat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lock
operator|.
name|getAcquiredat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"me"
argument_list|,
name|lock
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"localhost"
argument_list|,
name|lock
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|saw
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|lock
operator|.
name|getLockid
argument_list|()
operator|==
literal|3
condition|)
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|lock
operator|.
name|getTxnid
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourdb"
argument_list|,
name|lock
operator|.
name|getDbname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourtable"
argument_list|,
name|lock
operator|.
name|getTablename
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"yourpartition"
argument_list|,
name|lock
operator|.
name|getPartname
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockState
operator|.
name|ACQUIRED
argument_list|,
name|lock
operator|.
name|getState
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|LockType
operator|.
name|SHARED_WRITE
argument_list|,
name|lock
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|begining
operator|<=
name|lock
operator|.
name|getLastheartbeat
argument_list|()
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
name|lock
operator|.
name|getLastheartbeat
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|begining
operator|<=
name|lock
operator|.
name|getAcquiredat
argument_list|()
operator|&&
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|>=
name|lock
operator|.
name|getAcquiredat
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"you"
argument_list|,
name|lock
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"remotehost"
argument_list|,
name|lock
operator|.
name|getHostname
argument_list|()
argument_list|)
expr_stmt|;
name|saw
index|[
literal|2
index|]
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|fail
argument_list|(
literal|"Unknown lock id"
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|saw
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|assertTrue
argument_list|(
literal|"Didn't see lock id "
operator|+
name|i
argument_list|,
name|saw
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|deadlockDetected
parameter_list|()
throws|throws
name|Exception
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Starting deadlock test"
argument_list|)
expr_stmt|;
name|Connection
name|conn
init|=
name|txnHandler
operator|.
name|getDbConn
argument_list|(
name|Connection
operator|.
name|TRANSACTION_SERIALIZABLE
argument_list|)
decl_stmt|;
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|long
name|now
init|=
name|txnHandler
operator|.
name|getDbTime
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"insert into TXNS (txn_id, txn_state, txn_started, txn_last_heartbeat, "
operator|+
literal|"txn_user, txn_host) values (1, 'o', "
operator|+
name|now
operator|+
literal|", "
operator|+
name|now
operator|+
literal|", 'shagy', "
operator|+
literal|"'scooby.com')"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"insert into HIVE_LOCKS (hl_lock_ext_id, hl_lock_int_id, hl_txnid, "
operator|+
literal|"hl_db, hl_table, hl_partition, hl_lock_state, hl_lock_type, hl_last_heartbeat, "
operator|+
literal|"hl_user, hl_host) values (1, 1, 1, 'mydb', 'mytable', 'mypartition', '"
operator|+
name|txnHandler
operator|.
name|LOCK_WAITING
operator|+
literal|"', '"
operator|+
name|txnHandler
operator|.
name|LOCK_EXCLUSIVE
operator|+
literal|"', "
operator|+
name|now
operator|+
literal|", 'fred', "
operator|+
literal|"'scooby.com')"
argument_list|)
expr_stmt|;
name|conn
operator|.
name|commit
argument_list|()
expr_stmt|;
name|txnHandler
operator|.
name|closeDbConn
argument_list|(
name|conn
argument_list|)
expr_stmt|;
specifier|final
name|AtomicBoolean
name|sawDeadlock
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|final
name|Connection
name|conn1
init|=
name|txnHandler
operator|.
name|getDbConn
argument_list|(
name|Connection
operator|.
name|TRANSACTION_SERIALIZABLE
argument_list|)
decl_stmt|;
specifier|final
name|Connection
name|conn2
init|=
name|txnHandler
operator|.
name|getDbConn
argument_list|(
name|Connection
operator|.
name|TRANSACTION_SERIALIZABLE
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|5
condition|;
name|i
operator|++
control|)
block|{
name|Thread
name|t1
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
try|try
block|{
name|updateTxns
argument_list|(
name|conn1
argument_list|)
expr_stmt|;
name|updateLocks
argument_list|(
name|conn1
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|conn1
operator|.
name|commit
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"no exception, no deadlock"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
try|try
block|{
name|txnHandler
operator|.
name|checkRetryable
argument_list|(
name|conn1
argument_list|,
name|e
argument_list|,
literal|"thread t1"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got an exception, but not a deadlock, SQLState is "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
operator|+
literal|" class of exception is "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" msg is<"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TxnHandler
operator|.
name|RetryException
name|de
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Forced a deadlock, SQLState is "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
operator|+
literal|" class of "
operator|+
literal|"exception is "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" msg is<"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|sawDeadlock
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|conn1
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|Thread
name|t2
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
try|try
block|{
name|updateLocks
argument_list|(
name|conn2
argument_list|)
expr_stmt|;
name|updateTxns
argument_list|(
name|conn2
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|conn2
operator|.
name|commit
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"no exception, no deadlock"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SQLException
name|e
parameter_list|)
block|{
try|try
block|{
name|txnHandler
operator|.
name|checkRetryable
argument_list|(
name|conn2
argument_list|,
name|e
argument_list|,
literal|"thread t2"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got an exception, but not a deadlock, SQLState is "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
operator|+
literal|" class of exception is "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" msg is<"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TxnHandler
operator|.
name|RetryException
name|de
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Forced a deadlock, SQLState is "
operator|+
name|e
operator|.
name|getSQLState
argument_list|()
operator|+
literal|" class of "
operator|+
literal|"exception is "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" msg is<"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
name|sawDeadlock
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|conn2
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|t1
operator|.
name|join
argument_list|()
expr_stmt|;
name|t2
operator|.
name|join
argument_list|()
expr_stmt|;
if|if
condition|(
name|sawDeadlock
operator|.
name|get
argument_list|()
condition|)
break|break;
block|}
name|assertTrue
argument_list|(
name|sawDeadlock
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|conn1
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|txnHandler
operator|.
name|closeDbConn
argument_list|(
name|conn1
argument_list|)
expr_stmt|;
name|conn2
operator|.
name|rollback
argument_list|()
expr_stmt|;
name|txnHandler
operator|.
name|closeDbConn
argument_list|(
name|conn2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateTxns
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"update TXNS set txn_last_heartbeat = txn_last_heartbeat + 1"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|updateLocks
parameter_list|(
name|Connection
name|conn
parameter_list|)
throws|throws
name|SQLException
block|{
name|Statement
name|stmt
init|=
name|conn
operator|.
name|createStatement
argument_list|()
decl_stmt|;
name|stmt
operator|.
name|executeUpdate
argument_list|(
literal|"update HIVE_LOCKS set hl_last_heartbeat = hl_last_heartbeat + 1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|TxnDbUtil
operator|.
name|prepDb
argument_list|()
expr_stmt|;
name|txnHandler
operator|=
operator|new
name|TxnHandler
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|TxnDbUtil
operator|.
name|cleanDb
argument_list|()
expr_stmt|;
block|}
specifier|private
name|long
name|openTxn
parameter_list|()
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|txns
init|=
name|txnHandler
operator|.
name|openTxns
argument_list|(
operator|new
name|OpenTxnRequest
argument_list|(
literal|1
argument_list|,
literal|"me"
argument_list|,
literal|"localhost"
argument_list|)
argument_list|)
operator|.
name|getTxn_ids
argument_list|()
decl_stmt|;
return|return
name|txns
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
block|}
end_class

end_unit

