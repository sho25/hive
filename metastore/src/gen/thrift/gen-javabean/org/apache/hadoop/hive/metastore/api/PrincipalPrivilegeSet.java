begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.9.2)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"rawtypes"
block|,
literal|"serial"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Generated
argument_list|(
name|value
operator|=
literal|"Autogenerated by Thrift Compiler (0.9.2)"
argument_list|,
name|date
operator|=
literal|"2015-7-14"
argument_list|)
specifier|public
class|class
name|PrincipalPrivilegeSet
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|PrincipalPrivilegeSet
argument_list|,
name|PrincipalPrivilegeSet
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|PrincipalPrivilegeSet
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"PrincipalPrivilegeSet"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|USER_PRIVILEGES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"userPrivileges"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|GROUP_PRIVILEGES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"groupPrivileges"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ROLE_PRIVILEGES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"rolePrivileges"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|PrincipalPrivilegeSetStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|PrincipalPrivilegeSetTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|userPrivileges
decl_stmt|;
comment|// required
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|groupPrivileges
decl_stmt|;
comment|// required
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|rolePrivileges
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|USER_PRIVILEGES
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"userPrivileges"
argument_list|)
block|,
name|GROUP_PRIVILEGES
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"groupPrivileges"
argument_list|)
block|,
name|ROLE_PRIVILEGES
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"rolePrivileges"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// USER_PRIVILEGES
return|return
name|USER_PRIVILEGES
return|;
case|case
literal|2
case|:
comment|// GROUP_PRIVILEGES
return|return
name|GROUP_PRIVILEGES
return|;
case|case
literal|3
case|:
comment|// ROLE_PRIVILEGES
return|return
name|ROLE_PRIVILEGES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|USER_PRIVILEGES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"userPrivileges"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|PrivilegeGrantInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|GROUP_PRIVILEGES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"groupPrivileges"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|PrivilegeGrantInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ROLE_PRIVILEGES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"rolePrivileges"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|PrivilegeGrantInfo
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|PrincipalPrivilegeSet
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PrincipalPrivilegeSet
parameter_list|()
block|{   }
specifier|public
name|PrincipalPrivilegeSet
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|userPrivileges
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|groupPrivileges
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|rolePrivileges
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|userPrivileges
operator|=
name|userPrivileges
expr_stmt|;
name|this
operator|.
name|groupPrivileges
operator|=
name|groupPrivileges
expr_stmt|;
name|this
operator|.
name|rolePrivileges
operator|=
name|rolePrivileges
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|PrincipalPrivilegeSet
parameter_list|(
name|PrincipalPrivilegeSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetUserPrivileges
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|__this__userPrivileges
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|(
name|other
operator|.
name|userPrivileges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|other_element
range|:
name|other
operator|.
name|userPrivileges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__userPrivileges_copy_key
init|=
name|other_element_key
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|__this__userPrivileges_copy_value
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|other_element_value
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|other_element_value_element
range|:
name|other_element_value
control|)
block|{
name|__this__userPrivileges_copy_value
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|other_element_value_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|__this__userPrivileges
operator|.
name|put
argument_list|(
name|__this__userPrivileges_copy_key
argument_list|,
name|__this__userPrivileges_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|userPrivileges
operator|=
name|__this__userPrivileges
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetGroupPrivileges
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|__this__groupPrivileges
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|(
name|other
operator|.
name|groupPrivileges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|other_element
range|:
name|other
operator|.
name|groupPrivileges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__groupPrivileges_copy_key
init|=
name|other_element_key
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|__this__groupPrivileges_copy_value
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|other_element_value
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|other_element_value_element
range|:
name|other_element_value
control|)
block|{
name|__this__groupPrivileges_copy_value
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|other_element_value_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|__this__groupPrivileges
operator|.
name|put
argument_list|(
name|__this__groupPrivileges_copy_key
argument_list|,
name|__this__groupPrivileges_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|groupPrivileges
operator|=
name|__this__groupPrivileges
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetRolePrivileges
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|__this__rolePrivileges
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|(
name|other
operator|.
name|rolePrivileges
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|other_element
range|:
name|other
operator|.
name|rolePrivileges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__rolePrivileges_copy_key
init|=
name|other_element_key
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|__this__rolePrivileges_copy_value
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|other_element_value
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|other_element_value_element
range|:
name|other_element_value
control|)
block|{
name|__this__rolePrivileges_copy_value
operator|.
name|add
argument_list|(
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|other_element_value_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|__this__rolePrivileges
operator|.
name|put
argument_list|(
name|__this__rolePrivileges_copy_key
argument_list|,
name|__this__rolePrivileges_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|rolePrivileges
operator|=
name|__this__rolePrivileges
expr_stmt|;
block|}
block|}
specifier|public
name|PrincipalPrivilegeSet
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|PrincipalPrivilegeSet
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|userPrivileges
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|groupPrivileges
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|rolePrivileges
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getUserPrivilegesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|userPrivileges
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|userPrivileges
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToUserPrivileges
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|userPrivileges
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|userPrivileges
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|userPrivileges
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|getUserPrivileges
parameter_list|()
block|{
return|return
name|this
operator|.
name|userPrivileges
return|;
block|}
specifier|public
name|void
name|setUserPrivileges
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|userPrivileges
parameter_list|)
block|{
name|this
operator|.
name|userPrivileges
operator|=
name|userPrivileges
expr_stmt|;
block|}
specifier|public
name|void
name|unsetUserPrivileges
parameter_list|()
block|{
name|this
operator|.
name|userPrivileges
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field userPrivileges is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetUserPrivileges
parameter_list|()
block|{
return|return
name|this
operator|.
name|userPrivileges
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setUserPrivilegesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|userPrivileges
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getGroupPrivilegesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|groupPrivileges
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|groupPrivileges
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToGroupPrivileges
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|groupPrivileges
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|groupPrivileges
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|groupPrivileges
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|getGroupPrivileges
parameter_list|()
block|{
return|return
name|this
operator|.
name|groupPrivileges
return|;
block|}
specifier|public
name|void
name|setGroupPrivileges
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|groupPrivileges
parameter_list|)
block|{
name|this
operator|.
name|groupPrivileges
operator|=
name|groupPrivileges
expr_stmt|;
block|}
specifier|public
name|void
name|unsetGroupPrivileges
parameter_list|()
block|{
name|this
operator|.
name|groupPrivileges
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field groupPrivileges is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetGroupPrivileges
parameter_list|()
block|{
return|return
name|this
operator|.
name|groupPrivileges
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setGroupPrivilegesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|groupPrivileges
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getRolePrivilegesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|rolePrivileges
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|rolePrivileges
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToRolePrivileges
parameter_list|(
name|String
name|key
parameter_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|rolePrivileges
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|rolePrivileges
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|rolePrivileges
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|getRolePrivileges
parameter_list|()
block|{
return|return
name|this
operator|.
name|rolePrivileges
return|;
block|}
specifier|public
name|void
name|setRolePrivileges
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|rolePrivileges
parameter_list|)
block|{
name|this
operator|.
name|rolePrivileges
operator|=
name|rolePrivileges
expr_stmt|;
block|}
specifier|public
name|void
name|unsetRolePrivileges
parameter_list|()
block|{
name|this
operator|.
name|rolePrivileges
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field rolePrivileges is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRolePrivileges
parameter_list|()
block|{
return|return
name|this
operator|.
name|rolePrivileges
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setRolePrivilegesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|rolePrivileges
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|USER_PRIVILEGES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetUserPrivileges
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setUserPrivileges
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|GROUP_PRIVILEGES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetGroupPrivileges
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setGroupPrivileges
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ROLE_PRIVILEGES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRolePrivileges
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRolePrivileges
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|USER_PRIVILEGES
case|:
return|return
name|getUserPrivileges
argument_list|()
return|;
case|case
name|GROUP_PRIVILEGES
case|:
return|return
name|getGroupPrivileges
argument_list|()
return|;
case|case
name|ROLE_PRIVILEGES
case|:
return|return
name|getRolePrivileges
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|USER_PRIVILEGES
case|:
return|return
name|isSetUserPrivileges
argument_list|()
return|;
case|case
name|GROUP_PRIVILEGES
case|:
return|return
name|isSetGroupPrivileges
argument_list|()
return|;
case|case
name|ROLE_PRIVILEGES
case|:
return|return
name|isSetRolePrivileges
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|PrincipalPrivilegeSet
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|PrincipalPrivilegeSet
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|PrincipalPrivilegeSet
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_userPrivileges
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetUserPrivileges
argument_list|()
decl_stmt|;
name|boolean
name|that_present_userPrivileges
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetUserPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_userPrivileges
operator|||
name|that_present_userPrivileges
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_userPrivileges
operator|&&
name|that_present_userPrivileges
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|userPrivileges
operator|.
name|equals
argument_list|(
name|that
operator|.
name|userPrivileges
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_groupPrivileges
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetGroupPrivileges
argument_list|()
decl_stmt|;
name|boolean
name|that_present_groupPrivileges
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetGroupPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_groupPrivileges
operator|||
name|that_present_groupPrivileges
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_groupPrivileges
operator|&&
name|that_present_groupPrivileges
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|groupPrivileges
operator|.
name|equals
argument_list|(
name|that
operator|.
name|groupPrivileges
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_rolePrivileges
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetRolePrivileges
argument_list|()
decl_stmt|;
name|boolean
name|that_present_rolePrivileges
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetRolePrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_rolePrivileges
operator|||
name|that_present_rolePrivileges
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_rolePrivileges
operator|&&
name|that_present_rolePrivileges
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|rolePrivileges
operator|.
name|equals
argument_list|(
name|that
operator|.
name|rolePrivileges
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|present_userPrivileges
init|=
literal|true
operator|&&
operator|(
name|isSetUserPrivileges
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_userPrivileges
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_userPrivileges
condition|)
name|list
operator|.
name|add
argument_list|(
name|userPrivileges
argument_list|)
expr_stmt|;
name|boolean
name|present_groupPrivileges
init|=
literal|true
operator|&&
operator|(
name|isSetGroupPrivileges
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_groupPrivileges
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_groupPrivileges
condition|)
name|list
operator|.
name|add
argument_list|(
name|groupPrivileges
argument_list|)
expr_stmt|;
name|boolean
name|present_rolePrivileges
init|=
literal|true
operator|&&
operator|(
name|isSetRolePrivileges
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_rolePrivileges
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_rolePrivileges
condition|)
name|list
operator|.
name|add
argument_list|(
name|rolePrivileges
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|PrincipalPrivilegeSet
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetUserPrivileges
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetUserPrivileges
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetUserPrivileges
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|userPrivileges
argument_list|,
name|other
operator|.
name|userPrivileges
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetGroupPrivileges
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetGroupPrivileges
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetGroupPrivileges
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|groupPrivileges
argument_list|,
name|other
operator|.
name|groupPrivileges
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRolePrivileges
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetRolePrivileges
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRolePrivileges
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|rolePrivileges
argument_list|,
name|other
operator|.
name|rolePrivileges
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"PrincipalPrivilegeSet("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"userPrivileges:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|userPrivileges
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|userPrivileges
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"groupPrivileges:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|groupPrivileges
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|groupPrivileges
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"rolePrivileges:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|rolePrivileges
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|rolePrivileges
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PrincipalPrivilegeSetStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|PrincipalPrivilegeSetStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|PrincipalPrivilegeSetStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PrincipalPrivilegeSetStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|PrincipalPrivilegeSet
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|PrincipalPrivilegeSet
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// USER_PRIVILEGES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map24
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|userPrivileges
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|(
literal|2
operator|*
name|_map24
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_key25
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|_val26
decl_stmt|;
for|for
control|(
name|int
name|_i27
init|=
literal|0
init|;
name|_i27
operator|<
name|_map24
operator|.
name|size
condition|;
operator|++
name|_i27
control|)
block|{
name|_key25
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list28
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|_val26
operator|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|_list28
operator|.
name|size
argument_list|)
expr_stmt|;
name|PrivilegeGrantInfo
name|_elem29
decl_stmt|;
for|for
control|(
name|int
name|_i30
init|=
literal|0
init|;
name|_i30
operator|<
name|_list28
operator|.
name|size
condition|;
operator|++
name|_i30
control|)
block|{
name|_elem29
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|()
expr_stmt|;
name|_elem29
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|_val26
operator|.
name|add
argument_list|(
name|_elem29
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|userPrivileges
operator|.
name|put
argument_list|(
name|_key25
argument_list|,
name|_val26
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setUserPrivilegesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// GROUP_PRIVILEGES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map31
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|groupPrivileges
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|(
literal|2
operator|*
name|_map31
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_key32
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|_val33
decl_stmt|;
for|for
control|(
name|int
name|_i34
init|=
literal|0
init|;
name|_i34
operator|<
name|_map31
operator|.
name|size
condition|;
operator|++
name|_i34
control|)
block|{
name|_key32
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list35
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|_val33
operator|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|_list35
operator|.
name|size
argument_list|)
expr_stmt|;
name|PrivilegeGrantInfo
name|_elem36
decl_stmt|;
for|for
control|(
name|int
name|_i37
init|=
literal|0
init|;
name|_i37
operator|<
name|_list35
operator|.
name|size
condition|;
operator|++
name|_i37
control|)
block|{
name|_elem36
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|()
expr_stmt|;
name|_elem36
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|_val33
operator|.
name|add
argument_list|(
name|_elem36
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|groupPrivileges
operator|.
name|put
argument_list|(
name|_key32
argument_list|,
name|_val33
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setGroupPrivilegesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// ROLE_PRIVILEGES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map38
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|rolePrivileges
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|(
literal|2
operator|*
name|_map38
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_key39
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|_val40
decl_stmt|;
for|for
control|(
name|int
name|_i41
init|=
literal|0
init|;
name|_i41
operator|<
name|_map38
operator|.
name|size
condition|;
operator|++
name|_i41
control|)
block|{
name|_key39
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list42
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|_val40
operator|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|_list42
operator|.
name|size
argument_list|)
expr_stmt|;
name|PrivilegeGrantInfo
name|_elem43
decl_stmt|;
for|for
control|(
name|int
name|_i44
init|=
literal|0
init|;
name|_i44
operator|<
name|_list42
operator|.
name|size
condition|;
operator|++
name|_i44
control|)
block|{
name|_elem43
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|()
expr_stmt|;
name|_elem43
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|_val40
operator|.
name|add
argument_list|(
name|_elem43
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|rolePrivileges
operator|.
name|put
argument_list|(
name|_key39
argument_list|,
name|_val40
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setRolePrivilegesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|PrincipalPrivilegeSet
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|userPrivileges
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|USER_PRIVILEGES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|struct
operator|.
name|userPrivileges
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|_iter45
range|:
name|struct
operator|.
name|userPrivileges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter45
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|_iter45
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|_iter46
range|:
name|_iter45
operator|.
name|getValue
argument_list|()
control|)
block|{
name|_iter46
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|groupPrivileges
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|GROUP_PRIVILEGES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|struct
operator|.
name|groupPrivileges
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|_iter47
range|:
name|struct
operator|.
name|groupPrivileges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter47
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|_iter47
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|_iter48
range|:
name|_iter47
operator|.
name|getValue
argument_list|()
control|)
block|{
name|_iter48
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|rolePrivileges
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ROLE_PRIVILEGES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|struct
operator|.
name|rolePrivileges
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|_iter49
range|:
name|struct
operator|.
name|rolePrivileges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter49
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|_iter49
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|_iter50
range|:
name|_iter49
operator|.
name|getValue
argument_list|()
control|)
block|{
name|_iter50
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PrincipalPrivilegeSetTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|PrincipalPrivilegeSetTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|PrincipalPrivilegeSetTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PrincipalPrivilegeSetTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|PrincipalPrivilegeSet
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|PrincipalPrivilegeSet
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetUserPrivileges
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetGroupPrivileges
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRolePrivileges
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetUserPrivileges
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|userPrivileges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|_iter51
range|:
name|struct
operator|.
name|userPrivileges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter51
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter51
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|_iter52
range|:
name|_iter51
operator|.
name|getValue
argument_list|()
control|)
block|{
name|_iter52
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetGroupPrivileges
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|groupPrivileges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|_iter53
range|:
name|struct
operator|.
name|groupPrivileges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter53
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter53
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|_iter54
range|:
name|_iter53
operator|.
name|getValue
argument_list|()
control|)
block|{
name|_iter54
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetRolePrivileges
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|rolePrivileges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|_iter55
range|:
name|struct
operator|.
name|rolePrivileges
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter55
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter55
operator|.
name|getValue
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|_iter56
range|:
name|_iter55
operator|.
name|getValue
argument_list|()
control|)
block|{
name|_iter56
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|PrincipalPrivilegeSet
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map57
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|userPrivileges
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|(
literal|2
operator|*
name|_map57
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_key58
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|_val59
decl_stmt|;
for|for
control|(
name|int
name|_i60
init|=
literal|0
init|;
name|_i60
operator|<
name|_map57
operator|.
name|size
condition|;
operator|++
name|_i60
control|)
block|{
name|_key58
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list61
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|_val59
operator|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|_list61
operator|.
name|size
argument_list|)
expr_stmt|;
name|PrivilegeGrantInfo
name|_elem62
decl_stmt|;
for|for
control|(
name|int
name|_i63
init|=
literal|0
init|;
name|_i63
operator|<
name|_list61
operator|.
name|size
condition|;
operator|++
name|_i63
control|)
block|{
name|_elem62
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|()
expr_stmt|;
name|_elem62
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|_val59
operator|.
name|add
argument_list|(
name|_elem62
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|userPrivileges
operator|.
name|put
argument_list|(
name|_key58
argument_list|,
name|_val59
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setUserPrivilegesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map64
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|groupPrivileges
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|(
literal|2
operator|*
name|_map64
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_key65
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|_val66
decl_stmt|;
for|for
control|(
name|int
name|_i67
init|=
literal|0
init|;
name|_i67
operator|<
name|_map64
operator|.
name|size
condition|;
operator|++
name|_i67
control|)
block|{
name|_key65
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list68
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|_val66
operator|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|_list68
operator|.
name|size
argument_list|)
expr_stmt|;
name|PrivilegeGrantInfo
name|_elem69
decl_stmt|;
for|for
control|(
name|int
name|_i70
init|=
literal|0
init|;
name|_i70
operator|<
name|_list68
operator|.
name|size
condition|;
operator|++
name|_i70
control|)
block|{
name|_elem69
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|()
expr_stmt|;
name|_elem69
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|_val66
operator|.
name|add
argument_list|(
name|_elem69
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|groupPrivileges
operator|.
name|put
argument_list|(
name|_key65
argument_list|,
name|_val66
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setGroupPrivilegesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map71
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|rolePrivileges
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|(
literal|2
operator|*
name|_map71
operator|.
name|size
argument_list|)
expr_stmt|;
name|String
name|_key72
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|_val73
decl_stmt|;
for|for
control|(
name|int
name|_i74
init|=
literal|0
init|;
name|_i74
operator|<
name|_map71
operator|.
name|size
condition|;
operator|++
name|_i74
control|)
block|{
name|_key72
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list75
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|_val73
operator|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|(
name|_list75
operator|.
name|size
argument_list|)
expr_stmt|;
name|PrivilegeGrantInfo
name|_elem76
decl_stmt|;
for|for
control|(
name|int
name|_i77
init|=
literal|0
init|;
name|_i77
operator|<
name|_list75
operator|.
name|size
condition|;
operator|++
name|_i77
control|)
block|{
name|_elem76
operator|=
operator|new
name|PrivilegeGrantInfo
argument_list|()
expr_stmt|;
name|_elem76
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|_val73
operator|.
name|add
argument_list|(
name|_elem76
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|rolePrivileges
operator|.
name|put
argument_list|(
name|_key72
argument_list|,
name|_val73
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setRolePrivilegesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

