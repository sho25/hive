begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.7.0)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|Table
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|Table
argument_list|,
name|Table
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"Table"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"dbName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|OWNER_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"owner"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|CREATE_TIME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"createTime"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|LAST_ACCESS_TIME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"lastAccessTime"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|RETENTION_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"retention"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SD_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"sd"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|PARTITION_KEYS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"partitionKeys"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|PARAMETERS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"parameters"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|9
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|VIEW_ORIGINAL_TEXT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"viewOriginalText"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|VIEW_EXPANDED_TEXT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"viewExpandedText"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|11
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLE_TYPE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tableType"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|12
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|PRIVILEGES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"privileges"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|13
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|LINK_TARGET_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"linkTarget"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|14
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|LINK_TABLES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"linkTables"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|15
argument_list|)
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
comment|// required
specifier|private
name|String
name|dbName
decl_stmt|;
comment|// required
specifier|private
name|String
name|owner
decl_stmt|;
comment|// required
specifier|private
name|int
name|createTime
decl_stmt|;
comment|// required
specifier|private
name|int
name|lastAccessTime
decl_stmt|;
comment|// required
specifier|private
name|int
name|retention
decl_stmt|;
comment|// required
specifier|private
name|StorageDescriptor
name|sd
decl_stmt|;
comment|// required
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionKeys
decl_stmt|;
comment|// required
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
comment|// required
specifier|private
name|String
name|viewOriginalText
decl_stmt|;
comment|// required
specifier|private
name|String
name|viewExpandedText
decl_stmt|;
comment|// required
specifier|private
name|String
name|tableType
decl_stmt|;
comment|// required
specifier|private
name|PrincipalPrivilegeSet
name|privileges
decl_stmt|;
comment|// required
specifier|private
name|TableIdentifier
name|linkTarget
decl_stmt|;
comment|// required
specifier|private
name|List
argument_list|<
name|TableIdentifier
argument_list|>
name|linkTables
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tableName"
argument_list|)
block|,
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"dbName"
argument_list|)
block|,
name|OWNER
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"owner"
argument_list|)
block|,
name|CREATE_TIME
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"createTime"
argument_list|)
block|,
name|LAST_ACCESS_TIME
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"lastAccessTime"
argument_list|)
block|,
name|RETENTION
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"retention"
argument_list|)
block|,
name|SD
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"sd"
argument_list|)
block|,
name|PARTITION_KEYS
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|,
literal|"partitionKeys"
argument_list|)
block|,
name|PARAMETERS
argument_list|(
operator|(
name|short
operator|)
literal|9
argument_list|,
literal|"parameters"
argument_list|)
block|,
name|VIEW_ORIGINAL_TEXT
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|,
literal|"viewOriginalText"
argument_list|)
block|,
name|VIEW_EXPANDED_TEXT
argument_list|(
operator|(
name|short
operator|)
literal|11
argument_list|,
literal|"viewExpandedText"
argument_list|)
block|,
name|TABLE_TYPE
argument_list|(
operator|(
name|short
operator|)
literal|12
argument_list|,
literal|"tableType"
argument_list|)
block|,
name|PRIVILEGES
argument_list|(
operator|(
name|short
operator|)
literal|13
argument_list|,
literal|"privileges"
argument_list|)
block|,
name|LINK_TARGET
argument_list|(
operator|(
name|short
operator|)
literal|14
argument_list|,
literal|"linkTarget"
argument_list|)
block|,
name|LINK_TABLES
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|,
literal|"linkTables"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
case|case
literal|2
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|3
case|:
comment|// OWNER
return|return
name|OWNER
return|;
case|case
literal|4
case|:
comment|// CREATE_TIME
return|return
name|CREATE_TIME
return|;
case|case
literal|5
case|:
comment|// LAST_ACCESS_TIME
return|return
name|LAST_ACCESS_TIME
return|;
case|case
literal|6
case|:
comment|// RETENTION
return|return
name|RETENTION
return|;
case|case
literal|7
case|:
comment|// SD
return|return
name|SD
return|;
case|case
literal|8
case|:
comment|// PARTITION_KEYS
return|return
name|PARTITION_KEYS
return|;
case|case
literal|9
case|:
comment|// PARAMETERS
return|return
name|PARAMETERS
return|;
case|case
literal|10
case|:
comment|// VIEW_ORIGINAL_TEXT
return|return
name|VIEW_ORIGINAL_TEXT
return|;
case|case
literal|11
case|:
comment|// VIEW_EXPANDED_TEXT
return|return
name|VIEW_EXPANDED_TEXT
return|;
case|case
literal|12
case|:
comment|// TABLE_TYPE
return|return
name|TABLE_TYPE
return|;
case|case
literal|13
case|:
comment|// PRIVILEGES
return|return
name|PRIVILEGES
return|;
case|case
literal|14
case|:
comment|// LINK_TARGET
return|return
name|LINK_TARGET
return|;
case|case
literal|15
case|:
comment|// LINK_TABLES
return|return
name|LINK_TABLES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__CREATETIME_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__LASTACCESSTIME_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__RETENTION_ISSET_ID
init|=
literal|2
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"dbName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|OWNER
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"owner"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|CREATE_TIME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"createTime"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|LAST_ACCESS_TIME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"lastAccessTime"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|RETENTION
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"retention"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SD
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"sd"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|StorageDescriptor
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PARTITION_KEYS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"partitionKeys"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|FieldSchema
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PARAMETERS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"parameters"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|VIEW_ORIGINAL_TEXT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"viewOriginalText"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|VIEW_EXPANDED_TEXT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"viewExpandedText"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_TYPE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tableType"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PRIVILEGES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"privileges"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|PrincipalPrivilegeSet
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|LINK_TARGET
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"linkTarget"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TableIdentifier
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|LINK_TABLES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"linkTables"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|StructMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|TableIdentifier
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|Table
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Table
parameter_list|()
block|{   }
specifier|public
name|Table
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|owner
parameter_list|,
name|int
name|createTime
parameter_list|,
name|int
name|lastAccessTime
parameter_list|,
name|int
name|retention
parameter_list|,
name|StorageDescriptor
name|sd
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionKeys
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|,
name|String
name|viewOriginalText
parameter_list|,
name|String
name|viewExpandedText
parameter_list|,
name|String
name|tableType
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|createTime
operator|=
name|createTime
expr_stmt|;
name|setCreateTimeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastAccessTime
operator|=
name|lastAccessTime
expr_stmt|;
name|setLastAccessTimeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|retention
operator|=
name|retention
expr_stmt|;
name|setRetentionIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
name|this
operator|.
name|partitionKeys
operator|=
name|partitionKeys
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
name|this
operator|.
name|viewOriginalText
operator|=
name|viewOriginalText
expr_stmt|;
name|this
operator|.
name|viewExpandedText
operator|=
name|viewExpandedText
expr_stmt|;
name|this
operator|.
name|tableType
operator|=
name|tableType
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|Table
parameter_list|(
name|Table
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetTableName
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|other
operator|.
name|tableName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetDbName
argument_list|()
condition|)
block|{
name|this
operator|.
name|dbName
operator|=
name|other
operator|.
name|dbName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetOwner
argument_list|()
condition|)
block|{
name|this
operator|.
name|owner
operator|=
name|other
operator|.
name|owner
expr_stmt|;
block|}
name|this
operator|.
name|createTime
operator|=
name|other
operator|.
name|createTime
expr_stmt|;
name|this
operator|.
name|lastAccessTime
operator|=
name|other
operator|.
name|lastAccessTime
expr_stmt|;
name|this
operator|.
name|retention
operator|=
name|other
operator|.
name|retention
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetSd
argument_list|()
condition|)
block|{
name|this
operator|.
name|sd
operator|=
operator|new
name|StorageDescriptor
argument_list|(
name|other
operator|.
name|sd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPartitionKeys
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|__this__partitionKeys
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|other_element
range|:
name|other
operator|.
name|partitionKeys
control|)
block|{
name|__this__partitionKeys
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|partitionKeys
operator|=
name|__this__partitionKeys
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetParameters
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|__this__parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|other_element
range|:
name|other
operator|.
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__parameters_copy_key
init|=
name|other_element_key
decl_stmt|;
name|String
name|__this__parameters_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__parameters
operator|.
name|put
argument_list|(
name|__this__parameters_copy_key
argument_list|,
name|__this__parameters_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|parameters
operator|=
name|__this__parameters
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetViewOriginalText
argument_list|()
condition|)
block|{
name|this
operator|.
name|viewOriginalText
operator|=
name|other
operator|.
name|viewOriginalText
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetViewExpandedText
argument_list|()
condition|)
block|{
name|this
operator|.
name|viewExpandedText
operator|=
name|other
operator|.
name|viewExpandedText
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTableType
argument_list|()
condition|)
block|{
name|this
operator|.
name|tableType
operator|=
name|other
operator|.
name|tableType
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPrivileges
argument_list|()
condition|)
block|{
name|this
operator|.
name|privileges
operator|=
operator|new
name|PrincipalPrivilegeSet
argument_list|(
name|other
operator|.
name|privileges
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetLinkTarget
argument_list|()
condition|)
block|{
name|this
operator|.
name|linkTarget
operator|=
operator|new
name|TableIdentifier
argument_list|(
name|other
operator|.
name|linkTarget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetLinkTables
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|TableIdentifier
argument_list|>
name|__this__linkTables
init|=
operator|new
name|ArrayList
argument_list|<
name|TableIdentifier
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableIdentifier
name|other_element
range|:
name|other
operator|.
name|linkTables
control|)
block|{
name|__this__linkTables
operator|.
name|add
argument_list|(
operator|new
name|TableIdentifier
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|linkTables
operator|=
name|__this__linkTables
expr_stmt|;
block|}
block|}
specifier|public
name|Table
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|Table
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|owner
operator|=
literal|null
expr_stmt|;
name|setCreateTimeIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|createTime
operator|=
literal|0
expr_stmt|;
name|setLastAccessTimeIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastAccessTime
operator|=
literal|0
expr_stmt|;
name|setRetentionIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|retention
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|sd
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|partitionKeys
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|viewOriginalText
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|viewExpandedText
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tableType
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|privileges
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|linkTarget
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|linkTables
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
return|;
block|}
specifier|public
name|void
name|setTableName
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTableName
parameter_list|()
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableName
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbName
return|;
block|}
specifier|public
name|void
name|setDbName
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbName
parameter_list|()
block|{
name|this
operator|.
name|dbName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field dbName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDbName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDbNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|dbName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
return|return
name|this
operator|.
name|owner
return|;
block|}
specifier|public
name|void
name|setOwner
parameter_list|(
name|String
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
block|}
specifier|public
name|void
name|unsetOwner
parameter_list|()
block|{
name|this
operator|.
name|owner
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field owner is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetOwner
parameter_list|()
block|{
return|return
name|this
operator|.
name|owner
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setOwnerIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|owner
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getCreateTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|createTime
return|;
block|}
specifier|public
name|void
name|setCreateTime
parameter_list|(
name|int
name|createTime
parameter_list|)
block|{
name|this
operator|.
name|createTime
operator|=
name|createTime
expr_stmt|;
name|setCreateTimeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetCreateTime
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__CREATETIME_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field createTime is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetCreateTime
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__CREATETIME_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCreateTimeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__CREATETIME_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getLastAccessTime
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastAccessTime
return|;
block|}
specifier|public
name|void
name|setLastAccessTime
parameter_list|(
name|int
name|lastAccessTime
parameter_list|)
block|{
name|this
operator|.
name|lastAccessTime
operator|=
name|lastAccessTime
expr_stmt|;
name|setLastAccessTimeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLastAccessTime
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__LASTACCESSTIME_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field lastAccessTime is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetLastAccessTime
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__LASTACCESSTIME_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setLastAccessTimeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__LASTACCESSTIME_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getRetention
parameter_list|()
block|{
return|return
name|this
operator|.
name|retention
return|;
block|}
specifier|public
name|void
name|setRetention
parameter_list|(
name|int
name|retention
parameter_list|)
block|{
name|this
operator|.
name|retention
operator|=
name|retention
expr_stmt|;
name|setRetentionIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetRetention
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__RETENTION_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field retention is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetRetention
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__RETENTION_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setRetentionIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__RETENTION_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|StorageDescriptor
name|getSd
parameter_list|()
block|{
return|return
name|this
operator|.
name|sd
return|;
block|}
specifier|public
name|void
name|setSd
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSd
parameter_list|()
block|{
name|this
operator|.
name|sd
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field sd is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSd
parameter_list|()
block|{
return|return
name|this
operator|.
name|sd
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSdIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|sd
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getPartitionKeysSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|partitionKeys
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|partitionKeys
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|getPartitionKeysIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|partitionKeys
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|partitionKeys
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToPartitionKeys
parameter_list|(
name|FieldSchema
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|partitionKeys
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|partitionKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|partitionKeys
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getPartitionKeys
parameter_list|()
block|{
return|return
name|this
operator|.
name|partitionKeys
return|;
block|}
specifier|public
name|void
name|setPartitionKeys
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionKeys
parameter_list|)
block|{
name|this
operator|.
name|partitionKeys
operator|=
name|partitionKeys
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPartitionKeys
parameter_list|()
block|{
name|this
operator|.
name|partitionKeys
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field partitionKeys is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPartitionKeys
parameter_list|()
block|{
return|return
name|this
operator|.
name|partitionKeys
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPartitionKeysIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|partitionKeys
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getParametersSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|parameters
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|parameters
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToParameters
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|parameters
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|parameters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|parameters
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|parameters
return|;
block|}
specifier|public
name|void
name|setParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
specifier|public
name|void
name|unsetParameters
parameter_list|()
block|{
name|this
operator|.
name|parameters
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field parameters is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetParameters
parameter_list|()
block|{
return|return
name|this
operator|.
name|parameters
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setParametersIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|parameters
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getViewOriginalText
parameter_list|()
block|{
return|return
name|this
operator|.
name|viewOriginalText
return|;
block|}
specifier|public
name|void
name|setViewOriginalText
parameter_list|(
name|String
name|viewOriginalText
parameter_list|)
block|{
name|this
operator|.
name|viewOriginalText
operator|=
name|viewOriginalText
expr_stmt|;
block|}
specifier|public
name|void
name|unsetViewOriginalText
parameter_list|()
block|{
name|this
operator|.
name|viewOriginalText
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field viewOriginalText is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetViewOriginalText
parameter_list|()
block|{
return|return
name|this
operator|.
name|viewOriginalText
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setViewOriginalTextIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|viewOriginalText
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getViewExpandedText
parameter_list|()
block|{
return|return
name|this
operator|.
name|viewExpandedText
return|;
block|}
specifier|public
name|void
name|setViewExpandedText
parameter_list|(
name|String
name|viewExpandedText
parameter_list|)
block|{
name|this
operator|.
name|viewExpandedText
operator|=
name|viewExpandedText
expr_stmt|;
block|}
specifier|public
name|void
name|unsetViewExpandedText
parameter_list|()
block|{
name|this
operator|.
name|viewExpandedText
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field viewExpandedText is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetViewExpandedText
parameter_list|()
block|{
return|return
name|this
operator|.
name|viewExpandedText
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setViewExpandedTextIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|viewExpandedText
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTableType
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableType
return|;
block|}
specifier|public
name|void
name|setTableType
parameter_list|(
name|String
name|tableType
parameter_list|)
block|{
name|this
operator|.
name|tableType
operator|=
name|tableType
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTableType
parameter_list|()
block|{
name|this
operator|.
name|tableType
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tableType is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTableType
parameter_list|()
block|{
return|return
name|this
operator|.
name|tableType
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTableTypeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tableType
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|PrincipalPrivilegeSet
name|getPrivileges
parameter_list|()
block|{
return|return
name|this
operator|.
name|privileges
return|;
block|}
specifier|public
name|void
name|setPrivileges
parameter_list|(
name|PrincipalPrivilegeSet
name|privileges
parameter_list|)
block|{
name|this
operator|.
name|privileges
operator|=
name|privileges
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPrivileges
parameter_list|()
block|{
name|this
operator|.
name|privileges
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field privileges is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPrivileges
parameter_list|()
block|{
return|return
name|this
operator|.
name|privileges
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPrivilegesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|privileges
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|TableIdentifier
name|getLinkTarget
parameter_list|()
block|{
return|return
name|this
operator|.
name|linkTarget
return|;
block|}
specifier|public
name|void
name|setLinkTarget
parameter_list|(
name|TableIdentifier
name|linkTarget
parameter_list|)
block|{
name|this
operator|.
name|linkTarget
operator|=
name|linkTarget
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLinkTarget
parameter_list|()
block|{
name|this
operator|.
name|linkTarget
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field linkTarget is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetLinkTarget
parameter_list|()
block|{
return|return
name|this
operator|.
name|linkTarget
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setLinkTargetIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|linkTarget
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getLinkTablesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|linkTables
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|linkTables
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|TableIdentifier
argument_list|>
name|getLinkTablesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|linkTables
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|linkTables
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToLinkTables
parameter_list|(
name|TableIdentifier
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|linkTables
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|linkTables
operator|=
operator|new
name|ArrayList
argument_list|<
name|TableIdentifier
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|linkTables
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|TableIdentifier
argument_list|>
name|getLinkTables
parameter_list|()
block|{
return|return
name|this
operator|.
name|linkTables
return|;
block|}
specifier|public
name|void
name|setLinkTables
parameter_list|(
name|List
argument_list|<
name|TableIdentifier
argument_list|>
name|linkTables
parameter_list|)
block|{
name|this
operator|.
name|linkTables
operator|=
name|linkTables
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLinkTables
parameter_list|()
block|{
name|this
operator|.
name|linkTables
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field linkTables is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetLinkTables
parameter_list|()
block|{
return|return
name|this
operator|.
name|linkTables
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setLinkTablesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|linkTables
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDbName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDbName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OWNER
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetOwner
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setOwner
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|CREATE_TIME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetCreateTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setCreateTime
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LAST_ACCESS_TIME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLastAccessTime
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLastAccessTime
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|RETENTION
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetRetention
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setRetention
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SD
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSd
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSd
argument_list|(
operator|(
name|StorageDescriptor
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARTITION_KEYS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPartitionKeys
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPartitionKeys
argument_list|(
operator|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARAMETERS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetParameters
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setParameters
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VIEW_ORIGINAL_TEXT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetViewOriginalText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setViewOriginalText
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|VIEW_EXPANDED_TEXT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetViewExpandedText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setViewExpandedText
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TABLE_TYPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTableType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTableType
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PRIVILEGES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPrivileges
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPrivileges
argument_list|(
operator|(
name|PrincipalPrivilegeSet
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LINK_TARGET
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLinkTarget
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLinkTarget
argument_list|(
operator|(
name|TableIdentifier
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LINK_TABLES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLinkTables
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLinkTables
argument_list|(
operator|(
name|List
argument_list|<
name|TableIdentifier
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|getTableName
argument_list|()
return|;
case|case
name|DB_NAME
case|:
return|return
name|getDbName
argument_list|()
return|;
case|case
name|OWNER
case|:
return|return
name|getOwner
argument_list|()
return|;
case|case
name|CREATE_TIME
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getCreateTime
argument_list|()
argument_list|)
return|;
case|case
name|LAST_ACCESS_TIME
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getLastAccessTime
argument_list|()
argument_list|)
return|;
case|case
name|RETENTION
case|:
return|return
name|Integer
operator|.
name|valueOf
argument_list|(
name|getRetention
argument_list|()
argument_list|)
return|;
case|case
name|SD
case|:
return|return
name|getSd
argument_list|()
return|;
case|case
name|PARTITION_KEYS
case|:
return|return
name|getPartitionKeys
argument_list|()
return|;
case|case
name|PARAMETERS
case|:
return|return
name|getParameters
argument_list|()
return|;
case|case
name|VIEW_ORIGINAL_TEXT
case|:
return|return
name|getViewOriginalText
argument_list|()
return|;
case|case
name|VIEW_EXPANDED_TEXT
case|:
return|return
name|getViewExpandedText
argument_list|()
return|;
case|case
name|TABLE_TYPE
case|:
return|return
name|getTableType
argument_list|()
return|;
case|case
name|PRIVILEGES
case|:
return|return
name|getPrivileges
argument_list|()
return|;
case|case
name|LINK_TARGET
case|:
return|return
name|getLinkTarget
argument_list|()
return|;
case|case
name|LINK_TABLES
case|:
return|return
name|getLinkTables
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTableName
argument_list|()
return|;
case|case
name|DB_NAME
case|:
return|return
name|isSetDbName
argument_list|()
return|;
case|case
name|OWNER
case|:
return|return
name|isSetOwner
argument_list|()
return|;
case|case
name|CREATE_TIME
case|:
return|return
name|isSetCreateTime
argument_list|()
return|;
case|case
name|LAST_ACCESS_TIME
case|:
return|return
name|isSetLastAccessTime
argument_list|()
return|;
case|case
name|RETENTION
case|:
return|return
name|isSetRetention
argument_list|()
return|;
case|case
name|SD
case|:
return|return
name|isSetSd
argument_list|()
return|;
case|case
name|PARTITION_KEYS
case|:
return|return
name|isSetPartitionKeys
argument_list|()
return|;
case|case
name|PARAMETERS
case|:
return|return
name|isSetParameters
argument_list|()
return|;
case|case
name|VIEW_ORIGINAL_TEXT
case|:
return|return
name|isSetViewOriginalText
argument_list|()
return|;
case|case
name|VIEW_EXPANDED_TEXT
case|:
return|return
name|isSetViewExpandedText
argument_list|()
return|;
case|case
name|TABLE_TYPE
case|:
return|return
name|isSetTableType
argument_list|()
return|;
case|case
name|PRIVILEGES
case|:
return|return
name|isSetPrivileges
argument_list|()
return|;
case|case
name|LINK_TARGET
case|:
return|return
name|isSetLinkTarget
argument_list|()
return|;
case|case
name|LINK_TABLES
case|:
return|return
name|isSetLinkTables
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|Table
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|Table
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Table
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tableName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableName
operator|||
name|that_present_tableName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableName
operator|&&
name|that_present_tableName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_dbName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDbName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_dbName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDbName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_dbName
operator|||
name|that_present_dbName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbName
operator|&&
name|that_present_dbName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_owner
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetOwner
argument_list|()
decl_stmt|;
name|boolean
name|that_present_owner
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetOwner
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_owner
operator|||
name|that_present_owner
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_owner
operator|&&
name|that_present_owner
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|owner
operator|.
name|equals
argument_list|(
name|that
operator|.
name|owner
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_createTime
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_createTime
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_createTime
operator|||
name|that_present_createTime
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_createTime
operator|&&
name|that_present_createTime
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|createTime
operator|!=
name|that
operator|.
name|createTime
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_lastAccessTime
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_lastAccessTime
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_lastAccessTime
operator|||
name|that_present_lastAccessTime
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_lastAccessTime
operator|&&
name|that_present_lastAccessTime
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|lastAccessTime
operator|!=
name|that
operator|.
name|lastAccessTime
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_retention
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_retention
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_retention
operator|||
name|that_present_retention
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_retention
operator|&&
name|that_present_retention
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|retention
operator|!=
name|that
operator|.
name|retention
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_sd
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSd
argument_list|()
decl_stmt|;
name|boolean
name|that_present_sd
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSd
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_sd
operator|||
name|that_present_sd
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_sd
operator|&&
name|that_present_sd
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|sd
operator|.
name|equals
argument_list|(
name|that
operator|.
name|sd
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_partitionKeys
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPartitionKeys
argument_list|()
decl_stmt|;
name|boolean
name|that_present_partitionKeys
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPartitionKeys
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_partitionKeys
operator|||
name|that_present_partitionKeys
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_partitionKeys
operator|&&
name|that_present_partitionKeys
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|partitionKeys
operator|.
name|equals
argument_list|(
name|that
operator|.
name|partitionKeys
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_parameters
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetParameters
argument_list|()
decl_stmt|;
name|boolean
name|that_present_parameters
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_parameters
operator|||
name|that_present_parameters
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_parameters
operator|&&
name|that_present_parameters
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|parameters
operator|.
name|equals
argument_list|(
name|that
operator|.
name|parameters
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_viewOriginalText
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetViewOriginalText
argument_list|()
decl_stmt|;
name|boolean
name|that_present_viewOriginalText
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetViewOriginalText
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_viewOriginalText
operator|||
name|that_present_viewOriginalText
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_viewOriginalText
operator|&&
name|that_present_viewOriginalText
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|viewOriginalText
operator|.
name|equals
argument_list|(
name|that
operator|.
name|viewOriginalText
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_viewExpandedText
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetViewExpandedText
argument_list|()
decl_stmt|;
name|boolean
name|that_present_viewExpandedText
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetViewExpandedText
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_viewExpandedText
operator|||
name|that_present_viewExpandedText
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_viewExpandedText
operator|&&
name|that_present_viewExpandedText
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|viewExpandedText
operator|.
name|equals
argument_list|(
name|that
operator|.
name|viewExpandedText
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tableType
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTableType
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tableType
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTableType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tableType
operator|||
name|that_present_tableType
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tableType
operator|&&
name|that_present_tableType
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tableType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tableType
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_privileges
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPrivileges
argument_list|()
decl_stmt|;
name|boolean
name|that_present_privileges
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_privileges
operator|||
name|that_present_privileges
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_privileges
operator|&&
name|that_present_privileges
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|privileges
operator|.
name|equals
argument_list|(
name|that
operator|.
name|privileges
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_linkTarget
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetLinkTarget
argument_list|()
decl_stmt|;
name|boolean
name|that_present_linkTarget
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetLinkTarget
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_linkTarget
operator|||
name|that_present_linkTarget
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_linkTarget
operator|&&
name|that_present_linkTarget
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|linkTarget
operator|.
name|equals
argument_list|(
name|that
operator|.
name|linkTarget
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_linkTables
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetLinkTables
argument_list|()
decl_stmt|;
name|boolean
name|that_present_linkTables
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetLinkTables
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_linkTables
operator|||
name|that_present_linkTables
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_linkTables
operator|&&
name|that_present_linkTables
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|linkTables
operator|.
name|equals
argument_list|(
name|that
operator|.
name|linkTables
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Table
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|Table
name|typedOther
init|=
operator|(
name|Table
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableName
argument_list|,
name|typedOther
operator|.
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDbName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDbName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDbName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|dbName
argument_list|,
name|typedOther
operator|.
name|dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetOwner
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetOwner
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetOwner
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|owner
argument_list|,
name|typedOther
operator|.
name|owner
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetCreateTime
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetCreateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetCreateTime
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|createTime
argument_list|,
name|typedOther
operator|.
name|createTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetLastAccessTime
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetLastAccessTime
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|lastAccessTime
argument_list|,
name|typedOther
operator|.
name|lastAccessTime
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetRetention
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetRetention
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetRetention
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|retention
argument_list|,
name|typedOther
operator|.
name|retention
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSd
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSd
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSd
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|sd
argument_list|,
name|typedOther
operator|.
name|sd
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPartitionKeys
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPartitionKeys
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|partitionKeys
argument_list|,
name|typedOther
operator|.
name|partitionKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetParameters
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetParameters
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetParameters
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|parameters
argument_list|,
name|typedOther
operator|.
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetViewOriginalText
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetViewOriginalText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetViewOriginalText
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|viewOriginalText
argument_list|,
name|typedOther
operator|.
name|viewOriginalText
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetViewExpandedText
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetViewExpandedText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetViewExpandedText
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|viewExpandedText
argument_list|,
name|typedOther
operator|.
name|viewExpandedText
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTableType
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTableType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTableType
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tableType
argument_list|,
name|typedOther
operator|.
name|tableType
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPrivileges
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPrivileges
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPrivileges
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|privileges
argument_list|,
name|typedOther
operator|.
name|privileges
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetLinkTarget
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetLinkTarget
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetLinkTarget
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|linkTarget
argument_list|,
name|typedOther
operator|.
name|linkTarget
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetLinkTables
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetLinkTables
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetLinkTables
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|linkTables
argument_list|,
name|typedOther
operator|.
name|linkTables
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|dbName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// OWNER
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|owner
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// CREATE_TIME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|createTime
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setCreateTimeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// LAST_ACCESS_TIME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|lastAccessTime
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setLastAccessTimeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// RETENTION
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|retention
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|setRetentionIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// SD
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|sd
operator|=
operator|new
name|StorageDescriptor
argument_list|()
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// PARTITION_KEYS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list66
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|partitionKeys
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|_list66
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i67
init|=
literal|0
init|;
name|_i67
operator|<
name|_list66
operator|.
name|size
condition|;
operator|++
name|_i67
control|)
block|{
name|FieldSchema
name|_elem68
decl_stmt|;
comment|// required
name|_elem68
operator|=
operator|new
name|FieldSchema
argument_list|()
expr_stmt|;
name|_elem68
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|partitionKeys
operator|.
name|add
argument_list|(
name|_elem68
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// PARAMETERS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map69
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|parameters
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map69
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i70
init|=
literal|0
init|;
name|_i70
operator|<
name|_map69
operator|.
name|size
condition|;
operator|++
name|_i70
control|)
block|{
name|String
name|_key71
decl_stmt|;
comment|// required
name|String
name|_val72
decl_stmt|;
comment|// required
name|_key71
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val72
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|parameters
operator|.
name|put
argument_list|(
name|_key71
argument_list|,
name|_val72
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// VIEW_ORIGINAL_TEXT
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|viewOriginalText
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
comment|// VIEW_EXPANDED_TEXT
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|viewExpandedText
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
comment|// TABLE_TYPE
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tableType
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|13
case|:
comment|// PRIVILEGES
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|privileges
operator|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
expr_stmt|;
name|this
operator|.
name|privileges
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|14
case|:
comment|// LINK_TARGET
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|linkTarget
operator|=
operator|new
name|TableIdentifier
argument_list|()
expr_stmt|;
name|this
operator|.
name|linkTarget
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|15
case|:
comment|// LINK_TABLES
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list73
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|linkTables
operator|=
operator|new
name|ArrayList
argument_list|<
name|TableIdentifier
argument_list|>
argument_list|(
name|_list73
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i74
init|=
literal|0
init|;
name|_i74
operator|<
name|_list73
operator|.
name|size
condition|;
operator|++
name|_i74
control|)
block|{
name|TableIdentifier
name|_elem75
decl_stmt|;
comment|// required
name|_elem75
operator|=
operator|new
name|TableIdentifier
argument_list|()
expr_stmt|;
name|_elem75
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|linkTables
operator|.
name|add
argument_list|(
name|_elem75
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|dbName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|dbName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|owner
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|OWNER_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|owner
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|CREATE_TIME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|createTime
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LAST_ACCESS_TIME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|lastAccessTime
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|RETENTION_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|retention
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|sd
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SD_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|sd
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|partitionKeys
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PARTITION_KEYS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|partitionKeys
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|_iter76
range|:
name|this
operator|.
name|partitionKeys
control|)
block|{
name|_iter76
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|parameters
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PARAMETERS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|parameters
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|_iter77
range|:
name|this
operator|.
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter77
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter77
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|viewOriginalText
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|VIEW_ORIGINAL_TEXT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|viewOriginalText
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|viewExpandedText
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|VIEW_EXPANDED_TEXT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|viewExpandedText
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tableType
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_TYPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tableType
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|privileges
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isSetPrivileges
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PRIVILEGES_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|privileges
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|linkTarget
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isSetLinkTarget
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LINK_TARGET_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|linkTarget
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|this
operator|.
name|linkTables
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isSetLinkTables
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LINK_TABLES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|linkTables
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|TableIdentifier
name|_iter78
range|:
name|this
operator|.
name|linkTables
control|)
block|{
name|_iter78
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Table("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"owner:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|owner
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|owner
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"createTime:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|createTime
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"lastAccessTime:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|lastAccessTime
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"retention:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|retention
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"sd:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|sd
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|sd
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"partitionKeys:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|partitionKeys
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|partitionKeys
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"parameters:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|parameters
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|parameters
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"viewOriginalText:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|viewOriginalText
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|viewOriginalText
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"viewExpandedText:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|viewExpandedText
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|viewExpandedText
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tableType:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tableType
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tableType
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetPrivileges
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"privileges:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|privileges
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|privileges
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetLinkTarget
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"linkTarget:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|linkTarget
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|linkTarget
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetLinkTables
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"linkTables:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|linkTables
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|linkTables
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

