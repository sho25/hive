begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.7.0)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|LongColumnStatsData
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|LongColumnStatsData
argument_list|,
name|LongColumnStatsData
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"LongColumnStatsData"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|LOW_VALUE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"lowValue"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|HIGH_VALUE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"highValue"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|NUM_NULLS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"numNulls"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|NUM_DVS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"numDVs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
name|long
name|lowValue
decl_stmt|;
comment|// required
specifier|private
name|long
name|highValue
decl_stmt|;
comment|// required
specifier|private
name|long
name|numNulls
decl_stmt|;
comment|// required
specifier|private
name|long
name|numDVs
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|LOW_VALUE
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"lowValue"
argument_list|)
block|,
name|HIGH_VALUE
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"highValue"
argument_list|)
block|,
name|NUM_NULLS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"numNulls"
argument_list|)
block|,
name|NUM_DVS
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"numDVs"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// LOW_VALUE
return|return
name|LOW_VALUE
return|;
case|case
literal|2
case|:
comment|// HIGH_VALUE
return|return
name|HIGH_VALUE
return|;
case|case
literal|3
case|:
comment|// NUM_NULLS
return|return
name|NUM_NULLS
return|;
case|case
literal|4
case|:
comment|// NUM_DVS
return|return
name|NUM_DVS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__LOWVALUE_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__HIGHVALUE_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__NUMNULLS_ISSET_ID
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__NUMDVS_ISSET_ID
init|=
literal|3
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|4
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|LOW_VALUE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"lowValue"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|HIGH_VALUE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"highValue"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NUM_NULLS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"numNulls"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NUM_DVS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"numDVs"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|LongColumnStatsData
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LongColumnStatsData
parameter_list|()
block|{   }
specifier|public
name|LongColumnStatsData
parameter_list|(
name|long
name|lowValue
parameter_list|,
name|long
name|highValue
parameter_list|,
name|long
name|numNulls
parameter_list|,
name|long
name|numDVs
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|lowValue
operator|=
name|lowValue
expr_stmt|;
name|setLowValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|highValue
operator|=
name|highValue
expr_stmt|;
name|setHighValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|numNulls
operator|=
name|numNulls
expr_stmt|;
name|setNumNullsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|numDVs
operator|=
name|numDVs
expr_stmt|;
name|setNumDVsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|LongColumnStatsData
parameter_list|(
name|LongColumnStatsData
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|lowValue
operator|=
name|other
operator|.
name|lowValue
expr_stmt|;
name|this
operator|.
name|highValue
operator|=
name|other
operator|.
name|highValue
expr_stmt|;
name|this
operator|.
name|numNulls
operator|=
name|other
operator|.
name|numNulls
expr_stmt|;
name|this
operator|.
name|numDVs
operator|=
name|other
operator|.
name|numDVs
expr_stmt|;
block|}
specifier|public
name|LongColumnStatsData
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|LongColumnStatsData
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setLowValueIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|lowValue
operator|=
literal|0
expr_stmt|;
name|setHighValueIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|highValue
operator|=
literal|0
expr_stmt|;
name|setNumNullsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|numNulls
operator|=
literal|0
expr_stmt|;
name|setNumDVsIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|numDVs
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|long
name|getLowValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|lowValue
return|;
block|}
specifier|public
name|void
name|setLowValue
parameter_list|(
name|long
name|lowValue
parameter_list|)
block|{
name|this
operator|.
name|lowValue
operator|=
name|lowValue
expr_stmt|;
name|setLowValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLowValue
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__LOWVALUE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field lowValue is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetLowValue
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__LOWVALUE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setLowValueIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__LOWVALUE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getHighValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|highValue
return|;
block|}
specifier|public
name|void
name|setHighValue
parameter_list|(
name|long
name|highValue
parameter_list|)
block|{
name|this
operator|.
name|highValue
operator|=
name|highValue
expr_stmt|;
name|setHighValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetHighValue
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__HIGHVALUE_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field highValue is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetHighValue
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__HIGHVALUE_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setHighValueIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__HIGHVALUE_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getNumNulls
parameter_list|()
block|{
return|return
name|this
operator|.
name|numNulls
return|;
block|}
specifier|public
name|void
name|setNumNulls
parameter_list|(
name|long
name|numNulls
parameter_list|)
block|{
name|this
operator|.
name|numNulls
operator|=
name|numNulls
expr_stmt|;
name|setNumNullsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetNumNulls
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__NUMNULLS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field numNulls is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNumNulls
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__NUMNULLS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNumNullsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__NUMNULLS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getNumDVs
parameter_list|()
block|{
return|return
name|this
operator|.
name|numDVs
return|;
block|}
specifier|public
name|void
name|setNumDVs
parameter_list|(
name|long
name|numDVs
parameter_list|)
block|{
name|this
operator|.
name|numDVs
operator|=
name|numDVs
expr_stmt|;
name|setNumDVsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetNumDVs
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__NUMDVS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field numDVs is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNumDVs
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__NUMDVS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setNumDVsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__NUMDVS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|LOW_VALUE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLowValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLowValue
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|HIGH_VALUE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetHighValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setHighValue
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NUM_NULLS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNumNulls
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNumNulls
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NUM_DVS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNumDVs
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNumDVs
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|LOW_VALUE
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getLowValue
argument_list|()
argument_list|)
return|;
case|case
name|HIGH_VALUE
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getHighValue
argument_list|()
argument_list|)
return|;
case|case
name|NUM_NULLS
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getNumNulls
argument_list|()
argument_list|)
return|;
case|case
name|NUM_DVS
case|:
return|return
name|Long
operator|.
name|valueOf
argument_list|(
name|getNumDVs
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|LOW_VALUE
case|:
return|return
name|isSetLowValue
argument_list|()
return|;
case|case
name|HIGH_VALUE
case|:
return|return
name|isSetHighValue
argument_list|()
return|;
case|case
name|NUM_NULLS
case|:
return|return
name|isSetNumNulls
argument_list|()
return|;
case|case
name|NUM_DVS
case|:
return|return
name|isSetNumDVs
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|LongColumnStatsData
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|LongColumnStatsData
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|LongColumnStatsData
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_lowValue
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_lowValue
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_lowValue
operator|||
name|that_present_lowValue
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_lowValue
operator|&&
name|that_present_lowValue
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|lowValue
operator|!=
name|that
operator|.
name|lowValue
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_highValue
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_highValue
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_highValue
operator|||
name|that_present_highValue
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_highValue
operator|&&
name|that_present_highValue
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|highValue
operator|!=
name|that
operator|.
name|highValue
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_numNulls
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_numNulls
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_numNulls
operator|||
name|that_present_numNulls
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_numNulls
operator|&&
name|that_present_numNulls
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|numNulls
operator|!=
name|that
operator|.
name|numNulls
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_numDVs
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_numDVs
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_numDVs
operator|||
name|that_present_numDVs
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_numDVs
operator|&&
name|that_present_numDVs
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|numDVs
operator|!=
name|that
operator|.
name|numDVs
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|HashCodeBuilder
name|builder
init|=
operator|new
name|HashCodeBuilder
argument_list|()
decl_stmt|;
name|boolean
name|present_lowValue
init|=
literal|true
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_lowValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_lowValue
condition|)
name|builder
operator|.
name|append
argument_list|(
name|lowValue
argument_list|)
expr_stmt|;
name|boolean
name|present_highValue
init|=
literal|true
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_highValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_highValue
condition|)
name|builder
operator|.
name|append
argument_list|(
name|highValue
argument_list|)
expr_stmt|;
name|boolean
name|present_numNulls
init|=
literal|true
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_numNulls
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_numNulls
condition|)
name|builder
operator|.
name|append
argument_list|(
name|numNulls
argument_list|)
expr_stmt|;
name|boolean
name|present_numDVs
init|=
literal|true
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_numDVs
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_numDVs
condition|)
name|builder
operator|.
name|append
argument_list|(
name|numDVs
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toHashCode
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|LongColumnStatsData
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|LongColumnStatsData
name|typedOther
init|=
operator|(
name|LongColumnStatsData
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetLowValue
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetLowValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetLowValue
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|lowValue
argument_list|,
name|typedOther
operator|.
name|lowValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetHighValue
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetHighValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetHighValue
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|highValue
argument_list|,
name|typedOther
operator|.
name|highValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNumNulls
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNumNulls
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNumNulls
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|numNulls
argument_list|,
name|typedOther
operator|.
name|numNulls
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNumDVs
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNumDVs
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNumDVs
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|numDVs
argument_list|,
name|typedOther
operator|.
name|numDVs
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// LOW_VALUE
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|lowValue
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setLowValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// HIGH_VALUE
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|highValue
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setHighValueIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// NUM_NULLS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|numNulls
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setNumNullsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// NUM_DVS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|this
operator|.
name|numDVs
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|setNumDVsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LOW_VALUE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|lowValue
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|HIGH_VALUE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|highValue
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NUM_NULLS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|numNulls
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NUM_DVS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|this
operator|.
name|numDVs
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"LongColumnStatsData("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"lowValue:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|lowValue
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"highValue:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|highValue
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"numNulls:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|numNulls
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"numDVs:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|numDVs
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
if|if
condition|(
operator|!
name|isSetLowValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'lowValue' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSetHighValue
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'highValue' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSetNumNulls
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'numNulls' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSetNumDVs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'numDVs' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bit_vector
operator|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

