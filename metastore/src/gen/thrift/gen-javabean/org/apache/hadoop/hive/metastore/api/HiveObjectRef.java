begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.7.0)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|HiveObjectRef
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|HiveObjectRef
argument_list|,
name|HiveObjectRef
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"HiveObjectRef"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|OBJECT_TYPE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"objectType"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"dbName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|OBJECT_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"objectName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|PART_VALUES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"partValues"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|COLUMN_NAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"columnName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
name|HiveObjectType
name|objectType
decl_stmt|;
comment|// required
specifier|private
name|String
name|dbName
decl_stmt|;
comment|// required
specifier|private
name|String
name|objectName
decl_stmt|;
comment|// required
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|partValues
decl_stmt|;
comment|// required
specifier|private
name|String
name|columnName
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
comment|/**      *       * @see HiveObjectType      */
name|OBJECT_TYPE
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"objectType"
argument_list|)
block|,
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"dbName"
argument_list|)
block|,
name|OBJECT_NAME
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"objectName"
argument_list|)
block|,
name|PART_VALUES
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"partValues"
argument_list|)
block|,
name|COLUMN_NAME
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"columnName"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// OBJECT_TYPE
return|return
name|OBJECT_TYPE
return|;
case|case
literal|2
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|3
case|:
comment|// OBJECT_NAME
return|return
name|OBJECT_NAME
return|;
case|case
literal|4
case|:
comment|// PART_VALUES
return|return
name|PART_VALUES
return|;
case|case
literal|5
case|:
comment|// COLUMN_NAME
return|return
name|COLUMN_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|OBJECT_TYPE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"objectType"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|HiveObjectType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"dbName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|OBJECT_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"objectName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PART_VALUES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"partValues"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|COLUMN_NAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"columnName"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|HiveObjectRef
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveObjectRef
parameter_list|()
block|{   }
specifier|public
name|HiveObjectRef
parameter_list|(
name|HiveObjectType
name|objectType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|objectName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|objectType
operator|=
name|objectType
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
name|this
operator|.
name|objectName
operator|=
name|objectName
expr_stmt|;
name|this
operator|.
name|partValues
operator|=
name|partValues
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|HiveObjectRef
parameter_list|(
name|HiveObjectRef
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetObjectType
argument_list|()
condition|)
block|{
name|this
operator|.
name|objectType
operator|=
name|other
operator|.
name|objectType
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetDbName
argument_list|()
condition|)
block|{
name|this
operator|.
name|dbName
operator|=
name|other
operator|.
name|dbName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetObjectName
argument_list|()
condition|)
block|{
name|this
operator|.
name|objectName
operator|=
name|other
operator|.
name|objectName
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPartValues
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__partValues
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|partValues
control|)
block|{
name|__this__partValues
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|partValues
operator|=
name|__this__partValues
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetColumnName
argument_list|()
condition|)
block|{
name|this
operator|.
name|columnName
operator|=
name|other
operator|.
name|columnName
expr_stmt|;
block|}
block|}
specifier|public
name|HiveObjectRef
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|HiveObjectRef
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|objectType
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|dbName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|objectName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|partValues
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|columnName
operator|=
literal|null
expr_stmt|;
block|}
comment|/**    *     * @see HiveObjectType    */
specifier|public
name|HiveObjectType
name|getObjectType
parameter_list|()
block|{
return|return
name|this
operator|.
name|objectType
return|;
block|}
comment|/**    *     * @see HiveObjectType    */
specifier|public
name|void
name|setObjectType
parameter_list|(
name|HiveObjectType
name|objectType
parameter_list|)
block|{
name|this
operator|.
name|objectType
operator|=
name|objectType
expr_stmt|;
block|}
specifier|public
name|void
name|unsetObjectType
parameter_list|()
block|{
name|this
operator|.
name|objectType
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field objectType is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetObjectType
parameter_list|()
block|{
return|return
name|this
operator|.
name|objectType
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setObjectTypeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|objectType
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDbName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbName
return|;
block|}
specifier|public
name|void
name|setDbName
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|this
operator|.
name|dbName
operator|=
name|dbName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbName
parameter_list|()
block|{
name|this
operator|.
name|dbName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field dbName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDbName
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDbNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|dbName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getObjectName
parameter_list|()
block|{
return|return
name|this
operator|.
name|objectName
return|;
block|}
specifier|public
name|void
name|setObjectName
parameter_list|(
name|String
name|objectName
parameter_list|)
block|{
name|this
operator|.
name|objectName
operator|=
name|objectName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetObjectName
parameter_list|()
block|{
name|this
operator|.
name|objectName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field objectName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetObjectName
parameter_list|()
block|{
return|return
name|this
operator|.
name|objectName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setObjectNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|objectName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getPartValuesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|partValues
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|partValues
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPartValuesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|partValues
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|partValues
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToPartValues
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|partValues
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|partValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|partValues
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPartValues
parameter_list|()
block|{
return|return
name|this
operator|.
name|partValues
return|;
block|}
specifier|public
name|void
name|setPartValues
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|)
block|{
name|this
operator|.
name|partValues
operator|=
name|partValues
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPartValues
parameter_list|()
block|{
name|this
operator|.
name|partValues
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field partValues is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPartValues
parameter_list|()
block|{
return|return
name|this
operator|.
name|partValues
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPartValuesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|partValues
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getColumnName
parameter_list|()
block|{
return|return
name|this
operator|.
name|columnName
return|;
block|}
specifier|public
name|void
name|setColumnName
parameter_list|(
name|String
name|columnName
parameter_list|)
block|{
name|this
operator|.
name|columnName
operator|=
name|columnName
expr_stmt|;
block|}
specifier|public
name|void
name|unsetColumnName
parameter_list|()
block|{
name|this
operator|.
name|columnName
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field columnName is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetColumnName
parameter_list|()
block|{
return|return
name|this
operator|.
name|columnName
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setColumnNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|columnName
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|OBJECT_TYPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetObjectType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setObjectType
argument_list|(
operator|(
name|HiveObjectType
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDbName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDbName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|OBJECT_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetObjectName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setObjectName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PART_VALUES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPartValues
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPartValues
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|COLUMN_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetColumnName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setColumnName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|OBJECT_TYPE
case|:
return|return
name|getObjectType
argument_list|()
return|;
case|case
name|DB_NAME
case|:
return|return
name|getDbName
argument_list|()
return|;
case|case
name|OBJECT_NAME
case|:
return|return
name|getObjectName
argument_list|()
return|;
case|case
name|PART_VALUES
case|:
return|return
name|getPartValues
argument_list|()
return|;
case|case
name|COLUMN_NAME
case|:
return|return
name|getColumnName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|OBJECT_TYPE
case|:
return|return
name|isSetObjectType
argument_list|()
return|;
case|case
name|DB_NAME
case|:
return|return
name|isSetDbName
argument_list|()
return|;
case|case
name|OBJECT_NAME
case|:
return|return
name|isSetObjectName
argument_list|()
return|;
case|case
name|PART_VALUES
case|:
return|return
name|isSetPartValues
argument_list|()
return|;
case|case
name|COLUMN_NAME
case|:
return|return
name|isSetColumnName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|HiveObjectRef
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|HiveObjectRef
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|HiveObjectRef
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_objectType
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetObjectType
argument_list|()
decl_stmt|;
name|boolean
name|that_present_objectType
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetObjectType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_objectType
operator|||
name|that_present_objectType
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_objectType
operator|&&
name|that_present_objectType
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|objectType
operator|.
name|equals
argument_list|(
name|that
operator|.
name|objectType
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_dbName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDbName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_dbName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDbName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_dbName
operator|||
name|that_present_dbName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbName
operator|&&
name|that_present_dbName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_objectName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetObjectName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_objectName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetObjectName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_objectName
operator|||
name|that_present_objectName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_objectName
operator|&&
name|that_present_objectName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|objectName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|objectName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_partValues
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPartValues
argument_list|()
decl_stmt|;
name|boolean
name|that_present_partValues
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPartValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_partValues
operator|||
name|that_present_partValues
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_partValues
operator|&&
name|that_present_partValues
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|partValues
operator|.
name|equals
argument_list|(
name|that
operator|.
name|partValues
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_columnName
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetColumnName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_columnName
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetColumnName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_columnName
operator|||
name|that_present_columnName
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_columnName
operator|&&
name|that_present_columnName
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|columnName
operator|.
name|equals
argument_list|(
name|that
operator|.
name|columnName
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|HashCodeBuilder
name|builder
init|=
operator|new
name|HashCodeBuilder
argument_list|()
decl_stmt|;
name|boolean
name|present_objectType
init|=
literal|true
operator|&&
operator|(
name|isSetObjectType
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_objectType
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_objectType
condition|)
name|builder
operator|.
name|append
argument_list|(
name|objectType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|present_dbName
init|=
literal|true
operator|&&
operator|(
name|isSetDbName
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_dbName
condition|)
name|builder
operator|.
name|append
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|boolean
name|present_objectName
init|=
literal|true
operator|&&
operator|(
name|isSetObjectName
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_objectName
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_objectName
condition|)
name|builder
operator|.
name|append
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
name|boolean
name|present_partValues
init|=
literal|true
operator|&&
operator|(
name|isSetPartValues
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_partValues
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_partValues
condition|)
name|builder
operator|.
name|append
argument_list|(
name|partValues
argument_list|)
expr_stmt|;
name|boolean
name|present_columnName
init|=
literal|true
operator|&&
operator|(
name|isSetColumnName
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_columnName
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_columnName
condition|)
name|builder
operator|.
name|append
argument_list|(
name|columnName
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toHashCode
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|HiveObjectRef
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|HiveObjectRef
name|typedOther
init|=
operator|(
name|HiveObjectRef
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetObjectType
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetObjectType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetObjectType
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|objectType
argument_list|,
name|typedOther
operator|.
name|objectType
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDbName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDbName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDbName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|dbName
argument_list|,
name|typedOther
operator|.
name|dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetObjectName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetObjectName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetObjectName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|objectName
argument_list|,
name|typedOther
operator|.
name|objectName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPartValues
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPartValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPartValues
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|partValues
argument_list|,
name|typedOther
operator|.
name|partValues
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetColumnName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetColumnName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetColumnName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|columnName
argument_list|,
name|typedOther
operator|.
name|columnName
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// OBJECT_TYPE
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|this
operator|.
name|objectType
operator|=
name|HiveObjectType
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|dbName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// OBJECT_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|objectName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// PART_VALUES
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list4
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|partValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list4
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i5
init|=
literal|0
init|;
name|_i5
operator|<
name|_list4
operator|.
name|size
condition|;
operator|++
name|_i5
control|)
block|{
name|String
name|_elem6
decl_stmt|;
comment|// required
name|_elem6
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|partValues
operator|.
name|add
argument_list|(
name|_elem6
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// COLUMN_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|columnName
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|objectType
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|OBJECT_TYPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|this
operator|.
name|objectType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|dbName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|dbName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|objectName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|OBJECT_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|objectName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|partValues
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PART_VALUES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|partValues
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter7
range|:
name|this
operator|.
name|partValues
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter7
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|columnName
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|COLUMN_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|columnName
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"HiveObjectRef("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"objectType:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|objectType
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|objectType
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"objectName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|objectName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|objectName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"partValues:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|partValues
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|partValues
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"columnName:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|columnName
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|columnName
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

