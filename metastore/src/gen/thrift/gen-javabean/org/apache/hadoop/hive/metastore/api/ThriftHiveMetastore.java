begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|ThriftHiveMetastore
block|{
comment|/**    * This interface is live.    */
specifier|public
interface|interface
name|Iface
extends|extends
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
operator|.
name|Iface
block|{
specifier|public
name|void
name|create_database
parameter_list|(
name|Database
name|database
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Database
name|get_database
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|drop_database
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_databases
parameter_list|(
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_all_databases
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|alter_database
parameter_list|(
name|String
name|dbname
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
specifier|public
name|Type
name|get_type
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
specifier|public
name|boolean
name|create_type
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|boolean
name|drop_type
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|get_type_all
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_fields
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_schema
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|create_table
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|drop_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_all_tables
parameter_list|(
name|String
name|db_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Table
name|get_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Partition
name|add_partition
parameter_list|(
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Partition
name|append_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Partition
name|append_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|boolean
name|drop_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|boolean
name|drop_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Partition
name|get_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
specifier|public
name|Partition
name|get_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partition_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_ps
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partition_names_ps
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_by_filter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|alter_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|String
name|get_config_value
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|ConfigValSecurityException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|partition_name_to_vals
parameter_list|(
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partition_name_to_spec
parameter_list|(
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Index
name|add_index
parameter_list|(
name|Index
name|new_index
parameter_list|,
name|Table
name|index_table
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|void
name|alter_index
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|base_tbl_name
parameter_list|,
name|String
name|idx_name
parameter_list|,
name|Index
name|new_idx
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|boolean
name|drop_index_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|Index
name|get_index_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|get_indexes
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_index_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
block|}
specifier|public
interface|interface
name|AsyncIface
extends|extends
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
operator|.
name|AsyncIface
block|{
specifier|public
name|void
name|create_database
parameter_list|(
name|Database
name|database
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|create_database_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_database
parameter_list|(
name|String
name|name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_database_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|drop_database
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|drop_database_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_databases
parameter_list|(
name|String
name|pattern
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_databases_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_all_databases
parameter_list|(
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_all_databases_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|alter_database
parameter_list|(
name|String
name|dbname
parameter_list|,
name|Database
name|db
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|alter_database_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_type
parameter_list|(
name|String
name|name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_type_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|create_type
parameter_list|(
name|Type
name|type
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|create_type_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|drop_type
parameter_list|(
name|String
name|type
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|drop_type_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_type_all
parameter_list|(
name|String
name|name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_type_all_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_fields
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_fields_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_schema
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_schema_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|create_table
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|create_table_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|drop_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|drop_table_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_tables_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_all_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_all_tables_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_table_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|alter_table_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|add_partition
parameter_list|(
name|Partition
name|new_part
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|add_partition_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|append_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|append_partition_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|append_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|append_partition_by_name_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|drop_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|drop_partition_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|drop_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|drop_partition_by_name_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_partition_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_partition_by_name_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_partitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_partitions_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_partition_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_partition_names_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_partitions_ps
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_partitions_ps_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_partition_names_ps
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_partition_names_ps_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_partitions_by_filter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_partitions_by_filter_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|alter_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Partition
name|new_part
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|alter_partition_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_config_value
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_config_value_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|partition_name_to_vals
parameter_list|(
name|String
name|part_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|partition_name_to_vals_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|partition_name_to_spec
parameter_list|(
name|String
name|part_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|partition_name_to_spec_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|add_index
parameter_list|(
name|Index
name|new_index
parameter_list|,
name|Table
name|index_table
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|add_index_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|alter_index
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|base_tbl_name
parameter_list|,
name|String
name|idx_name
parameter_list|,
name|Index
name|new_idx
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|alter_index_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|drop_index_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|drop_index_by_name_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_index_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_index_by_name_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_indexes
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_indexes_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
specifier|public
name|void
name|get_index_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|AsyncClient
operator|.
name|get_index_names_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
function_decl|;
block|}
specifier|public
specifier|static
class|class
name|Client
extends|extends
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
operator|.
name|Client
implements|implements
name|TServiceClient
implements|,
name|Iface
block|{
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|TServiceClientFactory
argument_list|<
name|Client
argument_list|>
block|{
specifier|public
name|Factory
parameter_list|()
block|{}
specifier|public
name|Client
name|getClient
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
block|{
return|return
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
return|;
block|}
specifier|public
name|Client
name|getClient
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
block|{
return|return
operator|new
name|Client
argument_list|(
name|iprot
argument_list|,
name|oprot
argument_list|)
return|;
block|}
block|}
specifier|public
name|Client
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
block|{
name|this
argument_list|(
name|prot
argument_list|,
name|prot
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Client
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
block|{
name|super
argument_list|(
name|iprot
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|create_database
parameter_list|(
name|Database
name|database
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_create_database
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|recv_create_database
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_create_database
parameter_list|(
name|Database
name|database
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_database"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|create_database_args
name|args
init|=
operator|new
name|create_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_create_database
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"create_database failed: out of sequence response"
argument_list|)
throw|;
block|}
name|create_database_result
name|result
init|=
operator|new
name|create_database_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
return|return;
block|}
specifier|public
name|Database
name|get_database
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_get_database
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|recv_get_database
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_database
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_database"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_database_args
name|args
init|=
operator|new
name|get_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Database
name|recv_get_database
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_database failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_database_result
name|result
init|=
operator|new
name|get_database_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_database failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|drop_database
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_drop_database
argument_list|(
name|name
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
name|recv_drop_database
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_drop_database
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_database"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|drop_database_args
name|args
init|=
operator|new
name|drop_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDeleteData
argument_list|(
name|deleteData
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_drop_database
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"drop_database failed: out of sequence response"
argument_list|)
throw|;
block|}
name|drop_database_result
name|result
init|=
operator|new
name|drop_database_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
return|return;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_databases
parameter_list|(
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_databases
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
return|return
name|recv_get_databases
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_databases
parameter_list|(
name|String
name|pattern
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_databases"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_databases_args
name|args
init|=
operator|new
name|get_databases_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_databases
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_databases failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_databases_result
name|result
init|=
operator|new
name|get_databases_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_databases failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_all_databases
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_all_databases
argument_list|()
expr_stmt|;
return|return
name|recv_get_all_databases
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_all_databases
parameter_list|()
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_all_databases"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_all_databases_args
name|args
init|=
operator|new
name|get_all_databases_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_all_databases
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_all_databases failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_all_databases_result
name|result
init|=
operator|new
name|get_all_databases_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_all_databases failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|alter_database
parameter_list|(
name|String
name|dbname
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|send_alter_database
argument_list|(
name|dbname
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|recv_alter_database
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_alter_database
parameter_list|(
name|String
name|dbname
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_database"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|alter_database_args
name|args
init|=
operator|new
name|alter_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDbname
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDb
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_alter_database
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"alter_database failed: out of sequence response"
argument_list|)
throw|;
block|}
name|alter_database_result
name|result
init|=
operator|new
name|alter_database_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
return|return;
block|}
specifier|public
name|Type
name|get_type
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|send_get_type
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|recv_get_type
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_type
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_type_args
name|args
init|=
operator|new
name|get_type_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Type
name|recv_get_type
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_type failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_type_result
name|result
init|=
operator|new
name|get_type_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_type failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|create_type
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_create_type
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|recv_create_type
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_create_type
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_type"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|create_type_args
name|args
init|=
operator|new
name|create_type_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_create_type
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"create_type failed: out of sequence response"
argument_list|)
throw|;
block|}
name|create_type_result
name|result
init|=
operator|new
name|create_type_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"create_type failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|drop_type
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|send_drop_type
argument_list|(
name|type
argument_list|)
expr_stmt|;
return|return
name|recv_drop_type
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_drop_type
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_type"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|drop_type_args
name|args
init|=
operator|new
name|drop_type_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_drop_type
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"drop_type failed: out of sequence response"
argument_list|)
throw|;
block|}
name|drop_type_result
name|result
init|=
operator|new
name|drop_type_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"drop_type failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|get_type_all
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_type_all
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|recv_get_type_all
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_type_all
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type_all"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_type_all_args
name|args
init|=
operator|new
name|get_type_all_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|recv_get_type_all
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_type_all failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_type_all_result
name|result
init|=
operator|new
name|get_type_all_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_type_all failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_fields
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|send_get_fields
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|)
expr_stmt|;
return|return
name|recv_get_fields
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_fields
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_fields"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_fields_args
name|args
init|=
operator|new
name|get_fields_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTable_name
argument_list|(
name|table_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|recv_get_fields
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_fields failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_fields_result
name|result
init|=
operator|new
name|get_fields_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_fields failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_schema
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|send_get_schema
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|)
expr_stmt|;
return|return
name|recv_get_schema
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_schema
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_schema"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_schema_args
name|args
init|=
operator|new
name|get_schema_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTable_name
argument_list|(
name|table_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|recv_get_schema
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_schema failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_schema_result
name|result
init|=
operator|new
name|get_schema_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_schema failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|create_table
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|send_create_table
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|recv_create_table
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_create_table
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|create_table_args
name|args
init|=
operator|new
name|create_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTbl
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_create_table
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"create_table failed: out of sequence response"
argument_list|)
throw|;
block|}
name|create_table_result
name|result
init|=
operator|new
name|create_table_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o4
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o4
throw|;
block|}
return|return;
block|}
specifier|public
name|void
name|drop_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_drop_table
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
name|recv_drop_table
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_drop_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|drop_table_args
name|args
init|=
operator|new
name|drop_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDbname
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|args
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDeleteData
argument_list|(
name|deleteData
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_drop_table
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"drop_table failed: out of sequence response"
argument_list|)
throw|;
block|}
name|drop_table_result
name|result
init|=
operator|new
name|drop_table_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
return|return;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_tables
argument_list|(
name|db_name
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
return|return
name|recv_get_tables
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_tables"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_tables_args
name|args
init|=
operator|new
name|get_tables_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_tables
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_tables failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_tables_result
name|result
init|=
operator|new
name|get_tables_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_tables failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_all_tables
parameter_list|(
name|String
name|db_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_all_tables
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
return|return
name|recv_get_all_tables
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_all_tables
parameter_list|(
name|String
name|db_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_all_tables"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_all_tables_args
name|args
init|=
operator|new
name|get_all_tables_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_all_tables
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_all_tables failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_all_tables_result
name|result
init|=
operator|new
name|get_all_tables_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_all_tables failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Table
name|get_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|send_get_table
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
return|return
name|recv_get_table
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_table_args
name|args
init|=
operator|new
name|get_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDbname
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Table
name|recv_get_table
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_table failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_table_result
name|result
init|=
operator|new
name|get_table_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_table failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_alter_table
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|new_tbl
argument_list|)
expr_stmt|;
name|recv_alter_table
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|alter_table_args
name|args
init|=
operator|new
name|alter_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDbname
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNew_tbl
argument_list|(
name|new_tbl
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_alter_table
parameter_list|()
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"alter_table failed: out of sequence response"
argument_list|)
throw|;
block|}
name|alter_table_result
name|result
init|=
operator|new
name|alter_table_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
return|return;
block|}
specifier|public
name|Partition
name|add_partition
parameter_list|(
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_add_partition
argument_list|(
name|new_part
argument_list|)
expr_stmt|;
return|return
name|recv_add_partition
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_add_partition
parameter_list|(
name|Partition
name|new_part
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"add_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|add_partition_args
name|args
init|=
operator|new
name|add_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setNew_part
argument_list|(
name|new_part
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|recv_add_partition
parameter_list|()
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"add_partition failed: out of sequence response"
argument_list|)
throw|;
block|}
name|add_partition_result
name|result
init|=
operator|new
name|add_partition_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"add_partition failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Partition
name|append_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_append_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
return|return
name|recv_append_partition
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_append_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"append_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|append_partition_args
name|args
init|=
operator|new
name|append_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_vals
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|recv_append_partition
parameter_list|()
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"append_partition failed: out of sequence response"
argument_list|)
throw|;
block|}
name|append_partition_result
name|result
init|=
operator|new
name|append_partition_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"append_partition failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Partition
name|append_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_append_partition_by_name
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
expr_stmt|;
return|return
name|recv_append_partition_by_name
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_append_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"append_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|append_partition_by_name_args
name|args
init|=
operator|new
name|append_partition_by_name_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_name
argument_list|(
name|part_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|recv_append_partition_by_name
parameter_list|()
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"append_partition_by_name failed: out of sequence response"
argument_list|)
throw|;
block|}
name|append_partition_by_name_result
name|result
init|=
operator|new
name|append_partition_by_name_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"append_partition_by_name failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|drop_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_drop_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
return|return
name|recv_drop_partition
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_drop_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|drop_partition_args
name|args
init|=
operator|new
name|drop_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_vals
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDeleteData
argument_list|(
name|deleteData
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_drop_partition
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"drop_partition failed: out of sequence response"
argument_list|)
throw|;
block|}
name|drop_partition_result
name|result
init|=
operator|new
name|drop_partition_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"drop_partition failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|drop_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_drop_partition_by_name
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
return|return
name|recv_drop_partition_by_name
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_drop_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|drop_partition_by_name_args
name|args
init|=
operator|new
name|drop_partition_by_name_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_name
argument_list|(
name|part_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDeleteData
argument_list|(
name|deleteData
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_drop_partition_by_name
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"drop_partition_by_name failed: out of sequence response"
argument_list|)
throw|;
block|}
name|drop_partition_by_name_result
name|result
init|=
operator|new
name|drop_partition_by_name_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"drop_partition_by_name failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Partition
name|get_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|send_get_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
return|return
name|recv_get_partition
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_partition_args
name|args
init|=
operator|new
name|get_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_vals
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|recv_get_partition
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_partition failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_partition_result
name|result
init|=
operator|new
name|get_partition_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_partition failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Partition
name|get_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|send_get_partition_by_name
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
expr_stmt|;
return|return
name|recv_get_partition_by_name
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_partition_by_name_args
name|args
init|=
operator|new
name|get_partition_by_name_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_name
argument_list|(
name|part_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|recv_get_partition_by_name
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_partition_by_name failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_partition_by_name_result
name|result
init|=
operator|new
name|get_partition_by_name_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_partition_by_name failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_get_partitions
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
return|return
name|recv_get_partitions
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_partitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_partitions_args
name|args
init|=
operator|new
name|get_partitions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_parts
argument_list|(
name|max_parts
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|recv_get_partitions
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_partitions failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_partitions_result
name|result
init|=
operator|new
name|get_partitions_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_partitions failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partition_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_partition_names
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
return|return
name|recv_get_partition_names
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_partition_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_names"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_partition_names_args
name|args
init|=
operator|new
name|get_partition_names_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_parts
argument_list|(
name|max_parts
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_partition_names
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_partition_names failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_partition_names_result
name|result
init|=
operator|new
name|get_partition_names_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_partition_names failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_ps
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_partitions_ps
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
return|return
name|recv_get_partitions_ps
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_partitions_ps
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions_ps"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_partitions_ps_args
name|args
init|=
operator|new
name|get_partitions_ps_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_vals
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_parts
argument_list|(
name|max_parts
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|recv_get_partitions_ps
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_partitions_ps failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_partitions_ps_result
name|result
init|=
operator|new
name|get_partitions_ps_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_partitions_ps failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partition_names_ps
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_partition_names_ps
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
return|return
name|recv_get_partition_names_ps
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_partition_names_ps
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_names_ps"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_partition_names_ps_args
name|args
init|=
operator|new
name|get_partition_names_ps_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_vals
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_parts
argument_list|(
name|max_parts
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_partition_names_ps
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_partition_names_ps failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_partition_names_ps_result
name|result
init|=
operator|new
name|get_partition_names_ps_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_partition_names_ps failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_by_filter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|send_get_partitions_by_filter
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|filter
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
return|return
name|recv_get_partitions_by_filter
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_partitions_by_filter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions_by_filter"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_partitions_by_filter_args
name|args
init|=
operator|new
name|get_partitions_by_filter_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_parts
argument_list|(
name|max_parts
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|recv_get_partitions_by_filter
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_partitions_by_filter failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_partitions_by_filter_result
name|result
init|=
operator|new
name|get_partitions_by_filter_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_partitions_by_filter failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|alter_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_alter_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|new_part
argument_list|)
expr_stmt|;
name|recv_alter_partition
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_alter_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Partition
name|new_part
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|alter_partition_args
name|args
init|=
operator|new
name|alter_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNew_part
argument_list|(
name|new_part
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_alter_partition
parameter_list|()
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"alter_partition failed: out of sequence response"
argument_list|)
throw|;
block|}
name|alter_partition_result
name|result
init|=
operator|new
name|alter_partition_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
return|return;
block|}
specifier|public
name|String
name|get_config_value
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|ConfigValSecurityException
throws|,
name|TException
block|{
name|send_get_config_value
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
return|return
name|recv_get_config_value
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_config_value
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_config_value"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_config_value_args
name|args
init|=
operator|new
name|get_config_value_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDefaultValue
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|recv_get_config_value
parameter_list|()
throws|throws
name|ConfigValSecurityException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_config_value failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_config_value_result
name|result
init|=
operator|new
name|get_config_value_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_config_value failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|partition_name_to_vals
parameter_list|(
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_partition_name_to_vals
argument_list|(
name|part_name
argument_list|)
expr_stmt|;
return|return
name|recv_partition_name_to_vals
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_partition_name_to_vals
parameter_list|(
name|String
name|part_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"partition_name_to_vals"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|partition_name_to_vals_args
name|args
init|=
operator|new
name|partition_name_to_vals_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setPart_name
argument_list|(
name|part_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_partition_name_to_vals
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"partition_name_to_vals failed: out of sequence response"
argument_list|)
throw|;
block|}
name|partition_name_to_vals_result
name|result
init|=
operator|new
name|partition_name_to_vals_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"partition_name_to_vals failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partition_name_to_spec
parameter_list|(
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_partition_name_to_spec
argument_list|(
name|part_name
argument_list|)
expr_stmt|;
return|return
name|recv_partition_name_to_spec
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_partition_name_to_spec
parameter_list|(
name|String
name|part_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"partition_name_to_spec"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|partition_name_to_spec_args
name|args
init|=
operator|new
name|partition_name_to_spec_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setPart_name
argument_list|(
name|part_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|recv_partition_name_to_spec
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"partition_name_to_spec failed: out of sequence response"
argument_list|)
throw|;
block|}
name|partition_name_to_spec_result
name|result
init|=
operator|new
name|partition_name_to_spec_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"partition_name_to_spec failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Index
name|add_index
parameter_list|(
name|Index
name|new_index
parameter_list|,
name|Table
name|index_table
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_add_index
argument_list|(
name|new_index
argument_list|,
name|index_table
argument_list|)
expr_stmt|;
return|return
name|recv_add_index
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_add_index
parameter_list|(
name|Index
name|new_index
parameter_list|,
name|Table
name|index_table
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"add_index"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|add_index_args
name|args
init|=
operator|new
name|add_index_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setNew_index
argument_list|(
name|new_index
argument_list|)
expr_stmt|;
name|args
operator|.
name|setIndex_table
argument_list|(
name|index_table
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Index
name|recv_add_index
parameter_list|()
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"add_index failed: out of sequence response"
argument_list|)
throw|;
block|}
name|add_index_result
name|result
init|=
operator|new
name|add_index_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o3
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o3
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"add_index failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|alter_index
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|base_tbl_name
parameter_list|,
name|String
name|idx_name
parameter_list|,
name|Index
name|new_idx
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_alter_index
argument_list|(
name|dbname
argument_list|,
name|base_tbl_name
argument_list|,
name|idx_name
argument_list|,
name|new_idx
argument_list|)
expr_stmt|;
name|recv_alter_index
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|send_alter_index
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|base_tbl_name
parameter_list|,
name|String
name|idx_name
parameter_list|,
name|Index
name|new_idx
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_index"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|alter_index_args
name|args
init|=
operator|new
name|alter_index_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDbname
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|args
operator|.
name|setBase_tbl_name
argument_list|(
name|base_tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setIdx_name
argument_list|(
name|idx_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNew_idx
argument_list|(
name|new_idx
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|recv_alter_index
parameter_list|()
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"alter_index failed: out of sequence response"
argument_list|)
throw|;
block|}
name|alter_index_result
name|result
init|=
operator|new
name|alter_index_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
return|return;
block|}
specifier|public
name|boolean
name|drop_index_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_drop_index_by_name
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|index_name
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
return|return
name|recv_drop_index_by_name
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_drop_index_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_index_by_name"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|drop_index_by_name_args
name|args
init|=
operator|new
name|drop_index_by_name_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setIndex_name
argument_list|(
name|index_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDeleteData
argument_list|(
name|deleteData
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|recv_drop_index_by_name
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"drop_index_by_name failed: out of sequence response"
argument_list|)
throw|;
block|}
name|drop_index_by_name_result
name|result
init|=
operator|new
name|drop_index_by_name_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"drop_index_by_name failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|Index
name|get_index_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|send_get_index_by_name
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|index_name
argument_list|)
expr_stmt|;
return|return
name|recv_get_index_by_name
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_index_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_index_by_name"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_index_by_name_args
name|args
init|=
operator|new
name|get_index_by_name_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setIndex_name
argument_list|(
name|index_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Index
name|recv_get_index_by_name
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_index_by_name failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_index_by_name_result
name|result
init|=
operator|new
name|get_index_by_name_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_index_by_name failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|get_indexes
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|send_get_indexes
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_indexes
argument_list|)
expr_stmt|;
return|return
name|recv_get_indexes
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_indexes
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_indexes"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_indexes_args
name|args
init|=
operator|new
name|get_indexes_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_indexes
argument_list|(
name|max_indexes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|recv_get_indexes
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_indexes failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_indexes_result
name|result
init|=
operator|new
name|get_indexes_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o1
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o1
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_indexes failed: unknown result"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_index_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|send_get_index_names
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_indexes
argument_list|)
expr_stmt|;
return|return
name|recv_get_index_names
argument_list|()
return|;
block|}
specifier|public
name|void
name|send_get_index_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|)
throws|throws
name|TException
block|{
name|oprot_
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_index_names"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
operator|++
name|seqid_
argument_list|)
argument_list|)
expr_stmt|;
name|get_index_names_args
name|args
init|=
operator|new
name|get_index_names_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_indexes
argument_list|(
name|max_indexes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|oprot_
argument_list|)
expr_stmt|;
name|oprot_
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot_
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|recv_get_index_names
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot_
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
if|if
condition|(
name|msg
operator|.
name|type
operator|==
name|TMessageType
operator|.
name|EXCEPTION
condition|)
block|{
name|TApplicationException
name|x
init|=
name|TApplicationException
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
decl_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
throw|throw
name|x
throw|;
block|}
if|if
condition|(
name|msg
operator|.
name|seqid
operator|!=
name|seqid_
condition|)
block|{
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|BAD_SEQUENCE_ID
argument_list|,
literal|"get_index_names failed: out of sequence response"
argument_list|)
throw|;
block|}
name|get_index_names_result
name|result
init|=
operator|new
name|get_index_names_result
argument_list|()
decl_stmt|;
name|result
operator|.
name|read
argument_list|(
name|iprot_
argument_list|)
expr_stmt|;
name|iprot_
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
return|return
name|result
operator|.
name|success
return|;
block|}
if|if
condition|(
name|result
operator|.
name|o2
operator|!=
literal|null
condition|)
block|{
throw|throw
name|result
operator|.
name|o2
throw|;
block|}
throw|throw
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|MISSING_RESULT
argument_list|,
literal|"get_index_names failed: unknown result"
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
class|class
name|AsyncClient
extends|extends
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
operator|.
name|AsyncClient
implements|implements
name|AsyncIface
block|{
specifier|public
specifier|static
class|class
name|Factory
implements|implements
name|TAsyncClientFactory
argument_list|<
name|AsyncClient
argument_list|>
block|{
specifier|private
name|TAsyncClientManager
name|clientManager
decl_stmt|;
specifier|private
name|TProtocolFactory
name|protocolFactory
decl_stmt|;
specifier|public
name|Factory
parameter_list|(
name|TAsyncClientManager
name|clientManager
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|)
block|{
name|this
operator|.
name|clientManager
operator|=
name|clientManager
expr_stmt|;
name|this
operator|.
name|protocolFactory
operator|=
name|protocolFactory
expr_stmt|;
block|}
specifier|public
name|AsyncClient
name|getAsyncClient
parameter_list|(
name|TNonblockingTransport
name|transport
parameter_list|)
block|{
return|return
operator|new
name|AsyncClient
argument_list|(
name|protocolFactory
argument_list|,
name|clientManager
argument_list|,
name|transport
argument_list|)
return|;
block|}
block|}
specifier|public
name|AsyncClient
parameter_list|(
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TAsyncClientManager
name|clientManager
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
block|{
name|super
argument_list|(
name|protocolFactory
argument_list|,
name|clientManager
argument_list|,
name|transport
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|create_database
parameter_list|(
name|Database
name|database
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|create_database_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|create_database_call
name|method_call
init|=
operator|new
name|create_database_call
argument_list|(
name|database
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|create_database_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|Database
name|database
decl_stmt|;
specifier|public
name|create_database_call
parameter_list|(
name|Database
name|database
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|create_database_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|database
operator|=
name|database
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_database"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|create_database_args
name|args
init|=
operator|new
name|create_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_create_database
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|get_database
parameter_list|(
name|String
name|name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_database_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_database_call
name|method_call
init|=
operator|new
name|get_database_call
argument_list|(
name|name
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_database_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|get_database_call
parameter_list|(
name|String
name|name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_database_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_database"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_database_args
name|args
init|=
operator|new
name|get_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Database
name|getResult
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_database
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|drop_database
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|drop_database_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|drop_database_call
name|method_call
init|=
operator|new
name|drop_database_call
argument_list|(
name|name
argument_list|,
name|deleteData
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|drop_database_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|boolean
name|deleteData
decl_stmt|;
specifier|public
name|drop_database_call
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|drop_database_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_database"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|drop_database_args
name|args
init|=
operator|new
name|drop_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDeleteData
argument_list|(
name|deleteData
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_drop_database
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|get_databases
parameter_list|(
name|String
name|pattern
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_databases_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_databases_call
name|method_call
init|=
operator|new
name|get_databases_call
argument_list|(
name|pattern
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_databases_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|pattern
decl_stmt|;
specifier|public
name|get_databases_call
parameter_list|(
name|String
name|pattern
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_databases_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_databases"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_databases_args
name|args
init|=
operator|new
name|get_databases_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_databases
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_all_databases
parameter_list|(
name|AsyncMethodCallback
argument_list|<
name|get_all_databases_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_all_databases_call
name|method_call
init|=
operator|new
name|get_all_databases_call
argument_list|(
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_all_databases_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|public
name|get_all_databases_call
parameter_list|(
name|AsyncMethodCallback
argument_list|<
name|get_all_databases_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_all_databases"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_all_databases_args
name|args
init|=
operator|new
name|get_all_databases_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_all_databases
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|alter_database
parameter_list|(
name|String
name|dbname
parameter_list|,
name|Database
name|db
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|alter_database_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|alter_database_call
name|method_call
init|=
operator|new
name|alter_database_call
argument_list|(
name|dbname
argument_list|,
name|db
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|alter_database_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|Database
name|db
decl_stmt|;
specifier|public
name|alter_database_call
parameter_list|(
name|String
name|dbname
parameter_list|,
name|Database
name|db
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|alter_database_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_database"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|alter_database_args
name|args
init|=
operator|new
name|alter_database_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDbname
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDb
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_alter_database
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|get_type
parameter_list|(
name|String
name|name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_type_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_type_call
name|method_call
init|=
operator|new
name|get_type_call
argument_list|(
name|name
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_type_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|get_type_call
parameter_list|(
name|String
name|name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_type_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_type_args
name|args
init|=
operator|new
name|get_type_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Type
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_type
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|create_type
parameter_list|(
name|Type
name|type
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|create_type_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|create_type_call
name|method_call
init|=
operator|new
name|create_type_call
argument_list|(
name|type
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|create_type_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|Type
name|type
decl_stmt|;
specifier|public
name|create_type_call
parameter_list|(
name|Type
name|type
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|create_type_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_type"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|create_type_args
name|args
init|=
operator|new
name|create_type_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|getResult
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_create_type
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|drop_type
parameter_list|(
name|String
name|type
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|drop_type_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|drop_type_call
name|method_call
init|=
operator|new
name|drop_type_call
argument_list|(
name|type
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|drop_type_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|type
decl_stmt|;
specifier|public
name|drop_type_call
parameter_list|(
name|String
name|type
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|drop_type_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_type"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|drop_type_args
name|args
init|=
operator|new
name|drop_type_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_drop_type
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_type_all
parameter_list|(
name|String
name|name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_type_all_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_type_all_call
name|method_call
init|=
operator|new
name|get_type_all_call
argument_list|(
name|name
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_type_all_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|public
name|get_type_all_call
parameter_list|(
name|String
name|name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_type_all_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type_all"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_type_all_args
name|args
init|=
operator|new
name|get_type_all_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_type_all
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_fields
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_fields_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_fields_call
name|method_call
init|=
operator|new
name|get_fields_call
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_fields_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
specifier|public
name|get_fields_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_fields_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_fields"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_fields_args
name|args
init|=
operator|new
name|get_fields_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTable_name
argument_list|(
name|table_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_fields
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_schema
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_schema_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_schema_call
name|method_call
init|=
operator|new
name|get_schema_call
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_schema_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
specifier|public
name|get_schema_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_schema_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_schema"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_schema_args
name|args
init|=
operator|new
name|get_schema_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTable_name
argument_list|(
name|table_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_schema
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|create_table
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|create_table_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|create_table_call
name|method_call
init|=
operator|new
name|create_table_call
argument_list|(
name|tbl
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|create_table_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|Table
name|tbl
decl_stmt|;
specifier|public
name|create_table_call
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|create_table_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|tbl
operator|=
name|tbl
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|create_table_args
name|args
init|=
operator|new
name|create_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setTbl
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_create_table
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|drop_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|drop_table_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|drop_table_call
name|method_call
init|=
operator|new
name|drop_table_call
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|drop_table_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|boolean
name|deleteData
decl_stmt|;
specifier|public
name|drop_table_call
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|drop_table_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|drop_table_args
name|args
init|=
operator|new
name|drop_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDbname
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|args
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDeleteData
argument_list|(
name|deleteData
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_drop_table
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|get_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_tables_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_tables_call
name|method_call
init|=
operator|new
name|get_tables_call
argument_list|(
name|db_name
argument_list|,
name|pattern
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_tables_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|pattern
decl_stmt|;
specifier|public
name|get_tables_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_tables_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_tables"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_tables_args
name|args
init|=
operator|new
name|get_tables_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPattern
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_tables
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_all_tables
parameter_list|(
name|String
name|db_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_all_tables_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_all_tables_call
name|method_call
init|=
operator|new
name|get_all_tables_call
argument_list|(
name|db_name
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_all_tables_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|public
name|get_all_tables_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_all_tables_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_all_tables"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_all_tables_args
name|args
init|=
operator|new
name|get_all_tables_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_all_tables
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_table_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_table_call
name|method_call
init|=
operator|new
name|get_table_call
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_table_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|public
name|get_table_call
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_table_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_table_args
name|args
init|=
operator|new
name|get_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDbname
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Table
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_table
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|alter_table_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|alter_table_call
name|method_call
init|=
operator|new
name|alter_table_call
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|new_tbl
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|alter_table_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|Table
name|new_tbl
decl_stmt|;
specifier|public
name|alter_table_call
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|alter_table_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|new_tbl
operator|=
name|new_tbl
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_table"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|alter_table_args
name|args
init|=
operator|new
name|alter_table_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDbname
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNew_tbl
argument_list|(
name|new_tbl
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_alter_table
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|add_partition
parameter_list|(
name|Partition
name|new_part
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|add_partition_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|add_partition_call
name|method_call
init|=
operator|new
name|add_partition_call
argument_list|(
name|new_part
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|add_partition_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|Partition
name|new_part
decl_stmt|;
specifier|public
name|add_partition_call
parameter_list|(
name|Partition
name|new_part
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|add_partition_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|new_part
operator|=
name|new_part
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"add_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|add_partition_args
name|args
init|=
operator|new
name|add_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setNew_part
argument_list|(
name|new_part
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|getResult
parameter_list|()
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_add_partition
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|append_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|append_partition_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|append_partition_call
name|method_call
init|=
operator|new
name|append_partition_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|append_partition_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
specifier|public
name|append_partition_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|append_partition_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"append_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|append_partition_args
name|args
init|=
operator|new
name|append_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_vals
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|getResult
parameter_list|()
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_append_partition
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|append_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|append_partition_by_name_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|append_partition_by_name_call
name|method_call
init|=
operator|new
name|append_partition_by_name_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|append_partition_by_name_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|String
name|part_name
decl_stmt|;
specifier|public
name|append_partition_by_name_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|append_partition_by_name_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"append_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|append_partition_by_name_args
name|args
init|=
operator|new
name|append_partition_by_name_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_name
argument_list|(
name|part_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|getResult
parameter_list|()
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_append_partition_by_name
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|drop_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|drop_partition_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|drop_partition_call
name|method_call
init|=
operator|new
name|drop_partition_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|deleteData
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|drop_partition_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
specifier|private
name|boolean
name|deleteData
decl_stmt|;
specifier|public
name|drop_partition_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|drop_partition_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|drop_partition_args
name|args
init|=
operator|new
name|drop_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_vals
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDeleteData
argument_list|(
name|deleteData
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|getResult
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_drop_partition
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|drop_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|drop_partition_by_name_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|drop_partition_by_name_call
name|method_call
init|=
operator|new
name|drop_partition_by_name_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|,
name|deleteData
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|drop_partition_by_name_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|String
name|part_name
decl_stmt|;
specifier|private
name|boolean
name|deleteData
decl_stmt|;
specifier|public
name|drop_partition_by_name_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|drop_partition_by_name_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|drop_partition_by_name_args
name|args
init|=
operator|new
name|drop_partition_by_name_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_name
argument_list|(
name|part_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDeleteData
argument_list|(
name|deleteData
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|getResult
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_drop_partition_by_name
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partition_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_partition_call
name|method_call
init|=
operator|new
name|get_partition_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_partition_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
specifier|public
name|get_partition_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partition_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_partition_args
name|args
init|=
operator|new
name|get_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_vals
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_partition
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partition_by_name_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_partition_by_name_call
name|method_call
init|=
operator|new
name|get_partition_by_name_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_partition_by_name_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|String
name|part_name
decl_stmt|;
specifier|public
name|get_partition_by_name_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partition_by_name_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_partition_by_name_args
name|args
init|=
operator|new
name|get_partition_by_name_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_name
argument_list|(
name|part_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Partition
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_partition_by_name
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_partitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partitions_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_partitions_call
name|method_call
init|=
operator|new
name|get_partitions_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_partitions_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|short
name|max_parts
decl_stmt|;
specifier|public
name|get_partitions_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partitions_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_partitions_args
name|args
init|=
operator|new
name|get_partitions_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_parts
argument_list|(
name|max_parts
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_partitions
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_partition_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partition_names_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_partition_names_call
name|method_call
init|=
operator|new
name|get_partition_names_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_partition_names_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|short
name|max_parts
decl_stmt|;
specifier|public
name|get_partition_names_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partition_names_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_names"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_partition_names_args
name|args
init|=
operator|new
name|get_partition_names_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_parts
argument_list|(
name|max_parts
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_partition_names
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_partitions_ps
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partitions_ps_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_partitions_ps_call
name|method_call
init|=
operator|new
name|get_partitions_ps_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_partitions_ps_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
specifier|private
name|short
name|max_parts
decl_stmt|;
specifier|public
name|get_partitions_ps_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partitions_ps_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions_ps"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_partitions_ps_args
name|args
init|=
operator|new
name|get_partitions_ps_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_vals
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_parts
argument_list|(
name|max_parts
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_partitions_ps
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_partition_names_ps
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partition_names_ps_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_partition_names_ps_call
name|method_call
init|=
operator|new
name|get_partition_names_ps_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_partition_names_ps_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
specifier|private
name|short
name|max_parts
decl_stmt|;
specifier|public
name|get_partition_names_ps_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partition_names_ps_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_names_ps"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_partition_names_ps_args
name|args
init|=
operator|new
name|get_partition_names_ps_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setPart_vals
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_parts
argument_list|(
name|max_parts
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_partition_names_ps
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_partitions_by_filter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partitions_by_filter_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_partitions_by_filter_call
name|method_call
init|=
operator|new
name|get_partitions_by_filter_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|filter
argument_list|,
name|max_parts
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_partitions_by_filter_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|String
name|filter
decl_stmt|;
specifier|private
name|short
name|max_parts
decl_stmt|;
specifier|public
name|get_partitions_by_filter_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_partitions_by_filter_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions_by_filter"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_partitions_by_filter_args
name|args
init|=
operator|new
name|get_partitions_by_filter_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_parts
argument_list|(
name|max_parts
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_partitions_by_filter
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|alter_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Partition
name|new_part
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|alter_partition_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|alter_partition_call
name|method_call
init|=
operator|new
name|alter_partition_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|new_part
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|alter_partition_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|Partition
name|new_part
decl_stmt|;
specifier|public
name|alter_partition_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Partition
name|new_part
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|alter_partition_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|new_part
operator|=
name|new_part
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_partition"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|alter_partition_args
name|args
init|=
operator|new
name|alter_partition_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNew_part
argument_list|(
name|new_part
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_alter_partition
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|get_config_value
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_config_value_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_config_value_call
name|method_call
init|=
operator|new
name|get_config_value_call
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_config_value_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|defaultValue
decl_stmt|;
specifier|public
name|get_config_value_call
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_config_value_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_config_value"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_config_value_args
name|args
init|=
operator|new
name|get_config_value_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDefaultValue
argument_list|(
name|defaultValue
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getResult
parameter_list|()
throws|throws
name|ConfigValSecurityException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_config_value
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|partition_name_to_vals
parameter_list|(
name|String
name|part_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|partition_name_to_vals_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|partition_name_to_vals_call
name|method_call
init|=
operator|new
name|partition_name_to_vals_call
argument_list|(
name|part_name
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|partition_name_to_vals_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|part_name
decl_stmt|;
specifier|public
name|partition_name_to_vals_call
parameter_list|(
name|String
name|part_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|partition_name_to_vals_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"partition_name_to_vals"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|partition_name_to_vals_args
name|args
init|=
operator|new
name|partition_name_to_vals_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setPart_name
argument_list|(
name|part_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_partition_name_to_vals
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|partition_name_to_spec
parameter_list|(
name|String
name|part_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|partition_name_to_spec_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|partition_name_to_spec_call
name|method_call
init|=
operator|new
name|partition_name_to_spec_call
argument_list|(
name|part_name
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|partition_name_to_spec_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|part_name
decl_stmt|;
specifier|public
name|partition_name_to_spec_call
parameter_list|(
name|String
name|part_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|partition_name_to_spec_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"partition_name_to_spec"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|partition_name_to_spec_args
name|args
init|=
operator|new
name|partition_name_to_spec_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setPart_name
argument_list|(
name|part_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_partition_name_to_spec
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|add_index
parameter_list|(
name|Index
name|new_index
parameter_list|,
name|Table
name|index_table
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|add_index_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|add_index_call
name|method_call
init|=
operator|new
name|add_index_call
argument_list|(
name|new_index
argument_list|,
name|index_table
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|add_index_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|Index
name|new_index
decl_stmt|;
specifier|private
name|Table
name|index_table
decl_stmt|;
specifier|public
name|add_index_call
parameter_list|(
name|Index
name|new_index
parameter_list|,
name|Table
name|index_table
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|add_index_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|new_index
operator|=
name|new_index
expr_stmt|;
name|this
operator|.
name|index_table
operator|=
name|index_table
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"add_index"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|add_index_args
name|args
init|=
operator|new
name|add_index_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setNew_index
argument_list|(
name|new_index
argument_list|)
expr_stmt|;
name|args
operator|.
name|setIndex_table
argument_list|(
name|index_table
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Index
name|getResult
parameter_list|()
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_add_index
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|alter_index
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|base_tbl_name
parameter_list|,
name|String
name|idx_name
parameter_list|,
name|Index
name|new_idx
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|alter_index_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|alter_index_call
name|method_call
init|=
operator|new
name|alter_index_call
argument_list|(
name|dbname
argument_list|,
name|base_tbl_name
argument_list|,
name|idx_name
argument_list|,
name|new_idx
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|alter_index_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|String
name|base_tbl_name
decl_stmt|;
specifier|private
name|String
name|idx_name
decl_stmt|;
specifier|private
name|Index
name|new_idx
decl_stmt|;
specifier|public
name|alter_index_call
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|base_tbl_name
parameter_list|,
name|String
name|idx_name
parameter_list|,
name|Index
name|new_idx
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|alter_index_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|base_tbl_name
operator|=
name|base_tbl_name
expr_stmt|;
name|this
operator|.
name|idx_name
operator|=
name|idx_name
expr_stmt|;
name|this
operator|.
name|new_idx
operator|=
name|new_idx
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_index"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|alter_index_args
name|args
init|=
operator|new
name|alter_index_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDbname
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|args
operator|.
name|setBase_tbl_name
argument_list|(
name|base_tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setIdx_name
argument_list|(
name|idx_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setNew_idx
argument_list|(
name|new_idx
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|getResult
parameter_list|()
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_alter_index
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|drop_index_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|drop_index_by_name_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|drop_index_by_name_call
name|method_call
init|=
operator|new
name|drop_index_by_name_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|index_name
argument_list|,
name|deleteData
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|drop_index_by_name_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|String
name|index_name
decl_stmt|;
specifier|private
name|boolean
name|deleteData
decl_stmt|;
specifier|public
name|drop_index_by_name_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|drop_index_by_name_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|index_name
operator|=
name|index_name
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_index_by_name"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|drop_index_by_name_args
name|args
init|=
operator|new
name|drop_index_by_name_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setIndex_name
argument_list|(
name|index_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setDeleteData
argument_list|(
name|deleteData
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|getResult
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_drop_index_by_name
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_index_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_index_by_name_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_index_by_name_call
name|method_call
init|=
operator|new
name|get_index_by_name_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|index_name
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_index_by_name_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|String
name|index_name
decl_stmt|;
specifier|public
name|get_index_by_name_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_index_by_name_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|index_name
operator|=
name|index_name
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_index_by_name"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_index_by_name_args
name|args
init|=
operator|new
name|get_index_by_name_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setIndex_name
argument_list|(
name|index_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Index
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_index_by_name
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_indexes
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_indexes_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_indexes_call
name|method_call
init|=
operator|new
name|get_indexes_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_indexes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_indexes_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|short
name|max_indexes
decl_stmt|;
specifier|public
name|get_indexes_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_indexes_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|max_indexes
operator|=
name|max_indexes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_indexes"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_indexes_args
name|args
init|=
operator|new
name|get_indexes_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_indexes
argument_list|(
name|max_indexes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_indexes
argument_list|()
return|;
block|}
block|}
specifier|public
name|void
name|get_index_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_index_names_call
argument_list|>
name|resultHandler
parameter_list|)
throws|throws
name|TException
block|{
name|checkReady
argument_list|()
expr_stmt|;
name|get_index_names_call
name|method_call
init|=
operator|new
name|get_index_names_call
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_indexes
argument_list|,
name|resultHandler
argument_list|,
name|this
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|)
decl_stmt|;
name|manager
operator|.
name|call
argument_list|(
name|method_call
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|get_index_names_call
extends|extends
name|TAsyncMethodCall
block|{
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|short
name|max_indexes
decl_stmt|;
specifier|public
name|get_index_names_call
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|,
name|AsyncMethodCallback
argument_list|<
name|get_index_names_call
argument_list|>
name|resultHandler
parameter_list|,
name|TAsyncClient
name|client
parameter_list|,
name|TProtocolFactory
name|protocolFactory
parameter_list|,
name|TNonblockingTransport
name|transport
parameter_list|)
throws|throws
name|TException
block|{
name|super
argument_list|(
name|client
argument_list|,
name|protocolFactory
argument_list|,
name|transport
argument_list|,
name|resultHandler
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|max_indexes
operator|=
name|max_indexes
expr_stmt|;
block|}
specifier|public
name|void
name|write_args
parameter_list|(
name|TProtocol
name|prot
parameter_list|)
throws|throws
name|TException
block|{
name|prot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_index_names"
argument_list|,
name|TMessageType
operator|.
name|CALL
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|get_index_names_args
name|args
init|=
operator|new
name|get_index_names_args
argument_list|()
decl_stmt|;
name|args
operator|.
name|setDb_name
argument_list|(
name|db_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setTbl_name
argument_list|(
name|tbl_name
argument_list|)
expr_stmt|;
name|args
operator|.
name|setMax_indexes
argument_list|(
name|max_indexes
argument_list|)
expr_stmt|;
name|args
operator|.
name|write
argument_list|(
name|prot
argument_list|)
expr_stmt|;
name|prot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getResult
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|State
operator|.
name|RESPONSE_READ
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Method call not finished!"
argument_list|)
throw|;
block|}
name|TMemoryInputTransport
name|memoryTransport
init|=
operator|new
name|TMemoryInputTransport
argument_list|(
name|getFrameBuffer
argument_list|()
operator|.
name|array
argument_list|()
argument_list|)
decl_stmt|;
name|TProtocol
name|prot
init|=
name|client
operator|.
name|getProtocolFactory
argument_list|()
operator|.
name|getProtocol
argument_list|(
name|memoryTransport
argument_list|)
decl_stmt|;
return|return
operator|(
operator|new
name|Client
argument_list|(
name|prot
argument_list|)
operator|)
operator|.
name|recv_get_index_names
argument_list|()
return|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|Processor
extends|extends
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
operator|.
name|Processor
implements|implements
name|TProcessor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOGGER
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|Processor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|Processor
parameter_list|(
name|Iface
name|iface
parameter_list|)
block|{
name|super
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|iface_
operator|=
name|iface
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"create_database"
argument_list|,
operator|new
name|create_database
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_database"
argument_list|,
operator|new
name|get_database
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"drop_database"
argument_list|,
operator|new
name|drop_database
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_databases"
argument_list|,
operator|new
name|get_databases
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_all_databases"
argument_list|,
operator|new
name|get_all_databases
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"alter_database"
argument_list|,
operator|new
name|alter_database
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_type"
argument_list|,
operator|new
name|get_type
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"create_type"
argument_list|,
operator|new
name|create_type
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"drop_type"
argument_list|,
operator|new
name|drop_type
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_type_all"
argument_list|,
operator|new
name|get_type_all
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_fields"
argument_list|,
operator|new
name|get_fields
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_schema"
argument_list|,
operator|new
name|get_schema
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"create_table"
argument_list|,
operator|new
name|create_table
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"drop_table"
argument_list|,
operator|new
name|drop_table
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_tables"
argument_list|,
operator|new
name|get_tables
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_all_tables"
argument_list|,
operator|new
name|get_all_tables
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_table"
argument_list|,
operator|new
name|get_table
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"alter_table"
argument_list|,
operator|new
name|alter_table
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"add_partition"
argument_list|,
operator|new
name|add_partition
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"append_partition"
argument_list|,
operator|new
name|append_partition
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"append_partition_by_name"
argument_list|,
operator|new
name|append_partition_by_name
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"drop_partition"
argument_list|,
operator|new
name|drop_partition
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"drop_partition_by_name"
argument_list|,
operator|new
name|drop_partition_by_name
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_partition"
argument_list|,
operator|new
name|get_partition
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_partition_by_name"
argument_list|,
operator|new
name|get_partition_by_name
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_partitions"
argument_list|,
operator|new
name|get_partitions
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_partition_names"
argument_list|,
operator|new
name|get_partition_names
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_partitions_ps"
argument_list|,
operator|new
name|get_partitions_ps
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_partition_names_ps"
argument_list|,
operator|new
name|get_partition_names_ps
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_partitions_by_filter"
argument_list|,
operator|new
name|get_partitions_by_filter
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"alter_partition"
argument_list|,
operator|new
name|alter_partition
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_config_value"
argument_list|,
operator|new
name|get_config_value
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"partition_name_to_vals"
argument_list|,
operator|new
name|partition_name_to_vals
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"partition_name_to_spec"
argument_list|,
operator|new
name|partition_name_to_spec
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"add_index"
argument_list|,
operator|new
name|add_index
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"alter_index"
argument_list|,
operator|new
name|alter_index
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"drop_index_by_name"
argument_list|,
operator|new
name|drop_index_by_name
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_index_by_name"
argument_list|,
operator|new
name|get_index_by_name
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_indexes"
argument_list|,
operator|new
name|get_indexes
argument_list|()
argument_list|)
expr_stmt|;
name|processMap_
operator|.
name|put
argument_list|(
literal|"get_index_names"
argument_list|,
operator|new
name|get_index_names
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Iface
name|iface_
decl_stmt|;
specifier|public
name|boolean
name|process
parameter_list|(
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|TMessage
name|msg
init|=
name|iprot
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
name|ProcessFunction
name|fn
init|=
name|processMap_
operator|.
name|get
argument_list|(
name|msg
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|==
literal|null
condition|)
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|UNKNOWN_METHOD
argument_list|,
literal|"Invalid method name: '"
operator|+
name|msg
operator|.
name|name
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
name|msg
operator|.
name|name
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|msg
operator|.
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|fn
operator|.
name|process
argument_list|(
name|msg
operator|.
name|seqid
argument_list|,
name|iprot
argument_list|,
name|oprot
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|private
class|class
name|create_database
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|create_database_args
name|args
init|=
operator|new
name|create_database_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_database"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|create_database_result
name|result
init|=
operator|new
name|create_database_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|create_database
argument_list|(
name|args
operator|.
name|database
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing create_database"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing create_database"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_database"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_database"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_database
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_database_args
name|args
init|=
operator|new
name|get_database_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_database"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_database_result
name|result
init|=
operator|new
name|get_database_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_database
argument_list|(
name|args
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_database"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_database"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_database"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_database"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|drop_database
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|drop_database_args
name|args
init|=
operator|new
name|drop_database_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_database"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|drop_database_result
name|result
init|=
operator|new
name|drop_database_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|drop_database
argument_list|(
name|args
operator|.
name|name
argument_list|,
name|args
operator|.
name|deleteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing drop_database"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing drop_database"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_database"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_database"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_databases
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_databases_args
name|args
init|=
operator|new
name|get_databases_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_databases"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_databases_result
name|result
init|=
operator|new
name|get_databases_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_databases
argument_list|(
name|args
operator|.
name|pattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_databases"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_databases"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_databases"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_databases"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_all_databases
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_all_databases_args
name|args
init|=
operator|new
name|get_all_databases_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_all_databases"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_all_databases_result
name|result
init|=
operator|new
name|get_all_databases_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_all_databases
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_all_databases"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_all_databases"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_all_databases"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_all_databases"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|alter_database
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|alter_database_args
name|args
init|=
operator|new
name|alter_database_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_database"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|alter_database_result
name|result
init|=
operator|new
name|alter_database_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|alter_database
argument_list|(
name|args
operator|.
name|dbname
argument_list|,
name|args
operator|.
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing alter_database"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing alter_database"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_database"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_database"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_type
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_type_args
name|args
init|=
operator|new
name|get_type_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_type_result
name|result
init|=
operator|new
name|get_type_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_type
argument_list|(
name|args
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_type"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_type"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|create_type
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|create_type_args
name|args
init|=
operator|new
name|create_type_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_type"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|create_type_result
name|result
init|=
operator|new
name|create_type_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|create_type
argument_list|(
name|args
operator|.
name|type
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing create_type"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing create_type"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_type"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_type"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|drop_type
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|drop_type_args
name|args
init|=
operator|new
name|drop_type_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_type"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|drop_type_result
name|result
init|=
operator|new
name|drop_type_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|drop_type
argument_list|(
name|args
operator|.
name|type
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing drop_type"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing drop_type"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_type"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_type"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_type_all
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_type_all_args
name|args
init|=
operator|new
name|get_type_all_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type_all"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_type_all_result
name|result
init|=
operator|new
name|get_type_all_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_type_all
argument_list|(
name|args
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_type_all"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_type_all"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type_all"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_type_all"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_fields
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_fields_args
name|args
init|=
operator|new
name|get_fields_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_fields"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_fields_result
name|result
init|=
operator|new
name|get_fields_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_fields
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|table_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_fields"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_fields"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_fields"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_fields"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_schema
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_schema_args
name|args
init|=
operator|new
name|get_schema_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_schema"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_schema_result
name|result
init|=
operator|new
name|get_schema_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_schema
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|table_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_schema"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_schema"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_schema"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_schema"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|create_table
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|create_table_args
name|args
init|=
operator|new
name|create_table_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_table"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|create_table_result
name|result
init|=
operator|new
name|create_table_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|create_table
argument_list|(
name|args
operator|.
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o4
parameter_list|)
block|{
name|result
operator|.
name|o4
operator|=
name|o4
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing create_table"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing create_table"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_table"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"create_table"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|drop_table
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|drop_table_args
name|args
init|=
operator|new
name|drop_table_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_table"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|drop_table_result
name|result
init|=
operator|new
name|drop_table_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|drop_table
argument_list|(
name|args
operator|.
name|dbname
argument_list|,
name|args
operator|.
name|name
argument_list|,
name|args
operator|.
name|deleteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing drop_table"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing drop_table"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_table"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_table"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_tables
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_tables_args
name|args
init|=
operator|new
name|get_tables_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_tables"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_tables_result
name|result
init|=
operator|new
name|get_tables_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_tables
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|pattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_tables"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_tables"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_tables"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_tables"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_all_tables
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_all_tables_args
name|args
init|=
operator|new
name|get_all_tables_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_all_tables"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_all_tables_result
name|result
init|=
operator|new
name|get_all_tables_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_all_tables
argument_list|(
name|args
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_all_tables"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_all_tables"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_all_tables"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_all_tables"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_table
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_table_args
name|args
init|=
operator|new
name|get_table_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_table"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_table_result
name|result
init|=
operator|new
name|get_table_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_table
argument_list|(
name|args
operator|.
name|dbname
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_table"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_table"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_table"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_table"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|alter_table
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|alter_table_args
name|args
init|=
operator|new
name|alter_table_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_table"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|alter_table_result
name|result
init|=
operator|new
name|alter_table_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|alter_table
argument_list|(
name|args
operator|.
name|dbname
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|new_tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing alter_table"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing alter_table"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_table"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_table"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|add_partition
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|add_partition_args
name|args
init|=
operator|new
name|add_partition_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"add_partition"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|add_partition_result
name|result
init|=
operator|new
name|add_partition_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|add_partition
argument_list|(
name|args
operator|.
name|new_part
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing add_partition"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing add_partition"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"add_partition"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"add_partition"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|append_partition
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|append_partition_args
name|args
init|=
operator|new
name|append_partition_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"append_partition"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|append_partition_result
name|result
init|=
operator|new
name|append_partition_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|append_partition
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|part_vals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing append_partition"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing append_partition"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"append_partition"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"append_partition"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|append_partition_by_name
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|append_partition_by_name_args
name|args
init|=
operator|new
name|append_partition_by_name_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"append_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|append_partition_by_name_result
name|result
init|=
operator|new
name|append_partition_by_name_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|append_partition_by_name
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|part_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing append_partition_by_name"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing append_partition_by_name"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"append_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"append_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|drop_partition
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|drop_partition_args
name|args
init|=
operator|new
name|drop_partition_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_partition"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|drop_partition_result
name|result
init|=
operator|new
name|drop_partition_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|drop_partition
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|part_vals
argument_list|,
name|args
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing drop_partition"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing drop_partition"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_partition"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_partition"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|drop_partition_by_name
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|drop_partition_by_name_args
name|args
init|=
operator|new
name|drop_partition_by_name_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|drop_partition_by_name_result
name|result
init|=
operator|new
name|drop_partition_by_name_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|drop_partition_by_name
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|part_name
argument_list|,
name|args
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing drop_partition_by_name"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing drop_partition_by_name"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_partition
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_partition_args
name|args
init|=
operator|new
name|get_partition_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_partition_result
name|result
init|=
operator|new
name|get_partition_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_partition
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|part_vals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_partition"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_partition"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_partition_by_name
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_partition_by_name_args
name|args
init|=
operator|new
name|get_partition_by_name_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_partition_by_name_result
name|result
init|=
operator|new
name|get_partition_by_name_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_partition_by_name
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|part_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_partition_by_name"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_partition_by_name"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_by_name"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_partitions
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_partitions_args
name|args
init|=
operator|new
name|get_partitions_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_partitions_result
name|result
init|=
operator|new
name|get_partitions_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_partitions
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|max_parts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_partitions"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_partitions"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_partition_names
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_partition_names_args
name|args
init|=
operator|new
name|get_partition_names_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_names"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_partition_names_result
name|result
init|=
operator|new
name|get_partition_names_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_partition_names
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|max_parts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_partition_names"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_partition_names"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_names"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_names"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_partitions_ps
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_partitions_ps_args
name|args
init|=
operator|new
name|get_partitions_ps_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions_ps"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_partitions_ps_result
name|result
init|=
operator|new
name|get_partitions_ps_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_partitions_ps
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|part_vals
argument_list|,
name|args
operator|.
name|max_parts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_partitions_ps"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_partitions_ps"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions_ps"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions_ps"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_partition_names_ps
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_partition_names_ps_args
name|args
init|=
operator|new
name|get_partition_names_ps_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_names_ps"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_partition_names_ps_result
name|result
init|=
operator|new
name|get_partition_names_ps_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_partition_names_ps
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|part_vals
argument_list|,
name|args
operator|.
name|max_parts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_partition_names_ps"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_partition_names_ps"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_names_ps"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partition_names_ps"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_partitions_by_filter
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_partitions_by_filter_args
name|args
init|=
operator|new
name|get_partitions_by_filter_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions_by_filter"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_partitions_by_filter_result
name|result
init|=
operator|new
name|get_partitions_by_filter_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_partitions_by_filter
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|filter
argument_list|,
name|args
operator|.
name|max_parts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_partitions_by_filter"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_partitions_by_filter"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions_by_filter"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_partitions_by_filter"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|alter_partition
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|alter_partition_args
name|args
init|=
operator|new
name|alter_partition_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_partition"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|alter_partition_result
name|result
init|=
operator|new
name|alter_partition_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|alter_partition
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|new_part
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing alter_partition"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing alter_partition"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_partition"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_partition"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_config_value
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_config_value_args
name|args
init|=
operator|new
name|get_config_value_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_config_value"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_config_value_result
name|result
init|=
operator|new
name|get_config_value_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_config_value
argument_list|(
name|args
operator|.
name|name
argument_list|,
name|args
operator|.
name|defaultValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ConfigValSecurityException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_config_value"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_config_value"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_config_value"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_config_value"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|partition_name_to_vals
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|partition_name_to_vals_args
name|args
init|=
operator|new
name|partition_name_to_vals_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"partition_name_to_vals"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|partition_name_to_vals_result
name|result
init|=
operator|new
name|partition_name_to_vals_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|partition_name_to_vals
argument_list|(
name|args
operator|.
name|part_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing partition_name_to_vals"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing partition_name_to_vals"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"partition_name_to_vals"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"partition_name_to_vals"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|partition_name_to_spec
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|partition_name_to_spec_args
name|args
init|=
operator|new
name|partition_name_to_spec_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"partition_name_to_spec"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|partition_name_to_spec_result
name|result
init|=
operator|new
name|partition_name_to_spec_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|partition_name_to_spec
argument_list|(
name|args
operator|.
name|part_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing partition_name_to_spec"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing partition_name_to_spec"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"partition_name_to_spec"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"partition_name_to_spec"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|add_index
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|add_index_args
name|args
init|=
operator|new
name|add_index_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"add_index"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|add_index_result
name|result
init|=
operator|new
name|add_index_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|add_index
argument_list|(
name|args
operator|.
name|new_index
argument_list|,
name|args
operator|.
name|index_table
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|result
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing add_index"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing add_index"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"add_index"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"add_index"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|alter_index
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|alter_index_args
name|args
init|=
operator|new
name|alter_index_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_index"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|alter_index_result
name|result
init|=
operator|new
name|alter_index_result
argument_list|()
decl_stmt|;
try|try
block|{
name|iface_
operator|.
name|alter_index
argument_list|(
name|args
operator|.
name|dbname
argument_list|,
name|args
operator|.
name|base_tbl_name
argument_list|,
name|args
operator|.
name|idx_name
argument_list|,
name|args
operator|.
name|new_idx
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing alter_index"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing alter_index"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_index"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"alter_index"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|drop_index_by_name
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|drop_index_by_name_args
name|args
init|=
operator|new
name|drop_index_by_name_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_index_by_name"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|drop_index_by_name_result
name|result
init|=
operator|new
name|drop_index_by_name_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|drop_index_by_name
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|index_name
argument_list|,
name|args
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|result
operator|.
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing drop_index_by_name"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing drop_index_by_name"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_index_by_name"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"drop_index_by_name"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_index_by_name
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_index_by_name_args
name|args
init|=
operator|new
name|get_index_by_name_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_index_by_name"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_index_by_name_result
name|result
init|=
operator|new
name|get_index_by_name_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_index_by_name
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|index_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_index_by_name"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_index_by_name"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_index_by_name"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_index_by_name"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_indexes
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_indexes_args
name|args
init|=
operator|new
name|get_indexes_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_indexes"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_indexes_result
name|result
init|=
operator|new
name|get_indexes_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_indexes
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|max_indexes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|result
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_indexes"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_indexes"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_indexes"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_indexes"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|get_index_names
implements|implements
name|ProcessFunction
block|{
specifier|public
name|void
name|process
parameter_list|(
name|int
name|seqid
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|get_index_names_args
name|args
init|=
operator|new
name|get_index_names_args
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_index_names"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|get_index_names_result
name|result
init|=
operator|new
name|get_index_names_result
argument_list|()
decl_stmt|;
try|try
block|{
name|result
operator|.
name|success
operator|=
name|iface_
operator|.
name|get_index_names
argument_list|(
name|args
operator|.
name|db_name
argument_list|,
name|args
operator|.
name|tbl_name
argument_list|,
name|args
operator|.
name|max_indexes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|result
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|th
parameter_list|)
block|{
name|LOGGER
operator|.
name|error
argument_list|(
literal|"Internal error processing get_index_names"
argument_list|,
name|th
argument_list|)
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|INTERNAL_ERROR
argument_list|,
literal|"Internal error processing get_index_names"
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_index_names"
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
literal|"get_index_names"
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|create_database_args
implements|implements
name|TBase
argument_list|<
name|create_database_args
argument_list|,
name|create_database_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_database_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DATABASE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"database"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|Database
name|database
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DATABASE
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"database"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DATABASE
return|return
name|DATABASE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DATABASE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"database"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Database
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|create_database_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|create_database_args
parameter_list|()
block|{     }
specifier|public
name|create_database_args
parameter_list|(
name|Database
name|database
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|database
operator|=
name|database
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|create_database_args
parameter_list|(
name|create_database_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDatabase
argument_list|()
condition|)
block|{
name|this
operator|.
name|database
operator|=
operator|new
name|Database
argument_list|(
name|other
operator|.
name|database
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|create_database_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|create_database_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|database
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Database
name|getDatabase
parameter_list|()
block|{
return|return
name|this
operator|.
name|database
return|;
block|}
specifier|public
name|void
name|setDatabase
parameter_list|(
name|Database
name|database
parameter_list|)
block|{
name|this
operator|.
name|database
operator|=
name|database
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDatabase
parameter_list|()
block|{
name|this
operator|.
name|database
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field database is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDatabase
parameter_list|()
block|{
return|return
name|this
operator|.
name|database
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDatabaseIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|database
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DATABASE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDatabase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDatabase
argument_list|(
operator|(
name|Database
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DATABASE
case|:
return|return
name|getDatabase
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DATABASE
case|:
return|return
name|isSetDatabase
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_database_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_database_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_database_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_database
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDatabase
argument_list|()
decl_stmt|;
name|boolean
name|that_present_database
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDatabase
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_database
operator|||
name|that_present_database
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_database
operator|&&
name|that_present_database
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|database
operator|.
name|equals
argument_list|(
name|that
operator|.
name|database
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|create_database_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|create_database_args
name|typedOther
init|=
operator|(
name|create_database_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDatabase
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDatabase
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDatabase
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|database
argument_list|,
name|typedOther
operator|.
name|database
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DATABASE
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|database
operator|=
operator|new
name|Database
argument_list|()
expr_stmt|;
name|this
operator|.
name|database
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|database
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DATABASE_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|database
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_database_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"database:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|database
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|database
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|create_database_result
implements|implements
name|TBase
argument_list|<
name|create_database_result
argument_list|,
name|create_database_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_database_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O3_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o3"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|AlreadyExistsException
name|o1
decl_stmt|;
specifier|private
name|InvalidObjectException
name|o2
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|,
name|O3
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"o3"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
case|case
literal|3
case|:
comment|// O3
return|return
name|O3
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O3
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o3"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|create_database_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|create_database_result
parameter_list|()
block|{     }
specifier|public
name|create_database_result
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|,
name|InvalidObjectException
name|o2
parameter_list|,
name|MetaException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|create_database_result
parameter_list|(
name|create_database_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|AlreadyExistsException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|InvalidObjectException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|create_database_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|create_database_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|AlreadyExistsException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|InvalidObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|InvalidObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o3 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|AlreadyExistsException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|InvalidObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO3
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|getO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|isSetO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_database_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_database_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_database_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|create_database_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|create_database_result
name|typedOther
init|=
operator|(
name|create_database_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO3
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO3
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO3
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o3
argument_list|,
name|typedOther
operator|.
name|o3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|AlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|InvalidObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// O3
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O3_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_database_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o3:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o3
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_database_args
implements|implements
name|TBase
argument_list|<
name|get_database_args
argument_list|,
name|get_database_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_database_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"name"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// NAME
return|return
name|NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_database_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_database_args
parameter_list|()
block|{     }
specifier|public
name|get_database_args
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_database_args
parameter_list|(
name|get_database_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetName
argument_list|()
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|other
operator|.
name|name
expr_stmt|;
block|}
block|}
specifier|public
name|get_database_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_database_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|getName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|isSetName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_database_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_database_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_database_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_database_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_database_args
name|typedOther
init|=
operator|(
name|get_database_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|typedOther
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_database_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_database_result
implements|implements
name|TBase
argument_list|<
name|get_database_result
argument_list|,
name|get_database_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_database_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|Database
name|success
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Database
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_database_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_database_result
parameter_list|()
block|{     }
specifier|public
name|get_database_result
parameter_list|(
name|Database
name|success
parameter_list|,
name|NoSuchObjectException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_database_result
parameter_list|(
name|get_database_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Database
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_database_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_database_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Database
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Database
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|NoSuchObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Database
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_database_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_database_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_database_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_database_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_database_result
name|typedOther
init|=
operator|(
name|get_database_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Database
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_database_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_database_args
implements|implements
name|TBase
argument_list|<
name|drop_database_args
argument_list|,
name|drop_database_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_database_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DELETE_DATA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"deleteData"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|boolean
name|deleteData
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"name"
argument_list|)
block|,
name|DELETE_DATA
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"deleteData"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// NAME
return|return
name|NAME
return|;
case|case
literal|2
case|:
comment|// DELETE_DATA
return|return
name|DELETE_DATA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__DELETEDATA_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DELETE_DATA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"deleteData"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|drop_database_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|drop_database_args
parameter_list|()
block|{     }
specifier|public
name|drop_database_args
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|drop_database_args
parameter_list|(
name|drop_database_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetName
argument_list|()
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|other
operator|.
name|name
expr_stmt|;
block|}
name|this
operator|.
name|deleteData
operator|=
name|other
operator|.
name|deleteData
expr_stmt|;
block|}
specifier|public
name|drop_database_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|drop_database_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isDeleteData
parameter_list|()
block|{
return|return
name|this
operator|.
name|deleteData
return|;
block|}
specifier|public
name|void
name|setDeleteData
parameter_list|(
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDeleteData
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field deleteData is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDeleteData
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDeleteDataIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DELETE_DATA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDeleteData
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDeleteData
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|getName
argument_list|()
return|;
case|case
name|DELETE_DATA
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isDeleteData
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|isSetName
argument_list|()
return|;
case|case
name|DELETE_DATA
case|:
return|return
name|isSetDeleteData
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_database_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_database_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_database_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_deleteData
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_deleteData
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_deleteData
operator|||
name|that_present_deleteData
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_deleteData
operator|&&
name|that_present_deleteData
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|deleteData
operator|!=
name|that
operator|.
name|deleteData
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|drop_database_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|drop_database_args
name|typedOther
init|=
operator|(
name|drop_database_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|typedOther
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDeleteData
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDeleteData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDeleteData
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|deleteData
argument_list|,
name|typedOther
operator|.
name|deleteData
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// DELETE_DATA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DELETE_DATA_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_database_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"deleteData:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_database_result
implements|implements
name|TBase
argument_list|<
name|drop_database_result
argument_list|,
name|drop_database_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_database_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O3_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o3"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o1
decl_stmt|;
specifier|private
name|InvalidOperationException
name|o2
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|,
name|O3
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"o3"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
case|case
literal|3
case|:
comment|// O3
return|return
name|O3
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O3
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o3"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|drop_database_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|drop_database_result
parameter_list|()
block|{     }
specifier|public
name|drop_database_result
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|,
name|InvalidOperationException
name|o2
parameter_list|,
name|MetaException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|drop_database_result
parameter_list|(
name|drop_database_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|InvalidOperationException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|drop_database_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|drop_database_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|NoSuchObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|InvalidOperationException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|InvalidOperationException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o3 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|InvalidOperationException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO3
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|getO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|isSetO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_database_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_database_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_database_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|drop_database_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|drop_database_result
name|typedOther
init|=
operator|(
name|drop_database_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO3
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO3
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO3
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o3
argument_list|,
name|typedOther
operator|.
name|o3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|InvalidOperationException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// O3
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O3_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_database_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o3:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o3
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_databases_args
implements|implements
name|TBase
argument_list|<
name|get_databases_args
argument_list|,
name|get_databases_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_databases_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PATTERN_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"pattern"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|String
name|pattern
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|PATTERN
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"pattern"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// PATTERN
return|return
name|PATTERN
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PATTERN
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"pattern"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_databases_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_databases_args
parameter_list|()
block|{     }
specifier|public
name|get_databases_args
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_databases_args
parameter_list|(
name|get_databases_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetPattern
argument_list|()
condition|)
block|{
name|this
operator|.
name|pattern
operator|=
name|other
operator|.
name|pattern
expr_stmt|;
block|}
block|}
specifier|public
name|get_databases_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_databases_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|pattern
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|this
operator|.
name|pattern
return|;
block|}
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPattern
parameter_list|()
block|{
name|this
operator|.
name|pattern
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field pattern is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPattern
parameter_list|()
block|{
return|return
name|this
operator|.
name|pattern
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPatternIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|pattern
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|PATTERN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPattern
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPattern
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|PATTERN
case|:
return|return
name|getPattern
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|PATTERN
case|:
return|return
name|isSetPattern
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_databases_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_databases_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_databases_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_pattern
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPattern
argument_list|()
decl_stmt|;
name|boolean
name|that_present_pattern
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_pattern
operator|||
name|that_present_pattern
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_pattern
operator|&&
name|that_present_pattern
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|pattern
operator|.
name|equals
argument_list|(
name|that
operator|.
name|pattern
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_databases_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_databases_args
name|typedOther
init|=
operator|(
name|get_databases_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPattern
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPattern
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPattern
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|pattern
argument_list|,
name|typedOther
operator|.
name|pattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// PATTERN
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|pattern
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|pattern
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PATTERN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|pattern
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_databases_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"pattern:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|pattern
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|pattern
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_databases_result
implements|implements
name|TBase
argument_list|<
name|get_databases_result
argument_list|,
name|get_databases_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_databases_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_databases_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_databases_result
parameter_list|()
block|{     }
specifier|public
name|get_databases_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_databases_result
parameter_list|(
name|get_databases_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_databases_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_databases_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_databases_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_databases_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_databases_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_databases_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_databases_result
name|typedOther
init|=
operator|(
name|get_databases_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list63
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list63
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i64
init|=
literal|0
init|;
name|_i64
operator|<
name|_list63
operator|.
name|size
condition|;
operator|++
name|_i64
control|)
block|{
name|String
name|_elem65
decl_stmt|;
name|_elem65
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem65
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter66
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter66
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_databases_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_all_databases_args
implements|implements
name|TBase
argument_list|<
name|get_all_databases_args
argument_list|,
name|get_all_databases_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_all_databases_args"
argument_list|)
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{ ;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_all_databases_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_all_databases_args
parameter_list|()
block|{     }
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_all_databases_args
parameter_list|(
name|get_all_databases_args
name|other
parameter_list|)
block|{     }
specifier|public
name|get_all_databases_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_all_databases_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{     }
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{       }
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{       }
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{       }
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_all_databases_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_all_databases_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_all_databases_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_all_databases_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_all_databases_args
name|typedOther
init|=
operator|(
name|get_all_databases_args
operator|)
name|other
decl_stmt|;
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_all_databases_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_all_databases_result
implements|implements
name|TBase
argument_list|<
name|get_all_databases_result
argument_list|,
name|get_all_databases_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_all_databases_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_all_databases_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_all_databases_result
parameter_list|()
block|{     }
specifier|public
name|get_all_databases_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_all_databases_result
parameter_list|(
name|get_all_databases_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_all_databases_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_all_databases_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_all_databases_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_all_databases_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_all_databases_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_all_databases_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_all_databases_result
name|typedOther
init|=
operator|(
name|get_all_databases_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list67
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list67
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i68
init|=
literal|0
init|;
name|_i68
operator|<
name|_list67
operator|.
name|size
condition|;
operator|++
name|_i68
control|)
block|{
name|String
name|_elem69
decl_stmt|;
name|_elem69
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem69
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter70
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter70
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_all_databases_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_database_args
implements|implements
name|TBase
argument_list|<
name|alter_database_args
argument_list|,
name|alter_database_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_database_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DBNAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"dbname"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|Database
name|db
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DBNAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"dbname"
argument_list|)
block|,
name|DB
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"db"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DBNAME
return|return
name|DBNAME
return|;
case|case
literal|2
case|:
comment|// DB
return|return
name|DB
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DBNAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"dbname"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Database
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|alter_database_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|alter_database_args
parameter_list|()
block|{     }
specifier|public
name|alter_database_args
parameter_list|(
name|String
name|dbname
parameter_list|,
name|Database
name|db
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|alter_database_args
parameter_list|(
name|alter_database_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDbname
argument_list|()
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|other
operator|.
name|dbname
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetDb
argument_list|()
condition|)
block|{
name|this
operator|.
name|db
operator|=
operator|new
name|Database
argument_list|(
name|other
operator|.
name|db
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|alter_database_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|alter_database_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|db
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
return|;
block|}
specifier|public
name|void
name|setDbname
parameter_list|(
name|String
name|dbname
parameter_list|)
block|{
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbname
parameter_list|()
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field dbname is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDbnameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|Database
name|getDb
parameter_list|()
block|{
return|return
name|this
operator|.
name|db
return|;
block|}
specifier|public
name|void
name|setDb
parameter_list|(
name|Database
name|db
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb
parameter_list|()
block|{
name|this
operator|.
name|db
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb
parameter_list|()
block|{
return|return
name|this
operator|.
name|db
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDbIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDbname
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDbname
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DB
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb
argument_list|(
operator|(
name|Database
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
return|return
name|getDbname
argument_list|()
return|;
case|case
name|DB
case|:
return|return
name|getDb
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
return|return
name|isSetDbname
argument_list|()
return|;
case|case
name|DB
case|:
return|return
name|isSetDb
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_database_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_database_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_database_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_dbname
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDbname
argument_list|()
decl_stmt|;
name|boolean
name|that_present_dbname
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDbname
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_dbname
operator|||
name|that_present_dbname
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbname
operator|&&
name|that_present_dbname
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbname
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_db
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db
operator|||
name|that_present_db
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db
operator|&&
name|that_present_db
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|alter_database_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|alter_database_args
name|typedOther
init|=
operator|(
name|alter_database_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDbname
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDbname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDbname
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|dbname
argument_list|,
name|typedOther
operator|.
name|dbname
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db
argument_list|,
name|typedOther
operator|.
name|db
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DBNAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// DB
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|db
operator|=
operator|new
name|Database
argument_list|()
expr_stmt|;
name|this
operator|.
name|db
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DBNAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|db
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|db
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_database_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbname:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_database_result
implements|implements
name|TBase
argument_list|<
name|alter_database_result
argument_list|,
name|alter_database_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_database_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|alter_database_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|alter_database_result
parameter_list|()
block|{     }
specifier|public
name|alter_database_result
parameter_list|(
name|MetaException
name|o1
parameter_list|,
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|alter_database_result
parameter_list|(
name|alter_database_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|alter_database_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|alter_database_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|NoSuchObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_database_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_database_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_database_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|alter_database_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|alter_database_result
name|typedOther
init|=
operator|(
name|alter_database_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_database_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_type_args
implements|implements
name|TBase
argument_list|<
name|get_type_args
argument_list|,
name|get_type_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_type_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"name"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// NAME
return|return
name|NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_type_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_type_args
parameter_list|()
block|{     }
specifier|public
name|get_type_args
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_type_args
parameter_list|(
name|get_type_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetName
argument_list|()
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|other
operator|.
name|name
expr_stmt|;
block|}
block|}
specifier|public
name|get_type_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_type_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|getName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|isSetName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_type_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_type_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_type_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_type_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_type_args
name|typedOther
init|=
operator|(
name|get_type_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|typedOther
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_type_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_type_result
implements|implements
name|TBase
argument_list|<
name|get_type_result
argument_list|,
name|get_type_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_type_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|Type
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Type
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_type_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_type_result
parameter_list|()
block|{     }
specifier|public
name|get_type_result
parameter_list|(
name|Type
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_type_result
parameter_list|(
name|get_type_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Type
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_type_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_type_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Type
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Type
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|NoSuchObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Type
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_type_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_type_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_type_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_type_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_type_result
name|typedOther
init|=
operator|(
name|get_type_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Type
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_type_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|create_type_args
implements|implements
name|TBase
argument_list|<
name|create_type_args
argument_list|,
name|create_type_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_type_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TYPE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"type"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|Type
name|type
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|TYPE
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"type"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TYPE
return|return
name|TYPE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TYPE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"type"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Type
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|create_type_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|create_type_args
parameter_list|()
block|{     }
specifier|public
name|create_type_args
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|create_type_args
parameter_list|(
name|create_type_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetType
argument_list|()
condition|)
block|{
name|this
operator|.
name|type
operator|=
operator|new
name|Type
argument_list|(
name|other
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|create_type_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|create_type_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|void
name|unsetType
parameter_list|()
block|{
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field type is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTypeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TYPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setType
argument_list|(
operator|(
name|Type
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TYPE
case|:
return|return
name|getType
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TYPE
case|:
return|return
name|isSetType
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_type_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_type_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_type_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_type
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetType
argument_list|()
decl_stmt|;
name|boolean
name|that_present_type
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_type
operator|||
name|that_present_type
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_type
operator|&&
name|that_present_type
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|type
operator|.
name|equals
argument_list|(
name|that
operator|.
name|type
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|create_type_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|create_type_args
name|typedOther
init|=
operator|(
name|create_type_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetType
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetType
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|type
argument_list|,
name|typedOther
operator|.
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TYPE
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|type
operator|=
operator|new
name|Type
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|type
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TYPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_type_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"type:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|type
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|create_type_result
implements|implements
name|TBase
argument_list|<
name|create_type_result
argument_list|,
name|create_type_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_type_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O3_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o3"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|AlreadyExistsException
name|o1
decl_stmt|;
specifier|private
name|InvalidObjectException
name|o2
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|,
name|O3
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"o3"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
case|case
literal|3
case|:
comment|// O3
return|return
name|O3
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O3
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o3"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|create_type_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|create_type_result
parameter_list|()
block|{     }
specifier|public
name|create_type_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|AlreadyExistsException
name|o1
parameter_list|,
name|InvalidObjectException
name|o2
parameter_list|,
name|MetaException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|create_type_result
parameter_list|(
name|create_type_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|AlreadyExistsException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|InvalidObjectException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|create_type_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|create_type_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AlreadyExistsException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|InvalidObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|InvalidObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o3 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|AlreadyExistsException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|InvalidObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO3
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isSuccess
argument_list|()
argument_list|)
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|getO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|isSetO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_type_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_type_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_type_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|create_type_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|create_type_result
name|typedOther
init|=
operator|(
name|create_type_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO3
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO3
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO3
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o3
argument_list|,
name|typedOther
operator|.
name|o3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|AlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|InvalidObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// O3
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O3_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_type_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o3:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o3
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_type_args
implements|implements
name|TBase
argument_list|<
name|drop_type_args
argument_list|,
name|drop_type_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_type_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TYPE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"type"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|String
name|type
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|TYPE
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"type"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TYPE
return|return
name|TYPE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TYPE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"type"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|drop_type_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|drop_type_args
parameter_list|()
block|{     }
specifier|public
name|drop_type_args
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|drop_type_args
parameter_list|(
name|drop_type_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetType
argument_list|()
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|other
operator|.
name|type
expr_stmt|;
block|}
block|}
specifier|public
name|drop_type_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|drop_type_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
specifier|public
name|void
name|setType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|void
name|unsetType
parameter_list|()
block|{
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field type is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTypeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TYPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setType
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TYPE
case|:
return|return
name|getType
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TYPE
case|:
return|return
name|isSetType
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_type_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_type_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_type_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_type
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetType
argument_list|()
decl_stmt|;
name|boolean
name|that_present_type
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_type
operator|||
name|that_present_type
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_type
operator|&&
name|that_present_type
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|type
operator|.
name|equals
argument_list|(
name|that
operator|.
name|type
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|drop_type_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|drop_type_args
name|typedOther
init|=
operator|(
name|drop_type_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetType
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetType
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|type
argument_list|,
name|typedOther
operator|.
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TYPE
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|type
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TYPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|type
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_type_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"type:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|type
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_type_result
implements|implements
name|TBase
argument_list|<
name|drop_type_result
argument_list|,
name|drop_type_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_type_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|drop_type_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|drop_type_result
parameter_list|()
block|{     }
specifier|public
name|drop_type_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|drop_type_result
parameter_list|(
name|drop_type_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|drop_type_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|drop_type_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|NoSuchObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isSuccess
argument_list|()
argument_list|)
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_type_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_type_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_type_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|drop_type_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|drop_type_result
name|typedOther
init|=
operator|(
name|drop_type_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_type_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_type_all_args
implements|implements
name|TBase
argument_list|<
name|get_type_all_args
argument_list|,
name|get_type_all_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_type_all_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"name"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// NAME
return|return
name|NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_type_all_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_type_all_args
parameter_list|()
block|{     }
specifier|public
name|get_type_all_args
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_type_all_args
parameter_list|(
name|get_type_all_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetName
argument_list|()
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|other
operator|.
name|name
expr_stmt|;
block|}
block|}
specifier|public
name|get_type_all_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_type_all_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|getName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|isSetName
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_type_all_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_type_all_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_type_all_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_type_all_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_type_all_args
name|typedOther
init|=
operator|(
name|get_type_all_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|typedOther
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_type_all_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_type_all_result
implements|implements
name|TBase
argument_list|<
name|get_type_all_result
argument_list|,
name|get_type_all_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_type_all_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MapMetaData
argument_list|(
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Type
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_type_all_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_type_all_result
parameter_list|()
block|{     }
specifier|public
name|get_type_all_result
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_type_all_result
parameter_list|(
name|get_type_all_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|__this__success
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|other_element
range|:
name|other
operator|.
name|success
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|Type
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__success_copy_key
init|=
name|other_element_key
decl_stmt|;
name|Type
name|__this__success_copy_value
init|=
operator|new
name|Type
argument_list|(
name|other_element_value
argument_list|)
decl_stmt|;
name|__this__success
operator|.
name|put
argument_list|(
name|__this__success_copy_key
argument_list|,
name|__this__success_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_type_all_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_type_all_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToSuccess
parameter_list|(
name|String
name|key
parameter_list|,
name|Type
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_type_all_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_type_all_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_type_all_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_type_all_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_type_all_result
name|typedOther
init|=
operator|(
name|get_type_all_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map71
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
argument_list|(
literal|2
operator|*
name|_map71
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i72
init|=
literal|0
init|;
name|_i72
operator|<
name|_map71
operator|.
name|size
condition|;
operator|++
name|_i72
control|)
block|{
name|String
name|_key73
decl_stmt|;
name|Type
name|_val74
decl_stmt|;
name|_key73
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val74
operator|=
operator|new
name|Type
argument_list|()
expr_stmt|;
name|_val74
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|_key73
argument_list|,
name|_val74
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|_iter75
range|:
name|this
operator|.
name|success
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter75
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|_iter75
operator|.
name|getValue
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_type_all_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_fields_args
implements|implements
name|TBase
argument_list|<
name|get_fields_args
argument_list|,
name|get_fields_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_fields_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"table_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"table_name"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"table_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_fields_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_fields_args
parameter_list|()
block|{     }
specifier|public
name|get_fields_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_fields_args
parameter_list|(
name|get_fields_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTable_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|other
operator|.
name|table_name
expr_stmt|;
block|}
block|}
specifier|public
name|get_fields_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_fields_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
return|;
block|}
specifier|public
name|void
name|setTable_name
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable_name
parameter_list|()
block|{
name|this
operator|.
name|table_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field table_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTable_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTable_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTable_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TABLE_NAME
case|:
return|return
name|getTable_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTable_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_fields_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_fields_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_fields_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_table_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTable_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_table_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTable_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_table_name
operator|||
name|that_present_table_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table_name
operator|&&
name|that_present_table_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_fields_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_fields_args
name|typedOther
init|=
operator|(
name|get_fields_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTable_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTable_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTable_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|table_name
argument_list|,
name|typedOther
operator|.
name|table_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|table_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_fields_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"table_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|table_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_fields_result
implements|implements
name|TBase
argument_list|<
name|get_fields_result
argument_list|,
name|get_fields_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_fields_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O3_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o3"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownTableException
name|o2
decl_stmt|;
specifier|private
name|UnknownDBException
name|o3
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|,
name|O3
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"o3"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
case|case
literal|3
case|:
comment|// O3
return|return
name|O3
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|FieldSchema
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O3
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o3"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_fields_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_fields_result
parameter_list|()
block|{     }
specifier|public
name|get_fields_result
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|UnknownTableException
name|o2
parameter_list|,
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_fields_result
parameter_list|(
name|get_fields_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownTableException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownDBException
argument_list|(
name|other
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_fields_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_fields_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|FieldSchema
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|UnknownTableException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|UnknownDBException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o3 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|UnknownTableException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO3
argument_list|(
operator|(
name|UnknownDBException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|getO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|isSetO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_fields_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_fields_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_fields_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_fields_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_fields_result
name|typedOther
init|=
operator|(
name|get_fields_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO3
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO3
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO3
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o3
argument_list|,
name|typedOther
operator|.
name|o3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list76
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|_list76
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i77
init|=
literal|0
init|;
name|_i77
operator|<
name|_list76
operator|.
name|size
condition|;
operator|++
name|_i77
control|)
block|{
name|FieldSchema
name|_elem78
decl_stmt|;
name|_elem78
operator|=
operator|new
name|FieldSchema
argument_list|()
expr_stmt|;
name|_elem78
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem78
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownTableException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// O3
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|_iter79
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter79
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O3_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_fields_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o3:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o3
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_schema_args
implements|implements
name|TBase
argument_list|<
name|get_schema_args
argument_list|,
name|get_schema_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_schema_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TABLE_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"table_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|table_name
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TABLE_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"table_name"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TABLE_NAME
return|return
name|TABLE_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLE_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"table_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_schema_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_schema_args
parameter_list|()
block|{     }
specifier|public
name|get_schema_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_schema_args
parameter_list|(
name|get_schema_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTable_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|other
operator|.
name|table_name
expr_stmt|;
block|}
block|}
specifier|public
name|get_schema_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_schema_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|table_name
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
return|;
block|}
specifier|public
name|void
name|setTable_name
parameter_list|(
name|String
name|table_name
parameter_list|)
block|{
name|this
operator|.
name|table_name
operator|=
name|table_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTable_name
parameter_list|()
block|{
name|this
operator|.
name|table_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field table_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTable_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|table_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTable_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TABLE_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTable_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTable_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TABLE_NAME
case|:
return|return
name|getTable_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TABLE_NAME
case|:
return|return
name|isSetTable_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_schema_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_schema_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_schema_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_table_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTable_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_table_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTable_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_table_name
operator|||
name|that_present_table_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_table_name
operator|&&
name|that_present_table_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|table_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|table_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_schema_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_schema_args
name|typedOther
init|=
operator|(
name|get_schema_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTable_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTable_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTable_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|table_name
argument_list|,
name|typedOther
operator|.
name|table_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TABLE_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|table_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|table_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLE_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_schema_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"table_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|table_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|table_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_schema_result
implements|implements
name|TBase
argument_list|<
name|get_schema_result
argument_list|,
name|get_schema_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_schema_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O3_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o3"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|UnknownTableException
name|o2
decl_stmt|;
specifier|private
name|UnknownDBException
name|o3
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|,
name|O3
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"o3"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
case|case
literal|3
case|:
comment|// O3
return|return
name|O3
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|FieldSchema
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O3
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o3"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_schema_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_schema_result
parameter_list|()
block|{     }
specifier|public
name|get_schema_result
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|UnknownTableException
name|o2
parameter_list|,
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_schema_result
parameter_list|(
name|get_schema_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownTableException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownDBException
argument_list|(
name|other
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_schema_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_schema_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|FieldSchema
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|UnknownTableException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|UnknownTableException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|UnknownDBException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|UnknownDBException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o3 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|UnknownTableException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO3
argument_list|(
operator|(
name|UnknownDBException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|getO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|isSetO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_schema_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_schema_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_schema_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_schema_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_schema_result
name|typedOther
init|=
operator|(
name|get_schema_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO3
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO3
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO3
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o3
argument_list|,
name|typedOther
operator|.
name|o3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list80
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|_list80
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i81
init|=
literal|0
init|;
name|_i81
operator|<
name|_list80
operator|.
name|size
condition|;
operator|++
name|_i81
control|)
block|{
name|FieldSchema
name|_elem82
decl_stmt|;
name|_elem82
operator|=
operator|new
name|FieldSchema
argument_list|()
expr_stmt|;
name|_elem82
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem82
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|UnknownTableException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// O3
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|UnknownDBException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|_iter83
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter83
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O3_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_schema_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o3:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o3
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|create_table_args
implements|implements
name|TBase
argument_list|<
name|create_table_args
argument_list|,
name|create_table_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_table_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|Table
name|tbl
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|TBL
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"tbl"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// TBL
return|return
name|TBL
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Table
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|create_table_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|create_table_args
parameter_list|()
block|{     }
specifier|public
name|create_table_args
parameter_list|(
name|Table
name|tbl
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|tbl
operator|=
name|tbl
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|create_table_args
parameter_list|(
name|create_table_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetTbl
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl
operator|=
operator|new
name|Table
argument_list|(
name|other
operator|.
name|tbl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|create_table_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|create_table_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|tbl
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Table
name|getTbl
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl
return|;
block|}
specifier|public
name|void
name|setTbl
parameter_list|(
name|Table
name|tbl
parameter_list|)
block|{
name|this
operator|.
name|tbl
operator|=
name|tbl
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl
parameter_list|()
block|{
name|this
operator|.
name|tbl
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTblIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TBL
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl
argument_list|(
operator|(
name|Table
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TBL
case|:
return|return
name|getTbl
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|TBL
case|:
return|return
name|isSetTbl
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_table_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_table_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_table_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_tbl
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl
operator|||
name|that_present_tbl
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl
operator|&&
name|that_present_tbl
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|create_table_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|create_table_args
name|typedOther
init|=
operator|(
name|create_table_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl
argument_list|,
name|typedOther
operator|.
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// TBL
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|tbl
operator|=
operator|new
name|Table
argument_list|()
expr_stmt|;
name|this
operator|.
name|tbl
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|tbl
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_table_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|create_table_result
implements|implements
name|TBase
argument_list|<
name|create_table_result
argument_list|,
name|create_table_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"create_table_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O3_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o3"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O4_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o4"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
name|AlreadyExistsException
name|o1
decl_stmt|;
specifier|private
name|InvalidObjectException
name|o2
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o4
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|,
name|O3
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"o3"
argument_list|)
block|,
name|O4
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"o4"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
case|case
literal|3
case|:
comment|// O3
return|return
name|O3
return|;
case|case
literal|4
case|:
comment|// O4
return|return
name|O4
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O3
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o3"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O4
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o4"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|create_table_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|create_table_result
parameter_list|()
block|{     }
specifier|public
name|create_table_result
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|,
name|InvalidObjectException
name|o2
parameter_list|,
name|MetaException
name|o3
parameter_list|,
name|NoSuchObjectException
name|o4
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
name|this
operator|.
name|o4
operator|=
name|o4
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|create_table_result
parameter_list|(
name|create_table_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|AlreadyExistsException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|InvalidObjectException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO4
argument_list|()
condition|)
block|{
name|this
operator|.
name|o4
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o4
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|create_table_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|create_table_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o4
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|AlreadyExistsException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|AlreadyExistsException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|InvalidObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|InvalidObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o3 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|NoSuchObjectException
name|getO4
parameter_list|()
block|{
return|return
name|this
operator|.
name|o4
return|;
block|}
specifier|public
name|void
name|setO4
parameter_list|(
name|NoSuchObjectException
name|o4
parameter_list|)
block|{
name|this
operator|.
name|o4
operator|=
name|o4
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO4
parameter_list|()
block|{
name|this
operator|.
name|o4
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o4 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO4
parameter_list|()
block|{
return|return
name|this
operator|.
name|o4
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO4IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o4
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|AlreadyExistsException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|InvalidObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO3
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O4
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO4
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO4
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|getO3
argument_list|()
return|;
case|case
name|O4
case|:
return|return
name|getO4
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|isSetO3
argument_list|()
return|;
case|case
name|O4
case|:
return|return
name|isSetO4
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|create_table_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|create_table_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|create_table_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o4
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO4
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o4
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO4
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o4
operator|||
name|that_present_o4
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o4
operator|&&
name|that_present_o4
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o4
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o4
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|create_table_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|create_table_result
name|typedOther
init|=
operator|(
name|create_table_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO3
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO3
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO3
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o3
argument_list|,
name|typedOther
operator|.
name|o3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO4
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO4
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO4
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o4
argument_list|,
name|typedOther
operator|.
name|o4
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|AlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|InvalidObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// O3
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// O4
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o4
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o4
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O3_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO4
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O4_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o4
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"create_table_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o3:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o3
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o4:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o4
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o4
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_table_args
implements|implements
name|TBase
argument_list|<
name|drop_table_args
argument_list|,
name|drop_table_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_table_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DBNAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"dbname"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DELETE_DATA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"deleteData"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|boolean
name|deleteData
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DBNAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"dbname"
argument_list|)
block|,
name|NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"name"
argument_list|)
block|,
name|DELETE_DATA
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"deleteData"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DBNAME
return|return
name|DBNAME
return|;
case|case
literal|2
case|:
comment|// NAME
return|return
name|NAME
return|;
case|case
literal|3
case|:
comment|// DELETE_DATA
return|return
name|DELETE_DATA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__DELETEDATA_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DBNAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"dbname"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DELETE_DATA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"deleteData"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|drop_table_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|drop_table_args
parameter_list|()
block|{     }
specifier|public
name|drop_table_args
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|drop_table_args
parameter_list|(
name|drop_table_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDbname
argument_list|()
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|other
operator|.
name|dbname
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetName
argument_list|()
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|other
operator|.
name|name
expr_stmt|;
block|}
name|this
operator|.
name|deleteData
operator|=
name|other
operator|.
name|deleteData
expr_stmt|;
block|}
specifier|public
name|drop_table_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|drop_table_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
return|;
block|}
specifier|public
name|void
name|setDbname
parameter_list|(
name|String
name|dbname
parameter_list|)
block|{
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbname
parameter_list|()
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field dbname is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDbnameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isDeleteData
parameter_list|()
block|{
return|return
name|this
operator|.
name|deleteData
return|;
block|}
specifier|public
name|void
name|setDeleteData
parameter_list|(
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDeleteData
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field deleteData is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDeleteData
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDeleteDataIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDbname
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDbname
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DELETE_DATA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDeleteData
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDeleteData
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
return|return
name|getDbname
argument_list|()
return|;
case|case
name|NAME
case|:
return|return
name|getName
argument_list|()
return|;
case|case
name|DELETE_DATA
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isDeleteData
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
return|return
name|isSetDbname
argument_list|()
return|;
case|case
name|NAME
case|:
return|return
name|isSetName
argument_list|()
return|;
case|case
name|DELETE_DATA
case|:
return|return
name|isSetDeleteData
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_table_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_table_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_table_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_dbname
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDbname
argument_list|()
decl_stmt|;
name|boolean
name|that_present_dbname
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDbname
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_dbname
operator|||
name|that_present_dbname
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbname
operator|&&
name|that_present_dbname
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbname
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_deleteData
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_deleteData
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_deleteData
operator|||
name|that_present_deleteData
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_deleteData
operator|&&
name|that_present_deleteData
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|deleteData
operator|!=
name|that
operator|.
name|deleteData
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|drop_table_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|drop_table_args
name|typedOther
init|=
operator|(
name|drop_table_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDbname
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDbname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDbname
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|dbname
argument_list|,
name|typedOther
operator|.
name|dbname
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|typedOther
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDeleteData
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDeleteData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDeleteData
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|deleteData
argument_list|,
name|typedOther
operator|.
name|deleteData
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DBNAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// DELETE_DATA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DBNAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DELETE_DATA_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_table_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbname:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"deleteData:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_table_result
implements|implements
name|TBase
argument_list|<
name|drop_table_result
argument_list|,
name|drop_table_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_table_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O3_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o3"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O3
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o3"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O3
return|return
name|O3
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O3
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o3"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|drop_table_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|drop_table_result
parameter_list|()
block|{     }
specifier|public
name|drop_table_result
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|,
name|MetaException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|drop_table_result
parameter_list|(
name|drop_table_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|drop_table_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|drop_table_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|NoSuchObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o3 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO3
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|getO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|isSetO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_table_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_table_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_table_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|drop_table_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|drop_table_result
name|typedOther
init|=
operator|(
name|drop_table_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO3
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO3
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO3
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o3
argument_list|,
name|typedOther
operator|.
name|o3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O3
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O3_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_table_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o3:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o3
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_tables_args
implements|implements
name|TBase
argument_list|<
name|get_tables_args
argument_list|,
name|get_tables_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_tables_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PATTERN_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"pattern"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|pattern
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|PATTERN
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"pattern"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// PATTERN
return|return
name|PATTERN
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PATTERN
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"pattern"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_tables_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_tables_args
parameter_list|()
block|{     }
specifier|public
name|get_tables_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_tables_args
parameter_list|(
name|get_tables_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPattern
argument_list|()
condition|)
block|{
name|this
operator|.
name|pattern
operator|=
name|other
operator|.
name|pattern
expr_stmt|;
block|}
block|}
specifier|public
name|get_tables_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_tables_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getPattern
parameter_list|()
block|{
return|return
name|this
operator|.
name|pattern
return|;
block|}
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPattern
parameter_list|()
block|{
name|this
operator|.
name|pattern
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field pattern is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPattern
parameter_list|()
block|{
return|return
name|this
operator|.
name|pattern
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPatternIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|pattern
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PATTERN
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPattern
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPattern
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|PATTERN
case|:
return|return
name|getPattern
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|PATTERN
case|:
return|return
name|isSetPattern
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_tables_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_tables_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_tables_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_pattern
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPattern
argument_list|()
decl_stmt|;
name|boolean
name|that_present_pattern
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPattern
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_pattern
operator|||
name|that_present_pattern
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_pattern
operator|&&
name|that_present_pattern
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|pattern
operator|.
name|equals
argument_list|(
name|that
operator|.
name|pattern
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_tables_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_tables_args
name|typedOther
init|=
operator|(
name|get_tables_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPattern
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPattern
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPattern
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|pattern
argument_list|,
name|typedOther
operator|.
name|pattern
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// PATTERN
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|pattern
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|pattern
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PATTERN_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|pattern
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_tables_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"pattern:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|pattern
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|pattern
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_tables_result
implements|implements
name|TBase
argument_list|<
name|get_tables_result
argument_list|,
name|get_tables_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_tables_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_tables_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_tables_result
parameter_list|()
block|{     }
specifier|public
name|get_tables_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_tables_result
parameter_list|(
name|get_tables_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_tables_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_tables_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_tables_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_tables_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_tables_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_tables_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_tables_result
name|typedOther
init|=
operator|(
name|get_tables_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list84
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list84
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i85
init|=
literal|0
init|;
name|_i85
operator|<
name|_list84
operator|.
name|size
condition|;
operator|++
name|_i85
control|)
block|{
name|String
name|_elem86
decl_stmt|;
name|_elem86
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem86
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter87
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter87
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_tables_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_all_tables_args
implements|implements
name|TBase
argument_list|<
name|get_all_tables_args
argument_list|,
name|get_all_tables_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_all_tables_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_all_tables_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_all_tables_args
parameter_list|()
block|{     }
specifier|public
name|get_all_tables_args
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_all_tables_args
parameter_list|(
name|get_all_tables_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
block|}
specifier|public
name|get_all_tables_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_all_tables_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_all_tables_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_all_tables_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_all_tables_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_all_tables_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_all_tables_args
name|typedOther
init|=
operator|(
name|get_all_tables_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_all_tables_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_all_tables_result
implements|implements
name|TBase
argument_list|<
name|get_all_tables_result
argument_list|,
name|get_all_tables_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_all_tables_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_all_tables_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_all_tables_result
parameter_list|()
block|{     }
specifier|public
name|get_all_tables_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_all_tables_result
parameter_list|(
name|get_all_tables_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_all_tables_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_all_tables_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_all_tables_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_all_tables_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_all_tables_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_all_tables_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_all_tables_result
name|typedOther
init|=
operator|(
name|get_all_tables_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list88
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list88
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i89
init|=
literal|0
init|;
name|_i89
operator|<
name|_list88
operator|.
name|size
condition|;
operator|++
name|_i89
control|)
block|{
name|String
name|_elem90
decl_stmt|;
name|_elem90
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem90
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter91
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter91
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_all_tables_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_table_args
implements|implements
name|TBase
argument_list|<
name|get_table_args
argument_list|,
name|get_table_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_table_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DBNAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"dbname"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DBNAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"dbname"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DBNAME
return|return
name|DBNAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DBNAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"dbname"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_table_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_table_args
parameter_list|()
block|{     }
specifier|public
name|get_table_args
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_table_args
parameter_list|(
name|get_table_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDbname
argument_list|()
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|other
operator|.
name|dbname
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
block|}
specifier|public
name|get_table_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_table_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
return|;
block|}
specifier|public
name|void
name|setDbname
parameter_list|(
name|String
name|dbname
parameter_list|)
block|{
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbname
parameter_list|()
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field dbname is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDbnameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDbname
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDbname
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
return|return
name|getDbname
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
return|return
name|isSetDbname
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_table_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_table_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_table_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_dbname
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDbname
argument_list|()
decl_stmt|;
name|boolean
name|that_present_dbname
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDbname
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_dbname
operator|||
name|that_present_dbname
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbname
operator|&&
name|that_present_dbname
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbname
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_table_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_table_args
name|typedOther
init|=
operator|(
name|get_table_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDbname
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDbname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDbname
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|dbname
argument_list|,
name|typedOther
operator|.
name|dbname
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DBNAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DBNAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_table_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbname:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_table_result
implements|implements
name|TBase
argument_list|<
name|get_table_result
argument_list|,
name|get_table_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_table_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|Table
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Table
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_table_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_table_result
parameter_list|()
block|{     }
specifier|public
name|get_table_result
parameter_list|(
name|Table
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_table_result
parameter_list|(
name|get_table_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Table
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_table_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_table_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Table
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Table
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|NoSuchObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Table
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_table_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_table_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_table_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_table_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_table_result
name|typedOther
init|=
operator|(
name|get_table_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Table
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_table_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_table_args
implements|implements
name|TBase
argument_list|<
name|alter_table_args
argument_list|,
name|alter_table_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_table_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DBNAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"dbname"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NEW_TBL_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"new_tbl"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|Table
name|new_tbl
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DBNAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"dbname"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|NEW_TBL
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"new_tbl"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DBNAME
return|return
name|DBNAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// NEW_TBL
return|return
name|NEW_TBL
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DBNAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"dbname"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NEW_TBL
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"new_tbl"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Table
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|alter_table_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|alter_table_args
parameter_list|()
block|{     }
specifier|public
name|alter_table_args
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|new_tbl
operator|=
name|new_tbl
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|alter_table_args
parameter_list|(
name|alter_table_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDbname
argument_list|()
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|other
operator|.
name|dbname
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetNew_tbl
argument_list|()
condition|)
block|{
name|this
operator|.
name|new_tbl
operator|=
operator|new
name|Table
argument_list|(
name|other
operator|.
name|new_tbl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|alter_table_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|alter_table_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|new_tbl
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
return|;
block|}
specifier|public
name|void
name|setDbname
parameter_list|(
name|String
name|dbname
parameter_list|)
block|{
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbname
parameter_list|()
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field dbname is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDbnameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|Table
name|getNew_tbl
parameter_list|()
block|{
return|return
name|this
operator|.
name|new_tbl
return|;
block|}
specifier|public
name|void
name|setNew_tbl
parameter_list|(
name|Table
name|new_tbl
parameter_list|)
block|{
name|this
operator|.
name|new_tbl
operator|=
name|new_tbl
expr_stmt|;
block|}
specifier|public
name|void
name|unsetNew_tbl
parameter_list|()
block|{
name|this
operator|.
name|new_tbl
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field new_tbl is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNew_tbl
parameter_list|()
block|{
return|return
name|this
operator|.
name|new_tbl
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNew_tblIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|new_tbl
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDbname
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDbname
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NEW_TBL
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNew_tbl
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNew_tbl
argument_list|(
operator|(
name|Table
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
return|return
name|getDbname
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|NEW_TBL
case|:
return|return
name|getNew_tbl
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
return|return
name|isSetDbname
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|NEW_TBL
case|:
return|return
name|isSetNew_tbl
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_table_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_table_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_table_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_dbname
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDbname
argument_list|()
decl_stmt|;
name|boolean
name|that_present_dbname
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDbname
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_dbname
operator|||
name|that_present_dbname
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbname
operator|&&
name|that_present_dbname
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbname
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_new_tbl
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetNew_tbl
argument_list|()
decl_stmt|;
name|boolean
name|that_present_new_tbl
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetNew_tbl
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_new_tbl
operator|||
name|that_present_new_tbl
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_new_tbl
operator|&&
name|that_present_new_tbl
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|new_tbl
operator|.
name|equals
argument_list|(
name|that
operator|.
name|new_tbl
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|alter_table_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|alter_table_args
name|typedOther
init|=
operator|(
name|alter_table_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDbname
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDbname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDbname
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|dbname
argument_list|,
name|typedOther
operator|.
name|dbname
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNew_tbl
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNew_tbl
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNew_tbl
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|new_tbl
argument_list|,
name|typedOther
operator|.
name|new_tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DBNAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// NEW_TBL
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|new_tbl
operator|=
operator|new
name|Table
argument_list|()
expr_stmt|;
name|this
operator|.
name|new_tbl
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DBNAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|new_tbl
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NEW_TBL_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|new_tbl
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_table_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbname:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"new_tbl:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|new_tbl
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|new_tbl
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_table_result
implements|implements
name|TBase
argument_list|<
name|alter_table_result
argument_list|,
name|alter_table_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_table_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|InvalidOperationException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|alter_table_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|alter_table_result
parameter_list|()
block|{     }
specifier|public
name|alter_table_result
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|alter_table_result
parameter_list|(
name|alter_table_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidOperationException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|alter_table_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|alter_table_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|InvalidOperationException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|InvalidOperationException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_table_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_table_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_table_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|alter_table_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|alter_table_result
name|typedOther
init|=
operator|(
name|alter_table_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidOperationException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_table_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|add_partition_args
implements|implements
name|TBase
argument_list|<
name|add_partition_args
argument_list|,
name|add_partition_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"add_partition_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NEW_PART_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"new_part"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|Partition
name|new_part
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|NEW_PART
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"new_part"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// NEW_PART
return|return
name|NEW_PART
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NEW_PART
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"new_part"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Partition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|add_partition_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|add_partition_args
parameter_list|()
block|{     }
specifier|public
name|add_partition_args
parameter_list|(
name|Partition
name|new_part
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|new_part
operator|=
name|new_part
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|add_partition_args
parameter_list|(
name|add_partition_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetNew_part
argument_list|()
condition|)
block|{
name|this
operator|.
name|new_part
operator|=
operator|new
name|Partition
argument_list|(
name|other
operator|.
name|new_part
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|add_partition_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|add_partition_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|new_part
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Partition
name|getNew_part
parameter_list|()
block|{
return|return
name|this
operator|.
name|new_part
return|;
block|}
specifier|public
name|void
name|setNew_part
parameter_list|(
name|Partition
name|new_part
parameter_list|)
block|{
name|this
operator|.
name|new_part
operator|=
name|new_part
expr_stmt|;
block|}
specifier|public
name|void
name|unsetNew_part
parameter_list|()
block|{
name|this
operator|.
name|new_part
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field new_part is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNew_part
parameter_list|()
block|{
return|return
name|this
operator|.
name|new_part
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNew_partIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|new_part
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NEW_PART
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNew_part
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNew_part
argument_list|(
operator|(
name|Partition
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NEW_PART
case|:
return|return
name|getNew_part
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NEW_PART
case|:
return|return
name|isSetNew_part
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|add_partition_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|add_partition_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|add_partition_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_new_part
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetNew_part
argument_list|()
decl_stmt|;
name|boolean
name|that_present_new_part
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetNew_part
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_new_part
operator|||
name|that_present_new_part
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_new_part
operator|&&
name|that_present_new_part
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|new_part
operator|.
name|equals
argument_list|(
name|that
operator|.
name|new_part
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|add_partition_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|add_partition_args
name|typedOther
init|=
operator|(
name|add_partition_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNew_part
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNew_part
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNew_part
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|new_part
argument_list|,
name|typedOther
operator|.
name|new_part
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// NEW_PART
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|new_part
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|this
operator|.
name|new_part
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|new_part
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NEW_PART_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|new_part
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"add_partition_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"new_part:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|new_part
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|new_part
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|add_partition_result
implements|implements
name|TBase
argument_list|<
name|add_partition_result
argument_list|,
name|add_partition_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"add_partition_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O3_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o3"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|Partition
name|success
decl_stmt|;
specifier|private
name|InvalidObjectException
name|o1
decl_stmt|;
specifier|private
name|AlreadyExistsException
name|o2
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|,
name|O3
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"o3"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
case|case
literal|3
case|:
comment|// O3
return|return
name|O3
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Partition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O3
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o3"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|add_partition_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|add_partition_result
parameter_list|()
block|{     }
specifier|public
name|add_partition_result
parameter_list|(
name|Partition
name|success
parameter_list|,
name|InvalidObjectException
name|o1
parameter_list|,
name|AlreadyExistsException
name|o2
parameter_list|,
name|MetaException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|add_partition_result
parameter_list|(
name|add_partition_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidObjectException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|AlreadyExistsException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|add_partition_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|add_partition_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Partition
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Partition
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|InvalidObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|InvalidObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|AlreadyExistsException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|AlreadyExistsException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o3 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Partition
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|InvalidObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|AlreadyExistsException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO3
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|getO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|isSetO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|add_partition_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|add_partition_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|add_partition_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|add_partition_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|add_partition_result
name|typedOther
init|=
operator|(
name|add_partition_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO3
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO3
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO3
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o3
argument_list|,
name|typedOther
operator|.
name|o3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|AlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// O3
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O3_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"add_partition_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o3:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o3
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|append_partition_args
implements|implements
name|TBase
argument_list|<
name|append_partition_args
argument_list|,
name|append_partition_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"append_partition_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PART_VALS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"part_vals"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|PART_VALS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"part_vals"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// PART_VALS
return|return
name|PART_VALS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PART_VALS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"part_vals"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|append_partition_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|append_partition_args
parameter_list|()
block|{     }
specifier|public
name|append_partition_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|append_partition_args
parameter_list|(
name|append_partition_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPart_vals
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__part_vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|part_vals
control|)
block|{
name|__this__part_vals
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|=
name|__this__part_vals
expr_stmt|;
block|}
block|}
specifier|public
name|append_partition_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|append_partition_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getPart_valsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPart_valsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|part_vals
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToPart_vals
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
return|;
block|}
specifier|public
name|void
name|setPart_vals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_vals
parameter_list|()
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field part_vals is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPart_valsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PART_VALS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPart_vals
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPart_vals
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|PART_VALS
case|:
return|return
name|getPart_vals
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|PART_VALS
case|:
return|return
name|isSetPart_vals
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|append_partition_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|append_partition_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|append_partition_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_part_vals
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPart_vals
argument_list|()
decl_stmt|;
name|boolean
name|that_present_part_vals
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPart_vals
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_part_vals
operator|||
name|that_present_part_vals
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_vals
operator|&&
name|that_present_part_vals
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_vals
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_vals
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|append_partition_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|append_partition_args
name|typedOther
init|=
operator|(
name|append_partition_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPart_vals
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPart_vals
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPart_vals
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|part_vals
argument_list|,
name|typedOther
operator|.
name|part_vals
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// PART_VALS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list92
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list92
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i93
init|=
literal|0
init|;
name|_i93
operator|<
name|_list92
operator|.
name|size
condition|;
operator|++
name|_i93
control|)
block|{
name|String
name|_elem94
decl_stmt|;
name|_elem94
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|_elem94
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|part_vals
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PART_VALS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter95
range|:
name|this
operator|.
name|part_vals
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter95
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"append_partition_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"part_vals:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_vals
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|append_partition_result
implements|implements
name|TBase
argument_list|<
name|append_partition_result
argument_list|,
name|append_partition_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"append_partition_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O3_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o3"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|Partition
name|success
decl_stmt|;
specifier|private
name|InvalidObjectException
name|o1
decl_stmt|;
specifier|private
name|AlreadyExistsException
name|o2
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|,
name|O3
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"o3"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
case|case
literal|3
case|:
comment|// O3
return|return
name|O3
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Partition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O3
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o3"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|append_partition_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|append_partition_result
parameter_list|()
block|{     }
specifier|public
name|append_partition_result
parameter_list|(
name|Partition
name|success
parameter_list|,
name|InvalidObjectException
name|o1
parameter_list|,
name|AlreadyExistsException
name|o2
parameter_list|,
name|MetaException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|append_partition_result
parameter_list|(
name|append_partition_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidObjectException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|AlreadyExistsException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|append_partition_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|append_partition_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Partition
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Partition
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|InvalidObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|InvalidObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|AlreadyExistsException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|AlreadyExistsException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o3 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Partition
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|InvalidObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|AlreadyExistsException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO3
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|getO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|isSetO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|append_partition_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|append_partition_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|append_partition_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|append_partition_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|append_partition_result
name|typedOther
init|=
operator|(
name|append_partition_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO3
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO3
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO3
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o3
argument_list|,
name|typedOther
operator|.
name|o3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|AlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// O3
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O3_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"append_partition_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o3:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o3
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|append_partition_by_name_args
implements|implements
name|TBase
argument_list|<
name|append_partition_by_name_args
argument_list|,
name|append_partition_by_name_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"append_partition_by_name_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PART_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"part_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|String
name|part_name
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|PART_NAME
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"part_name"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// PART_NAME
return|return
name|PART_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PART_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"part_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|append_partition_by_name_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|append_partition_by_name_args
parameter_list|()
block|{     }
specifier|public
name|append_partition_by_name_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|append_partition_by_name_args
parameter_list|(
name|append_partition_by_name_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPart_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
name|other
operator|.
name|part_name
expr_stmt|;
block|}
block|}
specifier|public
name|append_partition_by_name_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|append_partition_by_name_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getPart_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_name
return|;
block|}
specifier|public
name|void
name|setPart_name
parameter_list|(
name|String
name|part_name
parameter_list|)
block|{
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_name
parameter_list|()
block|{
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field part_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPart_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPart_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PART_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPart_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPart_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|PART_NAME
case|:
return|return
name|getPart_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|PART_NAME
case|:
return|return
name|isSetPart_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|append_partition_by_name_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|append_partition_by_name_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|append_partition_by_name_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_part_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPart_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_part_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPart_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_part_name
operator|||
name|that_present_part_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_name
operator|&&
name|that_present_part_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|append_partition_by_name_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|append_partition_by_name_args
name|typedOther
init|=
operator|(
name|append_partition_by_name_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPart_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPart_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPart_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|part_name
argument_list|,
name|typedOther
operator|.
name|part_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// PART_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|part_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PART_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|part_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"append_partition_by_name_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"part_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|part_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|append_partition_by_name_result
implements|implements
name|TBase
argument_list|<
name|append_partition_by_name_result
argument_list|,
name|append_partition_by_name_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"append_partition_by_name_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O3_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o3"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|Partition
name|success
decl_stmt|;
specifier|private
name|InvalidObjectException
name|o1
decl_stmt|;
specifier|private
name|AlreadyExistsException
name|o2
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|,
name|O3
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"o3"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
case|case
literal|3
case|:
comment|// O3
return|return
name|O3
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Partition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O3
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o3"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|append_partition_by_name_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|append_partition_by_name_result
parameter_list|()
block|{     }
specifier|public
name|append_partition_by_name_result
parameter_list|(
name|Partition
name|success
parameter_list|,
name|InvalidObjectException
name|o1
parameter_list|,
name|AlreadyExistsException
name|o2
parameter_list|,
name|MetaException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|append_partition_by_name_result
parameter_list|(
name|append_partition_by_name_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidObjectException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|AlreadyExistsException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|append_partition_by_name_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|append_partition_by_name_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Partition
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Partition
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|InvalidObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|InvalidObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|AlreadyExistsException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|AlreadyExistsException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o3 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Partition
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|InvalidObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|AlreadyExistsException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO3
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|getO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|isSetO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|append_partition_by_name_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|append_partition_by_name_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|append_partition_by_name_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|append_partition_by_name_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|append_partition_by_name_result
name|typedOther
init|=
operator|(
name|append_partition_by_name_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO3
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO3
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO3
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o3
argument_list|,
name|typedOther
operator|.
name|o3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|AlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// O3
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O3_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"append_partition_by_name_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o3:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o3
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_partition_args
implements|implements
name|TBase
argument_list|<
name|drop_partition_args
argument_list|,
name|drop_partition_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_partition_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PART_VALS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"part_vals"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DELETE_DATA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"deleteData"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
specifier|private
name|boolean
name|deleteData
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|PART_VALS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"part_vals"
argument_list|)
block|,
name|DELETE_DATA
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"deleteData"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// PART_VALS
return|return
name|PART_VALS
return|;
case|case
literal|4
case|:
comment|// DELETE_DATA
return|return
name|DELETE_DATA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__DELETEDATA_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PART_VALS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"part_vals"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DELETE_DATA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"deleteData"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|drop_partition_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|drop_partition_args
parameter_list|()
block|{     }
specifier|public
name|drop_partition_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|drop_partition_args
parameter_list|(
name|drop_partition_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPart_vals
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__part_vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|part_vals
control|)
block|{
name|__this__part_vals
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|=
name|__this__part_vals
expr_stmt|;
block|}
name|this
operator|.
name|deleteData
operator|=
name|other
operator|.
name|deleteData
expr_stmt|;
block|}
specifier|public
name|drop_partition_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|drop_partition_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getPart_valsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPart_valsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|part_vals
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToPart_vals
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
return|;
block|}
specifier|public
name|void
name|setPart_vals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_vals
parameter_list|()
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field part_vals is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPart_valsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isDeleteData
parameter_list|()
block|{
return|return
name|this
operator|.
name|deleteData
return|;
block|}
specifier|public
name|void
name|setDeleteData
parameter_list|(
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDeleteData
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field deleteData is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDeleteData
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDeleteDataIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PART_VALS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPart_vals
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPart_vals
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DELETE_DATA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDeleteData
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDeleteData
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|PART_VALS
case|:
return|return
name|getPart_vals
argument_list|()
return|;
case|case
name|DELETE_DATA
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isDeleteData
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|PART_VALS
case|:
return|return
name|isSetPart_vals
argument_list|()
return|;
case|case
name|DELETE_DATA
case|:
return|return
name|isSetDeleteData
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_partition_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_partition_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_partition_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_part_vals
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPart_vals
argument_list|()
decl_stmt|;
name|boolean
name|that_present_part_vals
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPart_vals
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_part_vals
operator|||
name|that_present_part_vals
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_vals
operator|&&
name|that_present_part_vals
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_vals
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_vals
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_deleteData
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_deleteData
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_deleteData
operator|||
name|that_present_deleteData
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_deleteData
operator|&&
name|that_present_deleteData
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|deleteData
operator|!=
name|that
operator|.
name|deleteData
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|drop_partition_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|drop_partition_args
name|typedOther
init|=
operator|(
name|drop_partition_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPart_vals
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPart_vals
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPart_vals
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|part_vals
argument_list|,
name|typedOther
operator|.
name|part_vals
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDeleteData
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDeleteData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDeleteData
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|deleteData
argument_list|,
name|typedOther
operator|.
name|deleteData
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// PART_VALS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list96
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list96
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i97
init|=
literal|0
init|;
name|_i97
operator|<
name|_list96
operator|.
name|size
condition|;
operator|++
name|_i97
control|)
block|{
name|String
name|_elem98
decl_stmt|;
name|_elem98
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|_elem98
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// DELETE_DATA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|part_vals
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PART_VALS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter99
range|:
name|this
operator|.
name|part_vals
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter99
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DELETE_DATA_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_partition_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"part_vals:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_vals
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"deleteData:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_partition_result
implements|implements
name|TBase
argument_list|<
name|drop_partition_result
argument_list|,
name|drop_partition_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_partition_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|drop_partition_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|drop_partition_result
parameter_list|()
block|{     }
specifier|public
name|drop_partition_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|NoSuchObjectException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|drop_partition_result
parameter_list|(
name|drop_partition_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|drop_partition_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|drop_partition_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NoSuchObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isSuccess
argument_list|()
argument_list|)
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_partition_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_partition_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_partition_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|drop_partition_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|drop_partition_result
name|typedOther
init|=
operator|(
name|drop_partition_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_partition_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_partition_by_name_args
implements|implements
name|TBase
argument_list|<
name|drop_partition_by_name_args
argument_list|,
name|drop_partition_by_name_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_partition_by_name_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PART_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"part_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DELETE_DATA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"deleteData"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|String
name|part_name
decl_stmt|;
specifier|private
name|boolean
name|deleteData
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|PART_NAME
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"part_name"
argument_list|)
block|,
name|DELETE_DATA
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"deleteData"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// PART_NAME
return|return
name|PART_NAME
return|;
case|case
literal|4
case|:
comment|// DELETE_DATA
return|return
name|DELETE_DATA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__DELETEDATA_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PART_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"part_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DELETE_DATA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"deleteData"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|drop_partition_by_name_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|drop_partition_by_name_args
parameter_list|()
block|{     }
specifier|public
name|drop_partition_by_name_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|drop_partition_by_name_args
parameter_list|(
name|drop_partition_by_name_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPart_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
name|other
operator|.
name|part_name
expr_stmt|;
block|}
name|this
operator|.
name|deleteData
operator|=
name|other
operator|.
name|deleteData
expr_stmt|;
block|}
specifier|public
name|drop_partition_by_name_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|drop_partition_by_name_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getPart_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_name
return|;
block|}
specifier|public
name|void
name|setPart_name
parameter_list|(
name|String
name|part_name
parameter_list|)
block|{
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_name
parameter_list|()
block|{
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field part_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPart_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPart_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isDeleteData
parameter_list|()
block|{
return|return
name|this
operator|.
name|deleteData
return|;
block|}
specifier|public
name|void
name|setDeleteData
parameter_list|(
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDeleteData
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field deleteData is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDeleteData
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDeleteDataIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PART_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPart_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPart_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DELETE_DATA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDeleteData
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDeleteData
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|PART_NAME
case|:
return|return
name|getPart_name
argument_list|()
return|;
case|case
name|DELETE_DATA
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isDeleteData
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|PART_NAME
case|:
return|return
name|isSetPart_name
argument_list|()
return|;
case|case
name|DELETE_DATA
case|:
return|return
name|isSetDeleteData
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_partition_by_name_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_partition_by_name_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_partition_by_name_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_part_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPart_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_part_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPart_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_part_name
operator|||
name|that_present_part_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_name
operator|&&
name|that_present_part_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_deleteData
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_deleteData
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_deleteData
operator|||
name|that_present_deleteData
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_deleteData
operator|&&
name|that_present_deleteData
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|deleteData
operator|!=
name|that
operator|.
name|deleteData
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|drop_partition_by_name_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|drop_partition_by_name_args
name|typedOther
init|=
operator|(
name|drop_partition_by_name_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPart_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPart_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPart_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|part_name
argument_list|,
name|typedOther
operator|.
name|part_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDeleteData
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDeleteData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDeleteData
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|deleteData
argument_list|,
name|typedOther
operator|.
name|deleteData
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// PART_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// DELETE_DATA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|part_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PART_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|part_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DELETE_DATA_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_partition_by_name_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"part_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|part_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"deleteData:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_partition_by_name_result
implements|implements
name|TBase
argument_list|<
name|drop_partition_by_name_result
argument_list|,
name|drop_partition_by_name_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_partition_by_name_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|drop_partition_by_name_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|drop_partition_by_name_result
parameter_list|()
block|{     }
specifier|public
name|drop_partition_by_name_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|NoSuchObjectException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|drop_partition_by_name_result
parameter_list|(
name|drop_partition_by_name_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|drop_partition_by_name_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|drop_partition_by_name_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NoSuchObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isSuccess
argument_list|()
argument_list|)
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_partition_by_name_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_partition_by_name_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_partition_by_name_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|drop_partition_by_name_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|drop_partition_by_name_result
name|typedOther
init|=
operator|(
name|drop_partition_by_name_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_partition_by_name_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partition_args
implements|implements
name|TBase
argument_list|<
name|get_partition_args
argument_list|,
name|get_partition_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partition_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PART_VALS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"part_vals"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|PART_VALS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"part_vals"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// PART_VALS
return|return
name|PART_VALS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PART_VALS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"part_vals"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partition_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partition_args
parameter_list|()
block|{     }
specifier|public
name|get_partition_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partition_args
parameter_list|(
name|get_partition_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPart_vals
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__part_vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|part_vals
control|)
block|{
name|__this__part_vals
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|=
name|__this__part_vals
expr_stmt|;
block|}
block|}
specifier|public
name|get_partition_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partition_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getPart_valsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPart_valsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|part_vals
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToPart_vals
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
return|;
block|}
specifier|public
name|void
name|setPart_vals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_vals
parameter_list|()
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field part_vals is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPart_valsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PART_VALS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPart_vals
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPart_vals
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|PART_VALS
case|:
return|return
name|getPart_vals
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|PART_VALS
case|:
return|return
name|isSetPart_vals
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partition_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partition_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partition_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_part_vals
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPart_vals
argument_list|()
decl_stmt|;
name|boolean
name|that_present_part_vals
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPart_vals
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_part_vals
operator|||
name|that_present_part_vals
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_vals
operator|&&
name|that_present_part_vals
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_vals
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_vals
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partition_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partition_args
name|typedOther
init|=
operator|(
name|get_partition_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPart_vals
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPart_vals
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPart_vals
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|part_vals
argument_list|,
name|typedOther
operator|.
name|part_vals
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// PART_VALS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list100
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list100
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i101
init|=
literal|0
init|;
name|_i101
operator|<
name|_list100
operator|.
name|size
condition|;
operator|++
name|_i101
control|)
block|{
name|String
name|_elem102
decl_stmt|;
name|_elem102
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|_elem102
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|part_vals
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PART_VALS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter103
range|:
name|this
operator|.
name|part_vals
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter103
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partition_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"part_vals:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_vals
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partition_result
implements|implements
name|TBase
argument_list|<
name|get_partition_result
argument_list|,
name|get_partition_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partition_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|Partition
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Partition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partition_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partition_result
parameter_list|()
block|{     }
specifier|public
name|get_partition_result
parameter_list|(
name|Partition
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partition_result
parameter_list|(
name|get_partition_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_partition_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partition_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Partition
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Partition
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|NoSuchObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Partition
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partition_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partition_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partition_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partition_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partition_result
name|typedOther
init|=
operator|(
name|get_partition_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partition_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partition_by_name_args
implements|implements
name|TBase
argument_list|<
name|get_partition_by_name_args
argument_list|,
name|get_partition_by_name_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partition_by_name_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PART_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"part_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|String
name|part_name
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|PART_NAME
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"part_name"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// PART_NAME
return|return
name|PART_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PART_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"part_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partition_by_name_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partition_by_name_args
parameter_list|()
block|{     }
specifier|public
name|get_partition_by_name_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partition_by_name_args
parameter_list|(
name|get_partition_by_name_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPart_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
name|other
operator|.
name|part_name
expr_stmt|;
block|}
block|}
specifier|public
name|get_partition_by_name_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partition_by_name_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getPart_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_name
return|;
block|}
specifier|public
name|void
name|setPart_name
parameter_list|(
name|String
name|part_name
parameter_list|)
block|{
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_name
parameter_list|()
block|{
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field part_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPart_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPart_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PART_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPart_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPart_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|PART_NAME
case|:
return|return
name|getPart_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|PART_NAME
case|:
return|return
name|isSetPart_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partition_by_name_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partition_by_name_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partition_by_name_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_part_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPart_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_part_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPart_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_part_name
operator|||
name|that_present_part_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_name
operator|&&
name|that_present_part_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partition_by_name_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partition_by_name_args
name|typedOther
init|=
operator|(
name|get_partition_by_name_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPart_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPart_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPart_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|part_name
argument_list|,
name|typedOther
operator|.
name|part_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// PART_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|part_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PART_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|part_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partition_by_name_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"part_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|part_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partition_by_name_result
implements|implements
name|TBase
argument_list|<
name|get_partition_by_name_result
argument_list|,
name|get_partition_by_name_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partition_by_name_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|Partition
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Partition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partition_by_name_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partition_by_name_result
parameter_list|()
block|{     }
specifier|public
name|get_partition_by_name_result
parameter_list|(
name|Partition
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partition_by_name_result
parameter_list|(
name|get_partition_by_name_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_partition_by_name_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partition_by_name_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Partition
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Partition
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|NoSuchObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Partition
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partition_by_name_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partition_by_name_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partition_by_name_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partition_by_name_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partition_by_name_result
name|typedOther
init|=
operator|(
name|get_partition_by_name_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partition_by_name_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partitions_args
implements|implements
name|TBase
argument_list|<
name|get_partitions_args
argument_list|,
name|get_partitions_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partitions_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|MAX_PARTS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"max_parts"
argument_list|,
name|TType
operator|.
name|I16
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|short
name|max_parts
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|MAX_PARTS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"max_parts"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// MAX_PARTS
return|return
name|MAX_PARTS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__MAX_PARTS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MAX_PARTS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"max_parts"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partitions_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partitions_args
parameter_list|()
block|{
name|this
operator|.
name|max_parts
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|get_partitions_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partitions_args
parameter_list|(
name|get_partitions_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
name|this
operator|.
name|max_parts
operator|=
name|other
operator|.
name|max_parts
expr_stmt|;
block|}
specifier|public
name|get_partitions_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partitions_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|short
name|getMax_parts
parameter_list|()
block|{
return|return
name|this
operator|.
name|max_parts
return|;
block|}
specifier|public
name|void
name|setMax_parts
parameter_list|(
name|short
name|max_parts
parameter_list|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMax_parts
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field max_parts is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMax_parts
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMax_partsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX_PARTS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMax_parts
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMax_parts
argument_list|(
operator|(
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|MAX_PARTS
case|:
return|return
operator|new
name|Short
argument_list|(
name|getMax_parts
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|MAX_PARTS
case|:
return|return
name|isSetMax_parts
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partitions_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partitions_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partitions_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_max_parts
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_max_parts
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_max_parts
operator|||
name|that_present_max_parts
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_max_parts
operator|&&
name|that_present_max_parts
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|max_parts
operator|!=
name|that
operator|.
name|max_parts
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partitions_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partitions_args
name|typedOther
init|=
operator|(
name|get_partitions_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMax_parts
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetMax_parts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMax_parts
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|max_parts
argument_list|,
name|typedOther
operator|.
name|max_parts
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// MAX_PARTS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I16
condition|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MAX_PARTS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI16
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partitions_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"max_parts:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partitions_result
implements|implements
name|TBase
argument_list|<
name|get_partitions_result
argument_list|,
name|get_partitions_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partitions_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|success
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Partition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partitions_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partitions_result
parameter_list|()
block|{     }
specifier|public
name|get_partitions_result
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|success
parameter_list|,
name|NoSuchObjectException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partitions_result
parameter_list|(
name|get_partitions_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|Partition
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_partitions_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partitions_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|Partition
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|NoSuchObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|Partition
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partitions_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partitions_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partitions_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partitions_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partitions_result
name|typedOther
init|=
operator|(
name|get_partitions_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list104
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|_list104
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i105
init|=
literal|0
init|;
name|_i105
operator|<
name|_list104
operator|.
name|size
condition|;
operator|++
name|_i105
control|)
block|{
name|Partition
name|_elem106
decl_stmt|;
name|_elem106
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|_elem106
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem106
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|_iter107
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter107
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partitions_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partition_names_args
implements|implements
name|TBase
argument_list|<
name|get_partition_names_args
argument_list|,
name|get_partition_names_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partition_names_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|MAX_PARTS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"max_parts"
argument_list|,
name|TType
operator|.
name|I16
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|short
name|max_parts
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|MAX_PARTS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"max_parts"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// MAX_PARTS
return|return
name|MAX_PARTS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__MAX_PARTS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MAX_PARTS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"max_parts"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partition_names_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partition_names_args
parameter_list|()
block|{
name|this
operator|.
name|max_parts
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|get_partition_names_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partition_names_args
parameter_list|(
name|get_partition_names_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
name|this
operator|.
name|max_parts
operator|=
name|other
operator|.
name|max_parts
expr_stmt|;
block|}
specifier|public
name|get_partition_names_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partition_names_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|short
name|getMax_parts
parameter_list|()
block|{
return|return
name|this
operator|.
name|max_parts
return|;
block|}
specifier|public
name|void
name|setMax_parts
parameter_list|(
name|short
name|max_parts
parameter_list|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMax_parts
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field max_parts is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMax_parts
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMax_partsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX_PARTS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMax_parts
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMax_parts
argument_list|(
operator|(
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|MAX_PARTS
case|:
return|return
operator|new
name|Short
argument_list|(
name|getMax_parts
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|MAX_PARTS
case|:
return|return
name|isSetMax_parts
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partition_names_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partition_names_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partition_names_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_max_parts
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_max_parts
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_max_parts
operator|||
name|that_present_max_parts
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_max_parts
operator|&&
name|that_present_max_parts
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|max_parts
operator|!=
name|that
operator|.
name|max_parts
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partition_names_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partition_names_args
name|typedOther
init|=
operator|(
name|get_partition_names_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMax_parts
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetMax_parts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMax_parts
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|max_parts
argument_list|,
name|typedOther
operator|.
name|max_parts
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// MAX_PARTS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I16
condition|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MAX_PARTS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI16
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partition_names_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"max_parts:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partition_names_result
implements|implements
name|TBase
argument_list|<
name|get_partition_names_result
argument_list|,
name|get_partition_names_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partition_names_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partition_names_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partition_names_result
parameter_list|()
block|{     }
specifier|public
name|get_partition_names_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partition_names_result
parameter_list|(
name|get_partition_names_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_partition_names_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partition_names_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partition_names_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partition_names_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partition_names_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partition_names_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partition_names_result
name|typedOther
init|=
operator|(
name|get_partition_names_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list108
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list108
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i109
init|=
literal|0
init|;
name|_i109
operator|<
name|_list108
operator|.
name|size
condition|;
operator|++
name|_i109
control|)
block|{
name|String
name|_elem110
decl_stmt|;
name|_elem110
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem110
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter111
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter111
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partition_names_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partitions_ps_args
implements|implements
name|TBase
argument_list|<
name|get_partitions_ps_args
argument_list|,
name|get_partitions_ps_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partitions_ps_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PART_VALS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"part_vals"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|MAX_PARTS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"max_parts"
argument_list|,
name|TType
operator|.
name|I16
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
specifier|private
name|short
name|max_parts
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|PART_VALS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"part_vals"
argument_list|)
block|,
name|MAX_PARTS
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"max_parts"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// PART_VALS
return|return
name|PART_VALS
return|;
case|case
literal|4
case|:
comment|// MAX_PARTS
return|return
name|MAX_PARTS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__MAX_PARTS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PART_VALS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"part_vals"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MAX_PARTS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"max_parts"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partitions_ps_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partitions_ps_args
parameter_list|()
block|{
name|this
operator|.
name|max_parts
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|get_partitions_ps_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partitions_ps_args
parameter_list|(
name|get_partitions_ps_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPart_vals
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__part_vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|part_vals
control|)
block|{
name|__this__part_vals
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|=
name|__this__part_vals
expr_stmt|;
block|}
name|this
operator|.
name|max_parts
operator|=
name|other
operator|.
name|max_parts
expr_stmt|;
block|}
specifier|public
name|get_partitions_ps_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partitions_ps_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getPart_valsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPart_valsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|part_vals
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToPart_vals
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
return|;
block|}
specifier|public
name|void
name|setPart_vals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_vals
parameter_list|()
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field part_vals is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPart_valsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|short
name|getMax_parts
parameter_list|()
block|{
return|return
name|this
operator|.
name|max_parts
return|;
block|}
specifier|public
name|void
name|setMax_parts
parameter_list|(
name|short
name|max_parts
parameter_list|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMax_parts
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field max_parts is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMax_parts
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMax_partsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PART_VALS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPart_vals
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPart_vals
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX_PARTS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMax_parts
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMax_parts
argument_list|(
operator|(
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|PART_VALS
case|:
return|return
name|getPart_vals
argument_list|()
return|;
case|case
name|MAX_PARTS
case|:
return|return
operator|new
name|Short
argument_list|(
name|getMax_parts
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|PART_VALS
case|:
return|return
name|isSetPart_vals
argument_list|()
return|;
case|case
name|MAX_PARTS
case|:
return|return
name|isSetMax_parts
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partitions_ps_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partitions_ps_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partitions_ps_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_part_vals
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPart_vals
argument_list|()
decl_stmt|;
name|boolean
name|that_present_part_vals
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPart_vals
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_part_vals
operator|||
name|that_present_part_vals
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_vals
operator|&&
name|that_present_part_vals
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_vals
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_vals
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_max_parts
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_max_parts
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_max_parts
operator|||
name|that_present_max_parts
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_max_parts
operator|&&
name|that_present_max_parts
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|max_parts
operator|!=
name|that
operator|.
name|max_parts
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partitions_ps_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partitions_ps_args
name|typedOther
init|=
operator|(
name|get_partitions_ps_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPart_vals
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPart_vals
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPart_vals
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|part_vals
argument_list|,
name|typedOther
operator|.
name|part_vals
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMax_parts
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetMax_parts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMax_parts
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|max_parts
argument_list|,
name|typedOther
operator|.
name|max_parts
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// PART_VALS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list112
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list112
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i113
init|=
literal|0
init|;
name|_i113
operator|<
name|_list112
operator|.
name|size
condition|;
operator|++
name|_i113
control|)
block|{
name|String
name|_elem114
decl_stmt|;
name|_elem114
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|_elem114
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// MAX_PARTS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I16
condition|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|part_vals
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PART_VALS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter115
range|:
name|this
operator|.
name|part_vals
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter115
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MAX_PARTS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI16
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partitions_ps_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"part_vals:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_vals
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"max_parts:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partitions_ps_result
implements|implements
name|TBase
argument_list|<
name|get_partitions_ps_result
argument_list|,
name|get_partitions_ps_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partitions_ps_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Partition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partitions_ps_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partitions_ps_result
parameter_list|()
block|{     }
specifier|public
name|get_partitions_ps_result
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partitions_ps_result
parameter_list|(
name|get_partitions_ps_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|Partition
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_partitions_ps_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partitions_ps_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|Partition
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|Partition
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partitions_ps_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partitions_ps_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partitions_ps_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partitions_ps_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partitions_ps_result
name|typedOther
init|=
operator|(
name|get_partitions_ps_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list116
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|_list116
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i117
init|=
literal|0
init|;
name|_i117
operator|<
name|_list116
operator|.
name|size
condition|;
operator|++
name|_i117
control|)
block|{
name|Partition
name|_elem118
decl_stmt|;
name|_elem118
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|_elem118
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem118
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|_iter119
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter119
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partitions_ps_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partition_names_ps_args
implements|implements
name|TBase
argument_list|<
name|get_partition_names_ps_args
argument_list|,
name|get_partition_names_ps_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partition_names_ps_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PART_VALS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"part_vals"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|MAX_PARTS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"max_parts"
argument_list|,
name|TType
operator|.
name|I16
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
decl_stmt|;
specifier|private
name|short
name|max_parts
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|PART_VALS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"part_vals"
argument_list|)
block|,
name|MAX_PARTS
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"max_parts"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// PART_VALS
return|return
name|PART_VALS
return|;
case|case
literal|4
case|:
comment|// MAX_PARTS
return|return
name|MAX_PARTS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__MAX_PARTS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PART_VALS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"part_vals"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MAX_PARTS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"max_parts"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partition_names_ps_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partition_names_ps_args
parameter_list|()
block|{
name|this
operator|.
name|max_parts
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|get_partition_names_ps_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partition_names_ps_args
parameter_list|(
name|get_partition_names_ps_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPart_vals
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__part_vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|part_vals
control|)
block|{
name|__this__part_vals
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|=
name|__this__part_vals
expr_stmt|;
block|}
name|this
operator|.
name|max_parts
operator|=
name|other
operator|.
name|max_parts
expr_stmt|;
block|}
specifier|public
name|get_partition_names_ps_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partition_names_ps_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getPart_valsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getPart_valsIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|part_vals
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|part_vals
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToPart_vals
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
return|;
block|}
specifier|public
name|void
name|setPart_vals
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|this
operator|.
name|part_vals
operator|=
name|part_vals
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_vals
parameter_list|()
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field part_vals is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPart_vals
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_vals
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPart_valsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|part_vals
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|short
name|getMax_parts
parameter_list|()
block|{
return|return
name|this
operator|.
name|max_parts
return|;
block|}
specifier|public
name|void
name|setMax_parts
parameter_list|(
name|short
name|max_parts
parameter_list|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMax_parts
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field max_parts is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMax_parts
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMax_partsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PART_VALS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPart_vals
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPart_vals
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX_PARTS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMax_parts
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMax_parts
argument_list|(
operator|(
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|PART_VALS
case|:
return|return
name|getPart_vals
argument_list|()
return|;
case|case
name|MAX_PARTS
case|:
return|return
operator|new
name|Short
argument_list|(
name|getMax_parts
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|PART_VALS
case|:
return|return
name|isSetPart_vals
argument_list|()
return|;
case|case
name|MAX_PARTS
case|:
return|return
name|isSetMax_parts
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partition_names_ps_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partition_names_ps_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partition_names_ps_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_part_vals
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPart_vals
argument_list|()
decl_stmt|;
name|boolean
name|that_present_part_vals
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPart_vals
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_part_vals
operator|||
name|that_present_part_vals
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_vals
operator|&&
name|that_present_part_vals
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_vals
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_vals
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_max_parts
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_max_parts
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_max_parts
operator|||
name|that_present_max_parts
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_max_parts
operator|&&
name|that_present_max_parts
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|max_parts
operator|!=
name|that
operator|.
name|max_parts
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partition_names_ps_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partition_names_ps_args
name|typedOther
init|=
operator|(
name|get_partition_names_ps_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPart_vals
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPart_vals
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPart_vals
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|part_vals
argument_list|,
name|typedOther
operator|.
name|part_vals
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMax_parts
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetMax_parts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMax_parts
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|max_parts
argument_list|,
name|typedOther
operator|.
name|max_parts
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// PART_VALS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list120
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|part_vals
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list120
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i121
init|=
literal|0
init|;
name|_i121
operator|<
name|_list120
operator|.
name|size
condition|;
operator|++
name|_i121
control|)
block|{
name|String
name|_elem122
decl_stmt|;
name|_elem122
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|part_vals
operator|.
name|add
argument_list|(
name|_elem122
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// MAX_PARTS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I16
condition|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|part_vals
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PART_VALS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|part_vals
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter123
range|:
name|this
operator|.
name|part_vals
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter123
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MAX_PARTS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI16
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partition_names_ps_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"part_vals:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|part_vals
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_vals
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"max_parts:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partition_names_ps_result
implements|implements
name|TBase
argument_list|<
name|get_partition_names_ps_result
argument_list|,
name|get_partition_names_ps_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partition_names_ps_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partition_names_ps_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partition_names_ps_result
parameter_list|()
block|{     }
specifier|public
name|get_partition_names_ps_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partition_names_ps_result
parameter_list|(
name|get_partition_names_ps_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_partition_names_ps_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partition_names_ps_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partition_names_ps_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partition_names_ps_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partition_names_ps_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partition_names_ps_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partition_names_ps_result
name|typedOther
init|=
operator|(
name|get_partition_names_ps_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list124
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list124
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i125
init|=
literal|0
init|;
name|_i125
operator|<
name|_list124
operator|.
name|size
condition|;
operator|++
name|_i125
control|)
block|{
name|String
name|_elem126
decl_stmt|;
name|_elem126
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem126
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter127
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter127
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partition_names_ps_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partitions_by_filter_args
implements|implements
name|TBase
argument_list|<
name|get_partitions_by_filter_args
argument_list|,
name|get_partitions_by_filter_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partitions_by_filter_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|FILTER_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"filter"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|MAX_PARTS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"max_parts"
argument_list|,
name|TType
operator|.
name|I16
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|String
name|filter
decl_stmt|;
specifier|private
name|short
name|max_parts
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|FILTER
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"filter"
argument_list|)
block|,
name|MAX_PARTS
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"max_parts"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// FILTER
return|return
name|FILTER
return|;
case|case
literal|4
case|:
comment|// MAX_PARTS
return|return
name|MAX_PARTS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__MAX_PARTS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|FILTER
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"filter"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MAX_PARTS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"max_parts"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partitions_by_filter_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partitions_by_filter_args
parameter_list|()
block|{
name|this
operator|.
name|max_parts
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|get_partitions_by_filter_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partitions_by_filter_args
parameter_list|(
name|get_partitions_by_filter_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetFilter
argument_list|()
condition|)
block|{
name|this
operator|.
name|filter
operator|=
name|other
operator|.
name|filter
expr_stmt|;
block|}
name|this
operator|.
name|max_parts
operator|=
name|other
operator|.
name|max_parts
expr_stmt|;
block|}
specifier|public
name|get_partitions_by_filter_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partitions_by_filter_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|filter
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|max_parts
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getFilter
parameter_list|()
block|{
return|return
name|this
operator|.
name|filter
return|;
block|}
specifier|public
name|void
name|setFilter
parameter_list|(
name|String
name|filter
parameter_list|)
block|{
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
block|}
specifier|public
name|void
name|unsetFilter
parameter_list|()
block|{
name|this
operator|.
name|filter
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field filter is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetFilter
parameter_list|()
block|{
return|return
name|this
operator|.
name|filter
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setFilterIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|filter
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|short
name|getMax_parts
parameter_list|()
block|{
return|return
name|this
operator|.
name|max_parts
return|;
block|}
specifier|public
name|void
name|setMax_parts
parameter_list|(
name|short
name|max_parts
parameter_list|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|max_parts
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMax_parts
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field max_parts is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMax_parts
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMax_partsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__MAX_PARTS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|FILTER
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetFilter
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setFilter
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX_PARTS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMax_parts
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMax_parts
argument_list|(
operator|(
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|FILTER
case|:
return|return
name|getFilter
argument_list|()
return|;
case|case
name|MAX_PARTS
case|:
return|return
operator|new
name|Short
argument_list|(
name|getMax_parts
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|FILTER
case|:
return|return
name|isSetFilter
argument_list|()
return|;
case|case
name|MAX_PARTS
case|:
return|return
name|isSetMax_parts
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partitions_by_filter_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partitions_by_filter_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partitions_by_filter_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_filter
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetFilter
argument_list|()
decl_stmt|;
name|boolean
name|that_present_filter
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_filter
operator|||
name|that_present_filter
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_filter
operator|&&
name|that_present_filter
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|filter
operator|.
name|equals
argument_list|(
name|that
operator|.
name|filter
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_max_parts
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_max_parts
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_max_parts
operator|||
name|that_present_max_parts
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_max_parts
operator|&&
name|that_present_max_parts
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|max_parts
operator|!=
name|that
operator|.
name|max_parts
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partitions_by_filter_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partitions_by_filter_args
name|typedOther
init|=
operator|(
name|get_partitions_by_filter_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetFilter
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetFilter
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetFilter
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|filter
argument_list|,
name|typedOther
operator|.
name|filter
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMax_parts
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetMax_parts
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMax_parts
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|max_parts
argument_list|,
name|typedOther
operator|.
name|max_parts
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// FILTER
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|filter
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// MAX_PARTS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I16
condition|)
block|{
name|this
operator|.
name|max_parts
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|setMax_partsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|filter
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|FILTER_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|filter
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MAX_PARTS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI16
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partitions_by_filter_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"filter:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|filter
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|filter
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"max_parts:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|max_parts
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_partitions_by_filter_result
implements|implements
name|TBase
argument_list|<
name|get_partitions_by_filter_result
argument_list|,
name|get_partitions_by_filter_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_partitions_by_filter_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Partition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_partitions_by_filter_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_partitions_by_filter_result
parameter_list|()
block|{     }
specifier|public
name|get_partitions_by_filter_result
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_partitions_by_filter_result
parameter_list|(
name|get_partitions_by_filter_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|Partition
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_partitions_by_filter_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_partitions_by_filter_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|Partition
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|NoSuchObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|Partition
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_partitions_by_filter_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_partitions_by_filter_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_partitions_by_filter_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_partitions_by_filter_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_partitions_by_filter_result
name|typedOther
init|=
operator|(
name|get_partitions_by_filter_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list128
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|_list128
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i129
init|=
literal|0
init|;
name|_i129
operator|<
name|_list128
operator|.
name|size
condition|;
operator|++
name|_i129
control|)
block|{
name|Partition
name|_elem130
decl_stmt|;
name|_elem130
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|_elem130
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem130
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|_iter131
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter131
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_partitions_by_filter_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_partition_args
implements|implements
name|TBase
argument_list|<
name|alter_partition_args
argument_list|,
name|alter_partition_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_partition_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NEW_PART_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"new_part"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|Partition
name|new_part
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|NEW_PART
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"new_part"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// NEW_PART
return|return
name|NEW_PART
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NEW_PART
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"new_part"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Partition
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|alter_partition_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|alter_partition_args
parameter_list|()
block|{     }
specifier|public
name|alter_partition_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Partition
name|new_part
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|new_part
operator|=
name|new_part
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|alter_partition_args
parameter_list|(
name|alter_partition_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetNew_part
argument_list|()
condition|)
block|{
name|this
operator|.
name|new_part
operator|=
operator|new
name|Partition
argument_list|(
name|other
operator|.
name|new_part
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|alter_partition_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|alter_partition_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|new_part
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|Partition
name|getNew_part
parameter_list|()
block|{
return|return
name|this
operator|.
name|new_part
return|;
block|}
specifier|public
name|void
name|setNew_part
parameter_list|(
name|Partition
name|new_part
parameter_list|)
block|{
name|this
operator|.
name|new_part
operator|=
name|new_part
expr_stmt|;
block|}
specifier|public
name|void
name|unsetNew_part
parameter_list|()
block|{
name|this
operator|.
name|new_part
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field new_part is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNew_part
parameter_list|()
block|{
return|return
name|this
operator|.
name|new_part
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNew_partIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|new_part
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NEW_PART
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNew_part
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNew_part
argument_list|(
operator|(
name|Partition
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|NEW_PART
case|:
return|return
name|getNew_part
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|NEW_PART
case|:
return|return
name|isSetNew_part
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_partition_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_partition_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_partition_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_new_part
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetNew_part
argument_list|()
decl_stmt|;
name|boolean
name|that_present_new_part
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetNew_part
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_new_part
operator|||
name|that_present_new_part
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_new_part
operator|&&
name|that_present_new_part
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|new_part
operator|.
name|equals
argument_list|(
name|that
operator|.
name|new_part
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|alter_partition_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|alter_partition_args
name|typedOther
init|=
operator|(
name|alter_partition_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNew_part
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNew_part
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNew_part
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|new_part
argument_list|,
name|typedOther
operator|.
name|new_part
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// NEW_PART
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|new_part
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|this
operator|.
name|new_part
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|new_part
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NEW_PART_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|new_part
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_partition_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"new_part:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|new_part
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|new_part
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_partition_result
implements|implements
name|TBase
argument_list|<
name|alter_partition_result
argument_list|,
name|alter_partition_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_partition_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|InvalidOperationException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|alter_partition_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|alter_partition_result
parameter_list|()
block|{     }
specifier|public
name|alter_partition_result
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|alter_partition_result
parameter_list|(
name|alter_partition_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidOperationException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|alter_partition_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|alter_partition_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|InvalidOperationException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|InvalidOperationException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_partition_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_partition_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_partition_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|alter_partition_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|alter_partition_result
name|typedOther
init|=
operator|(
name|alter_partition_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidOperationException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_partition_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_config_value_args
implements|implements
name|TBase
argument_list|<
name|get_config_value_args
argument_list|,
name|get_config_value_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_config_value_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DEFAULT_VALUE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"defaultValue"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|String
name|defaultValue
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"name"
argument_list|)
block|,
name|DEFAULT_VALUE
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"defaultValue"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// NAME
return|return
name|NAME
return|;
case|case
literal|2
case|:
comment|// DEFAULT_VALUE
return|return
name|DEFAULT_VALUE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DEFAULT_VALUE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"defaultValue"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_config_value_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_config_value_args
parameter_list|()
block|{     }
specifier|public
name|get_config_value_args
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_config_value_args
parameter_list|(
name|get_config_value_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetName
argument_list|()
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|other
operator|.
name|name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetDefaultValue
argument_list|()
condition|)
block|{
name|this
operator|.
name|defaultValue
operator|=
name|other
operator|.
name|defaultValue
expr_stmt|;
block|}
block|}
specifier|public
name|get_config_value_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_config_value_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|defaultValue
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
return|;
block|}
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetName
parameter_list|()
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetName
parameter_list|()
block|{
return|return
name|this
operator|.
name|name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDefaultValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultValue
return|;
block|}
specifier|public
name|void
name|setDefaultValue
parameter_list|(
name|String
name|defaultValue
parameter_list|)
block|{
name|this
operator|.
name|defaultValue
operator|=
name|defaultValue
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDefaultValue
parameter_list|()
block|{
name|this
operator|.
name|defaultValue
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field defaultValue is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDefaultValue
parameter_list|()
block|{
return|return
name|this
operator|.
name|defaultValue
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDefaultValueIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|defaultValue
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setName
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DEFAULT_VALUE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDefaultValue
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDefaultValue
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|getName
argument_list|()
return|;
case|case
name|DEFAULT_VALUE
case|:
return|return
name|getDefaultValue
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NAME
case|:
return|return
name|isSetName
argument_list|()
return|;
case|case
name|DEFAULT_VALUE
case|:
return|return
name|isSetDefaultValue
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_config_value_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_config_value_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_config_value_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetName
argument_list|()
decl_stmt|;
name|boolean
name|that_present_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetName
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_name
operator|||
name|that_present_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_name
operator|&&
name|that_present_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_defaultValue
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDefaultValue
argument_list|()
decl_stmt|;
name|boolean
name|that_present_defaultValue
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDefaultValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_defaultValue
operator|||
name|that_present_defaultValue
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_defaultValue
operator|&&
name|that_present_defaultValue
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|defaultValue
operator|.
name|equals
argument_list|(
name|that
operator|.
name|defaultValue
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_config_value_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_config_value_args
name|typedOther
init|=
operator|(
name|get_config_value_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetName
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetName
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|name
argument_list|,
name|typedOther
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDefaultValue
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDefaultValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDefaultValue
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|defaultValue
argument_list|,
name|typedOther
operator|.
name|defaultValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// DEFAULT_VALUE
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|defaultValue
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|defaultValue
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DEFAULT_VALUE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|defaultValue
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_config_value_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"defaultValue:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|defaultValue
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|defaultValue
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_config_value_result
implements|implements
name|TBase
argument_list|<
name|get_config_value_result
argument_list|,
name|get_config_value_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_config_value_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|String
name|success
decl_stmt|;
specifier|private
name|ConfigValSecurityException
name|o1
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_config_value_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_config_value_result
parameter_list|()
block|{     }
specifier|public
name|get_config_value_result
parameter_list|(
name|String
name|success
parameter_list|,
name|ConfigValSecurityException
name|o1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_config_value_result
parameter_list|(
name|get_config_value_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|ConfigValSecurityException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_config_value_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_config_value_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|String
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|ConfigValSecurityException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|ConfigValSecurityException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|ConfigValSecurityException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_config_value_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_config_value_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_config_value_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_config_value_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_config_value_result
name|typedOther
init|=
operator|(
name|get_config_value_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|ConfigValSecurityException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_config_value_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|partition_name_to_vals_args
implements|implements
name|TBase
argument_list|<
name|partition_name_to_vals_args
argument_list|,
name|partition_name_to_vals_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"partition_name_to_vals_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PART_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"part_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|String
name|part_name
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|PART_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"part_name"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// PART_NAME
return|return
name|PART_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PART_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"part_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|partition_name_to_vals_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|partition_name_to_vals_args
parameter_list|()
block|{     }
specifier|public
name|partition_name_to_vals_args
parameter_list|(
name|String
name|part_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|partition_name_to_vals_args
parameter_list|(
name|partition_name_to_vals_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetPart_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
name|other
operator|.
name|part_name
expr_stmt|;
block|}
block|}
specifier|public
name|partition_name_to_vals_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|partition_name_to_vals_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getPart_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_name
return|;
block|}
specifier|public
name|void
name|setPart_name
parameter_list|(
name|String
name|part_name
parameter_list|)
block|{
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_name
parameter_list|()
block|{
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field part_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPart_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPart_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|PART_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPart_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPart_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|PART_NAME
case|:
return|return
name|getPart_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|PART_NAME
case|:
return|return
name|isSetPart_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|partition_name_to_vals_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|partition_name_to_vals_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|partition_name_to_vals_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_part_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPart_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_part_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPart_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_part_name
operator|||
name|that_present_part_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_name
operator|&&
name|that_present_part_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|partition_name_to_vals_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|partition_name_to_vals_args
name|typedOther
init|=
operator|(
name|partition_name_to_vals_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPart_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPart_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPart_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|part_name
argument_list|,
name|typedOther
operator|.
name|part_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// PART_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|part_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PART_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|part_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"partition_name_to_vals_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"part_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|part_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|partition_name_to_vals_result
implements|implements
name|TBase
argument_list|<
name|partition_name_to_vals_result
argument_list|,
name|partition_name_to_vals_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"partition_name_to_vals_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|partition_name_to_vals_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|partition_name_to_vals_result
parameter_list|()
block|{     }
specifier|public
name|partition_name_to_vals_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|partition_name_to_vals_result
parameter_list|(
name|partition_name_to_vals_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|partition_name_to_vals_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|partition_name_to_vals_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|partition_name_to_vals_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|partition_name_to_vals_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|partition_name_to_vals_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|partition_name_to_vals_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|partition_name_to_vals_result
name|typedOther
init|=
operator|(
name|partition_name_to_vals_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list132
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list132
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i133
init|=
literal|0
init|;
name|_i133
operator|<
name|_list132
operator|.
name|size
condition|;
operator|++
name|_i133
control|)
block|{
name|String
name|_elem134
decl_stmt|;
name|_elem134
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem134
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter135
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter135
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"partition_name_to_vals_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|partition_name_to_spec_args
implements|implements
name|TBase
argument_list|<
name|partition_name_to_spec_args
argument_list|,
name|partition_name_to_spec_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"partition_name_to_spec_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|PART_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"part_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|String
name|part_name
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|PART_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"part_name"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// PART_NAME
return|return
name|PART_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PART_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"part_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|partition_name_to_spec_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|partition_name_to_spec_args
parameter_list|()
block|{     }
specifier|public
name|partition_name_to_spec_args
parameter_list|(
name|String
name|part_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|partition_name_to_spec_args
parameter_list|(
name|partition_name_to_spec_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetPart_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
name|other
operator|.
name|part_name
expr_stmt|;
block|}
block|}
specifier|public
name|partition_name_to_spec_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|partition_name_to_spec_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getPart_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_name
return|;
block|}
specifier|public
name|void
name|setPart_name
parameter_list|(
name|String
name|part_name
parameter_list|)
block|{
name|this
operator|.
name|part_name
operator|=
name|part_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPart_name
parameter_list|()
block|{
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field part_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPart_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|part_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPart_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|PART_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPart_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPart_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|PART_NAME
case|:
return|return
name|getPart_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|PART_NAME
case|:
return|return
name|isSetPart_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|partition_name_to_spec_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|partition_name_to_spec_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|partition_name_to_spec_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_part_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPart_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_part_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPart_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_part_name
operator|||
name|that_present_part_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_part_name
operator|&&
name|that_present_part_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|part_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|part_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|partition_name_to_spec_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|partition_name_to_spec_args
name|typedOther
init|=
operator|(
name|partition_name_to_spec_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPart_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetPart_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPart_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|part_name
argument_list|,
name|typedOther
operator|.
name|part_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// PART_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|part_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|part_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PART_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|part_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"partition_name_to_spec_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"part_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|part_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|part_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|partition_name_to_spec_result
implements|implements
name|TBase
argument_list|<
name|partition_name_to_spec_result
argument_list|,
name|partition_name_to_spec_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"partition_name_to_spec_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|MapMetaData
argument_list|(
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|partition_name_to_spec_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|partition_name_to_spec_result
parameter_list|()
block|{     }
specifier|public
name|partition_name_to_spec_result
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|partition_name_to_spec_result
parameter_list|(
name|partition_name_to_spec_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|__this__success
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|other_element
range|:
name|other
operator|.
name|success
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|__this__success_copy_key
init|=
name|other_element_key
decl_stmt|;
name|String
name|__this__success_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__success
operator|.
name|put
argument_list|(
name|__this__success_copy_key
argument_list|,
name|__this__success_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|partition_name_to_spec_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|partition_name_to_spec_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToSuccess
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|partition_name_to_spec_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|partition_name_to_spec_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|partition_name_to_spec_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|partition_name_to_spec_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|partition_name_to_spec_result
name|typedOther
init|=
operator|(
name|partition_name_to_spec_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|TMap
name|_map136
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map136
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i137
init|=
literal|0
init|;
name|_i137
operator|<
name|_map136
operator|.
name|size
condition|;
operator|++
name|_i137
control|)
block|{
name|String
name|_key138
decl_stmt|;
name|String
name|_val139
decl_stmt|;
name|_key138
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_val139
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|put
argument_list|(
name|_key138
argument_list|,
name|_val139
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|TMap
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|_iter140
range|:
name|this
operator|.
name|success
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter140
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter140
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"partition_name_to_spec_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|add_index_args
implements|implements
name|TBase
argument_list|<
name|add_index_args
argument_list|,
name|add_index_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"add_index_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NEW_INDEX_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"new_index"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|INDEX_TABLE_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"index_table"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|Index
name|new_index
decl_stmt|;
specifier|private
name|Table
name|index_table
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|NEW_INDEX
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"new_index"
argument_list|)
block|,
name|INDEX_TABLE
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"index_table"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// NEW_INDEX
return|return
name|NEW_INDEX
return|;
case|case
literal|2
case|:
comment|// INDEX_TABLE
return|return
name|INDEX_TABLE
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NEW_INDEX
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"new_index"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Index
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|INDEX_TABLE
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"index_table"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Table
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|add_index_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|add_index_args
parameter_list|()
block|{     }
specifier|public
name|add_index_args
parameter_list|(
name|Index
name|new_index
parameter_list|,
name|Table
name|index_table
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|new_index
operator|=
name|new_index
expr_stmt|;
name|this
operator|.
name|index_table
operator|=
name|index_table
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|add_index_args
parameter_list|(
name|add_index_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetNew_index
argument_list|()
condition|)
block|{
name|this
operator|.
name|new_index
operator|=
operator|new
name|Index
argument_list|(
name|other
operator|.
name|new_index
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIndex_table
argument_list|()
condition|)
block|{
name|this
operator|.
name|index_table
operator|=
operator|new
name|Table
argument_list|(
name|other
operator|.
name|index_table
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|add_index_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|add_index_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|new_index
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|index_table
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Index
name|getNew_index
parameter_list|()
block|{
return|return
name|this
operator|.
name|new_index
return|;
block|}
specifier|public
name|void
name|setNew_index
parameter_list|(
name|Index
name|new_index
parameter_list|)
block|{
name|this
operator|.
name|new_index
operator|=
name|new_index
expr_stmt|;
block|}
specifier|public
name|void
name|unsetNew_index
parameter_list|()
block|{
name|this
operator|.
name|new_index
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field new_index is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNew_index
parameter_list|()
block|{
return|return
name|this
operator|.
name|new_index
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNew_indexIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|new_index
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|Table
name|getIndex_table
parameter_list|()
block|{
return|return
name|this
operator|.
name|index_table
return|;
block|}
specifier|public
name|void
name|setIndex_table
parameter_list|(
name|Table
name|index_table
parameter_list|)
block|{
name|this
operator|.
name|index_table
operator|=
name|index_table
expr_stmt|;
block|}
specifier|public
name|void
name|unsetIndex_table
parameter_list|()
block|{
name|this
operator|.
name|index_table
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field index_table is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIndex_table
parameter_list|()
block|{
return|return
name|this
operator|.
name|index_table
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIndex_tableIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|index_table
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NEW_INDEX
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNew_index
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNew_index
argument_list|(
operator|(
name|Index
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INDEX_TABLE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIndex_table
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIndex_table
argument_list|(
operator|(
name|Table
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NEW_INDEX
case|:
return|return
name|getNew_index
argument_list|()
return|;
case|case
name|INDEX_TABLE
case|:
return|return
name|getIndex_table
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|NEW_INDEX
case|:
return|return
name|isSetNew_index
argument_list|()
return|;
case|case
name|INDEX_TABLE
case|:
return|return
name|isSetIndex_table
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|add_index_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|add_index_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|add_index_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_new_index
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetNew_index
argument_list|()
decl_stmt|;
name|boolean
name|that_present_new_index
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetNew_index
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_new_index
operator|||
name|that_present_new_index
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_new_index
operator|&&
name|that_present_new_index
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|new_index
operator|.
name|equals
argument_list|(
name|that
operator|.
name|new_index
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_index_table
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIndex_table
argument_list|()
decl_stmt|;
name|boolean
name|that_present_index_table
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIndex_table
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_index_table
operator|||
name|that_present_index_table
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_index_table
operator|&&
name|that_present_index_table
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|index_table
operator|.
name|equals
argument_list|(
name|that
operator|.
name|index_table
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|add_index_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|add_index_args
name|typedOther
init|=
operator|(
name|add_index_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNew_index
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNew_index
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNew_index
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|new_index
argument_list|,
name|typedOther
operator|.
name|new_index
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIndex_table
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIndex_table
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIndex_table
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|index_table
argument_list|,
name|typedOther
operator|.
name|index_table
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// NEW_INDEX
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|new_index
operator|=
operator|new
name|Index
argument_list|()
expr_stmt|;
name|this
operator|.
name|new_index
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// INDEX_TABLE
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|index_table
operator|=
operator|new
name|Table
argument_list|()
expr_stmt|;
name|this
operator|.
name|index_table
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|new_index
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NEW_INDEX_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|new_index
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|index_table
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|INDEX_TABLE_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|index_table
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"add_index_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"new_index:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|new_index
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|new_index
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"index_table:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|index_table
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|index_table
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|add_index_result
implements|implements
name|TBase
argument_list|<
name|add_index_result
argument_list|,
name|add_index_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"add_index_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O3_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o3"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|Index
name|success
decl_stmt|;
specifier|private
name|InvalidObjectException
name|o1
decl_stmt|;
specifier|private
name|AlreadyExistsException
name|o2
decl_stmt|;
specifier|private
name|MetaException
name|o3
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|,
name|O3
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"o3"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
case|case
literal|3
case|:
comment|// O3
return|return
name|O3
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Index
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O3
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o3"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|add_index_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|add_index_result
parameter_list|()
block|{     }
specifier|public
name|add_index_result
parameter_list|(
name|Index
name|success
parameter_list|,
name|InvalidObjectException
name|o1
parameter_list|,
name|AlreadyExistsException
name|o2
parameter_list|,
name|MetaException
name|o3
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|add_index_result
parameter_list|(
name|add_index_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Index
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidObjectException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|AlreadyExistsException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|add_index_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|add_index_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Index
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Index
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|InvalidObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|InvalidObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|AlreadyExistsException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|AlreadyExistsException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
return|;
block|}
specifier|public
name|void
name|setO3
parameter_list|(
name|MetaException
name|o3
parameter_list|)
block|{
name|this
operator|.
name|o3
operator|=
name|o3
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO3
parameter_list|()
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o3 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO3
parameter_list|()
block|{
return|return
name|this
operator|.
name|o3
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO3IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o3
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Index
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|InvalidObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|AlreadyExistsException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O3
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO3
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO3
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|getO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
case|case
name|O3
case|:
return|return
name|isSetO3
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|add_index_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|add_index_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|add_index_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o3
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o3
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO3
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o3
operator|||
name|that_present_o3
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o3
operator|&&
name|that_present_o3
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o3
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o3
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|add_index_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|add_index_result
name|typedOther
init|=
operator|(
name|add_index_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO3
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO3
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO3
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o3
argument_list|,
name|typedOther
operator|.
name|o3
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Index
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|AlreadyExistsException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// O3
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o3
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO3
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O3_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o3
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"add_index_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o3:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o3
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o3
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_index_args
implements|implements
name|TBase
argument_list|<
name|alter_index_args
argument_list|,
name|alter_index_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_index_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DBNAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"dbname"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|BASE_TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"base_tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|IDX_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"idx_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|NEW_IDX_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"new_idx"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
name|String
name|dbname
decl_stmt|;
specifier|private
name|String
name|base_tbl_name
decl_stmt|;
specifier|private
name|String
name|idx_name
decl_stmt|;
specifier|private
name|Index
name|new_idx
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DBNAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"dbname"
argument_list|)
block|,
name|BASE_TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"base_tbl_name"
argument_list|)
block|,
name|IDX_NAME
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"idx_name"
argument_list|)
block|,
name|NEW_IDX
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"new_idx"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DBNAME
return|return
name|DBNAME
return|;
case|case
literal|2
case|:
comment|// BASE_TBL_NAME
return|return
name|BASE_TBL_NAME
return|;
case|case
literal|3
case|:
comment|// IDX_NAME
return|return
name|IDX_NAME
return|;
case|case
literal|4
case|:
comment|// NEW_IDX
return|return
name|NEW_IDX
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DBNAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"dbname"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|BASE_TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"base_tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|IDX_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"idx_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|NEW_IDX
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"new_idx"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Index
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|alter_index_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|alter_index_args
parameter_list|()
block|{     }
specifier|public
name|alter_index_args
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|base_tbl_name
parameter_list|,
name|String
name|idx_name
parameter_list|,
name|Index
name|new_idx
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|base_tbl_name
operator|=
name|base_tbl_name
expr_stmt|;
name|this
operator|.
name|idx_name
operator|=
name|idx_name
expr_stmt|;
name|this
operator|.
name|new_idx
operator|=
name|new_idx
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|alter_index_args
parameter_list|(
name|alter_index_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDbname
argument_list|()
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|other
operator|.
name|dbname
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetBase_tbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|base_tbl_name
operator|=
name|other
operator|.
name|base_tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIdx_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|idx_name
operator|=
name|other
operator|.
name|idx_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetNew_idx
argument_list|()
condition|)
block|{
name|this
operator|.
name|new_idx
operator|=
operator|new
name|Index
argument_list|(
name|other
operator|.
name|new_idx
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|alter_index_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|alter_index_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|base_tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|idx_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|new_idx
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
return|;
block|}
specifier|public
name|void
name|setDbname
parameter_list|(
name|String
name|dbname
parameter_list|)
block|{
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbname
parameter_list|()
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field dbname is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDbnameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getBase_tbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|base_tbl_name
return|;
block|}
specifier|public
name|void
name|setBase_tbl_name
parameter_list|(
name|String
name|base_tbl_name
parameter_list|)
block|{
name|this
operator|.
name|base_tbl_name
operator|=
name|base_tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetBase_tbl_name
parameter_list|()
block|{
name|this
operator|.
name|base_tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field base_tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetBase_tbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|base_tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setBase_tbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|base_tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getIdx_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|idx_name
return|;
block|}
specifier|public
name|void
name|setIdx_name
parameter_list|(
name|String
name|idx_name
parameter_list|)
block|{
name|this
operator|.
name|idx_name
operator|=
name|idx_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetIdx_name
parameter_list|()
block|{
name|this
operator|.
name|idx_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field idx_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIdx_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|idx_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIdx_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|idx_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|Index
name|getNew_idx
parameter_list|()
block|{
return|return
name|this
operator|.
name|new_idx
return|;
block|}
specifier|public
name|void
name|setNew_idx
parameter_list|(
name|Index
name|new_idx
parameter_list|)
block|{
name|this
operator|.
name|new_idx
operator|=
name|new_idx
expr_stmt|;
block|}
specifier|public
name|void
name|unsetNew_idx
parameter_list|()
block|{
name|this
operator|.
name|new_idx
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field new_idx is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetNew_idx
parameter_list|()
block|{
return|return
name|this
operator|.
name|new_idx
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setNew_idxIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|new_idx
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDbname
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDbname
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BASE_TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBase_tbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBase_tbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|IDX_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIdx_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIdx_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|NEW_IDX
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetNew_idx
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setNew_idx
argument_list|(
operator|(
name|Index
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
return|return
name|getDbname
argument_list|()
return|;
case|case
name|BASE_TBL_NAME
case|:
return|return
name|getBase_tbl_name
argument_list|()
return|;
case|case
name|IDX_NAME
case|:
return|return
name|getIdx_name
argument_list|()
return|;
case|case
name|NEW_IDX
case|:
return|return
name|getNew_idx
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DBNAME
case|:
return|return
name|isSetDbname
argument_list|()
return|;
case|case
name|BASE_TBL_NAME
case|:
return|return
name|isSetBase_tbl_name
argument_list|()
return|;
case|case
name|IDX_NAME
case|:
return|return
name|isSetIdx_name
argument_list|()
return|;
case|case
name|NEW_IDX
case|:
return|return
name|isSetNew_idx
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_index_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_index_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_index_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_dbname
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDbname
argument_list|()
decl_stmt|;
name|boolean
name|that_present_dbname
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDbname
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_dbname
operator|||
name|that_present_dbname
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbname
operator|&&
name|that_present_dbname
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbname
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_base_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetBase_tbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_base_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetBase_tbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_base_tbl_name
operator|||
name|that_present_base_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_base_tbl_name
operator|&&
name|that_present_base_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|base_tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|base_tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_idx_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIdx_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_idx_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIdx_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_idx_name
operator|||
name|that_present_idx_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_idx_name
operator|&&
name|that_present_idx_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|idx_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|idx_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_new_idx
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetNew_idx
argument_list|()
decl_stmt|;
name|boolean
name|that_present_new_idx
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetNew_idx
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_new_idx
operator|||
name|that_present_new_idx
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_new_idx
operator|&&
name|that_present_new_idx
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|new_idx
operator|.
name|equals
argument_list|(
name|that
operator|.
name|new_idx
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|alter_index_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|alter_index_args
name|typedOther
init|=
operator|(
name|alter_index_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDbname
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDbname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDbname
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|dbname
argument_list|,
name|typedOther
operator|.
name|dbname
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBase_tbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetBase_tbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetBase_tbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|base_tbl_name
argument_list|,
name|typedOther
operator|.
name|base_tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIdx_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIdx_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIdx_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|idx_name
argument_list|,
name|typedOther
operator|.
name|idx_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetNew_idx
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetNew_idx
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetNew_idx
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|new_idx
argument_list|,
name|typedOther
operator|.
name|new_idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DBNAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// BASE_TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|base_tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// IDX_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|idx_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// NEW_IDX
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|new_idx
operator|=
operator|new
name|Index
argument_list|()
expr_stmt|;
name|this
operator|.
name|new_idx
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DBNAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|base_tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BASE_TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|base_tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|idx_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|IDX_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|idx_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|new_idx
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|NEW_IDX_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|new_idx
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_index_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbname:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"base_tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|base_tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|base_tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"idx_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|idx_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|idx_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"new_idx:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|new_idx
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|new_idx
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|alter_index_result
implements|implements
name|TBase
argument_list|<
name|alter_index_result
argument_list|,
name|alter_index_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"alter_index_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|InvalidOperationException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|alter_index_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|alter_index_result
parameter_list|()
block|{     }
specifier|public
name|alter_index_result
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|alter_index_result
parameter_list|(
name|alter_index_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidOperationException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|alter_index_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|alter_index_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|InvalidOperationException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|InvalidOperationException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|InvalidOperationException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|alter_index_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|alter_index_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|alter_index_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|alter_index_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|alter_index_result
name|typedOther
init|=
operator|(
name|alter_index_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|InvalidOperationException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"alter_index_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_index_by_name_args
implements|implements
name|TBase
argument_list|<
name|drop_index_by_name_args
argument_list|,
name|drop_index_by_name_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_index_by_name_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|INDEX_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"index_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DELETE_DATA_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"deleteData"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|String
name|index_name
decl_stmt|;
specifier|private
name|boolean
name|deleteData
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|INDEX_NAME
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"index_name"
argument_list|)
block|,
name|DELETE_DATA
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"deleteData"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// INDEX_NAME
return|return
name|INDEX_NAME
return|;
case|case
literal|4
case|:
comment|// DELETE_DATA
return|return
name|DELETE_DATA
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__DELETEDATA_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|INDEX_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"index_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DELETE_DATA
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"deleteData"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|drop_index_by_name_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|drop_index_by_name_args
parameter_list|()
block|{     }
specifier|public
name|drop_index_by_name_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|index_name
operator|=
name|index_name
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|drop_index_by_name_args
parameter_list|(
name|drop_index_by_name_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIndex_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|index_name
operator|=
name|other
operator|.
name|index_name
expr_stmt|;
block|}
name|this
operator|.
name|deleteData
operator|=
name|other
operator|.
name|deleteData
expr_stmt|;
block|}
specifier|public
name|drop_index_by_name_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|drop_index_by_name_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|index_name
operator|=
literal|null
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|deleteData
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getIndex_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|index_name
return|;
block|}
specifier|public
name|void
name|setIndex_name
parameter_list|(
name|String
name|index_name
parameter_list|)
block|{
name|this
operator|.
name|index_name
operator|=
name|index_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetIndex_name
parameter_list|()
block|{
name|this
operator|.
name|index_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field index_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIndex_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|index_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIndex_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|index_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isDeleteData
parameter_list|()
block|{
return|return
name|this
operator|.
name|deleteData
return|;
block|}
specifier|public
name|void
name|setDeleteData
parameter_list|(
name|boolean
name|deleteData
parameter_list|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|deleteData
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDeleteData
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field deleteData is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDeleteData
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setDeleteDataIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__DELETEDATA_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INDEX_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIndex_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIndex_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DELETE_DATA
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDeleteData
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDeleteData
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|INDEX_NAME
case|:
return|return
name|getIndex_name
argument_list|()
return|;
case|case
name|DELETE_DATA
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isDeleteData
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|INDEX_NAME
case|:
return|return
name|isSetIndex_name
argument_list|()
return|;
case|case
name|DELETE_DATA
case|:
return|return
name|isSetDeleteData
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_index_by_name_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_index_by_name_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_index_by_name_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_index_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIndex_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_index_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIndex_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_index_name
operator|||
name|that_present_index_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_index_name
operator|&&
name|that_present_index_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|index_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|index_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_deleteData
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_deleteData
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_deleteData
operator|||
name|that_present_deleteData
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_deleteData
operator|&&
name|that_present_deleteData
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|deleteData
operator|!=
name|that
operator|.
name|deleteData
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|drop_index_by_name_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|drop_index_by_name_args
name|typedOther
init|=
operator|(
name|drop_index_by_name_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIndex_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIndex_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIndex_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|index_name
argument_list|,
name|typedOther
operator|.
name|index_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDeleteData
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDeleteData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDeleteData
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|deleteData
argument_list|,
name|typedOther
operator|.
name|deleteData
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// INDEX_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|index_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// DELETE_DATA
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|deleteData
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setDeleteDataIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|index_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|INDEX_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|index_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DELETE_DATA_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_index_by_name_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"index_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|index_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|index_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"deleteData:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|drop_index_by_name_result
implements|implements
name|TBase
argument_list|<
name|drop_index_by_name_result
argument_list|,
name|drop_index_by_name_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"drop_index_by_name_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|BOOL
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|success
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__SUCCESS_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|BOOL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|drop_index_by_name_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|drop_index_by_name_result
parameter_list|()
block|{     }
specifier|public
name|drop_index_by_name_result
parameter_list|(
name|boolean
name|success
parameter_list|,
name|NoSuchObjectException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|drop_index_by_name_result
parameter_list|(
name|drop_index_by_name_result
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|other
operator|.
name|success
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|drop_index_by_name_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|drop_index_by_name_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setSuccessIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|boolean
name|isSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|boolean
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__SUCCESS_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NoSuchObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Boolean
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
operator|new
name|Boolean
argument_list|(
name|isSuccess
argument_list|()
argument_list|)
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|drop_index_by_name_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|drop_index_by_name_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|drop_index_by_name_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|success
operator|!=
name|that
operator|.
name|success
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|drop_index_by_name_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|drop_index_by_name_result
name|typedOther
init|=
operator|(
name|drop_index_by_name_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|BOOL
condition|)
block|{
name|this
operator|.
name|success
operator|=
name|iprot
operator|.
name|readBool
argument_list|()
expr_stmt|;
name|setSuccessIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeBool
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"drop_index_by_name_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_index_by_name_args
implements|implements
name|TBase
argument_list|<
name|get_index_by_name_args
argument_list|,
name|get_index_by_name_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_index_by_name_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|INDEX_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"index_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|String
name|index_name
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|INDEX_NAME
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"index_name"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// INDEX_NAME
return|return
name|INDEX_NAME
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|INDEX_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"index_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_index_by_name_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_index_by_name_args
parameter_list|()
block|{     }
specifier|public
name|get_index_by_name_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|index_name
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|index_name
operator|=
name|index_name
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_index_by_name_args
parameter_list|(
name|get_index_by_name_args
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetIndex_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|index_name
operator|=
name|other
operator|.
name|index_name
expr_stmt|;
block|}
block|}
specifier|public
name|get_index_by_name_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_index_by_name_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|index_name
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getIndex_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|index_name
return|;
block|}
specifier|public
name|void
name|setIndex_name
parameter_list|(
name|String
name|index_name
parameter_list|)
block|{
name|this
operator|.
name|index_name
operator|=
name|index_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetIndex_name
parameter_list|()
block|{
name|this
operator|.
name|index_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field index_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetIndex_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|index_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setIndex_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|index_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|INDEX_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetIndex_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setIndex_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|INDEX_NAME
case|:
return|return
name|getIndex_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|INDEX_NAME
case|:
return|return
name|isSetIndex_name
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_index_by_name_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_index_by_name_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_index_by_name_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_index_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetIndex_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_index_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetIndex_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_index_name
operator|||
name|that_present_index_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_index_name
operator|&&
name|that_present_index_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|index_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|index_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_index_by_name_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_index_by_name_args
name|typedOther
init|=
operator|(
name|get_index_by_name_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetIndex_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetIndex_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetIndex_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|index_name
argument_list|,
name|typedOther
operator|.
name|index_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// INDEX_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|index_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|index_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|INDEX_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|index_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_index_by_name_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"index_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|index_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|index_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_index_by_name_result
implements|implements
name|TBase
argument_list|<
name|get_index_by_name_result
argument_list|,
name|get_index_by_name_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_index_by_name_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|Index
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o1
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Index
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_index_by_name_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_index_by_name_result
parameter_list|()
block|{     }
specifier|public
name|get_index_by_name_result
parameter_list|(
name|Index
name|success
parameter_list|,
name|MetaException
name|o1
parameter_list|,
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_index_by_name_result
parameter_list|(
name|get_index_by_name_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Index
argument_list|(
name|other
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_index_by_name_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_index_by_name_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|Index
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|Index
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|MetaException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|NoSuchObjectException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|NoSuchObjectException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|Index
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_index_by_name_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_index_by_name_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_index_by_name_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_index_by_name_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_index_by_name_result
name|typedOther
init|=
operator|(
name|get_index_by_name_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|Index
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_index_by_name_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_indexes_args
implements|implements
name|TBase
argument_list|<
name|get_indexes_args
argument_list|,
name|get_indexes_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_indexes_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|MAX_INDEXES_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"max_indexes"
argument_list|,
name|TType
operator|.
name|I16
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|short
name|max_indexes
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|MAX_INDEXES
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"max_indexes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// MAX_INDEXES
return|return
name|MAX_INDEXES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__MAX_INDEXES_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MAX_INDEXES
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"max_indexes"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_indexes_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_indexes_args
parameter_list|()
block|{
name|this
operator|.
name|max_indexes
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|get_indexes_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|max_indexes
operator|=
name|max_indexes
expr_stmt|;
name|setMax_indexesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_indexes_args
parameter_list|(
name|get_indexes_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
name|this
operator|.
name|max_indexes
operator|=
name|other
operator|.
name|max_indexes
expr_stmt|;
block|}
specifier|public
name|get_indexes_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_indexes_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|max_indexes
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|short
name|getMax_indexes
parameter_list|()
block|{
return|return
name|this
operator|.
name|max_indexes
return|;
block|}
specifier|public
name|void
name|setMax_indexes
parameter_list|(
name|short
name|max_indexes
parameter_list|)
block|{
name|this
operator|.
name|max_indexes
operator|=
name|max_indexes
expr_stmt|;
name|setMax_indexesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMax_indexes
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__MAX_INDEXES_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field max_indexes is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMax_indexes
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__MAX_INDEXES_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMax_indexesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__MAX_INDEXES_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX_INDEXES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMax_indexes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMax_indexes
argument_list|(
operator|(
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|MAX_INDEXES
case|:
return|return
operator|new
name|Short
argument_list|(
name|getMax_indexes
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|MAX_INDEXES
case|:
return|return
name|isSetMax_indexes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_indexes_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_indexes_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_indexes_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_max_indexes
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_max_indexes
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_max_indexes
operator|||
name|that_present_max_indexes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_max_indexes
operator|&&
name|that_present_max_indexes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|max_indexes
operator|!=
name|that
operator|.
name|max_indexes
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_indexes_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_indexes_args
name|typedOther
init|=
operator|(
name|get_indexes_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMax_indexes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetMax_indexes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMax_indexes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|max_indexes
argument_list|,
name|typedOther
operator|.
name|max_indexes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// MAX_INDEXES
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I16
condition|)
block|{
name|this
operator|.
name|max_indexes
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|setMax_indexesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MAX_INDEXES_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI16
argument_list|(
name|this
operator|.
name|max_indexes
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_indexes_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"max_indexes:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|max_indexes
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_indexes_result
implements|implements
name|TBase
argument_list|<
name|get_indexes_result
argument_list|,
name|get_indexes_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_indexes_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O1_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o1"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Index
argument_list|>
name|success
decl_stmt|;
specifier|private
name|NoSuchObjectException
name|o1
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O1
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o1"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O1
return|return
name|O1
return|;
case|case
literal|2
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|StructMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|Index
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O1
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o1"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_indexes_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_indexes_result
parameter_list|()
block|{     }
specifier|public
name|get_indexes_result
parameter_list|(
name|List
argument_list|<
name|Index
argument_list|>
name|success
parameter_list|,
name|NoSuchObjectException
name|o1
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_indexes_result
parameter_list|(
name|get_indexes_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|Index
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|Index
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Index
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
operator|new
name|Index
argument_list|(
name|other_element
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|(
name|other
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_indexes_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_indexes_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|Index
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|Index
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|Index
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|Index
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|NoSuchObjectException
name|getO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
return|;
block|}
specifier|public
name|void
name|setO1
parameter_list|(
name|NoSuchObjectException
name|o1
parameter_list|)
block|{
name|this
operator|.
name|o1
operator|=
name|o1
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO1
parameter_list|()
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o1 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO1
parameter_list|()
block|{
return|return
name|this
operator|.
name|o1
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO1IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o1
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|Index
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O1
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO1
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO1
argument_list|(
operator|(
name|NoSuchObjectException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|getO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O1
case|:
return|return
name|isSetO1
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_indexes_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_indexes_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_indexes_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o1
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o1
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO1
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o1
operator|||
name|that_present_o1
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o1
operator|&&
name|that_present_o1
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o1
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o1
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_indexes_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_indexes_result
name|typedOther
init|=
operator|(
name|get_indexes_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO1
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO1
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO1
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o1
argument_list|,
name|typedOther
operator|.
name|o1
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list141
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|Index
argument_list|>
argument_list|(
name|_list141
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i142
init|=
literal|0
init|;
name|_i142
operator|<
name|_list141
operator|.
name|size
condition|;
operator|++
name|_i142
control|)
block|{
name|Index
name|_elem143
decl_stmt|;
name|_elem143
operator|=
operator|new
name|Index
argument_list|()
expr_stmt|;
name|_elem143
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem143
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O1
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o1
operator|=
operator|new
name|NoSuchObjectException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Index
name|_iter144
range|:
name|this
operator|.
name|success
control|)
block|{
name|_iter144
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO1
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O1_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o1
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_indexes_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o1:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o1
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o1
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_index_names_args
implements|implements
name|TBase
argument_list|<
name|get_index_names_args
argument_list|,
name|get_index_names_args
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_index_names_args"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|DB_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"db_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|TBL_NAME_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"tbl_name"
argument_list|,
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|MAX_INDEXES_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"max_indexes"
argument_list|,
name|TType
operator|.
name|I16
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
name|String
name|db_name
decl_stmt|;
specifier|private
name|String
name|tbl_name
decl_stmt|;
specifier|private
name|short
name|max_indexes
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|DB_NAME
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"db_name"
argument_list|)
block|,
name|TBL_NAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"tbl_name"
argument_list|)
block|,
name|MAX_INDEXES
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"max_indexes"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
return|return
name|DB_NAME
return|;
case|case
literal|2
case|:
comment|// TBL_NAME
return|return
name|TBL_NAME
return|;
case|case
literal|3
case|:
comment|// MAX_INDEXES
return|return
name|MAX_INDEXES
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__MAX_INDEXES_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
name|BitSet
name|__isset_bit_vector
init|=
operator|new
name|BitSet
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DB_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"db_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TBL_NAME
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"tbl_name"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|MAX_INDEXES
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"max_indexes"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|I16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_index_names_args
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_index_names_args
parameter_list|()
block|{
name|this
operator|.
name|max_indexes
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|get_index_names_args
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_indexes
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
name|this
operator|.
name|max_indexes
operator|=
name|max_indexes
expr_stmt|;
name|setMax_indexesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_index_names_args
parameter_list|(
name|get_index_names_args
name|other
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|()
expr_stmt|;
name|__isset_bit_vector
operator|.
name|or
argument_list|(
name|other
operator|.
name|__isset_bit_vector
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDb_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|other
operator|.
name|db_name
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|other
operator|.
name|tbl_name
expr_stmt|;
block|}
name|this
operator|.
name|max_indexes
operator|=
name|other
operator|.
name|max_indexes
expr_stmt|;
block|}
specifier|public
name|get_index_names_args
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_index_names_args
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|max_indexes
operator|=
operator|(
name|short
operator|)
operator|-
literal|1
expr_stmt|;
block|}
specifier|public
name|String
name|getDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
return|;
block|}
specifier|public
name|void
name|setDb_name
parameter_list|(
name|String
name|db_name
parameter_list|)
block|{
name|this
operator|.
name|db_name
operator|=
name|db_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDb_name
parameter_list|()
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field db_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDb_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|db_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDb_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
return|;
block|}
specifier|public
name|void
name|setTbl_name
parameter_list|(
name|String
name|tbl_name
parameter_list|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|tbl_name
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTbl_name
parameter_list|()
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tbl_name is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTbl_name
parameter_list|()
block|{
return|return
name|this
operator|.
name|tbl_name
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTbl_nameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|short
name|getMax_indexes
parameter_list|()
block|{
return|return
name|this
operator|.
name|max_indexes
return|;
block|}
specifier|public
name|void
name|setMax_indexes
parameter_list|(
name|short
name|max_indexes
parameter_list|)
block|{
name|this
operator|.
name|max_indexes
operator|=
name|max_indexes
expr_stmt|;
name|setMax_indexesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetMax_indexes
parameter_list|()
block|{
name|__isset_bit_vector
operator|.
name|clear
argument_list|(
name|__MAX_INDEXES_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field max_indexes is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetMax_indexes
parameter_list|()
block|{
return|return
name|__isset_bit_vector
operator|.
name|get
argument_list|(
name|__MAX_INDEXES_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setMax_indexesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bit_vector
operator|.
name|set
argument_list|(
name|__MAX_INDEXES_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDb_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDb_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TBL_NAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTbl_name
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTbl_name
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|MAX_INDEXES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetMax_indexes
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setMax_indexes
argument_list|(
operator|(
name|Short
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|getDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|getTbl_name
argument_list|()
return|;
case|case
name|MAX_INDEXES
case|:
return|return
operator|new
name|Short
argument_list|(
name|getMax_indexes
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|DB_NAME
case|:
return|return
name|isSetDb_name
argument_list|()
return|;
case|case
name|TBL_NAME
case|:
return|return
name|isSetTbl_name
argument_list|()
return|;
case|case
name|MAX_INDEXES
case|:
return|return
name|isSetMax_indexes
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_index_names_args
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_index_names_args
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_index_names_args
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_db_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_db_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDb_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_db_name
operator|||
name|that_present_db_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_db_name
operator|&&
name|that_present_db_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|db_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|db_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tbl_name
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tbl_name
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTbl_name
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tbl_name
operator|||
name|that_present_tbl_name
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tbl_name
operator|&&
name|that_present_tbl_name
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tbl_name
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tbl_name
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_max_indexes
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_max_indexes
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_max_indexes
operator|||
name|that_present_max_indexes
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_max_indexes
operator|&&
name|that_present_max_indexes
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|max_indexes
operator|!=
name|that
operator|.
name|max_indexes
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_index_names_args
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_index_names_args
name|typedOther
init|=
operator|(
name|get_index_names_args
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDb_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetDb_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDb_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|db_name
argument_list|,
name|typedOther
operator|.
name|db_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTbl_name
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetTbl_name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTbl_name
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|,
name|typedOther
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetMax_indexes
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetMax_indexes
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetMax_indexes
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|max_indexes
argument_list|,
name|typedOther
operator|.
name|max_indexes
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// DB_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|db_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// TBL_NAME
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRING
condition|)
block|{
name|this
operator|.
name|tbl_name
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// MAX_INDEXES
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|I16
condition|)
block|{
name|this
operator|.
name|max_indexes
operator|=
name|iprot
operator|.
name|readI16
argument_list|()
expr_stmt|;
name|setMax_indexesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DB_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TBL_NAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|MAX_INDEXES_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI16
argument_list|(
name|this
operator|.
name|max_indexes
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_index_names_args("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"db_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|db_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|db_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tbl_name:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tbl_name
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"max_indexes:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|max_indexes
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
specifier|public
specifier|static
class|class
name|get_index_names_result
implements|implements
name|TBase
argument_list|<
name|get_index_names_result
argument_list|,
name|get_index_names_result
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|TStruct
argument_list|(
literal|"get_index_names_result"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|SUCCESS_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"success"
argument_list|,
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|TField
name|O2_FIELD_DESC
init|=
operator|new
name|TField
argument_list|(
literal|"o2"
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|success
decl_stmt|;
specifier|private
name|MetaException
name|o2
decl_stmt|;
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|TFieldIdEnum
block|{
name|SUCCESS
argument_list|(
operator|(
name|short
operator|)
literal|0
argument_list|,
literal|"success"
argument_list|)
block|,
name|O2
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"o2"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
return|return
name|SUCCESS
return|;
case|case
literal|1
case|:
comment|// O2
return|return
name|O2
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**        * Find the _Fields constant that matches fieldId, throwing an exception        * if it is not found.        */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**        * Find the _Fields constant that matches name, or null if its not found.        */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SUCCESS
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"success"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|ListMetaData
argument_list|(
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|O2
argument_list|,
operator|new
name|FieldMetaData
argument_list|(
literal|"o2"
argument_list|,
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|FieldValueMetaData
argument_list|(
name|TType
operator|.
name|STRUCT
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|get_index_names_result
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|get_index_names_result
parameter_list|()
block|{     }
specifier|public
name|get_index_names_result
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|,
name|MetaException
name|o2
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
comment|/**      * Performs a deep copy on<i>other</i>.      */
specifier|public
name|get_index_names_result
parameter_list|(
name|get_index_names_result
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__success
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|success
control|)
block|{
name|__this__success
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|=
name|__this__success
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|(
name|other
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|get_index_names_result
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|get_index_names_result
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSuccessSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSuccessIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|success
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|success
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSuccess
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
return|;
block|}
specifier|public
name|void
name|setSuccess
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|success
parameter_list|)
block|{
name|this
operator|.
name|success
operator|=
name|success
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSuccess
parameter_list|()
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field success is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSuccess
parameter_list|()
block|{
return|return
name|this
operator|.
name|success
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSuccessIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|success
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|MetaException
name|getO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
return|;
block|}
specifier|public
name|void
name|setO2
parameter_list|(
name|MetaException
name|o2
parameter_list|)
block|{
name|this
operator|.
name|o2
operator|=
name|o2
expr_stmt|;
block|}
specifier|public
name|void
name|unsetO2
parameter_list|()
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field o2 is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetO2
parameter_list|()
block|{
return|return
name|this
operator|.
name|o2
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setO2IsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|o2
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSuccess
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSuccess
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|O2
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetO2
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setO2
argument_list|(
operator|(
name|MetaException
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|getSuccess
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|getO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SUCCESS
case|:
return|return
name|isSetSuccess
argument_list|()
return|;
case|case
name|O2
case|:
return|return
name|isSetO2
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|get_index_names_result
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|get_index_names_result
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|get_index_names_result
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_success
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
name|boolean
name|that_present_success
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSuccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_success
operator|||
name|that_present_success
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_success
operator|&&
name|that_present_success
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|success
operator|.
name|equals
argument_list|(
name|that
operator|.
name|success
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_o2
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
name|boolean
name|that_present_o2
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetO2
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_o2
operator|||
name|that_present_o2
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_o2
operator|&&
name|that_present_o2
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|o2
operator|.
name|equals
argument_list|(
name|that
operator|.
name|o2
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|get_index_names_result
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|get_index_names_result
name|typedOther
init|=
operator|(
name|get_index_names_result
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSuccess
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSuccess
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSuccess
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|success
argument_list|,
name|typedOther
operator|.
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetO2
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetO2
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetO2
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|o2
argument_list|,
name|typedOther
operator|.
name|o2
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|TException
block|{
name|TField
name|field
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|field
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|field
operator|.
name|id
condition|)
block|{
case|case
literal|0
case|:
comment|// SUCCESS
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|TList
name|_list145
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|this
operator|.
name|success
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list145
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i146
init|=
literal|0
init|;
name|_i146
operator|<
name|_list145
operator|.
name|size
condition|;
operator|++
name|_i146
control|)
block|{
name|String
name|_elem147
decl_stmt|;
name|_elem147
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|this
operator|.
name|success
operator|.
name|add
argument_list|(
name|_elem147
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|1
case|:
comment|// O2
if|if
condition|(
name|field
operator|.
name|type
operator|==
name|TType
operator|.
name|STRUCT
condition|)
block|{
name|this
operator|.
name|o2
operator|=
operator|new
name|MetaException
argument_list|()
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|field
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
block|{
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SUCCESS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|TList
argument_list|(
name|TType
operator|.
name|STRING
argument_list|,
name|this
operator|.
name|success
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter148
range|:
name|this
operator|.
name|success
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter148
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|this
operator|.
name|isSetO2
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|O2_FIELD_DESC
argument_list|)
expr_stmt|;
name|this
operator|.
name|o2
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"get_index_names_result("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"success:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|success
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|success
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"o2:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|o2
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|o2
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|TException
block|{
comment|// check for required fields
block|}
block|}
block|}
end_class

end_unit

