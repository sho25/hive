begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.9.0)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|builder
operator|.
name|HashCodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|SkewedInfo
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|SkewedInfo
argument_list|,
name|SkewedInfo
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"SkewedInfo"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SKEWED_COL_NAMES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"skewedColNames"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SKEWED_COL_VALUES_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"skewedColValues"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|SKEWED_COL_VALUE_LOCATION_MAPS_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"skewedColValueLocationMaps"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|SkewedInfoStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|SkewedInfoTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
decl_stmt|;
comment|// required
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
decl_stmt|;
comment|// required
specifier|private
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|skewedColValueLocationMaps
decl_stmt|;
comment|// required
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|SKEWED_COL_NAMES
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"skewedColNames"
argument_list|)
block|,
name|SKEWED_COL_VALUES
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"skewedColValues"
argument_list|)
block|,
name|SKEWED_COL_VALUE_LOCATION_MAPS
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"skewedColValueLocationMaps"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// SKEWED_COL_NAMES
return|return
name|SKEWED_COL_NAMES
return|;
case|case
literal|2
case|:
comment|// SKEWED_COL_VALUES
return|return
name|SKEWED_COL_VALUES
return|;
case|case
literal|3
case|:
comment|// SKEWED_COL_VALUE_LOCATION_MAPS
return|return
name|SKEWED_COL_VALUE_LOCATION_MAPS
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SKEWED_COL_NAMES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"skewedColNames"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SKEWED_COL_VALUES
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"skewedColValues"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|SKEWED_COL_VALUE_LOCATION_MAPS
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"skewedColValueLocationMaps"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|DEFAULT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|MapMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|ListMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|SkewedInfo
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SkewedInfo
parameter_list|()
block|{   }
specifier|public
name|SkewedInfo
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
parameter_list|,
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|skewedColValueLocationMaps
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|skewedColNames
operator|=
name|skewedColNames
expr_stmt|;
name|this
operator|.
name|skewedColValues
operator|=
name|skewedColValues
expr_stmt|;
name|this
operator|.
name|skewedColValueLocationMaps
operator|=
name|skewedColValueLocationMaps
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|SkewedInfo
parameter_list|(
name|SkewedInfo
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isSetSkewedColNames
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__skewedColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element
range|:
name|other
operator|.
name|skewedColNames
control|)
block|{
name|__this__skewedColNames
operator|.
name|add
argument_list|(
name|other_element
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|skewedColNames
operator|=
name|__this__skewedColNames
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetSkewedColValues
argument_list|()
condition|)
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|__this__skewedColValues
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|other_element
range|:
name|other
operator|.
name|skewedColValues
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|__this__skewedColValues_copy
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element_element
range|:
name|other_element
control|)
block|{
name|__this__skewedColValues_copy
operator|.
name|add
argument_list|(
name|other_element_element
argument_list|)
expr_stmt|;
block|}
name|__this__skewedColValues
operator|.
name|add
argument_list|(
name|__this__skewedColValues_copy
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|skewedColValues
operator|=
name|__this__skewedColValues
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetSkewedColValueLocationMaps
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|__this__skewedColValueLocationMaps
init|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|other_element
range|:
name|other
operator|.
name|skewedColValueLocationMaps
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|other_element_key
init|=
name|other_element
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|other_element_value
init|=
name|other_element
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|__this__skewedColValueLocationMaps_copy_key
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|other_element_key_element
range|:
name|other_element_key
control|)
block|{
name|__this__skewedColValueLocationMaps_copy_key
operator|.
name|add
argument_list|(
name|other_element_key_element
argument_list|)
expr_stmt|;
block|}
name|String
name|__this__skewedColValueLocationMaps_copy_value
init|=
name|other_element_value
decl_stmt|;
name|__this__skewedColValueLocationMaps
operator|.
name|put
argument_list|(
name|__this__skewedColValueLocationMaps_copy_key
argument_list|,
name|__this__skewedColValueLocationMaps_copy_value
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|skewedColValueLocationMaps
operator|=
name|__this__skewedColValueLocationMaps
expr_stmt|;
block|}
block|}
specifier|public
name|SkewedInfo
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|SkewedInfo
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|this
operator|.
name|skewedColNames
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|skewedColValues
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|skewedColValueLocationMaps
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|getSkewedColNamesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|skewedColNames
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|skewedColNames
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|String
argument_list|>
name|getSkewedColNamesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|skewedColNames
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|skewedColNames
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSkewedColNames
parameter_list|(
name|String
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|skewedColNames
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|skewedColNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|skewedColNames
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getSkewedColNames
parameter_list|()
block|{
return|return
name|this
operator|.
name|skewedColNames
return|;
block|}
specifier|public
name|void
name|setSkewedColNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|skewedColNames
parameter_list|)
block|{
name|this
operator|.
name|skewedColNames
operator|=
name|skewedColNames
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSkewedColNames
parameter_list|()
block|{
name|this
operator|.
name|skewedColNames
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field skewedColNames is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSkewedColNames
parameter_list|()
block|{
return|return
name|this
operator|.
name|skewedColNames
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSkewedColNamesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|skewedColNames
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getSkewedColValuesSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|skewedColValues
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|skewedColValues
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Iterator
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getSkewedColValuesIterator
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|skewedColValues
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|this
operator|.
name|skewedColValues
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|void
name|addToSkewedColValues
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|elem
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|skewedColValues
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|skewedColValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|skewedColValues
operator|.
name|add
argument_list|(
name|elem
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|getSkewedColValues
parameter_list|()
block|{
return|return
name|this
operator|.
name|skewedColValues
return|;
block|}
specifier|public
name|void
name|setSkewedColValues
parameter_list|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|skewedColValues
parameter_list|)
block|{
name|this
operator|.
name|skewedColValues
operator|=
name|skewedColValues
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSkewedColValues
parameter_list|()
block|{
name|this
operator|.
name|skewedColValues
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field skewedColValues is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSkewedColValues
parameter_list|()
block|{
return|return
name|this
operator|.
name|skewedColValues
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSkewedColValuesIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|skewedColValues
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getSkewedColValueLocationMapsSize
parameter_list|()
block|{
return|return
operator|(
name|this
operator|.
name|skewedColValueLocationMaps
operator|==
literal|null
operator|)
condition|?
literal|0
else|:
name|this
operator|.
name|skewedColValueLocationMaps
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|void
name|putToSkewedColValueLocationMaps
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|skewedColValueLocationMaps
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|skewedColValueLocationMaps
operator|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|skewedColValueLocationMaps
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|getSkewedColValueLocationMaps
parameter_list|()
block|{
return|return
name|this
operator|.
name|skewedColValueLocationMaps
return|;
block|}
specifier|public
name|void
name|setSkewedColValueLocationMaps
parameter_list|(
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|skewedColValueLocationMaps
parameter_list|)
block|{
name|this
operator|.
name|skewedColValueLocationMaps
operator|=
name|skewedColValueLocationMaps
expr_stmt|;
block|}
specifier|public
name|void
name|unsetSkewedColValueLocationMaps
parameter_list|()
block|{
name|this
operator|.
name|skewedColValueLocationMaps
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field skewedColValueLocationMaps is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetSkewedColValueLocationMaps
parameter_list|()
block|{
return|return
name|this
operator|.
name|skewedColValueLocationMaps
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setSkewedColValueLocationMapsIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|skewedColValueLocationMaps
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SKEWED_COL_NAMES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSkewedColNames
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSkewedColNames
argument_list|(
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SKEWED_COL_VALUES
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSkewedColValues
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSkewedColValues
argument_list|(
operator|(
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|SKEWED_COL_VALUE_LOCATION_MAPS
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetSkewedColValueLocationMaps
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setSkewedColValueLocationMaps
argument_list|(
operator|(
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SKEWED_COL_NAMES
case|:
return|return
name|getSkewedColNames
argument_list|()
return|;
case|case
name|SKEWED_COL_VALUES
case|:
return|return
name|getSkewedColValues
argument_list|()
return|;
case|case
name|SKEWED_COL_VALUE_LOCATION_MAPS
case|:
return|return
name|getSkewedColValueLocationMaps
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|SKEWED_COL_NAMES
case|:
return|return
name|isSetSkewedColNames
argument_list|()
return|;
case|case
name|SKEWED_COL_VALUES
case|:
return|return
name|isSetSkewedColValues
argument_list|()
return|;
case|case
name|SKEWED_COL_VALUE_LOCATION_MAPS
case|:
return|return
name|isSetSkewedColValueLocationMaps
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|SkewedInfo
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|SkewedInfo
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|SkewedInfo
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_skewedColNames
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSkewedColNames
argument_list|()
decl_stmt|;
name|boolean
name|that_present_skewedColNames
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSkewedColNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_skewedColNames
operator|||
name|that_present_skewedColNames
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_skewedColNames
operator|&&
name|that_present_skewedColNames
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|skewedColNames
operator|.
name|equals
argument_list|(
name|that
operator|.
name|skewedColNames
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_skewedColValues
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSkewedColValues
argument_list|()
decl_stmt|;
name|boolean
name|that_present_skewedColValues
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSkewedColValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_skewedColValues
operator|||
name|that_present_skewedColValues
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_skewedColValues
operator|&&
name|that_present_skewedColValues
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|skewedColValues
operator|.
name|equals
argument_list|(
name|that
operator|.
name|skewedColValues
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_skewedColValueLocationMaps
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetSkewedColValueLocationMaps
argument_list|()
decl_stmt|;
name|boolean
name|that_present_skewedColValueLocationMaps
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetSkewedColValueLocationMaps
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_skewedColValueLocationMaps
operator|||
name|that_present_skewedColValueLocationMaps
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_skewedColValueLocationMaps
operator|&&
name|that_present_skewedColValueLocationMaps
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|skewedColValueLocationMaps
operator|.
name|equals
argument_list|(
name|that
operator|.
name|skewedColValueLocationMaps
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|HashCodeBuilder
name|builder
init|=
operator|new
name|HashCodeBuilder
argument_list|()
decl_stmt|;
name|boolean
name|present_skewedColNames
init|=
literal|true
operator|&&
operator|(
name|isSetSkewedColNames
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_skewedColNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_skewedColNames
condition|)
name|builder
operator|.
name|append
argument_list|(
name|skewedColNames
argument_list|)
expr_stmt|;
name|boolean
name|present_skewedColValues
init|=
literal|true
operator|&&
operator|(
name|isSetSkewedColValues
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_skewedColValues
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_skewedColValues
condition|)
name|builder
operator|.
name|append
argument_list|(
name|skewedColValues
argument_list|)
expr_stmt|;
name|boolean
name|present_skewedColValueLocationMaps
init|=
literal|true
operator|&&
operator|(
name|isSetSkewedColValueLocationMaps
argument_list|()
operator|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|present_skewedColValueLocationMaps
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_skewedColValueLocationMaps
condition|)
name|builder
operator|.
name|append
argument_list|(
name|skewedColValueLocationMaps
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toHashCode
argument_list|()
return|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|SkewedInfo
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|SkewedInfo
name|typedOther
init|=
operator|(
name|SkewedInfo
operator|)
name|other
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSkewedColNames
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSkewedColNames
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSkewedColNames
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|skewedColNames
argument_list|,
name|typedOther
operator|.
name|skewedColNames
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSkewedColValues
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSkewedColValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSkewedColValues
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|skewedColValues
argument_list|,
name|typedOther
operator|.
name|skewedColValues
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetSkewedColValueLocationMaps
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|typedOther
operator|.
name|isSetSkewedColValueLocationMaps
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetSkewedColValueLocationMaps
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|skewedColValueLocationMaps
argument_list|,
name|typedOther
operator|.
name|skewedColValueLocationMaps
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"SkewedInfo("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"skewedColNames:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|skewedColNames
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|skewedColNames
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"skewedColValues:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|skewedColValues
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|skewedColValues
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"skewedColValueLocationMaps:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|skewedColValueLocationMaps
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|skewedColValueLocationMaps
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
comment|// check for sub-struct validity
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SkewedInfoStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|SkewedInfoStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|SkewedInfoStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SkewedInfoStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|SkewedInfo
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|SkewedInfo
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// SKEWED_COL_NAMES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list114
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|skewedColNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list114
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i115
init|=
literal|0
init|;
name|_i115
operator|<
name|_list114
operator|.
name|size
condition|;
operator|++
name|_i115
control|)
block|{
name|String
name|_elem116
decl_stmt|;
comment|// optional
name|_elem116
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|skewedColNames
operator|.
name|add
argument_list|(
name|_elem116
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSkewedColNamesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// SKEWED_COL_VALUES
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list117
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|skewedColValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|_list117
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i118
init|=
literal|0
init|;
name|_i118
operator|<
name|_list117
operator|.
name|size
condition|;
operator|++
name|_i118
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|_elem119
decl_stmt|;
comment|// optional
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list120
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|_elem119
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list120
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i121
init|=
literal|0
init|;
name|_i121
operator|<
name|_list120
operator|.
name|size
condition|;
operator|++
name|_i121
control|)
block|{
name|String
name|_elem122
decl_stmt|;
comment|// optional
name|_elem122
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_elem119
operator|.
name|add
argument_list|(
name|_elem122
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|skewedColValues
operator|.
name|add
argument_list|(
name|_elem119
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSkewedColValuesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// SKEWED_COL_VALUE_LOCATION_MAPS
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|MAP
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map123
init|=
name|iprot
operator|.
name|readMapBegin
argument_list|()
decl_stmt|;
name|struct
operator|.
name|skewedColValueLocationMaps
operator|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map123
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i124
init|=
literal|0
init|;
name|_i124
operator|<
name|_map123
operator|.
name|size
condition|;
operator|++
name|_i124
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|_key125
decl_stmt|;
comment|// required
name|String
name|_val126
decl_stmt|;
comment|// required
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list127
init|=
name|iprot
operator|.
name|readListBegin
argument_list|()
decl_stmt|;
name|_key125
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list127
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i128
init|=
literal|0
init|;
name|_i128
operator|<
name|_list127
operator|.
name|size
condition|;
operator|++
name|_i128
control|)
block|{
name|String
name|_elem129
decl_stmt|;
comment|// optional
name|_elem129
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_key125
operator|.
name|add
argument_list|(
name|_elem129
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readListEnd
argument_list|()
expr_stmt|;
block|}
name|_val126
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|skewedColValueLocationMaps
operator|.
name|put
argument_list|(
name|_key125
argument_list|,
name|_val126
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readMapEnd
argument_list|()
expr_stmt|;
block|}
name|struct
operator|.
name|setSkewedColValueLocationMapsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|SkewedInfo
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|skewedColNames
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SKEWED_COL_NAMES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|skewedColNames
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter130
range|:
name|struct
operator|.
name|skewedColNames
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter130
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|skewedColValues
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SKEWED_COL_VALUES_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|struct
operator|.
name|skewedColValues
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|_iter131
range|:
name|struct
operator|.
name|skewedColValues
control|)
block|{
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|_iter131
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter132
range|:
name|_iter131
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter132
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|skewedColValueLocationMaps
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|SKEWED_COL_VALUE_LOCATION_MAPS_FIELD_DESC
argument_list|)
expr_stmt|;
block|{
name|oprot
operator|.
name|writeMapBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|struct
operator|.
name|skewedColValueLocationMaps
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|_iter133
range|:
name|struct
operator|.
name|skewedColValueLocationMaps
operator|.
name|entrySet
argument_list|()
control|)
block|{
block|{
name|oprot
operator|.
name|writeListBegin
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|_iter133
operator|.
name|getKey
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter134
range|:
name|_iter133
operator|.
name|getKey
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter134
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeListEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter133
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeMapEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SkewedInfoTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|SkewedInfoTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|SkewedInfoTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|SkewedInfoTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|SkewedInfo
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|SkewedInfo
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSkewedColNames
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSkewedColValues
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSkewedColValueLocationMaps
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetSkewedColNames
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|skewedColNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter135
range|:
name|struct
operator|.
name|skewedColNames
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter135
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSkewedColValues
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|skewedColValues
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|_iter136
range|:
name|struct
operator|.
name|skewedColValues
control|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter136
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter137
range|:
name|_iter136
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter137
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetSkewedColValueLocationMaps
argument_list|()
condition|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|skewedColValueLocationMaps
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|_iter138
range|:
name|struct
operator|.
name|skewedColValueLocationMaps
operator|.
name|entrySet
argument_list|()
control|)
block|{
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|_iter138
operator|.
name|getKey
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|_iter139
range|:
name|_iter138
operator|.
name|getKey
argument_list|()
control|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter139
argument_list|)
expr_stmt|;
block|}
block|}
name|oprot
operator|.
name|writeString
argument_list|(
name|_iter138
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|SkewedInfo
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list140
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|skewedColNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list140
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i141
init|=
literal|0
init|;
name|_i141
operator|<
name|_list140
operator|.
name|size
condition|;
operator|++
name|_i141
control|)
block|{
name|String
name|_elem142
decl_stmt|;
comment|// optional
name|_elem142
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|skewedColNames
operator|.
name|add
argument_list|(
name|_elem142
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSkewedColNamesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list143
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|skewedColValues
operator|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|_list143
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i144
init|=
literal|0
init|;
name|_i144
operator|<
name|_list143
operator|.
name|size
condition|;
operator|++
name|_i144
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|_elem145
decl_stmt|;
comment|// optional
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list146
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|_elem145
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list146
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i147
init|=
literal|0
init|;
name|_i147
operator|<
name|_list146
operator|.
name|size
condition|;
operator|++
name|_i147
control|)
block|{
name|String
name|_elem148
decl_stmt|;
comment|// optional
name|_elem148
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_elem145
operator|.
name|add
argument_list|(
name|_elem148
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|skewedColValues
operator|.
name|add
argument_list|(
name|_elem145
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSkewedColValuesIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
name|_map149
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMap
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|LIST
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|struct
operator|.
name|skewedColValueLocationMaps
operator|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|(
literal|2
operator|*
name|_map149
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i150
init|=
literal|0
init|;
name|_i150
operator|<
name|_map149
operator|.
name|size
condition|;
operator|++
name|_i150
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|_key151
decl_stmt|;
comment|// required
name|String
name|_val152
decl_stmt|;
comment|// required
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
name|_list153
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TList
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
decl_stmt|;
name|_key151
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|_list153
operator|.
name|size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|_i154
init|=
literal|0
init|;
name|_i154
operator|<
name|_list153
operator|.
name|size
condition|;
operator|++
name|_i154
control|)
block|{
name|String
name|_elem155
decl_stmt|;
comment|// optional
name|_elem155
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|_key151
operator|.
name|add
argument_list|(
name|_elem155
argument_list|)
expr_stmt|;
block|}
block|}
name|_val152
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|skewedColValueLocationMaps
operator|.
name|put
argument_list|(
name|_key151
argument_list|,
name|_val152
argument_list|)
expr_stmt|;
block|}
block|}
name|struct
operator|.
name|setSkewedColValueLocationMapsIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

