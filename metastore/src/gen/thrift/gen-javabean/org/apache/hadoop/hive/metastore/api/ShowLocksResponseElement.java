begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Autogenerated by Thrift Compiler (0.9.3)  *  * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING  *  @generated  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|IScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|SchemeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|StandardScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|scheme
operator|.
name|TupleScheme
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TTupleProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|EncodingUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|async
operator|.
name|AsyncMethodCallback
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|AbstractNonblockingServer
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|EnumSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Generated
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
block|{
literal|"cast"
block|,
literal|"rawtypes"
block|,
literal|"serial"
block|,
literal|"unchecked"
block|}
argument_list|)
annotation|@
name|Generated
argument_list|(
name|value
operator|=
literal|"Autogenerated by Thrift Compiler (0.9.3)"
argument_list|)
specifier|public
class|class
name|ShowLocksResponseElement
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
argument_list|<
name|ShowLocksResponseElement
argument_list|,
name|ShowLocksResponseElement
operator|.
name|_Fields
argument_list|>
implements|,
name|java
operator|.
name|io
operator|.
name|Serializable
implements|,
name|Cloneable
implements|,
name|Comparable
argument_list|<
name|ShowLocksResponseElement
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
name|STRUCT_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TStruct
argument_list|(
literal|"ShowLocksResponseElement"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|LOCKID_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"lockid"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|DBNAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"dbname"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|2
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TABLENAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"tablename"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|3
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|PARTNAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"partname"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|4
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|STATE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"state"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|5
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TYPE_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"type"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|6
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|TXNID_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"txnid"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|7
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|LASTHEARTBEAT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"lastheartbeat"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|8
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|ACQUIREDAT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"acquiredat"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|9
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|USER_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"user"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|10
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|HOSTNAME_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"hostname"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|11
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|HEARTBEAT_COUNT_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"heartbeatCount"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|,
operator|(
name|short
operator|)
literal|12
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|AGENT_INFO_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"agentInfo"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|,
operator|(
name|short
operator|)
literal|13
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|BLOCKED_BY_EXT_ID_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"blockedByExtId"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|14
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|BLOCKED_BY_INT_ID_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"blockedByIntId"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|15
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|LOCK_ID_INTERNAL_FIELD_DESC
init|=
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
argument_list|(
literal|"lockIdInternal"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|,
operator|(
name|short
operator|)
literal|16
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
name|schemes
init|=
operator|new
name|HashMap
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|IScheme
argument_list|>
argument_list|,
name|SchemeFactory
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|schemes
operator|.
name|put
argument_list|(
name|StandardScheme
operator|.
name|class
argument_list|,
operator|new
name|ShowLocksResponseElementStandardSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
name|schemes
operator|.
name|put
argument_list|(
name|TupleScheme
operator|.
name|class
argument_list|,
operator|new
name|ShowLocksResponseElementTupleSchemeFactory
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|long
name|lockid
decl_stmt|;
comment|// required
specifier|private
name|String
name|dbname
decl_stmt|;
comment|// required
specifier|private
name|String
name|tablename
decl_stmt|;
comment|// optional
specifier|private
name|String
name|partname
decl_stmt|;
comment|// optional
specifier|private
name|LockState
name|state
decl_stmt|;
comment|// required
specifier|private
name|LockType
name|type
decl_stmt|;
comment|// required
specifier|private
name|long
name|txnid
decl_stmt|;
comment|// optional
specifier|private
name|long
name|lastheartbeat
decl_stmt|;
comment|// required
specifier|private
name|long
name|acquiredat
decl_stmt|;
comment|// optional
specifier|private
name|String
name|user
decl_stmt|;
comment|// required
specifier|private
name|String
name|hostname
decl_stmt|;
comment|// required
specifier|private
name|int
name|heartbeatCount
decl_stmt|;
comment|// optional
specifier|private
name|String
name|agentInfo
decl_stmt|;
comment|// optional
specifier|private
name|long
name|blockedByExtId
decl_stmt|;
comment|// optional
specifier|private
name|long
name|blockedByIntId
decl_stmt|;
comment|// optional
specifier|private
name|long
name|lockIdInternal
decl_stmt|;
comment|// optional
comment|/** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
specifier|public
enum|enum
name|_Fields
implements|implements
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldIdEnum
block|{
name|LOCKID
argument_list|(
operator|(
name|short
operator|)
literal|1
argument_list|,
literal|"lockid"
argument_list|)
block|,
name|DBNAME
argument_list|(
operator|(
name|short
operator|)
literal|2
argument_list|,
literal|"dbname"
argument_list|)
block|,
name|TABLENAME
argument_list|(
operator|(
name|short
operator|)
literal|3
argument_list|,
literal|"tablename"
argument_list|)
block|,
name|PARTNAME
argument_list|(
operator|(
name|short
operator|)
literal|4
argument_list|,
literal|"partname"
argument_list|)
block|,
comment|/**      *       * @see LockState      */
name|STATE
argument_list|(
operator|(
name|short
operator|)
literal|5
argument_list|,
literal|"state"
argument_list|)
block|,
comment|/**      *       * @see LockType      */
name|TYPE
argument_list|(
operator|(
name|short
operator|)
literal|6
argument_list|,
literal|"type"
argument_list|)
block|,
name|TXNID
argument_list|(
operator|(
name|short
operator|)
literal|7
argument_list|,
literal|"txnid"
argument_list|)
block|,
name|LASTHEARTBEAT
argument_list|(
operator|(
name|short
operator|)
literal|8
argument_list|,
literal|"lastheartbeat"
argument_list|)
block|,
name|ACQUIREDAT
argument_list|(
operator|(
name|short
operator|)
literal|9
argument_list|,
literal|"acquiredat"
argument_list|)
block|,
name|USER
argument_list|(
operator|(
name|short
operator|)
literal|10
argument_list|,
literal|"user"
argument_list|)
block|,
name|HOSTNAME
argument_list|(
operator|(
name|short
operator|)
literal|11
argument_list|,
literal|"hostname"
argument_list|)
block|,
name|HEARTBEAT_COUNT
argument_list|(
operator|(
name|short
operator|)
literal|12
argument_list|,
literal|"heartbeatCount"
argument_list|)
block|,
name|AGENT_INFO
argument_list|(
operator|(
name|short
operator|)
literal|13
argument_list|,
literal|"agentInfo"
argument_list|)
block|,
name|BLOCKED_BY_EXT_ID
argument_list|(
operator|(
name|short
operator|)
literal|14
argument_list|,
literal|"blockedByExtId"
argument_list|)
block|,
name|BLOCKED_BY_INT_ID
argument_list|(
operator|(
name|short
operator|)
literal|15
argument_list|,
literal|"blockedByIntId"
argument_list|)
block|,
name|LOCK_ID_INTERNAL
argument_list|(
operator|(
name|short
operator|)
literal|16
argument_list|,
literal|"lockIdInternal"
argument_list|)
block|;
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
name|byName
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|_Fields
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
for|for
control|(
name|_Fields
name|field
range|:
name|EnumSet
operator|.
name|allOf
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
control|)
block|{
name|byName
operator|.
name|put
argument_list|(
name|field
operator|.
name|getFieldName
argument_list|()
argument_list|,
name|field
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
switch|switch
condition|(
name|fieldId
condition|)
block|{
case|case
literal|1
case|:
comment|// LOCKID
return|return
name|LOCKID
return|;
case|case
literal|2
case|:
comment|// DBNAME
return|return
name|DBNAME
return|;
case|case
literal|3
case|:
comment|// TABLENAME
return|return
name|TABLENAME
return|;
case|case
literal|4
case|:
comment|// PARTNAME
return|return
name|PARTNAME
return|;
case|case
literal|5
case|:
comment|// STATE
return|return
name|STATE
return|;
case|case
literal|6
case|:
comment|// TYPE
return|return
name|TYPE
return|;
case|case
literal|7
case|:
comment|// TXNID
return|return
name|TXNID
return|;
case|case
literal|8
case|:
comment|// LASTHEARTBEAT
return|return
name|LASTHEARTBEAT
return|;
case|case
literal|9
case|:
comment|// ACQUIREDAT
return|return
name|ACQUIREDAT
return|;
case|case
literal|10
case|:
comment|// USER
return|return
name|USER
return|;
case|case
literal|11
case|:
comment|// HOSTNAME
return|return
name|HOSTNAME
return|;
case|case
literal|12
case|:
comment|// HEARTBEAT_COUNT
return|return
name|HEARTBEAT_COUNT
return|;
case|case
literal|13
case|:
comment|// AGENT_INFO
return|return
name|AGENT_INFO
return|;
case|case
literal|14
case|:
comment|// BLOCKED_BY_EXT_ID
return|return
name|BLOCKED_BY_EXT_ID
return|;
case|case
literal|15
case|:
comment|// BLOCKED_BY_INT_ID
return|return
name|BLOCKED_BY_INT_ID
return|;
case|case
literal|16
case|:
comment|// LOCK_ID_INTERNAL
return|return
name|LOCK_ID_INTERNAL
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Find the _Fields constant that matches fieldId, throwing an exception      * if it is not found.      */
specifier|public
specifier|static
name|_Fields
name|findByThriftIdOrThrow
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
name|_Fields
name|fields
init|=
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
decl_stmt|;
if|if
condition|(
name|fields
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Field "
operator|+
name|fieldId
operator|+
literal|" doesn't exist!"
argument_list|)
throw|;
return|return
name|fields
return|;
block|}
comment|/**      * Find the _Fields constant that matches name, or null if its not found.      */
specifier|public
specifier|static
name|_Fields
name|findByName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|byName
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|final
name|short
name|_thriftId
decl_stmt|;
specifier|private
specifier|final
name|String
name|_fieldName
decl_stmt|;
name|_Fields
parameter_list|(
name|short
name|thriftId
parameter_list|,
name|String
name|fieldName
parameter_list|)
block|{
name|_thriftId
operator|=
name|thriftId
expr_stmt|;
name|_fieldName
operator|=
name|fieldName
expr_stmt|;
block|}
specifier|public
name|short
name|getThriftFieldId
parameter_list|()
block|{
return|return
name|_thriftId
return|;
block|}
specifier|public
name|String
name|getFieldName
parameter_list|()
block|{
return|return
name|_fieldName
return|;
block|}
block|}
comment|// isset id assignments
specifier|private
specifier|static
specifier|final
name|int
name|__LOCKID_ISSET_ID
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__TXNID_ISSET_ID
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__LASTHEARTBEAT_ISSET_ID
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__ACQUIREDAT_ISSET_ID
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__HEARTBEATCOUNT_ISSET_ID
init|=
literal|4
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__BLOCKEDBYEXTID_ISSET_ID
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__BLOCKEDBYINTID_ISSET_ID
init|=
literal|6
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|__LOCKIDINTERNAL_ISSET_ID
init|=
literal|7
decl_stmt|;
specifier|private
name|byte
name|__isset_bitfield
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|_Fields
name|optionals
index|[]
init|=
block|{
name|_Fields
operator|.
name|TABLENAME
block|,
name|_Fields
operator|.
name|PARTNAME
block|,
name|_Fields
operator|.
name|TXNID
block|,
name|_Fields
operator|.
name|ACQUIREDAT
block|,
name|_Fields
operator|.
name|HEARTBEAT_COUNT
block|,
name|_Fields
operator|.
name|AGENT_INFO
block|,
name|_Fields
operator|.
name|BLOCKED_BY_EXT_ID
block|,
name|_Fields
operator|.
name|BLOCKED_BY_INT_ID
block|,
name|_Fields
operator|.
name|LOCK_ID_INTERNAL
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|metaDataMap
decl_stmt|;
static|static
block|{
name|Map
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
name|tmpMap
init|=
operator|new
name|EnumMap
argument_list|<
name|_Fields
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|>
argument_list|(
name|_Fields
operator|.
name|class
argument_list|)
decl_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|LOCKID
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"lockid"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|DBNAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"dbname"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TABLENAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"tablename"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|PARTNAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"partname"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|STATE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"state"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|LockState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TYPE
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"type"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|EnumMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|ENUM
argument_list|,
name|LockType
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|TXNID
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"txnid"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|LASTHEARTBEAT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"lastheartbeat"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|ACQUIREDAT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"acquiredat"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|USER
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"user"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|HOSTNAME
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"hostname"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|REQUIRED
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|HEARTBEAT_COUNT
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"heartbeatCount"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|AGENT_INFO
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"agentInfo"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|BLOCKED_BY_EXT_ID
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"blockedByExtId"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|BLOCKED_BY_INT_ID
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"blockedByIntId"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpMap
operator|.
name|put
argument_list|(
name|_Fields
operator|.
name|LOCK_ID_INTERNAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
argument_list|(
literal|"lockIdInternal"
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TFieldRequirementType
operator|.
name|OPTIONAL
argument_list|,
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldValueMetaData
argument_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|metaDataMap
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|tmpMap
argument_list|)
expr_stmt|;
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|meta_data
operator|.
name|FieldMetaData
operator|.
name|addStructMetaDataMap
argument_list|(
name|ShowLocksResponseElement
operator|.
name|class
argument_list|,
name|metaDataMap
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ShowLocksResponseElement
parameter_list|()
block|{
name|this
operator|.
name|heartbeatCount
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|ShowLocksResponseElement
parameter_list|(
name|long
name|lockid
parameter_list|,
name|String
name|dbname
parameter_list|,
name|LockState
name|state
parameter_list|,
name|LockType
name|type
parameter_list|,
name|long
name|lastheartbeat
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|hostname
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|lockid
operator|=
name|lockid
expr_stmt|;
name|setLockidIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|lastheartbeat
operator|=
name|lastheartbeat
expr_stmt|;
name|setLastheartbeatIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
block|}
comment|/**    * Performs a deep copy on<i>other</i>.    */
specifier|public
name|ShowLocksResponseElement
parameter_list|(
name|ShowLocksResponseElement
name|other
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|other
operator|.
name|__isset_bitfield
expr_stmt|;
name|this
operator|.
name|lockid
operator|=
name|other
operator|.
name|lockid
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetDbname
argument_list|()
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
name|other
operator|.
name|dbname
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetTablename
argument_list|()
condition|)
block|{
name|this
operator|.
name|tablename
operator|=
name|other
operator|.
name|tablename
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetPartname
argument_list|()
condition|)
block|{
name|this
operator|.
name|partname
operator|=
name|other
operator|.
name|partname
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetState
argument_list|()
condition|)
block|{
name|this
operator|.
name|state
operator|=
name|other
operator|.
name|state
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetType
argument_list|()
condition|)
block|{
name|this
operator|.
name|type
operator|=
name|other
operator|.
name|type
expr_stmt|;
block|}
name|this
operator|.
name|txnid
operator|=
name|other
operator|.
name|txnid
expr_stmt|;
name|this
operator|.
name|lastheartbeat
operator|=
name|other
operator|.
name|lastheartbeat
expr_stmt|;
name|this
operator|.
name|acquiredat
operator|=
name|other
operator|.
name|acquiredat
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetUser
argument_list|()
condition|)
block|{
name|this
operator|.
name|user
operator|=
name|other
operator|.
name|user
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|isSetHostname
argument_list|()
condition|)
block|{
name|this
operator|.
name|hostname
operator|=
name|other
operator|.
name|hostname
expr_stmt|;
block|}
name|this
operator|.
name|heartbeatCount
operator|=
name|other
operator|.
name|heartbeatCount
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|isSetAgentInfo
argument_list|()
condition|)
block|{
name|this
operator|.
name|agentInfo
operator|=
name|other
operator|.
name|agentInfo
expr_stmt|;
block|}
name|this
operator|.
name|blockedByExtId
operator|=
name|other
operator|.
name|blockedByExtId
expr_stmt|;
name|this
operator|.
name|blockedByIntId
operator|=
name|other
operator|.
name|blockedByIntId
expr_stmt|;
name|this
operator|.
name|lockIdInternal
operator|=
name|other
operator|.
name|lockIdInternal
expr_stmt|;
block|}
specifier|public
name|ShowLocksResponseElement
name|deepCopy
parameter_list|()
block|{
return|return
operator|new
name|ShowLocksResponseElement
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|setLockidIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|lockid
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|tablename
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|partname
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|state
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
name|setTxnidIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|txnid
operator|=
literal|0
expr_stmt|;
name|setLastheartbeatIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastheartbeat
operator|=
literal|0
expr_stmt|;
name|setAcquiredatIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|acquiredat
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|user
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|hostname
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|heartbeatCount
operator|=
literal|0
expr_stmt|;
name|this
operator|.
name|agentInfo
operator|=
literal|null
expr_stmt|;
name|setBlockedByExtIdIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockedByExtId
operator|=
literal|0
expr_stmt|;
name|setBlockedByIntIdIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|blockedByIntId
operator|=
literal|0
expr_stmt|;
name|setLockIdInternalIsSet
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|lockIdInternal
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|long
name|getLockid
parameter_list|()
block|{
return|return
name|this
operator|.
name|lockid
return|;
block|}
specifier|public
name|void
name|setLockid
parameter_list|(
name|long
name|lockid
parameter_list|)
block|{
name|this
operator|.
name|lockid
operator|=
name|lockid
expr_stmt|;
name|setLockidIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLockid
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__LOCKID_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field lockid is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetLockid
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__LOCKID_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setLockidIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__LOCKID_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
return|;
block|}
specifier|public
name|void
name|setDbname
parameter_list|(
name|String
name|dbname
parameter_list|)
block|{
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
block|}
specifier|public
name|void
name|unsetDbname
parameter_list|()
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field dbname is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetDbname
parameter_list|()
block|{
return|return
name|this
operator|.
name|dbname
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setDbnameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|dbname
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getTablename
parameter_list|()
block|{
return|return
name|this
operator|.
name|tablename
return|;
block|}
specifier|public
name|void
name|setTablename
parameter_list|(
name|String
name|tablename
parameter_list|)
block|{
name|this
operator|.
name|tablename
operator|=
name|tablename
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTablename
parameter_list|()
block|{
name|this
operator|.
name|tablename
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field tablename is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTablename
parameter_list|()
block|{
return|return
name|this
operator|.
name|tablename
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTablenameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|tablename
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getPartname
parameter_list|()
block|{
return|return
name|this
operator|.
name|partname
return|;
block|}
specifier|public
name|void
name|setPartname
parameter_list|(
name|String
name|partname
parameter_list|)
block|{
name|this
operator|.
name|partname
operator|=
name|partname
expr_stmt|;
block|}
specifier|public
name|void
name|unsetPartname
parameter_list|()
block|{
name|this
operator|.
name|partname
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field partname is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetPartname
parameter_list|()
block|{
return|return
name|this
operator|.
name|partname
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setPartnameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|partname
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    *     * @see LockState    */
specifier|public
name|LockState
name|getState
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
return|;
block|}
comment|/**    *     * @see LockState    */
specifier|public
name|void
name|setState
parameter_list|(
name|LockState
name|state
parameter_list|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
specifier|public
name|void
name|unsetState
parameter_list|()
block|{
name|this
operator|.
name|state
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field state is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetState
parameter_list|()
block|{
return|return
name|this
operator|.
name|state
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setStateIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|state
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**    *     * @see LockType    */
specifier|public
name|LockType
name|getType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
return|;
block|}
comment|/**    *     * @see LockType    */
specifier|public
name|void
name|setType
parameter_list|(
name|LockType
name|type
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|void
name|unsetType
parameter_list|()
block|{
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field type is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetType
parameter_list|()
block|{
return|return
name|this
operator|.
name|type
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setTypeIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|type
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getTxnid
parameter_list|()
block|{
return|return
name|this
operator|.
name|txnid
return|;
block|}
specifier|public
name|void
name|setTxnid
parameter_list|(
name|long
name|txnid
parameter_list|)
block|{
name|this
operator|.
name|txnid
operator|=
name|txnid
expr_stmt|;
name|setTxnidIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetTxnid
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__TXNID_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field txnid is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetTxnid
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__TXNID_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setTxnidIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__TXNID_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getLastheartbeat
parameter_list|()
block|{
return|return
name|this
operator|.
name|lastheartbeat
return|;
block|}
specifier|public
name|void
name|setLastheartbeat
parameter_list|(
name|long
name|lastheartbeat
parameter_list|)
block|{
name|this
operator|.
name|lastheartbeat
operator|=
name|lastheartbeat
expr_stmt|;
name|setLastheartbeatIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLastheartbeat
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__LASTHEARTBEAT_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field lastheartbeat is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetLastheartbeat
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__LASTHEARTBEAT_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setLastheartbeatIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__LASTHEARTBEAT_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getAcquiredat
parameter_list|()
block|{
return|return
name|this
operator|.
name|acquiredat
return|;
block|}
specifier|public
name|void
name|setAcquiredat
parameter_list|(
name|long
name|acquiredat
parameter_list|)
block|{
name|this
operator|.
name|acquiredat
operator|=
name|acquiredat
expr_stmt|;
name|setAcquiredatIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetAcquiredat
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__ACQUIREDAT_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field acquiredat is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAcquiredat
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__ACQUIREDAT_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setAcquiredatIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__ACQUIREDAT_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|user
return|;
block|}
specifier|public
name|void
name|setUser
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
specifier|public
name|void
name|unsetUser
parameter_list|()
block|{
name|this
operator|.
name|user
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field user is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|user
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setUserIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|user
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getHostname
parameter_list|()
block|{
return|return
name|this
operator|.
name|hostname
return|;
block|}
specifier|public
name|void
name|setHostname
parameter_list|(
name|String
name|hostname
parameter_list|)
block|{
name|this
operator|.
name|hostname
operator|=
name|hostname
expr_stmt|;
block|}
specifier|public
name|void
name|unsetHostname
parameter_list|()
block|{
name|this
operator|.
name|hostname
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field hostname is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetHostname
parameter_list|()
block|{
return|return
name|this
operator|.
name|hostname
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setHostnameIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|hostname
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|getHeartbeatCount
parameter_list|()
block|{
return|return
name|this
operator|.
name|heartbeatCount
return|;
block|}
specifier|public
name|void
name|setHeartbeatCount
parameter_list|(
name|int
name|heartbeatCount
parameter_list|)
block|{
name|this
operator|.
name|heartbeatCount
operator|=
name|heartbeatCount
expr_stmt|;
name|setHeartbeatCountIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetHeartbeatCount
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__HEARTBEATCOUNT_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field heartbeatCount is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetHeartbeatCount
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__HEARTBEATCOUNT_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setHeartbeatCountIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__HEARTBEATCOUNT_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getAgentInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|agentInfo
return|;
block|}
specifier|public
name|void
name|setAgentInfo
parameter_list|(
name|String
name|agentInfo
parameter_list|)
block|{
name|this
operator|.
name|agentInfo
operator|=
name|agentInfo
expr_stmt|;
block|}
specifier|public
name|void
name|unsetAgentInfo
parameter_list|()
block|{
name|this
operator|.
name|agentInfo
operator|=
literal|null
expr_stmt|;
block|}
comment|/** Returns true if field agentInfo is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetAgentInfo
parameter_list|()
block|{
return|return
name|this
operator|.
name|agentInfo
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|setAgentInfoIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|value
condition|)
block|{
name|this
operator|.
name|agentInfo
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|getBlockedByExtId
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockedByExtId
return|;
block|}
specifier|public
name|void
name|setBlockedByExtId
parameter_list|(
name|long
name|blockedByExtId
parameter_list|)
block|{
name|this
operator|.
name|blockedByExtId
operator|=
name|blockedByExtId
expr_stmt|;
name|setBlockedByExtIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetBlockedByExtId
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BLOCKEDBYEXTID_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field blockedByExtId is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetBlockedByExtId
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BLOCKEDBYEXTID_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setBlockedByExtIdIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BLOCKEDBYEXTID_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getBlockedByIntId
parameter_list|()
block|{
return|return
name|this
operator|.
name|blockedByIntId
return|;
block|}
specifier|public
name|void
name|setBlockedByIntId
parameter_list|(
name|long
name|blockedByIntId
parameter_list|)
block|{
name|this
operator|.
name|blockedByIntId
operator|=
name|blockedByIntId
expr_stmt|;
name|setBlockedByIntIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetBlockedByIntId
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BLOCKEDBYINTID_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field blockedByIntId is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetBlockedByIntId
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BLOCKEDBYINTID_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setBlockedByIntIdIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__BLOCKEDBYINTID_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|long
name|getLockIdInternal
parameter_list|()
block|{
return|return
name|this
operator|.
name|lockIdInternal
return|;
block|}
specifier|public
name|void
name|setLockIdInternal
parameter_list|(
name|long
name|lockIdInternal
parameter_list|)
block|{
name|this
operator|.
name|lockIdInternal
operator|=
name|lockIdInternal
expr_stmt|;
name|setLockIdInternalIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unsetLockIdInternal
parameter_list|()
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|clearBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__LOCKIDINTERNAL_ISSET_ID
argument_list|)
expr_stmt|;
block|}
comment|/** Returns true if field lockIdInternal is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSetLockIdInternal
parameter_list|()
block|{
return|return
name|EncodingUtils
operator|.
name|testBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__LOCKIDINTERNAL_ISSET_ID
argument_list|)
return|;
block|}
specifier|public
name|void
name|setLockIdInternalIsSet
parameter_list|(
name|boolean
name|value
parameter_list|)
block|{
name|__isset_bitfield
operator|=
name|EncodingUtils
operator|.
name|setBit
argument_list|(
name|__isset_bitfield
argument_list|,
name|__LOCKIDINTERNAL_ISSET_ID
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|LOCKID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLockid
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLockid
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|DBNAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetDbname
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setDbname
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TABLENAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTablename
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTablename
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|PARTNAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetPartname
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setPartname
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|STATE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetState
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setState
argument_list|(
operator|(
name|LockState
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TYPE
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetType
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setType
argument_list|(
operator|(
name|LockType
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|TXNID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetTxnid
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setTxnid
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LASTHEARTBEAT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLastheartbeat
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLastheartbeat
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|ACQUIREDAT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAcquiredat
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAcquiredat
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|USER
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetUser
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setUser
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|HOSTNAME
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetHostname
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setHostname
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|HEARTBEAT_COUNT
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetHeartbeatCount
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setHeartbeatCount
argument_list|(
operator|(
name|Integer
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|AGENT_INFO
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetAgentInfo
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setAgentInfo
argument_list|(
operator|(
name|String
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOCKED_BY_EXT_ID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBlockedByExtId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBlockedByExtId
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|BLOCKED_BY_INT_ID
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetBlockedByIntId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setBlockedByIntId
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|LOCK_ID_INTERNAL
case|:
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|unsetLockIdInternal
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|setLockIdInternal
argument_list|(
operator|(
name|Long
operator|)
name|value
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|public
name|Object
name|getFieldValue
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|LOCKID
case|:
return|return
name|getLockid
argument_list|()
return|;
case|case
name|DBNAME
case|:
return|return
name|getDbname
argument_list|()
return|;
case|case
name|TABLENAME
case|:
return|return
name|getTablename
argument_list|()
return|;
case|case
name|PARTNAME
case|:
return|return
name|getPartname
argument_list|()
return|;
case|case
name|STATE
case|:
return|return
name|getState
argument_list|()
return|;
case|case
name|TYPE
case|:
return|return
name|getType
argument_list|()
return|;
case|case
name|TXNID
case|:
return|return
name|getTxnid
argument_list|()
return|;
case|case
name|LASTHEARTBEAT
case|:
return|return
name|getLastheartbeat
argument_list|()
return|;
case|case
name|ACQUIREDAT
case|:
return|return
name|getAcquiredat
argument_list|()
return|;
case|case
name|USER
case|:
return|return
name|getUser
argument_list|()
return|;
case|case
name|HOSTNAME
case|:
return|return
name|getHostname
argument_list|()
return|;
case|case
name|HEARTBEAT_COUNT
case|:
return|return
name|getHeartbeatCount
argument_list|()
return|;
case|case
name|AGENT_INFO
case|:
return|return
name|getAgentInfo
argument_list|()
return|;
case|case
name|BLOCKED_BY_EXT_ID
case|:
return|return
name|getBlockedByExtId
argument_list|()
return|;
case|case
name|BLOCKED_BY_INT_ID
case|:
return|return
name|getBlockedByIntId
argument_list|()
return|;
case|case
name|LOCK_ID_INTERNAL
case|:
return|return
name|getLockIdInternal
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
specifier|public
name|boolean
name|isSet
parameter_list|(
name|_Fields
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
switch|switch
condition|(
name|field
condition|)
block|{
case|case
name|LOCKID
case|:
return|return
name|isSetLockid
argument_list|()
return|;
case|case
name|DBNAME
case|:
return|return
name|isSetDbname
argument_list|()
return|;
case|case
name|TABLENAME
case|:
return|return
name|isSetTablename
argument_list|()
return|;
case|case
name|PARTNAME
case|:
return|return
name|isSetPartname
argument_list|()
return|;
case|case
name|STATE
case|:
return|return
name|isSetState
argument_list|()
return|;
case|case
name|TYPE
case|:
return|return
name|isSetType
argument_list|()
return|;
case|case
name|TXNID
case|:
return|return
name|isSetTxnid
argument_list|()
return|;
case|case
name|LASTHEARTBEAT
case|:
return|return
name|isSetLastheartbeat
argument_list|()
return|;
case|case
name|ACQUIREDAT
case|:
return|return
name|isSetAcquiredat
argument_list|()
return|;
case|case
name|USER
case|:
return|return
name|isSetUser
argument_list|()
return|;
case|case
name|HOSTNAME
case|:
return|return
name|isSetHostname
argument_list|()
return|;
case|case
name|HEARTBEAT_COUNT
case|:
return|return
name|isSetHeartbeatCount
argument_list|()
return|;
case|case
name|AGENT_INFO
case|:
return|return
name|isSetAgentInfo
argument_list|()
return|;
case|case
name|BLOCKED_BY_EXT_ID
case|:
return|return
name|isSetBlockedByExtId
argument_list|()
return|;
case|case
name|BLOCKED_BY_INT_ID
case|:
return|return
name|isSetBlockedByIntId
argument_list|()
return|;
case|case
name|LOCK_ID_INTERNAL
case|:
return|return
name|isSetLockIdInternal
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|that
operator|instanceof
name|ShowLocksResponseElement
condition|)
return|return
name|this
operator|.
name|equals
argument_list|(
operator|(
name|ShowLocksResponseElement
operator|)
name|that
argument_list|)
return|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|ShowLocksResponseElement
name|that
parameter_list|)
block|{
if|if
condition|(
name|that
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|this_present_lockid
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_lockid
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_lockid
operator|||
name|that_present_lockid
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_lockid
operator|&&
name|that_present_lockid
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|lockid
operator|!=
name|that
operator|.
name|lockid
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_dbname
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetDbname
argument_list|()
decl_stmt|;
name|boolean
name|that_present_dbname
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetDbname
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_dbname
operator|||
name|that_present_dbname
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_dbname
operator|&&
name|that_present_dbname
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|dbname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|dbname
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_tablename
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTablename
argument_list|()
decl_stmt|;
name|boolean
name|that_present_tablename
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTablename
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_tablename
operator|||
name|that_present_tablename
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_tablename
operator|&&
name|that_present_tablename
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|tablename
operator|.
name|equals
argument_list|(
name|that
operator|.
name|tablename
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_partname
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetPartname
argument_list|()
decl_stmt|;
name|boolean
name|that_present_partname
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetPartname
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_partname
operator|||
name|that_present_partname
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_partname
operator|&&
name|that_present_partname
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|partname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|partname
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_state
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetState
argument_list|()
decl_stmt|;
name|boolean
name|that_present_state
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetState
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_state
operator|||
name|that_present_state
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_state
operator|&&
name|that_present_state
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|state
operator|.
name|equals
argument_list|(
name|that
operator|.
name|state
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_type
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetType
argument_list|()
decl_stmt|;
name|boolean
name|that_present_type
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetType
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_type
operator|||
name|that_present_type
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_type
operator|&&
name|that_present_type
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|type
operator|.
name|equals
argument_list|(
name|that
operator|.
name|type
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_txnid
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetTxnid
argument_list|()
decl_stmt|;
name|boolean
name|that_present_txnid
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetTxnid
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_txnid
operator|||
name|that_present_txnid
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_txnid
operator|&&
name|that_present_txnid
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|txnid
operator|!=
name|that
operator|.
name|txnid
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_lastheartbeat
init|=
literal|true
decl_stmt|;
name|boolean
name|that_present_lastheartbeat
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|this_present_lastheartbeat
operator|||
name|that_present_lastheartbeat
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_lastheartbeat
operator|&&
name|that_present_lastheartbeat
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|lastheartbeat
operator|!=
name|that
operator|.
name|lastheartbeat
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_acquiredat
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAcquiredat
argument_list|()
decl_stmt|;
name|boolean
name|that_present_acquiredat
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAcquiredat
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_acquiredat
operator|||
name|that_present_acquiredat
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_acquiredat
operator|&&
name|that_present_acquiredat
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|acquiredat
operator|!=
name|that
operator|.
name|acquiredat
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_user
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetUser
argument_list|()
decl_stmt|;
name|boolean
name|that_present_user
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetUser
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_user
operator|||
name|that_present_user
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_user
operator|&&
name|that_present_user
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|user
operator|.
name|equals
argument_list|(
name|that
operator|.
name|user
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_hostname
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetHostname
argument_list|()
decl_stmt|;
name|boolean
name|that_present_hostname
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetHostname
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_hostname
operator|||
name|that_present_hostname
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_hostname
operator|&&
name|that_present_hostname
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|hostname
operator|.
name|equals
argument_list|(
name|that
operator|.
name|hostname
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_heartbeatCount
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetHeartbeatCount
argument_list|()
decl_stmt|;
name|boolean
name|that_present_heartbeatCount
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetHeartbeatCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_heartbeatCount
operator|||
name|that_present_heartbeatCount
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_heartbeatCount
operator|&&
name|that_present_heartbeatCount
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|heartbeatCount
operator|!=
name|that
operator|.
name|heartbeatCount
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_agentInfo
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetAgentInfo
argument_list|()
decl_stmt|;
name|boolean
name|that_present_agentInfo
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetAgentInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_agentInfo
operator|||
name|that_present_agentInfo
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_agentInfo
operator|&&
name|that_present_agentInfo
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|this
operator|.
name|agentInfo
operator|.
name|equals
argument_list|(
name|that
operator|.
name|agentInfo
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_blockedByExtId
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetBlockedByExtId
argument_list|()
decl_stmt|;
name|boolean
name|that_present_blockedByExtId
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetBlockedByExtId
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_blockedByExtId
operator|||
name|that_present_blockedByExtId
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_blockedByExtId
operator|&&
name|that_present_blockedByExtId
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|blockedByExtId
operator|!=
name|that
operator|.
name|blockedByExtId
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_blockedByIntId
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetBlockedByIntId
argument_list|()
decl_stmt|;
name|boolean
name|that_present_blockedByIntId
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetBlockedByIntId
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_blockedByIntId
operator|||
name|that_present_blockedByIntId
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_blockedByIntId
operator|&&
name|that_present_blockedByIntId
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|blockedByIntId
operator|!=
name|that
operator|.
name|blockedByIntId
condition|)
return|return
literal|false
return|;
block|}
name|boolean
name|this_present_lockIdInternal
init|=
literal|true
operator|&&
name|this
operator|.
name|isSetLockIdInternal
argument_list|()
decl_stmt|;
name|boolean
name|that_present_lockIdInternal
init|=
literal|true
operator|&&
name|that
operator|.
name|isSetLockIdInternal
argument_list|()
decl_stmt|;
if|if
condition|(
name|this_present_lockIdInternal
operator|||
name|that_present_lockIdInternal
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|this_present_lockIdInternal
operator|&&
name|that_present_lockIdInternal
operator|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|this
operator|.
name|lockIdInternal
operator|!=
name|that
operator|.
name|lockIdInternal
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|List
argument_list|<
name|Object
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|present_lockid
init|=
literal|true
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_lockid
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_lockid
condition|)
name|list
operator|.
name|add
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
name|boolean
name|present_dbname
init|=
literal|true
operator|&&
operator|(
name|isSetDbname
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_dbname
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_dbname
condition|)
name|list
operator|.
name|add
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|boolean
name|present_tablename
init|=
literal|true
operator|&&
operator|(
name|isSetTablename
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_tablename
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_tablename
condition|)
name|list
operator|.
name|add
argument_list|(
name|tablename
argument_list|)
expr_stmt|;
name|boolean
name|present_partname
init|=
literal|true
operator|&&
operator|(
name|isSetPartname
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_partname
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_partname
condition|)
name|list
operator|.
name|add
argument_list|(
name|partname
argument_list|)
expr_stmt|;
name|boolean
name|present_state
init|=
literal|true
operator|&&
operator|(
name|isSetState
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_state
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_state
condition|)
name|list
operator|.
name|add
argument_list|(
name|state
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|present_type
init|=
literal|true
operator|&&
operator|(
name|isSetType
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_type
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_type
condition|)
name|list
operator|.
name|add
argument_list|(
name|type
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|present_txnid
init|=
literal|true
operator|&&
operator|(
name|isSetTxnid
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_txnid
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_txnid
condition|)
name|list
operator|.
name|add
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|boolean
name|present_lastheartbeat
init|=
literal|true
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_lastheartbeat
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_lastheartbeat
condition|)
name|list
operator|.
name|add
argument_list|(
name|lastheartbeat
argument_list|)
expr_stmt|;
name|boolean
name|present_acquiredat
init|=
literal|true
operator|&&
operator|(
name|isSetAcquiredat
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_acquiredat
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_acquiredat
condition|)
name|list
operator|.
name|add
argument_list|(
name|acquiredat
argument_list|)
expr_stmt|;
name|boolean
name|present_user
init|=
literal|true
operator|&&
operator|(
name|isSetUser
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_user
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_user
condition|)
name|list
operator|.
name|add
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|boolean
name|present_hostname
init|=
literal|true
operator|&&
operator|(
name|isSetHostname
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_hostname
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_hostname
condition|)
name|list
operator|.
name|add
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
name|boolean
name|present_heartbeatCount
init|=
literal|true
operator|&&
operator|(
name|isSetHeartbeatCount
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_heartbeatCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_heartbeatCount
condition|)
name|list
operator|.
name|add
argument_list|(
name|heartbeatCount
argument_list|)
expr_stmt|;
name|boolean
name|present_agentInfo
init|=
literal|true
operator|&&
operator|(
name|isSetAgentInfo
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_agentInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_agentInfo
condition|)
name|list
operator|.
name|add
argument_list|(
name|agentInfo
argument_list|)
expr_stmt|;
name|boolean
name|present_blockedByExtId
init|=
literal|true
operator|&&
operator|(
name|isSetBlockedByExtId
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_blockedByExtId
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_blockedByExtId
condition|)
name|list
operator|.
name|add
argument_list|(
name|blockedByExtId
argument_list|)
expr_stmt|;
name|boolean
name|present_blockedByIntId
init|=
literal|true
operator|&&
operator|(
name|isSetBlockedByIntId
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_blockedByIntId
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_blockedByIntId
condition|)
name|list
operator|.
name|add
argument_list|(
name|blockedByIntId
argument_list|)
expr_stmt|;
name|boolean
name|present_lockIdInternal
init|=
literal|true
operator|&&
operator|(
name|isSetLockIdInternal
argument_list|()
operator|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|present_lockIdInternal
argument_list|)
expr_stmt|;
if|if
condition|(
name|present_lockIdInternal
condition|)
name|list
operator|.
name|add
argument_list|(
name|lockIdInternal
argument_list|)
expr_stmt|;
return|return
name|list
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|ShowLocksResponseElement
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
name|getClass
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
name|int
name|lastComparison
init|=
literal|0
decl_stmt|;
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetLockid
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetLockid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetLockid
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|lockid
argument_list|,
name|other
operator|.
name|lockid
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetDbname
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetDbname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetDbname
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|dbname
argument_list|,
name|other
operator|.
name|dbname
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTablename
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetTablename
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTablename
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|tablename
argument_list|,
name|other
operator|.
name|tablename
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetPartname
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetPartname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetPartname
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|partname
argument_list|,
name|other
operator|.
name|partname
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetState
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetState
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetState
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|state
argument_list|,
name|other
operator|.
name|state
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetType
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetType
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|type
argument_list|,
name|other
operator|.
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetTxnid
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetTxnid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetTxnid
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|txnid
argument_list|,
name|other
operator|.
name|txnid
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetLastheartbeat
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetLastheartbeat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetLastheartbeat
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|lastheartbeat
argument_list|,
name|other
operator|.
name|lastheartbeat
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAcquiredat
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetAcquiredat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAcquiredat
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|acquiredat
argument_list|,
name|other
operator|.
name|acquiredat
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetUser
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetUser
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetUser
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|user
argument_list|,
name|other
operator|.
name|user
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetHostname
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetHostname
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetHostname
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|hostname
argument_list|,
name|other
operator|.
name|hostname
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetHeartbeatCount
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetHeartbeatCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetHeartbeatCount
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|heartbeatCount
argument_list|,
name|other
operator|.
name|heartbeatCount
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetAgentInfo
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetAgentInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetAgentInfo
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|agentInfo
argument_list|,
name|other
operator|.
name|agentInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBlockedByExtId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetBlockedByExtId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetBlockedByExtId
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|blockedByExtId
argument_list|,
name|other
operator|.
name|blockedByExtId
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetBlockedByIntId
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetBlockedByIntId
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetBlockedByIntId
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|blockedByIntId
argument_list|,
name|other
operator|.
name|blockedByIntId
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
name|lastComparison
operator|=
name|Boolean
operator|.
name|valueOf
argument_list|(
name|isSetLockIdInternal
argument_list|()
argument_list|)
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|isSetLockIdInternal
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
if|if
condition|(
name|isSetLockIdInternal
argument_list|()
condition|)
block|{
name|lastComparison
operator|=
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBaseHelper
operator|.
name|compareTo
argument_list|(
name|this
operator|.
name|lockIdInternal
argument_list|,
name|other
operator|.
name|lockIdInternal
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastComparison
operator|!=
literal|0
condition|)
block|{
return|return
name|lastComparison
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|_Fields
name|fieldForId
parameter_list|(
name|int
name|fieldId
parameter_list|)
block|{
return|return
name|_Fields
operator|.
name|findByThriftId
argument_list|(
name|fieldId
argument_list|)
return|;
block|}
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|iprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|read
argument_list|(
name|iprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|schemes
operator|.
name|get
argument_list|(
name|oprot
operator|.
name|getScheme
argument_list|()
argument_list|)
operator|.
name|getScheme
argument_list|()
operator|.
name|write
argument_list|(
name|oprot
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"ShowLocksResponseElement("
argument_list|)
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"lockid:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|lockid
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"dbname:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dbname
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|dbname
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetTablename
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"tablename:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|tablename
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|tablename
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetPartname
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"partname:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|partname
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|partname
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"state:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|state
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|state
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"type:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|type
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetTxnid
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"txnid:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|txnid
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"lastheartbeat:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|lastheartbeat
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetAcquiredat
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"acquiredat:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|acquiredat
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"user:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|user
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|user
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"hostname:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|hostname
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|hostname
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|isSetHeartbeatCount
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"heartbeatCount:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|heartbeatCount
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetAgentInfo
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"agentInfo:"
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|agentInfo
operator|==
literal|null
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|agentInfo
argument_list|)
expr_stmt|;
block|}
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetBlockedByExtId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"blockedByExtId:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|blockedByExtId
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetBlockedByIntId
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"blockedByIntId:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|blockedByIntId
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isSetLockIdInternal
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|sb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"lockIdInternal:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|this
operator|.
name|lockIdInternal
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|validate
parameter_list|()
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
comment|// check for required fields
if|if
condition|(
operator|!
name|isSetLockid
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'lockid' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSetDbname
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'dbname' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSetState
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'state' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSetType
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'type' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSetLastheartbeat
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'lastheartbeat' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSetUser
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'user' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSetHostname
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
argument_list|(
literal|"Required field 'hostname' is unset! Struct:"
operator|+
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// check for sub-struct validity
block|}
specifier|private
name|void
name|writeObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectOutputStream
name|out
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
try|try
block|{
name|write
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|out
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|readObject
parameter_list|(
name|java
operator|.
name|io
operator|.
name|ObjectInputStream
name|in
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
throws|,
name|ClassNotFoundException
block|{
try|try
block|{
comment|// it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
name|__isset_bitfield
operator|=
literal|0
expr_stmt|;
name|read
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
argument_list|(
operator|new
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TIOStreamTransport
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|java
operator|.
name|io
operator|.
name|IOException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ShowLocksResponseElementStandardSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|ShowLocksResponseElementStandardScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|ShowLocksResponseElementStandardScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ShowLocksResponseElementStandardScheme
extends|extends
name|StandardScheme
argument_list|<
name|ShowLocksResponseElement
argument_list|>
block|{
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|iprot
parameter_list|,
name|ShowLocksResponseElement
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TField
name|schemeField
decl_stmt|;
name|iprot
operator|.
name|readStructBegin
argument_list|()
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|schemeField
operator|=
name|iprot
operator|.
name|readFieldBegin
argument_list|()
expr_stmt|;
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STOP
condition|)
block|{
break|break;
block|}
switch|switch
condition|(
name|schemeField
operator|.
name|id
condition|)
block|{
case|case
literal|1
case|:
comment|// LOCKID
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|lockid
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setLockidIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|2
case|:
comment|// DBNAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|dbname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setDbnameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|3
case|:
comment|// TABLENAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|tablename
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTablenameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|4
case|:
comment|// PARTNAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|partname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setPartnameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|5
case|:
comment|// STATE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|state
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockState
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setStateIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|6
case|:
comment|// TYPE
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|type
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockType
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setTypeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|7
case|:
comment|// TXNID
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|txnid
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTxnidIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|8
case|:
comment|// LASTHEARTBEAT
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|lastheartbeat
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setLastheartbeatIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|9
case|:
comment|// ACQUIREDAT
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|acquiredat
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setAcquiredatIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|10
case|:
comment|// USER
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|user
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setUserIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|11
case|:
comment|// HOSTNAME
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|hostname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setHostnameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|12
case|:
comment|// HEARTBEAT_COUNT
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I32
condition|)
block|{
name|struct
operator|.
name|heartbeatCount
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setHeartbeatCountIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|13
case|:
comment|// AGENT_INFO
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|STRING
condition|)
block|{
name|struct
operator|.
name|agentInfo
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setAgentInfoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|14
case|:
comment|// BLOCKED_BY_EXT_ID
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|blockedByExtId
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setBlockedByExtIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|15
case|:
comment|// BLOCKED_BY_INT_ID
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|blockedByIntId
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setBlockedByIntIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|16
case|:
comment|// LOCK_ID_INTERNAL
if|if
condition|(
name|schemeField
operator|.
name|type
operator|==
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
operator|.
name|I64
condition|)
block|{
name|struct
operator|.
name|lockIdInternal
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setLockIdInternalIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|iprot
argument_list|,
name|schemeField
operator|.
name|type
argument_list|)
expr_stmt|;
block|}
name|iprot
operator|.
name|readFieldEnd
argument_list|()
expr_stmt|;
block|}
name|iprot
operator|.
name|readStructEnd
argument_list|()
expr_stmt|;
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|oprot
parameter_list|,
name|ShowLocksResponseElement
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|struct
operator|.
name|validate
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructBegin
argument_list|(
name|STRUCT_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LOCKID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|lockid
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|dbname
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|DBNAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|tablename
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetTablename
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TABLENAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|tablename
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|partname
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetPartname
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|PARTNAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|partname
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|state
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|STATE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|state
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|type
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TYPE_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|type
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTxnid
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|TXNID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|txnid
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LASTHEARTBEAT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|lastheartbeat
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetAcquiredat
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|ACQUIREDAT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|acquiredat
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|user
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|USER_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|user
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|hostname
operator|!=
literal|null
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|HOSTNAME_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|hostname
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetHeartbeatCount
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|HEARTBEAT_COUNT_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|heartbeatCount
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|agentInfo
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|struct
operator|.
name|isSetAgentInfo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|AGENT_INFO_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|agentInfo
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBlockedByExtId
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BLOCKED_BY_EXT_ID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|blockedByExtId
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBlockedByIntId
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|BLOCKED_BY_INT_ID_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|blockedByIntId
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetLockIdInternal
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeFieldBegin
argument_list|(
name|LOCK_ID_INTERNAL_FIELD_DESC
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|lockIdInternal
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeFieldEnd
argument_list|()
expr_stmt|;
block|}
name|oprot
operator|.
name|writeFieldStop
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|writeStructEnd
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ShowLocksResponseElementTupleSchemeFactory
implements|implements
name|SchemeFactory
block|{
specifier|public
name|ShowLocksResponseElementTupleScheme
name|getScheme
parameter_list|()
block|{
return|return
operator|new
name|ShowLocksResponseElementTupleScheme
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ShowLocksResponseElementTupleScheme
extends|extends
name|TupleScheme
argument_list|<
name|ShowLocksResponseElement
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|ShowLocksResponseElement
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|oprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|lockid
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|dbname
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|state
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|type
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|lastheartbeat
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|user
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|hostname
argument_list|)
expr_stmt|;
name|BitSet
name|optionals
init|=
operator|new
name|BitSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTablename
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetPartname
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTxnid
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAcquiredat
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetHeartbeatCount
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAgentInfo
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBlockedByExtId
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBlockedByIntId
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|7
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetLockIdInternal
argument_list|()
condition|)
block|{
name|optionals
operator|.
name|set
argument_list|(
literal|8
argument_list|)
expr_stmt|;
block|}
name|oprot
operator|.
name|writeBitSet
argument_list|(
name|optionals
argument_list|,
literal|9
argument_list|)
expr_stmt|;
if|if
condition|(
name|struct
operator|.
name|isSetTablename
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|tablename
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetPartname
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|partname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetTxnid
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|txnid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAcquiredat
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|acquiredat
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetHeartbeatCount
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI32
argument_list|(
name|struct
operator|.
name|heartbeatCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetAgentInfo
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeString
argument_list|(
name|struct
operator|.
name|agentInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBlockedByExtId
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|blockedByExtId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetBlockedByIntId
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|blockedByIntId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|struct
operator|.
name|isSetLockIdInternal
argument_list|()
condition|)
block|{
name|oprot
operator|.
name|writeI64
argument_list|(
name|struct
operator|.
name|lockIdInternal
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
name|prot
parameter_list|,
name|ShowLocksResponseElement
name|struct
parameter_list|)
throws|throws
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|TTupleProtocol
name|iprot
init|=
operator|(
name|TTupleProtocol
operator|)
name|prot
decl_stmt|;
name|struct
operator|.
name|lockid
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setLockidIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|struct
operator|.
name|dbname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setDbnameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|struct
operator|.
name|state
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockState
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setStateIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|struct
operator|.
name|type
operator|=
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockType
operator|.
name|findByValue
argument_list|(
name|iprot
operator|.
name|readI32
argument_list|()
argument_list|)
expr_stmt|;
name|struct
operator|.
name|setTypeIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|struct
operator|.
name|lastheartbeat
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setLastheartbeatIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|struct
operator|.
name|user
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setUserIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|struct
operator|.
name|hostname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setHostnameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|BitSet
name|incoming
init|=
name|iprot
operator|.
name|readBitSet
argument_list|(
literal|9
argument_list|)
decl_stmt|;
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|0
argument_list|)
condition|)
block|{
name|struct
operator|.
name|tablename
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTablenameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|struct
operator|.
name|partname
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setPartnameIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|struct
operator|.
name|txnid
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setTxnidIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|3
argument_list|)
condition|)
block|{
name|struct
operator|.
name|acquiredat
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setAcquiredatIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|4
argument_list|)
condition|)
block|{
name|struct
operator|.
name|heartbeatCount
operator|=
name|iprot
operator|.
name|readI32
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setHeartbeatCountIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|5
argument_list|)
condition|)
block|{
name|struct
operator|.
name|agentInfo
operator|=
name|iprot
operator|.
name|readString
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setAgentInfoIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|6
argument_list|)
condition|)
block|{
name|struct
operator|.
name|blockedByExtId
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setBlockedByExtIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|7
argument_list|)
condition|)
block|{
name|struct
operator|.
name|blockedByIntId
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setBlockedByIntIdIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|incoming
operator|.
name|get
argument_list|(
literal|8
argument_list|)
condition|)
block|{
name|struct
operator|.
name|lockIdInternal
operator|=
name|iprot
operator|.
name|readI64
argument_list|()
expr_stmt|;
name|struct
operator|.
name|setLockIdInternalIsSet
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

