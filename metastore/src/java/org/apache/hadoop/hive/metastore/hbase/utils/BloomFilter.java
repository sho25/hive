begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|util
operator|.
name|Hash
import|;
end_import

begin_comment
comment|/**  * Barebones bloom filter implementation  */
end_comment

begin_class
specifier|public
class|class
name|BloomFilter
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|BloomFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// The cardinality of the set for which we are generating the bloom filter
comment|// Default size is 10000
specifier|private
name|int
name|setSize
init|=
literal|10000
decl_stmt|;
comment|// The probability of false positives we are ready to tolerate
comment|// Default is 1%
specifier|private
name|double
name|falsePositiveProbability
init|=
literal|0.01
decl_stmt|;
comment|// Number of bits used for the filter
comment|// Formula: -n*ln(p) / (ln(2)^2)
specifier|private
name|int
name|numBits
decl_stmt|;
comment|// Number of hashing functions
comment|// Formula: m/n * ln(2)
specifier|private
name|int
name|numHashFunctions
decl_stmt|;
specifier|private
specifier|final
name|Hash
name|hash
decl_stmt|;
specifier|private
name|BitVector
name|bitVector
decl_stmt|;
specifier|public
name|BloomFilter
parameter_list|(
name|int
name|setSize
parameter_list|,
name|double
name|falsePositiveProbability
parameter_list|)
block|{
name|this
operator|.
name|setSize
operator|=
name|setSize
expr_stmt|;
name|this
operator|.
name|falsePositiveProbability
operator|=
name|falsePositiveProbability
expr_stmt|;
name|this
operator|.
name|numBits
operator|=
name|calculateFilterSize
argument_list|(
name|this
operator|.
name|setSize
argument_list|,
name|this
operator|.
name|falsePositiveProbability
argument_list|)
expr_stmt|;
name|this
operator|.
name|numHashFunctions
operator|=
name|calculateHashFunctions
argument_list|(
name|this
operator|.
name|setSize
argument_list|,
name|this
operator|.
name|numBits
argument_list|)
expr_stmt|;
comment|// Create a bit vector of size numBits
name|this
operator|.
name|bitVector
operator|=
operator|new
name|BitVector
argument_list|(
name|numBits
argument_list|)
expr_stmt|;
comment|// Use MurmurHash3
name|hash
operator|=
name|Hash
operator|.
name|getInstance
argument_list|(
name|Hash
operator|.
name|MURMUR_HASH3
argument_list|)
expr_stmt|;
block|}
comment|/**    * Calculate the number of bits in the filter    * Also align size to BitVector.HOLDER_SIZE    * @param setSize    * @param falsePositiveProbability    * @return numBits    */
specifier|private
name|int
name|calculateFilterSize
parameter_list|(
name|int
name|setSize
parameter_list|,
name|double
name|falsePositiveProbability
parameter_list|)
block|{
name|int
name|numBits
init|=
call|(
name|int
call|)
argument_list|(
operator|-
name|setSize
operator|*
name|Math
operator|.
name|log
argument_list|(
name|falsePositiveProbability
argument_list|)
operator|/
operator|(
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
operator|*
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
operator|)
argument_list|)
decl_stmt|;
name|numBits
operator|=
name|numBits
operator|+
operator|(
name|BitVector
operator|.
name|ELEMENT_SIZE
operator|-
operator|(
name|numBits
operator|%
name|BitVector
operator|.
name|ELEMENT_SIZE
operator|)
operator|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Bloom Filter size: "
operator|+
name|numBits
argument_list|)
expr_stmt|;
return|return
name|numBits
return|;
block|}
comment|/**    * Calculate the number of hash functions needed by the BloomFilter    * @param setSize    * @param numBits    * @return numHashFunctions    */
specifier|private
name|int
name|calculateHashFunctions
parameter_list|(
name|int
name|setSize
parameter_list|,
name|int
name|numBits
parameter_list|)
block|{
name|int
name|numHashFunctions
init|=
name|Math
operator|.
name|max
argument_list|(
literal|1
argument_list|,
operator|(
name|int
operator|)
name|Math
operator|.
name|round
argument_list|(
operator|(
name|double
operator|)
name|numBits
operator|/
name|setSize
operator|*
name|Math
operator|.
name|log
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Number of hashing functions: "
operator|+
name|numHashFunctions
argument_list|)
expr_stmt|;
return|return
name|numHashFunctions
return|;
block|}
comment|/**    * @return the underlying BitVector object    */
specifier|public
name|BitVector
name|getBitVector
parameter_list|()
block|{
return|return
name|bitVector
return|;
block|}
specifier|public
name|int
name|getFilterSize
parameter_list|()
block|{
return|return
name|numBits
return|;
block|}
specifier|public
name|int
name|getNumHashFunctions
parameter_list|()
block|{
return|return
name|numHashFunctions
return|;
block|}
comment|/**    * Add an item to the filter    *    * @param item to add    */
specifier|public
name|void
name|addToFilter
parameter_list|(
name|byte
index|[]
name|item
parameter_list|)
block|{
name|int
name|bitIndex
decl_stmt|;
comment|// Hash the item numHashFunctions times
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numHashFunctions
condition|;
name|i
operator|++
control|)
block|{
name|bitIndex
operator|=
name|getBitIndex
argument_list|(
name|item
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Set the bit at this index
name|bitVector
operator|.
name|setBit
argument_list|(
name|bitIndex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * Check whether the item is present in the filter    * @param candidate    * @return hasItem (true if the bloom filter contains the item)    */
specifier|public
name|boolean
name|contains
parameter_list|(
name|byte
index|[]
name|item
parameter_list|)
block|{
name|int
name|bitIndex
decl_stmt|;
name|boolean
name|hasItem
init|=
literal|true
decl_stmt|;
comment|// Hash the item numHashFunctions times
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numHashFunctions
condition|;
name|i
operator|++
control|)
block|{
name|bitIndex
operator|=
name|getBitIndex
argument_list|(
name|item
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|hasItem
operator|=
name|hasItem
operator|&&
name|bitVector
operator|.
name|isBitSet
argument_list|(
name|bitIndex
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|hasItem
condition|)
block|{
return|return
name|hasItem
return|;
block|}
block|}
return|return
name|hasItem
return|;
block|}
comment|/**    * Hash the item using the i as the seed and return its potential position in the bit vector    * Also we negate a negative hash value    *    * @param item    * @param i (for the i-th hash function)    * @return position of item in unerlying bit vector    */
specifier|private
name|int
name|getBitIndex
parameter_list|(
name|byte
index|[]
name|item
parameter_list|,
name|int
name|i
parameter_list|)
block|{
return|return
name|Math
operator|.
name|abs
argument_list|(
name|hash
operator|.
name|hash
argument_list|(
name|item
argument_list|,
name|i
argument_list|)
operator|%
operator|(
name|numBits
operator|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

