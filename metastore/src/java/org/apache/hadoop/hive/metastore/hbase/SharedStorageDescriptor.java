begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A {@link org.apache.hadoop.hive.metastore.api.StorageDescriptor} with most of it's content  * shallow copied from the underlying storage descriptor.  Location and parameters are left alone.  * To avoid issues when users change the contents, all lists and nested structures (cols, serde,  * buckets, sortCols, and skewed) are deep copied when they are accessed for reading or writing.  * (It has to be done on read as well because there's no way to guarantee the user won't change the  * nested structure or list, which would result in changing every storage descriptor sharing that  * structure.)  Users wishing better performance can call setReadyOnly(), which will prevent the  * copies.  */
end_comment

begin_class
specifier|public
class|class
name|SharedStorageDescriptor
extends|extends
name|StorageDescriptor
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|SharedStorageDescriptor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|colsCopied
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|serdeCopied
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|bucketsCopied
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|sortCopied
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|skewedCopied
init|=
literal|false
decl_stmt|;
name|SharedStorageDescriptor
parameter_list|()
block|{   }
name|void
name|setShared
parameter_list|(
name|StorageDescriptor
name|shared
parameter_list|)
block|{
if|if
condition|(
name|shared
operator|.
name|getCols
argument_list|()
operator|!=
literal|null
condition|)
name|super
operator|.
name|setCols
argument_list|(
name|shared
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
comment|// Skip location
if|if
condition|(
name|shared
operator|.
name|getInputFormat
argument_list|()
operator|!=
literal|null
condition|)
name|super
operator|.
name|setInputFormat
argument_list|(
name|shared
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|shared
operator|.
name|getOutputFormat
argument_list|()
operator|!=
literal|null
condition|)
name|super
operator|.
name|setOutputFormat
argument_list|(
name|shared
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setCompressed
argument_list|(
name|shared
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setNumBuckets
argument_list|(
name|shared
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|shared
operator|.
name|getSerdeInfo
argument_list|()
operator|!=
literal|null
condition|)
name|super
operator|.
name|setSerdeInfo
argument_list|(
name|shared
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|shared
operator|.
name|getBucketCols
argument_list|()
operator|!=
literal|null
condition|)
name|super
operator|.
name|setBucketCols
argument_list|(
name|shared
operator|.
name|getBucketCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|shared
operator|.
name|getSortCols
argument_list|()
operator|!=
literal|null
condition|)
name|super
operator|.
name|setSortCols
argument_list|(
name|shared
operator|.
name|getSortCols
argument_list|()
argument_list|)
expr_stmt|;
comment|// skip parameters
if|if
condition|(
name|shared
operator|.
name|getSkewedInfo
argument_list|()
operator|!=
literal|null
condition|)
name|super
operator|.
name|setSkewedInfo
argument_list|(
name|shared
operator|.
name|getSkewedInfo
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|shared
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**    * Promise that you'll only use this shared storage descriptor in a read only mode.    * This prevents the copies of the nested structures and lists when reading them.  However, the    * caller must not change the structures or lists returned to it, as this will change all    * storage descriptor sharing that list.    */
specifier|public
name|void
name|setReadOnly
parameter_list|()
block|{
name|colsCopied
operator|=
name|serdeCopied
operator|=
name|bucketsCopied
operator|=
name|sortCopied
operator|=
name|skewedCopied
operator|=
literal|true
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addToCols
parameter_list|(
name|FieldSchema
name|fs
parameter_list|)
block|{
name|copyCols
argument_list|()
expr_stmt|;
name|super
operator|.
name|addToCols
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getCols
parameter_list|()
block|{
name|copyCols
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getCols
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCols
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
parameter_list|)
block|{
name|colsCopied
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unsetCols
parameter_list|()
block|{
name|colsCopied
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|unsetCols
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|FieldSchema
argument_list|>
name|getColsIterator
parameter_list|()
block|{
name|copyCols
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getColsIterator
argument_list|()
return|;
block|}
specifier|private
name|void
name|copyCols
parameter_list|()
block|{
if|if
condition|(
operator|!
name|colsCopied
condition|)
block|{
name|colsCopied
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|super
operator|.
name|getCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|cols
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|super
operator|.
name|getColsSize
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|super
operator|.
name|getCols
argument_list|()
control|)
name|cols
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|setCols
argument_list|(
name|cols
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|SerDeInfo
name|getSerdeInfo
parameter_list|()
block|{
name|copySerde
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getSerdeInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSerdeInfo
parameter_list|(
name|SerDeInfo
name|serdeInfo
parameter_list|)
block|{
name|serdeCopied
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|setSerdeInfo
argument_list|(
name|serdeInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unsetSerdeInfo
parameter_list|()
block|{
name|serdeCopied
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|unsetSerdeInfo
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|copySerde
parameter_list|()
block|{
if|if
condition|(
operator|!
name|serdeCopied
condition|)
block|{
name|serdeCopied
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|super
operator|.
name|getSerdeInfo
argument_list|()
operator|!=
literal|null
condition|)
name|super
operator|.
name|setSerdeInfo
argument_list|(
operator|new
name|SerDeInfo
argument_list|(
name|super
operator|.
name|getSerdeInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addToBucketCols
parameter_list|(
name|String
name|bucket
parameter_list|)
block|{
name|copyBucketCols
argument_list|()
expr_stmt|;
name|super
operator|.
name|addToBucketCols
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getBucketCols
parameter_list|()
block|{
name|copyBucketCols
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getBucketCols
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setBucketCols
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|buckets
parameter_list|)
block|{
name|bucketsCopied
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|setBucketCols
argument_list|(
name|buckets
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unsetBucketCols
parameter_list|()
block|{
name|bucketsCopied
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|unsetBucketCols
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getBucketColsIterator
parameter_list|()
block|{
name|copyBucketCols
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getBucketColsIterator
argument_list|()
return|;
block|}
specifier|private
name|void
name|copyBucketCols
parameter_list|()
block|{
if|if
condition|(
operator|!
name|bucketsCopied
condition|)
block|{
name|bucketsCopied
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|super
operator|.
name|getBucketCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|buckets
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|super
operator|.
name|getBucketColsSize
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|bucket
range|:
name|super
operator|.
name|getBucketCols
argument_list|()
control|)
name|buckets
operator|.
name|add
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
name|super
operator|.
name|setBucketCols
argument_list|(
name|buckets
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addToSortCols
parameter_list|(
name|Order
name|sort
parameter_list|)
block|{
name|copySort
argument_list|()
expr_stmt|;
name|super
operator|.
name|addToSortCols
argument_list|(
name|sort
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Order
argument_list|>
name|getSortCols
parameter_list|()
block|{
name|copySort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getSortCols
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSortCols
parameter_list|(
name|List
argument_list|<
name|Order
argument_list|>
name|sorts
parameter_list|)
block|{
name|sortCopied
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|setSortCols
argument_list|(
name|sorts
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unsetSortCols
parameter_list|()
block|{
name|sortCopied
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|unsetSortCols
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Order
argument_list|>
name|getSortColsIterator
parameter_list|()
block|{
name|copySort
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getSortColsIterator
argument_list|()
return|;
block|}
specifier|private
name|void
name|copySort
parameter_list|()
block|{
if|if
condition|(
operator|!
name|sortCopied
condition|)
block|{
name|sortCopied
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|super
operator|.
name|getSortCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
init|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|(
name|super
operator|.
name|getSortColsSize
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Order
name|sortCol
range|:
name|super
operator|.
name|getSortCols
argument_list|()
control|)
name|sortCols
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
name|sortCol
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|setSortCols
argument_list|(
name|sortCols
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|SkewedInfo
name|getSkewedInfo
parameter_list|()
block|{
name|copySkewed
argument_list|()
expr_stmt|;
return|return
name|super
operator|.
name|getSkewedInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSkewedInfo
parameter_list|(
name|SkewedInfo
name|skewedInfo
parameter_list|)
block|{
name|skewedCopied
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|setSkewedInfo
argument_list|(
name|skewedInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unsetSkewedInfo
parameter_list|()
block|{
name|skewedCopied
operator|=
literal|true
expr_stmt|;
name|super
operator|.
name|unsetSkewedInfo
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|copySkewed
parameter_list|()
block|{
if|if
condition|(
operator|!
name|skewedCopied
condition|)
block|{
name|skewedCopied
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|super
operator|.
name|getSkewedInfo
argument_list|()
operator|!=
literal|null
condition|)
name|super
operator|.
name|setSkewedInfo
argument_list|(
operator|new
name|SkewedInfo
argument_list|(
name|super
operator|.
name|getSkewedInfo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

