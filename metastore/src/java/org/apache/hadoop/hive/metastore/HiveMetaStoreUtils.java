begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|utils
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ListObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|MapObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|ReflectionUtil
import|;
end_import

begin_class
specifier|public
class|class
name|HiveMetaStoreUtils
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"hive.log"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|HiveClientCache
name|hiveClientCache
decl_stmt|;
comment|/**    * getDeserializer    *    * Get the Deserializer for a table.    *    * @param conf    *          - hadoop config    * @param table    *          the table    * @return    *   Returns instantiated deserializer by looking up class name of deserializer stored in    *   storage descriptor of passed in table. Also, initializes the deserializer with schema    *   of table.    * @exception MetaException    *              if any problems instantiating the Deserializer    *    *              todo - this should move somewhere into serde.jar    *    */
specifier|static
specifier|public
name|Deserializer
name|getDeserializer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
parameter_list|,
name|boolean
name|skipConfError
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|lib
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
decl_stmt|;
if|if
condition|(
name|lib
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|getDeserializer
argument_list|(
name|conf
argument_list|,
name|table
argument_list|,
name|skipConfError
argument_list|,
name|lib
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Deserializer
name|getDeserializer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
parameter_list|,
name|boolean
name|skipConfError
parameter_list|,
name|String
name|lib
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
name|Deserializer
name|deserializer
init|=
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|lib
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Deserializer
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|skipConfError
condition|)
block|{
name|SerDeUtils
operator|.
name|initializeSerDeWithoutErrorCheck
argument_list|(
name|deserializer
argument_list|,
name|conf
argument_list|,
name|MetaStoreUtils
operator|.
name|getTableMetadata
argument_list|(
name|table
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|deserializer
argument_list|,
name|conf
argument_list|,
name|MetaStoreUtils
operator|.
name|getTableMetadata
argument_list|(
name|table
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|deserializer
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error in initSerDe: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|Class
argument_list|<
name|?
extends|extends
name|Deserializer
argument_list|>
name|getDeserializerClass
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|lib
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
decl_stmt|;
return|return
name|lib
operator|==
literal|null
condition|?
literal|null
else|:
name|conf
operator|.
name|getClassByName
argument_list|(
name|lib
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Deserializer
operator|.
name|class
argument_list|)
return|;
block|}
comment|/**    * getDeserializer    *    * Get the Deserializer for a partition.    *    * @param conf    *          - hadoop config    * @param part    *          the partition    * @param table the table    * @return    *   Returns instantiated deserializer by looking up class name of deserializer stored in    *   storage descriptor of passed in partition. Also, initializes the deserializer with    *   schema of partition.    * @exception MetaException    *              if any problems instantiating the Deserializer    *    */
specifier|static
specifier|public
name|Deserializer
name|getDeserializer
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
name|part
parameter_list|,
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|lib
init|=
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
decl_stmt|;
try|try
block|{
name|Deserializer
name|deserializer
init|=
name|ReflectionUtil
operator|.
name|newInstance
argument_list|(
name|conf
operator|.
name|getClassByName
argument_list|(
name|lib
argument_list|)
operator|.
name|asSubclass
argument_list|(
name|Deserializer
operator|.
name|class
argument_list|)
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|SerDeUtils
operator|.
name|initializeSerDe
argument_list|(
name|deserializer
argument_list|,
name|conf
argument_list|,
name|MetaStoreUtils
operator|.
name|getTableMetadata
argument_list|(
name|table
argument_list|)
argument_list|,
name|MetaStoreUtils
operator|.
name|getPartitionMetadata
argument_list|(
name|part
argument_list|,
name|table
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|deserializer
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error in initSerDe: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param tableName name of the table    * @param deserializer deserializer to use    * @return the list of fields    * @throws SerDeException if the serde throws an exception    * @throws MetaException if one of the fields or types in the table is invalid    */
specifier|public
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFieldsFromDeserializer
parameter_list|(
name|String
name|tableName
parameter_list|,
name|Deserializer
name|deserializer
parameter_list|)
throws|throws
name|SerDeException
throws|,
name|MetaException
block|{
name|ObjectInspector
name|oi
init|=
name|deserializer
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
name|String
index|[]
name|names
init|=
name|tableName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
name|last_name
init|=
name|names
index|[
name|names
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|oi
operator|instanceof
name|StructObjectInspector
condition|)
block|{
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|StructField
name|sf
init|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Invalid Field "
operator|+
name|names
index|[
name|i
index|]
argument_list|)
throw|;
block|}
else|else
block|{
name|oi
operator|=
name|sf
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|ListObjectInspector
operator|&&
name|names
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"$elem$"
argument_list|)
condition|)
block|{
name|ListObjectInspector
name|loi
init|=
operator|(
name|ListObjectInspector
operator|)
name|oi
decl_stmt|;
name|oi
operator|=
name|loi
operator|.
name|getListElementObjectInspector
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|MapObjectInspector
operator|&&
name|names
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"$key$"
argument_list|)
condition|)
block|{
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|oi
operator|=
name|moi
operator|.
name|getMapKeyObjectInspector
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oi
operator|instanceof
name|MapObjectInspector
operator|&&
name|names
index|[
name|i
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"$value$"
argument_list|)
condition|)
block|{
name|MapObjectInspector
name|moi
init|=
operator|(
name|MapObjectInspector
operator|)
name|oi
decl_stmt|;
name|oi
operator|=
name|moi
operator|.
name|getMapValueObjectInspector
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unknown type for "
operator|+
name|names
index|[
name|i
index|]
argument_list|)
throw|;
block|}
block|}
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|str_fields
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// rules on how to recurse the ObjectInspector based on its type
if|if
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|STRUCT
condition|)
block|{
name|str_fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|last_name
argument_list|,
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|,
name|FROM_SERIALIZER
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|StructField
name|structField
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|fieldName
init|=
name|structField
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
name|structField
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
name|String
name|fieldComment
init|=
name|determineFieldComment
argument_list|(
name|structField
operator|.
name|getFieldComment
argument_list|()
argument_list|)
decl_stmt|;
name|str_fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|fieldName
argument_list|,
name|fieldTypeName
argument_list|,
name|fieldComment
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|str_fields
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|FROM_SERIALIZER
init|=
literal|"from deserializer"
decl_stmt|;
specifier|private
specifier|static
name|String
name|determineFieldComment
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
return|return
operator|(
name|comment
operator|==
literal|null
operator|)
condition|?
name|FROM_SERIALIZER
else|:
name|comment
return|;
block|}
comment|/**    * Convert TypeInfo to FieldSchema.    */
specifier|public
specifier|static
name|FieldSchema
name|getFieldSchemaFromTypeInfo
parameter_list|(
name|String
name|fieldName
parameter_list|,
name|TypeInfo
name|typeInfo
parameter_list|)
block|{
return|return
operator|new
name|FieldSchema
argument_list|(
name|fieldName
argument_list|,
name|typeInfo
operator|.
name|getTypeName
argument_list|()
argument_list|,
literal|"generated by TypeInfoUtils.getFieldSchemaFromTypeInfo"
argument_list|)
return|;
block|}
comment|/**    * Get or create a hive client depending on whether it exits in cache or not    * @param hiveConf The hive configuration    * @return the client    * @throws MetaException When HiveMetaStoreClient couldn't be created    * @throws IOException    */
specifier|public
specifier|static
name|IMetaStoreClient
name|getHiveMetastoreClient
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|MetaException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_CLIENT_CACHE_ENABLED
argument_list|)
condition|)
block|{
comment|// If cache is disabled, don't use it.
return|return
name|HiveClientCache
operator|.
name|getNonCachedHiveMetastoreClient
argument_list|(
name|hiveConf
argument_list|)
return|;
block|}
comment|// Singleton behaviour: create the cache instance if required.
if|if
condition|(
name|hiveClientCache
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|IMetaStoreClient
operator|.
name|class
init|)
block|{
if|if
condition|(
name|hiveClientCache
operator|==
literal|null
condition|)
block|{
name|hiveClientCache
operator|=
operator|new
name|HiveClientCache
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
block|}
block|}
try|try
block|{
return|return
name|hiveClientCache
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Couldn't create hiveMetaStoreClient, Error getting UGI for user"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

