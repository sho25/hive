begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ThriftMetaStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructField
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|StructObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
operator|.
name|Category
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|fb_status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TApplicationException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|server
operator|.
name|TThreadPoolServer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_comment
comment|/**  * MetaStore thrift Service Implementation  *  * A thrift wrapper around the MetaStore exposing most of its interfaces to any thrift client.  *  *  *  */
end_comment

begin_class
specifier|public
class|class
name|MetaStoreServer
extends|extends
name|ThriftMetaStore
block|{
specifier|public
specifier|static
class|class
name|ThriftMetaStoreHandler
extends|extends
name|FacebookBase
implements|implements
name|ThriftMetaStore
operator|.
name|Iface
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"org.apache.hadoop.hive.metastore"
argument_list|)
decl_stmt|;
specifier|public
name|void
name|setOption
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|val
parameter_list|)
block|{     }
comment|/**      * getStatus      *      * @return ALIVE      */
specifier|public
name|int
name|getStatus
parameter_list|()
block|{
return|return
name|fb_status
operator|.
name|ALIVE
return|;
block|}
comment|/**      * getVersion      *      * @return current version of the store. Should proxy this request to the MetaStore class actually!      */
specifier|public
name|String
name|getVersion
parameter_list|()
block|{
return|return
literal|"0.1"
return|;
block|}
comment|/**      * shutdown      *      * cleanly closes everything and exit.      */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"MetaStoreServer shutting down."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Shutting down because of an explicit shutdown command."
argument_list|)
throw|;
block|}
name|Configuration
name|conf_
decl_stmt|;
comment|/**      * ThriftMetaStoreHandler      *      * Constructor for the MetaStore glue with Thrift Class.      *      * @param name - the name of this handler      */
specifier|public
name|ThriftMetaStoreHandler
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|conf_
operator|=
operator|new
name|HiveConf
argument_list|(
name|ThriftMetaStoreHandler
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ThriftMetaStoreHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|conf_
operator|=
name|configuration
expr_stmt|;
block|}
comment|// NOTE - pattern does not apply to dbs - the prefix must be a valid db or assumes default db
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|get_tables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|TException
throws|,
name|MetaException
throws|,
name|UnknownDBException
block|{
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"get_tables"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"get_tables("
operator|+
name|dbName
operator|+
literal|","
operator|+
name|pattern
operator|+
literal|")"
argument_list|)
expr_stmt|;
try|try
block|{
name|DB
name|db
init|=
operator|new
name|DB
argument_list|(
name|dbName
argument_list|,
name|conf_
argument_list|)
decl_stmt|;
return|return
name|db
operator|.
name|getTables
argument_list|(
name|pattern
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"exceptions"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception in get_tables: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|TApplicationException
argument_list|(
literal|"MetaException getting tables:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"get_tables got a runtime exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MetaStoreUtils
operator|.
name|printStackTrace
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"get_tables had an internal Java RuntimeException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|cat
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partition
parameter_list|,
name|int
name|num
parameter_list|)
throws|throws
name|TException
throws|,
name|MetaException
throws|,
name|UnknownDBException
throws|,
name|UnknownTableException
block|{
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"cat"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"cat("
operator|+
name|tableName
operator|+
literal|","
operator|+
name|partition
operator|+
literal|","
operator|+
name|num
operator|+
literal|")"
argument_list|)
expr_stmt|;
comment|//            return Cat.cat(tableName, partition, num);
return|return
literal|null
return|;
block|}
comment|/**      * get_dbs      *      * @return a list of all the dbs      * @exception TException if Thrift problem.      * @exception MetaException if internal meta store problem      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_dbs
parameter_list|()
throws|throws
name|TException
throws|,
name|MetaException
block|{
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"get_dbs"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"get_dbs()"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|new
name|FileStore
argument_list|(
name|conf_
argument_list|)
operator|.
name|getDatabases
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"exceptions"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception in get_dbs: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|TApplicationException
argument_list|(
literal|"MetaException getting dbs:"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"get_dbs got a runtime exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MetaStoreUtils
operator|.
name|printStackTrace
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"get_dbs had an internal Java RuntimeException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * getPartitions      *      * return a table's partitions      *      * @param tableName - a valid table name      * @param low - low index      * @param high - high index      * @return a string (including '\n's) of the rows      * @exception TException if thrift problem      * @exception MetaException if internal problem or bad input      * @exception UnknownTableException if we don't know about this table.      */
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|get_partitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|TException
throws|,
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"getPartitions"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"getPartitions("
operator|+
name|dbName
operator|+
literal|","
operator|+
name|tableName
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
operator|new
name|DB
argument_list|(
name|dbName
argument_list|,
name|conf_
argument_list|)
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
operator|.
name|getPartitions
argument_list|()
return|;
block|}
comment|/**      * table_exists      *      * check if the table's schema exists in the metastore      *      * @param tableName - a valid table name      * @return true/false      * @exception TException if thrift problem      * @exception MetaException if internal problem or bad input      */
specifier|public
name|boolean
name|table_exists
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|TException
throws|,
name|MetaException
throws|,
name|UnknownDBException
block|{
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"schema_exists"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"schema_exists("
operator|+
name|dbName
operator|+
literal|","
operator|+
name|tableName
operator|+
literal|")"
argument_list|)
expr_stmt|;
try|try
block|{
return|return
operator|new
name|DB
argument_list|(
name|dbName
argument_list|,
name|conf_
argument_list|)
operator|.
name|tableExists
argument_list|(
name|tableName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception in schema_exists: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"exceptions"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception in schema_exists: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"exceptions"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"schema_exists got a runtime exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MetaStoreUtils
operator|.
name|printStackTrace
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"schema_exists had an internal Java RuntimeException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * alter_table      *      * For a columnsetSerDe table, add column names to it      *      * @param tableName - a valid existing table name      * @param columns - ordered list of column names      * @exception TException if thrift problem      * @exception MetaException if internal problem or bad input      * @exception UnknownTableException if table does not exist already      */
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|)
throws|throws
name|TException
throws|,
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"alter_table"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"alter_table("
operator|+
name|dbName
operator|+
literal|","
operator|+
name|tableName
operator|+
literal|","
operator|+
name|schema
operator|+
literal|")"
argument_list|)
expr_stmt|;
try|try
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
name|schema
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|new
name|DB
argument_list|(
name|dbName
argument_list|,
name|conf_
argument_list|)
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
operator|.
name|alter
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception in alter_table: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"exceptions"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"alter_table got a runtime exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MetaStoreUtils
operator|.
name|printStackTrace
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"alter_table had an internal Java RuntimeException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * create_table      *      * Create names columns for a columnset type table      *      * @param tableName - a valid table name      * @param columns - ordered list of column names      * @exception TException if thrift problem      * @exception MetaException if internal problem or bad input      */
specifier|public
name|void
name|create_table
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema
parameter_list|)
throws|throws
name|TException
throws|,
name|MetaException
throws|,
name|UnknownDBException
block|{
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"create_table"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"create_table("
operator|+
name|dbName
operator|+
literal|","
operator|+
name|tableName
operator|+
literal|")"
argument_list|)
expr_stmt|;
try|try
block|{
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
name|schema
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DB
name|db
init|=
operator|new
name|DB
argument_list|(
name|dbName
argument_list|,
name|conf_
argument_list|)
decl_stmt|;
name|RWTable
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|,
name|p
argument_list|,
name|conf_
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception in create_table: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"exceptions"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception in create_table: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"exceptions"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"create_table got a runtime exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MetaStoreUtils
operator|.
name|printStackTrace
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"create_table had an internal Java RuntimeException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|get_fields
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|table_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
name|str_fields
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|names
init|=
name|table_name
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
name|base_table_name
init|=
name|names
index|[
literal|0
index|]
decl_stmt|;
name|String
name|last_name
init|=
name|names
index|[
name|names
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|schema_map
init|=
name|get_schema
argument_list|(
name|base_table_name
argument_list|)
decl_stmt|;
comment|// will throw UnknownTableException if not found
name|Properties
name|p
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|it
init|=
name|schema_map
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|p
operator|.
name|setProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// xxx
try|try
block|{
comment|//            Table t = Table.readTable(p, this.db);
name|Deserializer
name|s
init|=
name|MetaStoreUtils
operator|.
name|getDeserializer
argument_list|(
name|conf_
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|ObjectInspector
name|oi
init|=
name|s
operator|.
name|getObjectInspector
argument_list|()
decl_stmt|;
comment|// recurse down the type.subtype.subsubtype expression until at the desired type
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|oi
operator|instanceof
name|StructObjectInspector
operator|)
condition|)
block|{
name|oi
operator|=
name|s
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
break|break;
block|}
name|StructObjectInspector
name|soi
init|=
operator|(
name|StructObjectInspector
operator|)
name|oi
decl_stmt|;
name|StructField
name|sf
init|=
name|soi
operator|.
name|getStructFieldRef
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|sf
operator|==
literal|null
condition|)
block|{
comment|// If invalid field, then return the schema of the table
name|oi
operator|=
name|s
operator|.
name|getObjectInspector
argument_list|()
expr_stmt|;
break|break;
block|}
else|else
block|{
name|oi
operator|=
name|sf
operator|.
name|getFieldObjectInspector
argument_list|()
expr_stmt|;
block|}
block|}
comment|// rules on how to recurse the SerDe based on its type
if|if
condition|(
name|oi
operator|.
name|getCategory
argument_list|()
operator|!=
name|Category
operator|.
name|STRUCT
condition|)
block|{
name|str_fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|last_name
argument_list|,
name|oi
operator|.
name|getTypeName
argument_list|()
argument_list|,
literal|"automatically generated"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|?
extends|extends
name|StructField
argument_list|>
name|fields
init|=
operator|(
operator|(
name|StructObjectInspector
operator|)
name|oi
operator|)
operator|.
name|getAllStructFieldRefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|fieldName
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldName
argument_list|()
decl_stmt|;
name|String
name|fieldTypeName
init|=
name|fields
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getFieldObjectInspector
argument_list|()
operator|.
name|getTypeName
argument_list|()
decl_stmt|;
name|str_fields
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|fieldName
argument_list|,
name|fieldTypeName
argument_list|,
literal|"automatically generated"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|str_fields
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|MetaException
name|m
init|=
operator|new
name|MetaException
argument_list|()
decl_stmt|;
name|m
operator|.
name|setMessage
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|m
throw|;
block|}
block|}
comment|/**      * drop      *      * drop a table      *      * @param tableName - a valid existing table name      * @param delete_data - should the store auto delete the data.      * @exception TException if thrift problem      * @exception MetaException if internal problem or bad input      * @exception UnknownTableException if table does not exist already      */
specifier|public
name|void
name|drop_table
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|TException
throws|,
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"drop"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"drop("
operator|+
name|dbName
operator|+
literal|","
operator|+
name|tableName
operator|+
literal|")"
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|DB
argument_list|(
name|dbName
argument_list|,
name|conf_
argument_list|)
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
operator|.
name|drop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception in drop: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"exceptions"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"drop got a runtime exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MetaStoreUtils
operator|.
name|printStackTrace
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"drop had an internal Java RuntimeException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * truncate      *      * drop a table      *      * @param tableName - a valid existing table name      * @param delete_data - should the store auto delete the data.      * @exception TException if thrift problem      * @exception MetaException if internal problem or bad input      * @exception UnknownTableException if table does not exist already      */
specifier|public
name|void
name|truncate_table
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partition
parameter_list|)
throws|throws
name|TException
throws|,
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"truncate"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"truncate_table("
operator|+
name|dbName
operator|+
literal|","
operator|+
name|tableName
operator|+
literal|","
operator|+
name|partition
operator|+
literal|")"
argument_list|)
expr_stmt|;
try|try
block|{
operator|new
name|DB
argument_list|(
name|dbName
argument_list|,
name|conf_
argument_list|)
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
operator|.
name|truncate
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception in truncate "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"exceptions"
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"truncate got a runtime exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MetaStoreUtils
operator|.
name|printStackTrace
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"drop had an internal Java RuntimeException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * get_schema      *      * Gets the (opaque) schema which is currently represented as a key=>value map.      *      * @param name - the name of the table      * @return the key/value of the opaque schema      * @exception MetaException if internal problem      * @exception UnknownTableException if the table doesn't exist      */
specifier|public
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|get_schema
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"get_schema"
argument_list|)
expr_stmt|;
name|String
name|dbName
init|=
literal|"default"
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"get_schema("
operator|+
name|dbName
operator|+
literal|","
operator|+
name|tableName
operator|+
literal|")"
argument_list|)
expr_stmt|;
try|try
block|{
name|Table
name|t
init|=
operator|new
name|DB
argument_list|(
name|dbName
argument_list|,
name|conf_
argument_list|)
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Properties
name|p
init|=
name|t
operator|.
name|getSchema
argument_list|()
decl_stmt|;
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|ret
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Enumeration
argument_list|<
name|?
argument_list|>
name|e
init|=
name|p
operator|.
name|propertyNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|p
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|ret
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// later get better at this so can differentiate internal error and missing table
name|this
operator|.
name|incrementCounter
argument_list|(
literal|"get_schema_exceptions"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Got exception in get_schema: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"get_schema got a runtime exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MetaStoreUtils
operator|.
name|printStackTrace
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"get_schema had an internal Java RuntimeException: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|int
name|port
init|=
literal|9082
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|TServerTransport
name|serverTransport
init|=
operator|new
name|TServerSocket
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|Iface
name|handler
init|=
operator|new
name|ThriftMetaStoreHandler
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|FacebookService
operator|.
name|Processor
name|processor
init|=
operator|new
name|ThriftMetaStore
operator|.
name|Processor
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|TThreadPoolServer
operator|.
name|Options
name|options
init|=
operator|new
name|TThreadPoolServer
operator|.
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|minWorkerThreads
operator|=
literal|100
expr_stmt|;
name|TServer
name|server
init|=
operator|new
name|TThreadPoolServer
argument_list|(
name|processor
argument_list|,
name|serverTransport
argument_list|,
operator|new
name|TTransportFactory
argument_list|()
argument_list|,
operator|new
name|TTransportFactory
argument_list|()
argument_list|,
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|ThriftMetaStoreHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting the metaserver on port ["
operator|+
name|port
operator|+
literal|"]..."
argument_list|)
expr_stmt|;
name|server
operator|.
name|serve
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|x
parameter_list|)
block|{
name|x
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

