begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|filemeta
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|FileMetadataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Metastore
operator|.
name|SplitInfos
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FileMetadataExprType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|ql
operator|.
name|io
operator|.
name|sarg
operator|.
name|SearchArgument
import|;
end_import

begin_class
specifier|public
class|class
name|OrcFileMetadataHandler
extends|extends
name|FileMetadataHandler
block|{
annotation|@
name|Override
specifier|protected
name|FileMetadataExprType
name|getType
parameter_list|()
block|{
return|return
name|FileMetadataExprType
operator|.
name|ORC_SARG
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getFileMetadataByExpr
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|ByteBuffer
index|[]
name|metadatas
parameter_list|,
name|ByteBuffer
index|[]
name|results
parameter_list|,
name|boolean
index|[]
name|eliminated
parameter_list|)
throws|throws
name|IOException
block|{
name|SearchArgument
name|sarg
init|=
name|getExpressionProxy
argument_list|()
operator|.
name|createSarg
argument_list|(
name|expr
argument_list|)
decl_stmt|;
comment|// For now, don't push anything into HBase, nor store anything special in HBase
if|if
condition|(
name|metadatas
operator|==
literal|null
condition|)
block|{
comment|// null means don't return metadata; we'd need the array anyway for now.
name|metadatas
operator|=
operator|new
name|ByteBuffer
index|[
name|results
operator|.
name|length
index|]
expr_stmt|;
block|}
name|getStore
argument_list|()
operator|.
name|getFileMetadata
argument_list|(
name|fileIds
argument_list|,
name|metadatas
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadatas
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|eliminated
index|[
name|i
index|]
operator|=
literal|false
expr_stmt|;
name|results
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|metadatas
index|[
name|i
index|]
operator|==
literal|null
condition|)
continue|continue;
name|ByteBuffer
name|metadata
init|=
name|metadatas
index|[
name|i
index|]
operator|.
name|duplicate
argument_list|()
decl_stmt|;
comment|// Duplicate to avoid modification.
name|SplitInfos
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|getFileFormatProxy
argument_list|()
operator|.
name|applySargToMetadata
argument_list|(
name|sarg
argument_list|,
name|metadata
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to apply SARG to metadata"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|metadatas
index|[
name|i
index|]
operator|=
literal|null
expr_stmt|;
continue|continue;
block|}
name|eliminated
index|[
name|i
index|]
operator|=
operator|(
name|result
operator|==
literal|null
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|eliminated
index|[
name|i
index|]
condition|)
block|{
name|results
index|[
name|i
index|]
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|result
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

