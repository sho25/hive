begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|StatObjectConverter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
operator|.
name|CachedStore
operator|.
name|PartitionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
operator|.
name|CachedStore
operator|.
name|StorageDescriptorWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
operator|.
name|CachedStore
operator|.
name|TableWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|HBaseUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_class
specifier|public
class|class
name|SharedCache
block|{
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Database
argument_list|>
name|databaseCache
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|Database
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|TableWrapper
argument_list|>
name|tableCache
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|TableWrapper
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|PartitionWrapper
argument_list|>
name|partitionCache
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|PartitionWrapper
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|partitionColStatsCache
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|tableColStatsCache
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|ByteArrayWrapper
argument_list|,
name|StorageDescriptorWrapper
argument_list|>
name|sdCache
init|=
operator|new
name|HashMap
argument_list|<
name|ByteArrayWrapper
argument_list|,
name|StorageDescriptorWrapper
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|MessageDigest
name|md
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SharedCache
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
static|static
block|{
try|try
block|{
name|md
operator|=
name|MessageDigest
operator|.
name|getInstance
argument_list|(
literal|"MD5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"should not happen"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|Database
name|getDatabaseFromCache
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|databaseCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|!=
literal|null
condition|?
name|databaseCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|.
name|deepCopy
argument_list|()
else|:
literal|null
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|addDatabaseToCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|Database
name|db
parameter_list|)
block|{
name|Database
name|dbCopy
init|=
name|db
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|dbCopy
operator|.
name|setName
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
name|databaseCache
operator|.
name|put
argument_list|(
name|dbName
argument_list|,
name|dbCopy
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|removeDatabaseFromCache
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|databaseCache
operator|.
name|remove
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|List
argument_list|<
name|String
argument_list|>
name|listCachedDatabases
parameter_list|()
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|databaseCache
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|alterDatabaseInCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|Database
name|newDb
parameter_list|)
block|{
name|removeDatabaseFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
name|addDatabaseToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newDb
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|newDb
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|int
name|getCachedDatabaseCount
parameter_list|()
block|{
return|return
name|databaseCache
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|Table
name|getTableFromCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|get
argument_list|(
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tblWrapper
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Table
name|t
init|=
name|CacheUtils
operator|.
name|assemble
argument_list|(
name|tblWrapper
argument_list|)
decl_stmt|;
return|return
name|t
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|addTableToCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|tbl
parameter_list|)
block|{
name|Table
name|tblCopy
init|=
name|tbl
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|tblCopy
operator|.
name|setDbName
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
expr_stmt|;
name|tblCopy
operator|.
name|setTableName
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|tblCopy
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|FieldSchema
name|fs
range|:
name|tblCopy
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|fs
operator|.
name|setName
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|TableWrapper
name|wrapper
decl_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|sdHash
init|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
name|tbl
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|increSd
argument_list|(
name|sd
argument_list|,
name|sdHash
argument_list|)
expr_stmt|;
name|tblCopy
operator|.
name|setSd
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|wrapper
operator|=
operator|new
name|TableWrapper
argument_list|(
name|tblCopy
argument_list|,
name|sdHash
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wrapper
operator|=
operator|new
name|TableWrapper
argument_list|(
name|tblCopy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|tableCache
operator|.
name|put
argument_list|(
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|removeTableFromCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|TableWrapper
name|tblWrapper
init|=
name|tableCache
operator|.
name|remove
argument_list|(
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|sdHash
init|=
name|tblWrapper
operator|.
name|getSdHash
argument_list|()
decl_stmt|;
if|if
condition|(
name|sdHash
operator|!=
literal|null
condition|)
block|{
name|decrSd
argument_list|(
name|sdHash
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|ColumnStatisticsObj
name|getCachedTableColStats
parameter_list|(
name|String
name|colStatsCacheKey
parameter_list|)
block|{
return|return
name|tableColStatsCache
operator|.
name|get
argument_list|(
name|colStatsCacheKey
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|removeTableColStatsFromCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|String
name|partialKey
init|=
name|CacheUtils
operator|.
name|buildKeyWithDelimit
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|iterator
init|=
name|tableColStatsCache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|partialKey
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|removeTableColStatsFromCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
name|tableColStatsCache
operator|.
name|remove
argument_list|(
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|updateTableColStatsInCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatsForTable
parameter_list|)
block|{
for|for
control|(
name|ColumnStatisticsObj
name|colStatObj
range|:
name|colStatsForTable
control|)
block|{
comment|// Get old stats object if present
name|String
name|key
init|=
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colStatObj
operator|.
name|getColName
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnStatisticsObj
name|oldStatsObj
init|=
name|tableColStatsCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStatsObj
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating table column stats for column: "
operator|+
name|colStatObj
operator|.
name|getColName
argument_list|()
operator|+
literal|", of table: "
operator|+
name|tableName
operator|+
literal|" and database: "
operator|+
name|dbName
argument_list|)
expr_stmt|;
comment|// Update existing stat object's field
name|StatObjectConverter
operator|.
name|setFieldsIntoOldStats
argument_list|(
name|oldStatsObj
argument_list|,
name|colStatObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No stats exist for this key; add a new object to the cache
name|tableColStatsCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|colStatObj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|alterTableInCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|newTable
parameter_list|)
block|{
name|removeTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|addTableToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|alterTableInPartitionCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|newTable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dbName
operator|.
name|equals
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|||
operator|!
name|tblName
operator|.
name|equals
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|listCachedPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|partitions
control|)
block|{
name|removePartitionFromCache
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setDbName
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTableName
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addPartitionToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|alterTableInTableColStatsCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|newTable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dbName
operator|.
name|equals
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|||
operator|!
name|tblName
operator|.
name|equals
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|oldPartialTableStatsKey
init|=
name|CacheUtils
operator|.
name|buildKeyWithDelimit
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|iterator
init|=
name|tableColStatsCache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|newTableColStats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|colStatObj
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|oldPartialTableStatsKey
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|String
index|[]
name|decomposedKey
init|=
name|CacheUtils
operator|.
name|splitTableColStats
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|newKey
init|=
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|decomposedKey
index|[
literal|0
index|]
argument_list|,
name|decomposedKey
index|[
literal|1
index|]
argument_list|,
name|decomposedKey
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|newTableColStats
operator|.
name|put
argument_list|(
name|newKey
argument_list|,
name|colStatObj
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|tableColStatsCache
operator|.
name|putAll
argument_list|(
name|newTableColStats
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|alterTableInPartitionColStatsCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|newTable
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dbName
operator|.
name|equals
argument_list|(
name|newTable
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|||
operator|!
name|tblName
operator|.
name|equals
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|listCachedPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|newPartitionColStats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|partitions
control|)
block|{
name|String
name|oldPartialPartitionKey
init|=
name|CacheUtils
operator|.
name|buildKeyWithDelimit
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|iterator
init|=
name|partitionColStatsCache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|colStatObj
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|oldPartialPartitionKey
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|Object
index|[]
name|decomposedKey
init|=
name|CacheUtils
operator|.
name|splitPartitionColStats
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|newKey
init|=
name|CacheUtils
operator|.
name|buildKey
argument_list|(
operator|(
name|String
operator|)
name|decomposedKey
index|[
literal|0
index|]
argument_list|,
operator|(
name|String
operator|)
name|decomposedKey
index|[
literal|1
index|]
argument_list|,
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|decomposedKey
index|[
literal|2
index|]
argument_list|,
operator|(
name|String
operator|)
name|decomposedKey
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|newPartitionColStats
operator|.
name|put
argument_list|(
name|newKey
argument_list|,
name|colStatObj
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|partitionColStatsCache
operator|.
name|putAll
argument_list|(
name|newPartitionColStats
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|int
name|getCachedTableCount
parameter_list|()
block|{
return|return
name|tableCache
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|List
argument_list|<
name|Table
argument_list|>
name|listCachedTables
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<
name|Table
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableWrapper
name|wrapper
range|:
name|tableCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|wrapper
operator|.
name|getTable
argument_list|()
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|CacheUtils
operator|.
name|assemble
argument_list|(
name|wrapper
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tables
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|List
argument_list|<
name|TableMeta
argument_list|>
name|getTableMeta
parameter_list|(
name|String
name|dbNames
parameter_list|,
name|String
name|tableNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
block|{
name|List
argument_list|<
name|TableMeta
argument_list|>
name|tableMetas
init|=
operator|new
name|ArrayList
argument_list|<
name|TableMeta
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|listCachedDatabases
argument_list|()
control|)
block|{
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|dbName
argument_list|,
name|dbNames
argument_list|)
condition|)
block|{
for|for
control|(
name|Table
name|table
range|:
name|listCachedTables
argument_list|(
name|dbName
argument_list|)
control|)
block|{
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tableNames
argument_list|)
condition|)
block|{
if|if
condition|(
name|tableTypes
operator|==
literal|null
operator|||
name|tableTypes
operator|.
name|contains
argument_list|(
name|table
operator|.
name|getTableType
argument_list|()
argument_list|)
condition|)
block|{
name|TableMeta
name|metaData
init|=
operator|new
name|TableMeta
argument_list|(
name|dbName
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableType
argument_list|()
argument_list|)
decl_stmt|;
name|metaData
operator|.
name|setComments
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"comment"
argument_list|)
argument_list|)
expr_stmt|;
name|tableMetas
operator|.
name|add
argument_list|(
name|metaData
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|tableMetas
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|addPartitionToCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Partition
name|part
parameter_list|)
block|{
name|Partition
name|partCopy
init|=
name|part
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|PartitionWrapper
name|wrapper
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|sdHash
init|=
name|HBaseUtils
operator|.
name|hashStorageDescriptor
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
argument_list|,
name|md
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
name|part
operator|.
name|getSd
argument_list|()
decl_stmt|;
name|increSd
argument_list|(
name|sd
argument_list|,
name|sdHash
argument_list|)
expr_stmt|;
name|partCopy
operator|.
name|setSd
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|wrapper
operator|=
operator|new
name|PartitionWrapper
argument_list|(
name|partCopy
argument_list|,
name|sdHash
argument_list|,
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|,
name|sd
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|wrapper
operator|=
operator|new
name|PartitionWrapper
argument_list|(
name|partCopy
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|partitionCache
operator|.
name|put
argument_list|(
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|,
name|wrapper
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|Partition
name|getPartitionFromCache
parameter_list|(
name|String
name|key
parameter_list|)
block|{
name|PartitionWrapper
name|wrapper
init|=
name|partitionCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapper
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Partition
name|p
init|=
name|CacheUtils
operator|.
name|assemble
argument_list|(
name|wrapper
argument_list|)
decl_stmt|;
return|return
name|p
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|Partition
name|getPartitionFromCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
return|return
name|getPartitionFromCache
argument_list|(
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|boolean
name|existPartitionFromCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
return|return
name|partitionCache
operator|.
name|containsKey
argument_list|(
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|Partition
name|removePartitionFromCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
block|{
name|PartitionWrapper
name|wrapper
init|=
name|partitionCache
operator|.
name|remove
argument_list|(
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part_vals
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapper
operator|.
name|getSdHash
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|decrSd
argument_list|(
name|wrapper
operator|.
name|getSdHash
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|wrapper
operator|.
name|getPartition
argument_list|()
return|;
block|}
comment|// Remove cached column stats for all partitions of a table
specifier|public
specifier|static
specifier|synchronized
name|void
name|removePartitionColStatsFromCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
block|{
name|String
name|partialKey
init|=
name|CacheUtils
operator|.
name|buildKeyWithDelimit
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|iterator
init|=
name|partitionColStatsCache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|partialKey
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Remove cached column stats for a particular partition of a table
specifier|public
specifier|static
specifier|synchronized
name|void
name|removePartitionColStatsFromCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
name|String
name|partialKey
init|=
name|CacheUtils
operator|.
name|buildKeyWithDelimit
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|iterator
init|=
name|partitionColStatsCache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|partialKey
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|// Remove cached column stats for a particular partition and a particular column of a table
specifier|public
specifier|static
specifier|synchronized
name|void
name|removePartitionColStatsFromCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|colName
parameter_list|)
block|{
name|partitionColStatsCache
operator|.
name|remove
argument_list|(
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|colName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|List
argument_list|<
name|Partition
argument_list|>
name|listCachedPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PartitionWrapper
name|wrapper
range|:
name|partitionCache
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|wrapper
operator|.
name|getPartition
argument_list|()
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
operator|&&
name|wrapper
operator|.
name|getPartition
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tblName
argument_list|)
operator|&&
operator|(
name|max
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|max
operator|)
condition|)
block|{
name|partitions
operator|.
name|add
argument_list|(
name|CacheUtils
operator|.
name|assemble
argument_list|(
name|wrapper
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|alterPartitionInCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|Partition
name|newPart
parameter_list|)
block|{
name|removePartitionFromCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|)
expr_stmt|;
name|addPartitionToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newPart
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newPart
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|alterPartitionInColStatsCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|Partition
name|newPart
parameter_list|)
block|{
name|String
name|oldPartialPartitionKey
init|=
name|CacheUtils
operator|.
name|buildKeyWithDelimit
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|newPartitionColStats
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|iterator
init|=
name|partitionColStatsCache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Entry
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|entry
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|colStatObj
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|.
name|toLowerCase
argument_list|()
operator|.
name|startsWith
argument_list|(
name|oldPartialPartitionKey
operator|.
name|toLowerCase
argument_list|()
argument_list|)
condition|)
block|{
name|Object
index|[]
name|decomposedKey
init|=
name|CacheUtils
operator|.
name|splitPartitionColStats
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|String
name|newKey
init|=
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newPart
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|newPart
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|newPart
operator|.
name|getValues
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|decomposedKey
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
name|newPartitionColStats
operator|.
name|put
argument_list|(
name|newKey
argument_list|,
name|colStatObj
argument_list|)
expr_stmt|;
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|partitionColStatsCache
operator|.
name|putAll
argument_list|(
name|newPartitionColStats
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|updatePartitionColStatsInCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatsObjs
parameter_list|)
block|{
for|for
control|(
name|ColumnStatisticsObj
name|colStatObj
range|:
name|colStatsObjs
control|)
block|{
comment|// Get old stats object if present
name|String
name|key
init|=
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partVals
argument_list|,
name|colStatObj
operator|.
name|getColName
argument_list|()
argument_list|)
decl_stmt|;
name|ColumnStatisticsObj
name|oldStatsObj
init|=
name|partitionColStatsCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldStatsObj
operator|!=
literal|null
condition|)
block|{
comment|// Update existing stat object's field
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating partition column stats for column: "
operator|+
name|colStatObj
operator|.
name|getColName
argument_list|()
operator|+
literal|", of table: "
operator|+
name|tableName
operator|+
literal|" and database: "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|StatObjectConverter
operator|.
name|setFieldsIntoOldStats
argument_list|(
name|oldStatsObj
argument_list|,
name|colStatObj
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// No stats exist for this key; add a new object to the cache
name|partitionColStatsCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|colStatObj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|int
name|getCachedPartitionCount
parameter_list|()
block|{
return|return
name|partitionCache
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|ColumnStatisticsObj
name|getCachedPartitionColStats
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|partitionColStatsCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|addPartitionColStatsToCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|colStatsPerPartition
parameter_list|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|entry
range|:
name|colStatsPerPartition
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|partName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|Warehouse
operator|.
name|getPartValuesFromPartName
argument_list|(
name|partName
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|colStatObj
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partVals
argument_list|,
name|colStatObj
operator|.
name|getColName
argument_list|()
argument_list|)
decl_stmt|;
name|partitionColStatsCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|colStatObj
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Unable to add partition: "
operator|+
name|partName
operator|+
literal|" to SharedCache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|refreshPartitionColStats
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|newColStatsPerPartition
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached partition column stats objects for database: "
operator|+
name|dbName
operator|+
literal|" and table: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|removePartitionColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|addPartitionColStatsToCache
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|newColStatsPerPartition
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|addTableColStatsToCache
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatsForTable
parameter_list|)
block|{
for|for
control|(
name|ColumnStatisticsObj
name|colStatObj
range|:
name|colStatsForTable
control|)
block|{
name|String
name|key
init|=
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colStatObj
operator|.
name|getColName
argument_list|()
argument_list|)
decl_stmt|;
name|tableColStatsCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|colStatObj
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|refreshTableColStats
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStatsForTable
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached table column stats objects for database: "
operator|+
name|dbName
operator|+
literal|" and table: "
operator|+
name|tableName
argument_list|)
expr_stmt|;
comment|// Remove all old cache entries for this table
name|removeTableColStatsFromCache
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
comment|// Add new entries to cache
name|addTableColStatsToCache
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colStatsForTable
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|increSd
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|byte
index|[]
name|sdHash
parameter_list|)
block|{
name|ByteArrayWrapper
name|byteArray
init|=
operator|new
name|ByteArrayWrapper
argument_list|(
name|sdHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|sdCache
operator|.
name|containsKey
argument_list|(
name|byteArray
argument_list|)
condition|)
block|{
name|sdCache
operator|.
name|get
argument_list|(
name|byteArray
argument_list|)
operator|.
name|refCount
operator|++
expr_stmt|;
block|}
else|else
block|{
name|StorageDescriptor
name|sdToCache
init|=
name|sd
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|sdToCache
operator|.
name|setLocation
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sdToCache
operator|.
name|setParameters
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|sdCache
operator|.
name|put
argument_list|(
name|byteArray
argument_list|,
operator|new
name|StorageDescriptorWrapper
argument_list|(
name|sdToCache
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|decrSd
parameter_list|(
name|byte
index|[]
name|sdHash
parameter_list|)
block|{
name|ByteArrayWrapper
name|byteArray
init|=
operator|new
name|ByteArrayWrapper
argument_list|(
name|sdHash
argument_list|)
decl_stmt|;
name|StorageDescriptorWrapper
name|sdWrapper
init|=
name|sdCache
operator|.
name|get
argument_list|(
name|byteArray
argument_list|)
decl_stmt|;
name|sdWrapper
operator|.
name|refCount
operator|--
expr_stmt|;
if|if
condition|(
name|sdWrapper
operator|.
name|getRefCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sdCache
operator|.
name|remove
argument_list|(
name|byteArray
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|StorageDescriptor
name|getSdFromCache
parameter_list|(
name|byte
index|[]
name|sdHash
parameter_list|)
block|{
name|StorageDescriptorWrapper
name|sdWrapper
init|=
name|sdCache
operator|.
name|get
argument_list|(
operator|new
name|ByteArrayWrapper
argument_list|(
name|sdHash
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|sdWrapper
operator|.
name|getSd
argument_list|()
return|;
block|}
comment|// Replace databases in databaseCache with the new list
specifier|public
specifier|static
specifier|synchronized
name|void
name|refreshDatabases
parameter_list|(
name|List
argument_list|<
name|Database
argument_list|>
name|databases
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached database objects"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|listCachedDatabases
argument_list|()
control|)
block|{
name|removeDatabaseFromCache
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Database
name|db
range|:
name|databases
control|)
block|{
name|addDatabaseToCache
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Replace tables in tableCache with the new list
specifier|public
specifier|static
specifier|synchronized
name|void
name|refreshTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|Table
argument_list|>
name|tables
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached table objects for database: "
operator|+
name|dbName
argument_list|)
expr_stmt|;
for|for
control|(
name|Table
name|tbl
range|:
name|listCachedTables
argument_list|(
name|dbName
argument_list|)
control|)
block|{
name|removeTableFromCache
argument_list|(
name|dbName
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Table
name|tbl
range|:
name|tables
control|)
block|{
name|addTableToCache
argument_list|(
name|dbName
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
specifier|synchronized
name|void
name|refreshPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"CachedStore: updating cached partition objects for database: "
operator|+
name|dbName
operator|+
literal|" and table: "
operator|+
name|tblName
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|PartitionWrapper
argument_list|>
argument_list|>
name|iterator
init|=
name|partitionCache
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PartitionWrapper
name|partitionWrapper
init|=
name|iterator
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|partitionWrapper
operator|.
name|getPartition
argument_list|()
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
operator|&&
name|partitionWrapper
operator|.
name|getPartition
argument_list|()
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tblName
argument_list|)
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Partition
name|part
range|:
name|partitions
control|)
block|{
name|addPartitionToCache
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Database
argument_list|>
name|getDatabaseCache
parameter_list|()
block|{
return|return
name|databaseCache
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|TableWrapper
argument_list|>
name|getTableCache
parameter_list|()
block|{
return|return
name|tableCache
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|PartitionWrapper
argument_list|>
name|getPartitionCache
parameter_list|()
block|{
return|return
name|partitionCache
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|Map
argument_list|<
name|ByteArrayWrapper
argument_list|,
name|StorageDescriptorWrapper
argument_list|>
name|getSdCache
parameter_list|()
block|{
return|return
name|sdCache
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|getPartitionColStatsCache
parameter_list|()
block|{
return|return
name|partitionColStatsCache
return|;
block|}
block|}
end_class

end_unit

