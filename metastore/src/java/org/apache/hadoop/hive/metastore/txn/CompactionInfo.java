begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionType
import|;
end_import

begin_comment
comment|/**  * Information on a possible or running compaction.  */
end_comment

begin_class
specifier|public
class|class
name|CompactionInfo
block|{
specifier|public
name|long
name|id
decl_stmt|;
specifier|public
name|String
name|dbname
decl_stmt|;
specifier|public
name|String
name|tableName
decl_stmt|;
specifier|public
name|String
name|partName
decl_stmt|;
specifier|public
name|CompactionType
name|type
decl_stmt|;
specifier|public
name|String
name|runAs
decl_stmt|;
specifier|public
name|boolean
name|tooManyAborts
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|fullPartitionName
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|fullTableName
init|=
literal|null
decl_stmt|;
specifier|public
name|CompactionInfo
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|CompactionType
name|type
parameter_list|)
block|{
name|this
operator|.
name|dbname
operator|=
name|dbname
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
name|this
operator|.
name|partName
operator|=
name|partName
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
name|CompactionInfo
parameter_list|()
block|{}
specifier|public
name|String
name|getFullPartitionName
parameter_list|()
block|{
if|if
condition|(
name|fullPartitionName
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|partName
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|partName
argument_list|)
expr_stmt|;
block|}
name|fullPartitionName
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|fullPartitionName
return|;
block|}
specifier|public
name|String
name|getFullTableName
parameter_list|()
block|{
if|if
condition|(
name|fullTableName
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|fullTableName
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|fullTableName
return|;
block|}
specifier|public
name|boolean
name|isMajorCompaction
parameter_list|()
block|{
return|return
name|CompactionType
operator|.
name|MAJOR
operator|==
name|type
return|;
block|}
block|}
end_class

end_unit

