begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HColumnDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|HTableDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|TableName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Get
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HBaseAdmin
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HConnectionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|HTableInterface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|client
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * A pass through to a simple HBase connection.  This has no transactions.  */
end_comment

begin_class
specifier|public
class|class
name|VanillaHBaseConnection
implements|implements
name|HBaseConnection
block|{
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VanillaHBaseConnection
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|protected
name|HConnection
name|conn
decl_stmt|;
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|HTableInterface
argument_list|>
name|tables
decl_stmt|;
specifier|protected
name|Configuration
name|conf
decl_stmt|;
name|VanillaHBaseConnection
parameter_list|()
block|{
name|tables
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|HTableInterface
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|connect
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Must call getConf before connect"
argument_list|)
throw|;
name|conn
operator|=
name|HConnectionManager
operator|.
name|createConnection
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|HTableInterface
name|htab
range|:
name|tables
operator|.
name|values
argument_list|()
control|)
name|htab
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beginTransaction
parameter_list|()
throws|throws
name|IOException
block|{    }
annotation|@
name|Override
specifier|public
name|void
name|commitTransaction
parameter_list|()
throws|throws
name|IOException
block|{    }
annotation|@
name|Override
specifier|public
name|void
name|rollbackTransaction
parameter_list|()
throws|throws
name|IOException
block|{    }
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|(
name|HTableInterface
name|htab
parameter_list|)
throws|throws
name|IOException
block|{
name|htab
operator|.
name|flushCommits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createHBaseTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseAdmin
name|admin
init|=
operator|new
name|HBaseAdmin
argument_list|(
name|conn
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Creating HBase table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|admin
operator|.
name|createTable
argument_list|(
name|buildDescriptor
argument_list|(
name|tableName
argument_list|,
name|columnFamilies
argument_list|)
argument_list|)
expr_stmt|;
name|admin
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|HTableDescriptor
name|buildDescriptor
parameter_list|(
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|byte
index|[]
argument_list|>
name|columnFamilies
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableDescriptor
name|tableDesc
init|=
operator|new
name|HTableDescriptor
argument_list|(
name|TableName
operator|.
name|valueOf
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|byte
index|[]
name|cf
range|:
name|columnFamilies
control|)
block|{
name|tableDesc
operator|.
name|addFamily
argument_list|(
operator|new
name|HColumnDescriptor
argument_list|(
name|cf
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tableDesc
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableInterface
name|getHBaseTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getHBaseTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HTableInterface
name|getHBaseTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|IOException
block|{
name|HTableInterface
name|htab
init|=
name|tables
operator|.
name|get
argument_list|(
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|htab
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trying to connect to table "
operator|+
name|tableName
argument_list|)
expr_stmt|;
try|try
block|{
name|htab
operator|=
name|conn
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
comment|// Calling gettable doesn't actually connect to the region server, it's very light
comment|// weight, so call something else so we actually reach out and touch the region server
comment|// and see if the table is there.
if|if
condition|(
name|force
condition|)
name|htab
operator|.
name|get
argument_list|(
operator|new
name|Get
argument_list|(
literal|"nosuchkey"
operator|.
name|getBytes
argument_list|(
name|HBaseUtils
operator|.
name|ENCODING
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Caught exception when table was missing"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|htab
operator|.
name|setAutoFlushTo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tables
operator|.
name|put
argument_list|(
name|tableName
argument_list|,
name|htab
argument_list|)
expr_stmt|;
block|}
return|return
name|htab
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

