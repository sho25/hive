begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidReadTxnList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * And implementation of {@link org.apache.hadoop.hive.common.ValidTxnList} for use by the compactor.  * For the purposes of {@link #isTxnRangeValid} this class will view a transaction as valid if it  * is committed or aborted.  Additionally it will return none if there are any open transactions  * below the max transaction given, since we don't want to compact above open transactions.  For  * {@link #isTxnValid} it will still view a transaction as valid only if it is committed.  These  * produce the logic we need to assure that the compactor only sees records less than the lowest  * open transaction when choosing which files to compact, but that it still ignores aborted  * records when compacting.  */
end_comment

begin_class
specifier|public
class|class
name|ValidCompactorTxnList
extends|extends
name|ValidReadTxnList
block|{
comment|//TODO: refactor this - minOpenTxn is not needed if we set
comment|// highWatermark = Math.min(highWaterMark, minOpenTxn) (assuming there are open txns)
comment|// The minimum open transaction id
specifier|private
name|long
name|minOpenTxn
decl_stmt|;
specifier|public
name|ValidCompactorTxnList
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|minOpenTxn
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|/**    *    * @param exceptions list of all open and aborted transactions    * @param minOpen lowest open transaction    * @param highWatermark highest committed transaction    */
specifier|public
name|ValidCompactorTxnList
parameter_list|(
name|long
index|[]
name|exceptions
parameter_list|,
name|long
name|minOpen
parameter_list|,
name|long
name|highWatermark
parameter_list|)
block|{
name|super
argument_list|(
name|exceptions
argument_list|,
name|highWatermark
argument_list|)
expr_stmt|;
name|minOpenTxn
operator|=
name|minOpen
expr_stmt|;
block|}
specifier|public
name|ValidCompactorTxnList
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|RangeResponse
name|isTxnRangeValid
parameter_list|(
name|long
name|minTxnId
parameter_list|,
name|long
name|maxTxnId
parameter_list|)
block|{
if|if
condition|(
name|highWatermark
operator|<
name|minTxnId
condition|)
block|{
return|return
name|RangeResponse
operator|.
name|NONE
return|;
block|}
elseif|else
if|if
condition|(
name|minOpenTxn
operator|<
literal|0
condition|)
block|{
return|return
name|highWatermark
operator|>=
name|maxTxnId
condition|?
name|RangeResponse
operator|.
name|ALL
else|:
name|RangeResponse
operator|.
name|NONE
return|;
block|}
else|else
block|{
return|return
name|minOpenTxn
operator|>
name|maxTxnId
condition|?
name|RangeResponse
operator|.
name|ALL
else|:
name|RangeResponse
operator|.
name|NONE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|writeToString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|highWatermark
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|minOpenTxn
argument_list|)
expr_stmt|;
if|if
condition|(
name|exceptions
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|long
name|except
range|:
name|exceptions
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|except
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readFromString
parameter_list|(
name|String
name|src
parameter_list|)
block|{
if|if
condition|(
name|src
operator|==
literal|null
operator|||
name|src
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|highWatermark
operator|=
name|Long
operator|.
name|MAX_VALUE
expr_stmt|;
name|exceptions
operator|=
operator|new
name|long
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|values
init|=
name|src
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|highWatermark
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|values
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|minOpenTxn
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|values
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|exceptions
operator|=
operator|new
name|long
index|[
name|values
operator|.
name|length
operator|-
literal|2
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|exceptions
index|[
name|i
operator|-
literal|2
index|]
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|VisibleForTesting
name|long
name|getMinOpenTxn
parameter_list|()
block|{
return|return
name|minOpenTxn
return|;
block|}
block|}
end_class

end_unit

