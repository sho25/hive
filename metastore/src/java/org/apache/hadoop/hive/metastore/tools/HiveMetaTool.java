begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|tools
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_comment
comment|/**  * This class provides Hive admins a tool to  * - execute JDOQL against the metastore using DataNucleus  * - perform HA name node upgrade  */
end_comment

begin_class
specifier|public
class|class
name|HiveMetaTool
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveMetaTool
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Options
name|cmdLineOptions
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
specifier|private
name|ObjectStore
name|objStore
decl_stmt|;
specifier|private
name|boolean
name|isObjStoreInitialized
decl_stmt|;
specifier|public
name|HiveMetaTool
parameter_list|()
block|{
name|this
operator|.
name|isObjStoreInitialized
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|private
name|void
name|init
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Initializing HiveMetaTool.."
argument_list|)
expr_stmt|;
name|Option
name|help
init|=
operator|new
name|Option
argument_list|(
literal|"help"
argument_list|,
literal|"print this message"
argument_list|)
decl_stmt|;
name|Option
name|listFSRoot
init|=
operator|new
name|Option
argument_list|(
literal|"listFSRoot"
argument_list|,
literal|"print the current FS root locations"
argument_list|)
decl_stmt|;
name|Option
name|executeJDOQL
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"query-string"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"execute the given JDOQL query"
argument_list|)
operator|.
name|create
argument_list|(
literal|"executeJDOQL"
argument_list|)
decl_stmt|;
comment|/* Ideally we want to specify the different arguments to updateLocation as separate argNames.      * However if we did that, HelpFormatter swallows all but the last argument. Note that this is      * a know issue with the HelpFormatter class that has not been fixed. We specify all arguments      * with a single argName to workaround this HelpFormatter bug.      */
name|Option
name|updateFSRootLoc
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"new-loc> "
operator|+
literal|"<old-loc"
argument_list|)
operator|.
name|hasArgs
argument_list|(
literal|2
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Update FS root location in the metastore to new location.Both new-loc and "
operator|+
literal|"old-loc should be valid URIs with valid host names and schemes."
operator|+
literal|"When run with the dryRun option changes are displayed but are not "
operator|+
literal|"persisted. When run with the serdepropKey/tablePropKey option "
operator|+
literal|"updateLocation looks for the serde-prop-key/table-prop-key that is "
operator|+
literal|"specified and updates its value if found."
argument_list|)
operator|.
name|create
argument_list|(
literal|"updateLocation"
argument_list|)
decl_stmt|;
name|Option
name|dryRun
init|=
operator|new
name|Option
argument_list|(
literal|"dryRun"
argument_list|,
literal|"Perform a dry run of updateLocation changes.When "
operator|+
literal|"run with the dryRun option updateLocation changes are displayed but not persisted. "
operator|+
literal|"dryRun is valid only with the updateLocation option."
argument_list|)
decl_stmt|;
name|Option
name|serdePropKey
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"serde-prop-key"
argument_list|)
operator|.
name|hasArgs
argument_list|()
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Specify the key for serde property to be updated. serdePropKey option "
operator|+
literal|"is valid only with updateLocation option."
argument_list|)
operator|.
name|create
argument_list|(
literal|"serdePropKey"
argument_list|)
decl_stmt|;
name|Option
name|tablePropKey
init|=
name|OptionBuilder
operator|.
name|withArgName
argument_list|(
literal|"table-prop-key"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|withValueSeparator
argument_list|()
operator|.
name|withDescription
argument_list|(
literal|"Specify the key for table property to be updated. tablePropKey option "
operator|+
literal|"is valid only with updateLocation option."
argument_list|)
operator|.
name|create
argument_list|(
literal|"tablePropKey"
argument_list|)
decl_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|help
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|listFSRoot
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|executeJDOQL
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|updateFSRootLoc
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|dryRun
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|serdePropKey
argument_list|)
expr_stmt|;
name|cmdLineOptions
operator|.
name|addOption
argument_list|(
name|tablePropKey
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initObjectStore
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isObjStoreInitialized
condition|)
block|{
name|objStore
operator|=
operator|new
name|ObjectStore
argument_list|()
expr_stmt|;
name|objStore
operator|.
name|setConf
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|isObjStoreInitialized
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|shutdownObjectStore
parameter_list|()
block|{
if|if
condition|(
name|isObjStoreInitialized
condition|)
block|{
name|objStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|isObjStoreInitialized
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|listFSRoot
parameter_list|()
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|HiveMetaTool
operator|.
name|class
argument_list|)
decl_stmt|;
name|initObjectStore
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|hdfsRoots
init|=
name|objStore
operator|.
name|listFSRoots
argument_list|()
decl_stmt|;
if|if
condition|(
name|hdfsRoots
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Listing FS Roots.."
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|hdfsRoots
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Encountered error during listFSRoot - "
operator|+
literal|"commit of JDO transaction failed"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|executeJDOQLSelect
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|HiveMetaTool
operator|.
name|class
argument_list|)
decl_stmt|;
name|initObjectStore
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing query: "
operator|+
name|query
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|?
argument_list|>
name|result
init|=
name|objStore
operator|.
name|executeJDOQLSelect
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|Iterator
argument_list|<
name|?
argument_list|>
name|iter
init|=
name|result
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Object
name|o
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|o
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Encountered error during executeJDOQLSelect -"
operator|+
literal|"commit of JDO transaction failed."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|executeJDOQLUpdate
parameter_list|(
name|String
name|query
parameter_list|)
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|HiveMetaTool
operator|.
name|class
argument_list|)
decl_stmt|;
name|initObjectStore
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Executing query: "
operator|+
name|query
argument_list|)
expr_stmt|;
name|long
name|numUpdated
init|=
name|objStore
operator|.
name|executeJDOQLUpdate
argument_list|(
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|numUpdated
operator|>=
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Number of records updated: "
operator|+
name|numUpdated
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Encountered error during executeJDOQL -"
operator|+
literal|"commit of JDO transaction failed."
argument_list|)
expr_stmt|;
block|}
return|return
name|numUpdated
return|;
block|}
specifier|private
name|int
name|printUpdateLocations
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|key
range|:
name|updateLocations
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|value
init|=
name|updateLocations
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"old location: "
operator|+
name|key
operator|+
literal|" new location: "
operator|+
name|value
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
specifier|private
name|void
name|printTblURIUpdateSummary
parameter_list|(
name|ObjectStore
operator|.
name|UpdateMStorageDescriptorTblURIRetVal
name|retVal
parameter_list|,
name|boolean
name|isDryRun
parameter_list|)
block|{
name|String
name|tblName
init|=
operator|new
name|String
argument_list|(
literal|"SDS"
argument_list|)
decl_stmt|;
name|String
name|fieldName
init|=
operator|new
name|String
argument_list|(
literal|"LOCATION"
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Encountered error while executing updateMStorageDescriptorTblURI - "
operator|+
literal|"commit of JDO transaction failed. Failed to update FSRoot locations in "
operator|+
name|fieldName
operator|+
literal|"field in "
operator|+
name|tblName
operator|+
literal|" table."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
name|retVal
operator|.
name|getUpdateLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDryRun
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Dry Run of updateLocation on table "
operator|+
name|tblName
operator|+
literal|".."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully updated the following locations.."
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
name|printUpdateLocations
argument_list|(
name|updateLocations
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDryRun
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|count
operator|+
literal|" records in "
operator|+
name|tblName
operator|+
literal|" table to update"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Updated "
operator|+
name|count
operator|+
literal|" records in "
operator|+
name|tblName
operator|+
literal|" table"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
name|retVal
operator|.
name|getBadRecords
argument_list|()
decl_stmt|;
if|if
condition|(
name|badRecords
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Warning: Found records with bad "
operator|+
name|fieldName
operator|+
literal|" in "
operator|+
name|tblName
operator|+
literal|" table.. "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|badRecord
range|:
name|badRecords
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"bad location URI: "
operator|+
name|badRecord
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|printDatabaseURIUpdateSummary
parameter_list|(
name|ObjectStore
operator|.
name|UpdateMDatabaseURIRetVal
name|retVal
parameter_list|,
name|boolean
name|isDryRun
parameter_list|)
block|{
name|String
name|tblName
init|=
operator|new
name|String
argument_list|(
literal|"DBS"
argument_list|)
decl_stmt|;
name|String
name|fieldName
init|=
operator|new
name|String
argument_list|(
literal|"LOCATION_URI"
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Encountered error while executing updateMDatabaseURI - "
operator|+
literal|"commit of JDO transaction failed. Failed to update FSRoot locations in "
operator|+
name|fieldName
operator|+
literal|"field in "
operator|+
name|tblName
operator|+
literal|" table."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
name|retVal
operator|.
name|getUpdateLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDryRun
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Dry Run of updateLocation on table "
operator|+
name|tblName
operator|+
literal|".."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully updated the following locations.."
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
name|printUpdateLocations
argument_list|(
name|updateLocations
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDryRun
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|count
operator|+
literal|" records in "
operator|+
name|tblName
operator|+
literal|" table to update"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Updated "
operator|+
name|count
operator|+
literal|" records in "
operator|+
name|tblName
operator|+
literal|" table"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
name|retVal
operator|.
name|getBadRecords
argument_list|()
decl_stmt|;
if|if
condition|(
name|badRecords
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Warning: Found records with bad "
operator|+
name|fieldName
operator|+
literal|" in "
operator|+
name|tblName
operator|+
literal|" table.. "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|badRecord
range|:
name|badRecords
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"bad location URI: "
operator|+
name|badRecord
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|printPropURIUpdateSummary
parameter_list|(
name|ObjectStore
operator|.
name|UpdatePropURIRetVal
name|retVal
parameter_list|,
name|String
name|tablePropKey
parameter_list|,
name|boolean
name|isDryRun
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|methodName
parameter_list|)
block|{
if|if
condition|(
name|retVal
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Encountered error while executing "
operator|+
name|methodName
operator|+
literal|" - "
operator|+
literal|"commit of JDO transaction failed. Failed to update FSRoot locations in "
operator|+
literal|"value field corresponding to"
operator|+
name|tablePropKey
operator|+
literal|" in "
operator|+
name|tblName
operator|+
literal|" table."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
name|retVal
operator|.
name|getUpdateLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDryRun
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Dry Run of updateLocation on table "
operator|+
name|tblName
operator|+
literal|".."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully updated the following locations.."
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
name|printUpdateLocations
argument_list|(
name|updateLocations
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDryRun
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|count
operator|+
literal|" records in "
operator|+
name|tblName
operator|+
literal|" table to update"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Updated "
operator|+
name|count
operator|+
literal|" records in "
operator|+
name|tblName
operator|+
literal|" table"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
name|retVal
operator|.
name|getBadRecords
argument_list|()
decl_stmt|;
if|if
condition|(
name|badRecords
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Warning: Found records with bad "
operator|+
name|tablePropKey
operator|+
literal|" key in "
operator|+
name|tblName
operator|+
literal|" table.. "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|badRecord
range|:
name|badRecords
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"bad location URI: "
operator|+
name|badRecord
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|printSerdePropURIUpdateSummary
parameter_list|(
name|ObjectStore
operator|.
name|UpdateSerdeURIRetVal
name|retVal
parameter_list|,
name|String
name|serdePropKey
parameter_list|,
name|boolean
name|isDryRun
parameter_list|)
block|{
name|String
name|tblName
init|=
operator|new
name|String
argument_list|(
literal|"SERDE_PARAMS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|retVal
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Encountered error while executing updateSerdeURI - "
operator|+
literal|"commit of JDO transaction failed. Failed to update FSRoot locations in "
operator|+
literal|"value field corresponding to "
operator|+
name|serdePropKey
operator|+
literal|" in "
operator|+
name|tblName
operator|+
literal|" table."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|updateLocations
init|=
name|retVal
operator|.
name|getUpdateLocations
argument_list|()
decl_stmt|;
if|if
condition|(
name|isDryRun
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Dry Run of updateLocation on table "
operator|+
name|tblName
operator|+
literal|".."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Successfully updated the following locations.."
argument_list|)
expr_stmt|;
block|}
name|int
name|count
init|=
name|printUpdateLocations
argument_list|(
name|updateLocations
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDryRun
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Found "
operator|+
name|count
operator|+
literal|" records in "
operator|+
name|tblName
operator|+
literal|" table to update"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Updated "
operator|+
name|count
operator|+
literal|" records in "
operator|+
name|tblName
operator|+
literal|" table"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|badRecords
init|=
name|retVal
operator|.
name|getBadRecords
argument_list|()
decl_stmt|;
if|if
condition|(
name|badRecords
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Warning: Found records with bad "
operator|+
name|serdePropKey
operator|+
literal|" key in "
operator|+
name|tblName
operator|+
literal|" table.. "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|badRecord
range|:
name|badRecords
control|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"bad location URI: "
operator|+
name|badRecord
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|updateFSRootLocation
parameter_list|(
name|URI
name|oldURI
parameter_list|,
name|URI
name|newURI
parameter_list|,
name|String
name|serdePropKey
parameter_list|,
name|String
name|tablePropKey
parameter_list|,
name|boolean
name|isDryRun
parameter_list|)
block|{
name|HiveConf
name|hiveConf
init|=
operator|new
name|HiveConf
argument_list|(
name|HiveMetaTool
operator|.
name|class
argument_list|)
decl_stmt|;
name|initObjectStore
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Looking for LOCATION_URI field in DBS table to update.."
argument_list|)
expr_stmt|;
name|ObjectStore
operator|.
name|UpdateMDatabaseURIRetVal
name|updateMDBURIRetVal
init|=
name|objStore
operator|.
name|updateMDatabaseURI
argument_list|(
name|oldURI
argument_list|,
name|newURI
argument_list|,
name|isDryRun
argument_list|)
decl_stmt|;
name|printDatabaseURIUpdateSummary
argument_list|(
name|updateMDBURIRetVal
argument_list|,
name|isDryRun
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Looking for LOCATION field in SDS table to update.."
argument_list|)
expr_stmt|;
name|ObjectStore
operator|.
name|UpdateMStorageDescriptorTblURIRetVal
name|updateTblURIRetVal
init|=
name|objStore
operator|.
name|updateMStorageDescriptorTblURI
argument_list|(
name|oldURI
argument_list|,
name|newURI
argument_list|,
name|isDryRun
argument_list|)
decl_stmt|;
name|printTblURIUpdateSummary
argument_list|(
name|updateTblURIRetVal
argument_list|,
name|isDryRun
argument_list|)
expr_stmt|;
if|if
condition|(
name|tablePropKey
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Looking for value of "
operator|+
name|tablePropKey
operator|+
literal|" key in TABLE_PARAMS table "
operator|+
literal|"to update.."
argument_list|)
expr_stmt|;
name|ObjectStore
operator|.
name|UpdatePropURIRetVal
name|updateTblPropURIRetVal
init|=
name|objStore
operator|.
name|updateTblPropURI
argument_list|(
name|oldURI
argument_list|,
name|newURI
argument_list|,
name|tablePropKey
argument_list|,
name|isDryRun
argument_list|)
decl_stmt|;
name|printPropURIUpdateSummary
argument_list|(
name|updateTblPropURIRetVal
argument_list|,
name|tablePropKey
argument_list|,
name|isDryRun
argument_list|,
literal|"TABLE_PARAMS"
argument_list|,
literal|"updateTblPropURI"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Looking for value of "
operator|+
name|tablePropKey
operator|+
literal|" key in SD_PARAMS table "
operator|+
literal|"to update.."
argument_list|)
expr_stmt|;
name|ObjectStore
operator|.
name|UpdatePropURIRetVal
name|updatePropURIRetVal
init|=
name|objStore
operator|.
name|updateMStorageDescriptorTblPropURI
argument_list|(
name|oldURI
argument_list|,
name|newURI
argument_list|,
name|tablePropKey
argument_list|,
name|isDryRun
argument_list|)
decl_stmt|;
name|printPropURIUpdateSummary
argument_list|(
name|updatePropURIRetVal
argument_list|,
name|tablePropKey
argument_list|,
name|isDryRun
argument_list|,
literal|"SD_PARAMS"
argument_list|,
literal|"updateMStorageDescriptorTblPropURI"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serdePropKey
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Looking for value of "
operator|+
name|serdePropKey
operator|+
literal|" key in SERDE_PARAMS table "
operator|+
literal|"to update.."
argument_list|)
expr_stmt|;
name|ObjectStore
operator|.
name|UpdateSerdeURIRetVal
name|updateSerdeURIretVal
init|=
name|objStore
operator|.
name|updateSerdeURI
argument_list|(
name|oldURI
argument_list|,
name|newURI
argument_list|,
name|serdePropKey
argument_list|,
name|isDryRun
argument_list|)
decl_stmt|;
name|printSerdePropURIUpdateSummary
argument_list|(
name|updateSerdeURIretVal
argument_list|,
name|serdePropKey
argument_list|,
name|isDryRun
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|printAndExit
parameter_list|(
name|HiveMetaTool
name|metaTool
parameter_list|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"metatool"
argument_list|,
name|metaTool
operator|.
name|cmdLineOptions
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|HiveMetaTool
name|metaTool
init|=
operator|new
name|HiveMetaTool
argument_list|()
decl_stmt|;
name|metaTool
operator|.
name|init
argument_list|()
expr_stmt|;
name|CommandLineParser
name|parser
init|=
operator|new
name|GnuParser
argument_list|()
decl_stmt|;
name|CommandLine
name|line
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|line
operator|=
name|parser
operator|.
name|parse
argument_list|(
name|metaTool
operator|.
name|cmdLineOptions
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool:Parsing failed.  Reason: "
operator|+
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
expr_stmt|;
name|printAndExit
argument_list|(
name|metaTool
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"help"
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"metatool"
argument_list|,
name|metaTool
operator|.
name|cmdLineOptions
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"listFSRoot"
argument_list|)
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"dryRun"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool: dryRun is not valid with listFSRoot"
argument_list|)
expr_stmt|;
name|printAndExit
argument_list|(
name|metaTool
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"serdePropKey"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool: serdePropKey is not valid with listFSRoot"
argument_list|)
expr_stmt|;
name|printAndExit
argument_list|(
name|metaTool
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"tablePropKey"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool: tablePropKey is not valid with listFSRoot"
argument_list|)
expr_stmt|;
name|printAndExit
argument_list|(
name|metaTool
argument_list|)
expr_stmt|;
block|}
name|metaTool
operator|.
name|listFSRoot
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"executeJDOQL"
argument_list|)
condition|)
block|{
name|String
name|query
init|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"executeJDOQL"
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"dryRun"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool: dryRun is not valid with executeJDOQL"
argument_list|)
expr_stmt|;
name|printAndExit
argument_list|(
name|metaTool
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"serdePropKey"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool: serdePropKey is not valid with executeJDOQL"
argument_list|)
expr_stmt|;
name|printAndExit
argument_list|(
name|metaTool
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"tablePropKey"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool: tablePropKey is not valid with executeJDOQL"
argument_list|)
expr_stmt|;
name|printAndExit
argument_list|(
name|metaTool
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|query
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"select"
argument_list|)
condition|)
block|{
name|metaTool
operator|.
name|executeJDOQLSelect
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|query
operator|.
name|toLowerCase
argument_list|()
operator|.
name|trim
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"update"
argument_list|)
condition|)
block|{
name|metaTool
operator|.
name|executeJDOQLUpdate
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool:Unsupported statement type"
argument_list|)
expr_stmt|;
name|printAndExit
argument_list|(
name|metaTool
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"updateLocation"
argument_list|)
condition|)
block|{
name|String
index|[]
name|loc
init|=
name|line
operator|.
name|getOptionValues
argument_list|(
literal|"updateLocation"
argument_list|)
decl_stmt|;
name|boolean
name|isDryRun
init|=
literal|false
decl_stmt|;
name|String
name|serdepropKey
init|=
literal|null
decl_stmt|;
name|String
name|tablePropKey
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|loc
operator|.
name|length
operator|!=
literal|2
operator|&&
name|loc
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool:updateLocation takes in 2 required and 1 "
operator|+
literal|"optional arguments but "
operator|+
literal|"was passed "
operator|+
name|loc
operator|.
name|length
operator|+
literal|" arguments"
argument_list|)
expr_stmt|;
name|printAndExit
argument_list|(
name|metaTool
argument_list|)
expr_stmt|;
block|}
name|Path
name|newPath
init|=
operator|new
name|Path
argument_list|(
name|loc
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|Path
name|oldPath
init|=
operator|new
name|Path
argument_list|(
name|loc
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|URI
name|oldURI
init|=
name|oldPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|URI
name|newURI
init|=
name|newPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"dryRun"
argument_list|)
condition|)
block|{
name|isDryRun
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"serdePropKey"
argument_list|)
condition|)
block|{
name|serdepropKey
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"serdePropKey"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"tablePropKey"
argument_list|)
condition|)
block|{
name|tablePropKey
operator|=
name|line
operator|.
name|getOptionValue
argument_list|(
literal|"tablePropKey"
argument_list|)
expr_stmt|;
block|}
comment|/*          * validate input - Both new and old URI should contain valid host names and valid schemes.          * port is optional in both the URIs since HDFS HA NN URI doesn't have a port.          */
if|if
condition|(
name|oldURI
operator|.
name|getHost
argument_list|()
operator|==
literal|null
operator|||
name|newURI
operator|.
name|getHost
argument_list|()
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool:A valid host is required in both old-loc and new-loc"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|oldURI
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
operator|||
name|newURI
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool:A valid scheme is required in both old-loc and new-loc"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|metaTool
operator|.
name|updateFSRootLocation
argument_list|(
name|oldURI
argument_list|,
name|newURI
argument_list|,
name|serdepropKey
argument_list|,
name|tablePropKey
argument_list|,
name|isDryRun
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"dryRun"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool: dryRun is not a valid standalone option"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"serdePropKey"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool: serdePropKey is not a valid standalone option"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|hasOption
argument_list|(
literal|"tablePropKey"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"HiveMetaTool: tablePropKey is not a valid standalone option"
argument_list|)
expr_stmt|;
name|printAndExit
argument_list|(
name|metaTool
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"HiveMetaTool:Parsing failed.  Reason: Invalid arguments: "
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|line
operator|.
name|getArgs
argument_list|()
control|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
name|s
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
name|printAndExit
argument_list|(
name|metaTool
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|metaTool
operator|.
name|shutdownObjectStore
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

