begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|utils
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Barebones fixed length bit vector using a byte array  */
end_comment

begin_class
specifier|public
class|class
name|BitVector
block|{
comment|// We'll use this as the bit vector container
specifier|private
name|byte
name|data
index|[]
decl_stmt|;
specifier|public
specifier|static
name|int
name|ELEMENT_SIZE
init|=
name|Byte
operator|.
name|SIZE
decl_stmt|;
specifier|public
name|BitVector
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|data
operator|=
operator|new
name|byte
index|[
name|size
operator|/
name|ELEMENT_SIZE
index|]
expr_stmt|;
block|}
comment|/**    * Total bits -> num elements * size of each element    *    */
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|data
operator|.
name|length
operator|*
name|ELEMENT_SIZE
return|;
block|}
comment|/**    * Set the bit at the given index to 1    *    * @param bitIndex    */
specifier|public
name|void
name|setBit
parameter_list|(
name|int
name|bitIndex
parameter_list|)
block|{
name|validateBitIndex
argument_list|(
name|bitIndex
argument_list|)
expr_stmt|;
name|int
name|dataIndex
init|=
name|bitIndex
operator|/
name|ELEMENT_SIZE
decl_stmt|;
name|int
name|elementIndex
init|=
name|ELEMENT_SIZE
operator|-
name|bitIndex
operator|%
name|ELEMENT_SIZE
operator|-
literal|1
decl_stmt|;
comment|// Set the elementIndex'th bit of data[dataIndex]'th element
name|data
index|[
name|dataIndex
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|data
index|[
name|dataIndex
index|]
operator||
operator|(
literal|1
operator|<<
name|elementIndex
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set the bit at the given index to 0    *    * @param bitIndex    */
specifier|public
name|void
name|unSetBit
parameter_list|(
name|int
name|bitIndex
parameter_list|)
block|{
name|validateBitIndex
argument_list|(
name|bitIndex
argument_list|)
expr_stmt|;
name|int
name|dataIndex
init|=
name|bitIndex
operator|/
name|ELEMENT_SIZE
decl_stmt|;
name|int
name|elementIndex
init|=
name|ELEMENT_SIZE
operator|-
name|bitIndex
operator|%
name|ELEMENT_SIZE
operator|-
literal|1
decl_stmt|;
comment|// Unset the elementIndex'th bit of data[dataIndex]'th element
name|data
index|[
name|dataIndex
index|]
operator|=
call|(
name|byte
call|)
argument_list|(
name|data
index|[
name|dataIndex
index|]
operator|&
operator|~
operator|(
literal|1
operator|<<
name|elementIndex
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Check if a bit at the given index is 1    * @param bitIndex    */
specifier|public
name|boolean
name|isBitSet
parameter_list|(
name|int
name|bitIndex
parameter_list|)
block|{
name|validateBitIndex
argument_list|(
name|bitIndex
argument_list|)
expr_stmt|;
name|int
name|dataIndex
init|=
name|bitIndex
operator|/
name|ELEMENT_SIZE
decl_stmt|;
name|int
name|elementIndex
init|=
name|ELEMENT_SIZE
operator|-
name|bitIndex
operator|%
name|ELEMENT_SIZE
operator|-
literal|1
decl_stmt|;
if|if
condition|(
operator|(
name|data
index|[
name|dataIndex
index|]
operator|&
operator|(
literal|1
operator|<<
name|elementIndex
operator|)
operator|)
operator|>
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**    * Set all bits to 0    *    */
specifier|public
name|void
name|clearAll
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|data
argument_list|,
operator|(
name|byte
operator|)
literal|0x00
argument_list|)
expr_stmt|;
block|}
comment|/**    * Set all bits to 1    *    */
specifier|public
name|void
name|setAll
parameter_list|()
block|{
name|Arrays
operator|.
name|fill
argument_list|(
name|data
argument_list|,
operator|(
name|byte
operator|)
literal|0xFF
argument_list|)
expr_stmt|;
block|}
comment|/**    * Prints the bit vector as a string of bit values (e.g. 01010111)    */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|str
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|byte
name|b
range|:
name|data
control|)
block|{
name|str
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toBinaryString
argument_list|(
operator|(
name|b
operator|&
literal|0xFF
operator|)
operator|+
literal|0x100
argument_list|)
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|str
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * Check if queried bitIndex is in valid range    * @param bitIndex    */
specifier|private
name|void
name|validateBitIndex
parameter_list|(
name|int
name|bitIndex
parameter_list|)
block|{
if|if
condition|(
operator|(
name|bitIndex
operator|>=
name|getSize
argument_list|()
operator|)
operator|||
operator|(
name|bitIndex
operator|<
literal|0
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Bit index out of range: "
operator|+
name|bitIndex
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

