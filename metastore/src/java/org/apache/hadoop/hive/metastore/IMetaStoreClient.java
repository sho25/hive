begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ObjectPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CompactionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ConfigValSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CurrentNotificationEventId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FireEventRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FireEventResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ForeignKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetAllFunctionsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetOpenTxnsInfoResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetPrincipalsInRoleRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetPrincipalsInRoleResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetRoleGrantsForPrincipalRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|GetRoleGrantsForPrincipalResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HeartbeatTxnRangeResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LockResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetadataPpdResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchLockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchTxnException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|OpenTxnsResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrimaryKeysRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SetPartitionsStatsRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowCompactResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ShowLocksResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnAbortedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TxnOpenException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_comment
comment|/**  * Wrapper around hive metastore thrift api  */
end_comment

begin_interface
annotation|@
name|Public
annotation|@
name|Evolving
specifier|public
interface|interface
name|IMetaStoreClient
block|{
comment|/**    * Returns whether current client is compatible with conf argument or not    * @return    */
name|boolean
name|isCompatibleWith
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
function_decl|;
comment|/**    * Set added jars path info to MetaStoreClient.    * @param addedJars the hive.added.jars.path. It is qualified paths separated by commas.    */
name|void
name|setHiveAddedJars
parameter_list|(
name|String
name|addedJars
parameter_list|)
function_decl|;
comment|/**    * Returns true if the current client is using an in process metastore (local metastore).    *    * @return    */
name|boolean
name|isLocalMetaStore
parameter_list|()
function_decl|;
comment|/**    *  Tries to reconnect this MetaStoreClient to the MetaStore.    */
name|void
name|reconnect
parameter_list|()
throws|throws
name|MetaException
function_decl|;
comment|/**    * close connection to meta store    */
name|void
name|close
parameter_list|()
function_decl|;
comment|/**    * set meta variable which is open to end users    */
name|void
name|setMetaConf
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * get current meta variable    */
name|String
name|getMetaConf
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get the names of all databases in the MetaStore that match the given pattern.    * @param databasePattern    * @return List of database names.    * @throws MetaException    * @throws TException    */
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|databasePattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get the names of all databases in the MetaStore.    * @return List of database names.    * @throws MetaException    * @throws TException    */
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get the names of all tables in the specified database that satisfy the supplied    * table name pattern.    * @param dbName    * @param tablePattern    * @return List of table names.    * @throws MetaException    * @throws TException    * @throws UnknownDBException    */
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tablePattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * For quick GetTablesOperation    */
name|List
argument_list|<
name|TableMeta
argument_list|>
name|getTableMeta
parameter_list|(
name|String
name|dbPatterns
parameter_list|,
name|String
name|tablePatterns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get the names of all tables in the specified database.    * @param dbName    * @return List of table names.    * @throws MetaException    * @throws TException    * @throws UnknownDBException    */
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get a list of table names that match a filter.    * The filter operators are LIKE,<,<=,>,>=, =,<>    *    * In the filter statement, values interpreted as strings must be enclosed in quotes,    * while values interpreted as integers should not be.  Strings and integers are the only    * supported value types.    *    * The currently supported key names in the filter are:    * Constants.HIVE_FILTER_FIELD_OWNER, which filters on the tables' owner's name    *   and supports all filter operators    * Constants.HIVE_FILTER_FIELD_LAST_ACCESS, which filters on the last access times    *   and supports all filter operators except LIKE    * Constants.HIVE_FILTER_FIELD_PARAMS, which filters on the tables' parameter keys and values    *   and only supports the filter operators = and<>.    *   Append the parameter key name to HIVE_FILTER_FIELD_PARAMS in the filter statement.    *   For example, to filter on parameter keys called "retention", the key name in the filter    *   statement should be Constants.HIVE_FILTER_FIELD_PARAMS + "retention"    *   Also, = and<> only work for keys that exist in the tables.    *   E.g., filtering on tables where key1<> value will only    *   return tables that have a value for the parameter key1.    * Some example filter statements include:    * filter = Constants.HIVE_FILTER_FIELD_OWNER + " like \".*test.*\" and " +    *   Constants.HIVE_FILTER_FIELD_LAST_ACCESS + " = 0";    * filter = Constants.HIVE_FILTER_FIELD_OWNER + " = \"test_user\" and (" +    *   Constants.HIVE_FILTER_FIELD_PARAMS + "retention = \"30\" or " +    *   Constants.HIVE_FILTER_FIELD_PARAMS + "retention = \"90\")"    *    * @param dbName    *          The name of the database from which you will retrieve the table names    * @param filter    *          The filter string    * @param maxTables    *          The maximum number of tables returned    * @return  A list of table names that match the desired filter    */
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxTables
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Drop the table.    *    * @param dbname    *          The database for this table    * @param tableName    *          The table to drop    * @param deleteData    *          Should we delete the underlying data    * @param ignoreUnknownTab    *          don't throw if the requested table doesn't exist    * @throws MetaException    *           Could not drop table properly.    * @throws NoSuchObjectException    *           The table wasn't found.    * @throws TException    *           A thrift communication error occurred    */
name|void
name|dropTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownTab
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * @param ifPurge    *          completely purge the table (skipping trash) while removing data from warehouse    * @see #dropTable(String, String, boolean, boolean)    */
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownTab
parameter_list|,
name|boolean
name|ifPurge
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Drop the table in the DEFAULT database.    *    * @param tableName    *          The table to drop    * @param deleteData    *          Should we delete the underlying data    * @throws MetaException    *           Could not drop table properly.    * @throws UnknownTableException    *           The table wasn't found.    * @throws TException    *           A thrift communication error occurred    * @throws NoSuchObjectException    *           The table wasn't found.    *    * @deprecated As of release 0.6.0 replaced by {@link #dropTable(String, String, boolean, boolean)}.    *             This method will be removed in release 0.7.0.    */
annotation|@
name|Deprecated
name|void
name|dropTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * @see #dropTable(String, String, boolean, boolean)    */
name|void
name|dropTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
name|boolean
name|tableExists
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Check to see if the specified table exists in the DEFAULT database.    * @param tableName    * @return TRUE if DEFAULT.tableName exists, FALSE otherwise.    * @throws MetaException    * @throws TException    * @throws UnknownDBException    * @deprecated As of release 0.6.0 replaced by {@link #tableExists(String, String)}.    *             This method will be removed in release 0.7.0.    */
annotation|@
name|Deprecated
name|boolean
name|tableExists
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * Get a table object from the DEFAULT database.    *    * @param tableName    *          Name of the table to fetch.    * @return An object representing the table.    * @throws MetaException    *           Could not fetch the table    * @throws TException    *           A thrift communication error occurred    * @throws NoSuchObjectException    *           In case the table wasn't found.    * @deprecated As of release 0.6.0 replaced by {@link #getTable(String, String)}.    *             This method will be removed in release 0.7.0.    */
annotation|@
name|Deprecated
name|Table
name|getTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get a Database Object    * @param databaseName  name of the database to fetch    * @return the database    * @throws NoSuchObjectException The database does not exist    * @throws MetaException Could not fetch the database    * @throws TException A thrift communication error occurred    */
name|Database
name|getDatabase
parameter_list|(
name|String
name|databaseName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a table object.    *    * @param dbName    *          The database the table is located in.    * @param tableName    *          Name of the table to fetch.    * @return An object representing the table.    * @throws MetaException    *           Could not fetch the table    * @throws TException    *           A thrift communication error occurred    * @throws NoSuchObjectException    *           In case the table wasn't found.    */
name|Table
name|getTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    *    * @param dbName    *          The database the tables are located in.    * @param tableNames    *          The names of the tables to fetch    * @return A list of objects representing the tables.    *          Only the tables that can be retrieved from the database are returned.  For example,    *          if none of the requested tables could be retrieved, an empty list is returned.    *          There is no guarantee of ordering of the returned tables.    * @throws InvalidOperationException    *          The input to this operation is invalid (e.g., the list of tables names is null)    * @throws UnknownDBException    *          The requested database could not be fetched.    * @throws TException    *          A thrift communication error occurred    * @throws MetaException    *          Any other errors    */
name|List
argument_list|<
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
throws|,
name|TException
function_decl|;
comment|/**    * @param tableName    * @param dbName    * @param partVals    * @return the partition object    * @throws InvalidObjectException    * @throws AlreadyExistsException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#append_partition(java.lang.String,    *      java.lang.String, java.util.List)    */
name|Partition
name|appendPartition
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|Partition
name|appendPartition
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Add a partition to the table.    *    * @param partition    *          The partition to add    * @return The partition added    * @throws InvalidObjectException    *           Could not find table to add to    * @throws AlreadyExistsException    *           Partition already exists    * @throws MetaException    *           Could not add partition    * @throws TException    *           Thrift exception    */
name|Partition
name|add_partition
parameter_list|(
name|Partition
name|partition
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Add partitions to the table.    *    * @param partitions    *          The partitions to add    * @throws InvalidObjectException    *           Could not find table to add to    * @throws AlreadyExistsException    *           Partition already exists    * @throws MetaException    *           Could not add partition    * @throws TException    *           Thrift exception    */
name|int
name|add_partitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|int
name|add_partitions_pspec
parameter_list|(
name|PartitionSpecProxy
name|partitionSpec
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Add partitions to the table.    *    * @param partitions The partitions to add    * @param ifNotExists only add partitions if they don't exist    * @param needResults Whether the results are needed    * @return the partitions that were added, or null if !needResults    */
name|List
argument_list|<
name|Partition
argument_list|>
name|add_partitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|boolean
name|needResults
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param dbName    * @param tblName    * @param partVals    * @return the partition object    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_partition(java.lang.String,    *      java.lang.String, java.util.List)    */
name|Partition
name|getPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param partitionSpecs    * @param sourceDb    * @param sourceTable    * @param destdb    * @param destTableName    * @return partition object    */
name|Partition
name|exchange_partition
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
parameter_list|,
name|String
name|sourceDb
parameter_list|,
name|String
name|sourceTable
parameter_list|,
name|String
name|destdb
parameter_list|,
name|String
name|destTableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|TException
function_decl|;
comment|/**    * With the one partitionSpecs to exchange, multiple partitions could be exchanged.    * e.g., year=2015/month/day, exchanging partition year=2015 results to all the partitions    * belonging to it exchanged. This function returns the list of affected partitions.    * @param partitionSpecs    * @param sourceDb    * @param sourceTable    * @param destdb    * @param destTableName    * @return the list of the new partitions    */
name|List
argument_list|<
name|Partition
argument_list|>
name|exchange_partitions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
parameter_list|,
name|String
name|sourceDb
parameter_list|,
name|String
name|sourceTable
parameter_list|,
name|String
name|destdb
parameter_list|,
name|String
name|destTableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|TException
function_decl|;
comment|/**    * @param dbName    * @param tblName    * @param name - partition name i.e. 'ds=2010-02-03/ts=2010-02-03 18%3A16%3A01'    * @return the partition object    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_partition(java.lang.String,    *      java.lang.String, java.util.List)    */
name|Partition
name|getPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * @param dbName    * @param tableName    * @param pvals    * @param userName    * @param groupNames    * @return the partition    * @throws MetaException    * @throws UnknownTableException    * @throws NoSuchObjectException    * @throws TException    */
name|Partition
name|getPartitionWithAuthInfo
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|pvals
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * @param tbl_name    * @param db_name    * @param max_parts    * @return the list of partitions    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|PartitionSpecProxy
name|listPartitionSpecs
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|maxParts
parameter_list|)
throws|throws
name|TException
function_decl|;
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get number of partitions matching specified filter    * @param dbName the database name    * @param tableName the table name    * @param filter the filter string,    *    for example "part1 = \"p1_abc\" and part2<= "\p2_test\"". Filtering can    *    be done only on string partition keys.    * @return number of partitions    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    */
specifier|public
name|int
name|getNumPartitionsByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get list of partitions matching specified filter    * @param db_name the database name    * @param tbl_name the table name    * @param filter the filter string,    *    for example "part1 = \"p1_abc\" and part2<= "\p2_test\"". Filtering can    *    be done only on string partition keys.    * @param max_parts the maximum number of partitions to return,    *    all partitions are returned if -1 is passed    * @return list of partitions    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsByFilter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
name|PartitionSpecProxy
name|listPartitionSpecsByFilter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|int
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * Get list of partitions matching specified serialized expression    * @param db_name the database name    * @param tbl_name the table name    * @param expr expression, serialized from ExprNodeDesc    * @param max_parts the maximum number of partitions to return,    *    all partitions are returned if -1 is passed    * @param default_partition_name Default partition name from configuration. If blank, the    *    metastore server-side configuration is used.    * @param result the resulting list of partitions    * @return whether the resulting list contains partitions which may or may not match the expr    */
name|boolean
name|listPartitionsByExpr
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|default_partition_name
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * @param dbName    * @param tableName    * @param s    * @param userName    * @param groupNames    * @return the list of partitions    * @throws NoSuchObjectException    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsWithAuthInfo
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|short
name|s
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Get partitions by a list of partition names.    * @param db_name database name    * @param tbl_name table name    * @param part_names list of partition names    * @return list of Partition objects    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    */
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_names
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param dbName    * @param tableName    * @param partialPvals    * @param s    * @param userName    * @param groupNames    * @return the list of paritions    * @throws NoSuchObjectException    */
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsWithAuthInfo
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partialPvals
parameter_list|,
name|short
name|s
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * @param db_name    * @param tbl_name    * @param partKVs    * @param eventType    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    * @throws UnknownTableException    * @throws UnknownDBException    * @throws UnknownPartitionException    * @throws InvalidPartitionException    */
name|void
name|markPartitionForEvent
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|,
name|PartitionEventType
name|eventType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|UnknownPartitionException
throws|,
name|InvalidPartitionException
function_decl|;
comment|/**    * @param db_name    * @param tbl_name    * @param partKVs    * @param eventType    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    * @throws UnknownTableException    * @throws UnknownDBException    * @throws UnknownPartitionException    * @throws InvalidPartitionException    */
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|,
name|PartitionEventType
name|eventType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|UnknownPartitionException
throws|,
name|InvalidPartitionException
function_decl|;
comment|/**    * @param partVals    * @throws TException    * @throws MetaException    */
name|void
name|validatePartitionNameCharacters
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|TException
throws|,
name|MetaException
function_decl|;
comment|/**    * @param tbl    * @throws AlreadyExistsException    * @throws InvalidObjectException    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#create_table(org.apache.hadoop.hive.metastore.api.Table)    */
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
name|void
name|alter_table
parameter_list|(
name|String
name|defaultDatabaseName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|table
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|//wrapper of alter_table_with_cascade
name|void
name|alter_table_with_environmentContext
parameter_list|(
name|String
name|defaultDatabaseName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|table
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownDb
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownDb
parameter_list|,
name|boolean
name|cascade
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|alterDatabase
parameter_list|(
name|String
name|name
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param db_name    * @param tbl_name    * @param part_vals    * @param deleteData    *          delete the underlying data or just delete the table in metadata    * @return true or false    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#drop_partition(java.lang.String,    *      java.lang.String, java.util.List, boolean)    */
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Method to dropPartitions() with the option to purge the partition data directly,    * rather than to move data to trash.    * @param db_name Name of the database.    * @param tbl_name Name of the table.    * @param part_vals Specification of the partitions being dropped.    * @param options PartitionDropOptions for the operation.    * @return True (if partitions are dropped), else false.    * @throws TException    */
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|PartitionDropOptions
name|options
parameter_list|)
throws|throws
name|TException
function_decl|;
name|List
argument_list|<
name|Partition
argument_list|>
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partExprs
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ifExists
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|List
argument_list|<
name|Partition
argument_list|>
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partExprs
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|boolean
name|needResults
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Generalization of dropPartitions(),    * @param dbName Name of the database    * @param tblName Name of the table    * @param partExprs Partition-specification    * @param options Boolean options for dropping partitions    * @return List of Partitions dropped    * @throws TException On failure    */
name|List
argument_list|<
name|Partition
argument_list|>
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partExprs
parameter_list|,
name|PartitionDropOptions
name|options
parameter_list|)
throws|throws
name|TException
function_decl|;
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * updates a partition to new partition    *    * @param dbName    *          database of the old partition    * @param tblName    *          table name of the old partition    * @param newPart    *          new partition    * @throws InvalidOperationException    *           if the old partition does not exist    * @throws MetaException    *           if error in updating metadata    * @throws TException    *           if error in communicating with metastore server    */
name|void
name|alter_partition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Partition
name|newPart
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * updates a list of partitions    *    * @param dbName    *          database of the old partition    * @param tblName    *          table name of the old partition    * @param newParts    *          list of partitions    * @throws InvalidOperationException    *           if the old partition does not exist    * @throws MetaException    *           if error in updating metadata    * @throws TException    *           if error in communicating with metastore server    */
name|void
name|alter_partitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * rename a partition to a new partition    *    * @param dbname    *          database of the old partition    * @param name    *          table name of the old partition    * @param part_vals    *          values of the old partition    * @param newPart    *          new partition    * @throws InvalidOperationException    *           if srcFs and destFs are different    * @throws MetaException    *          if error in updating metadata    * @throws TException    *          if error in communicating with metastore server    */
name|void
name|renamePartition
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param db    * @param tableName    * @throws UnknownTableException    * @throws UnknownDBException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_fields(java.lang.String,    *      java.lang.String)    */
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFields
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * @param db    * @param tableName    * @throws UnknownTableException    * @throws UnknownDBException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_schema(java.lang.String,    *      java.lang.String)    */
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getSchema
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
function_decl|;
comment|/**    * @param name    *          name of the configuration property to get the value of    * @param defaultValue    *          the value to return if property with the given name doesn't exist    * @return value of the specified configuration property    * @throws TException    * @throws ConfigValSecurityException    */
name|String
name|getConfigValue
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|TException
throws|,
name|ConfigValSecurityException
function_decl|;
comment|/**    *    * @param name    *          the partition name e.g. ("ds=2010-03-03/hr=12")    * @return a list containing the partition col values, in the same order as the name    * @throws MetaException    * @throws TException    */
name|List
argument_list|<
name|String
argument_list|>
name|partitionNameToVals
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    *    * @param name    *          the partition name e.g. ("ds=2010-03-03/hr=12")    * @return a map from the partition col to the value, as listed in the name    * @throws MetaException    * @throws TException    */
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionNameToSpec
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * create an index    * @param index the index object    * @throws InvalidObjectException    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    * @throws AlreadyExistsException    */
name|void
name|createIndex
parameter_list|(
name|Index
name|index
parameter_list|,
name|Table
name|indexTable
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
throws|,
name|AlreadyExistsException
function_decl|;
name|void
name|alter_index
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|indexName
parameter_list|,
name|Index
name|index
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    *    * @param dbName    * @param tblName    * @param indexName    * @return the index    * @throws MetaException    * @throws UnknownTableException    * @throws NoSuchObjectException    * @throws TException    */
name|Index
name|getIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
comment|/**    * list indexes of the give base table    * @param db_name    * @param tbl_name    * @param max    * @return the list of indexes    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    */
name|List
argument_list|<
name|Index
argument_list|>
name|listIndexes
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * list all the index names of the give base table.    *    * @param db_name    * @param tbl_name    * @param max    * @return the list of names    * @throws MetaException    * @throws TException    */
name|List
argument_list|<
name|String
argument_list|>
name|listIndexNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param db_name    * @param tbl_name    * @param name index name    * @param deleteData    * @return true on success    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    */
name|boolean
name|dropIndex
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Write table level column statistics to persistent store    * @param statsObj    * @return boolean indicating the status of the operation    * @throws NoSuchObjectException    * @throws InvalidObjectException    * @throws MetaException    * @throws TException    * @throws InvalidInputException    */
name|boolean
name|updateTableColumnStatistics
parameter_list|(
name|ColumnStatistics
name|statsObj
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Write partition level column statistics to persistent store    * @param statsObj    * @return boolean indicating the status of the operation    * @throws NoSuchObjectException    * @throws InvalidObjectException    * @throws MetaException    * @throws TException    * @throws InvalidInputException    */
name|boolean
name|updatePartitionColumnStatistics
parameter_list|(
name|ColumnStatistics
name|statsObj
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Get table column statistics given dbName, tableName and multiple colName-s    * @return ColumnStatistics struct for a given db, table and columns    */
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get partitions column statistics given dbName, tableName, multiple partitions and colName-s    * @return ColumnStatistics struct for a given db, table and columns    */
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Delete partition level column statistics given dbName, tableName, partName and colName    * @param dbName    * @param tableName    * @param partName    * @param colName    * @return boolean indicating outcome of the operation    * @throws NoSuchObjectException    * @throws InvalidObjectException    * @throws MetaException    * @throws TException    * @throws InvalidInputException    */
name|boolean
name|deletePartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|TException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Delete table level column statistics given dbName, tableName and colName    * @param dbName    * @param tableName    * @param colName    * @return boolean indicating the outcome of the operation    * @throws NoSuchObjectException    * @throws MetaException    * @throws InvalidObjectException    * @throws TException    * @throws InvalidInputException    */
name|boolean
name|deleteTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|TException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * @param role    *          role object    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|create_role
parameter_list|(
name|Role
name|role
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param role_name    *          role name    *    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|drop_role
parameter_list|(
name|String
name|role_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * list all role names    * @return list of names    * @throws TException    * @throws MetaException    */
name|List
argument_list|<
name|String
argument_list|>
name|listRoleNames
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    *    * @param role_name    * @param user_name    * @param principalType    * @param grantor    * @param grantorType    * @param grantOption    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|grant_role
parameter_list|(
name|String
name|role_name
parameter_list|,
name|String
name|user_name
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param role_name    *          role name    * @param user_name    *          user name    * @param principalType    *    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|revoke_role
parameter_list|(
name|String
name|role_name
parameter_list|,
name|String
name|user_name
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    *    * @param principalName    * @param principalType    * @return list of roles    * @throws MetaException    * @throws TException    */
name|List
argument_list|<
name|Role
argument_list|>
name|list_roles
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Return the privileges that the user, group have directly and indirectly through roles    * on the given hiveObject    * @param hiveObject    * @param user_name    * @param group_names    * @return the privilege set    * @throws MetaException    * @throws TException    */
name|PrincipalPrivilegeSet
name|get_privilege_set
parameter_list|(
name|HiveObjectRef
name|hiveObject
parameter_list|,
name|String
name|user_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Return the privileges that this principal has directly over the object (not through roles).    * @param principal_name    * @param principal_type    * @param hiveObject    * @return list of privileges    * @throws MetaException    * @throws TException    */
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_privileges
parameter_list|(
name|String
name|principal_name
parameter_list|,
name|PrincipalType
name|principal_type
parameter_list|,
name|HiveObjectRef
name|hiveObject
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param privileges    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|grant_privileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param privileges    * @return true on success    * @throws MetaException    * @throws TException    */
name|boolean
name|revoke_privileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * This is expected to be a no-op when in local mode,    * which means that the implementation will return null.    * @param owner the intended owner for the token    * @param renewerKerberosPrincipalName    * @return the string of the token    * @throws MetaException    * @throws TException    */
name|String
name|getDelegationToken
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|renewerKerberosPrincipalName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param tokenStrForm    * @return the new expiration time    * @throws MetaException    * @throws TException    */
name|long
name|renewDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * @param tokenStrForm    * @throws MetaException    * @throws TException    */
name|void
name|cancelDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
name|String
name|getTokenStrForm
parameter_list|()
throws|throws
name|IOException
function_decl|;
name|boolean
name|addToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|,
name|String
name|delegationToken
parameter_list|)
throws|throws
name|TException
function_decl|;
name|boolean
name|removeToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
throws|throws
name|TException
function_decl|;
name|String
name|getToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
throws|throws
name|TException
function_decl|;
name|List
argument_list|<
name|String
argument_list|>
name|getAllTokenIdentifiers
parameter_list|()
throws|throws
name|TException
function_decl|;
name|int
name|addMasterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|updateMasterKey
parameter_list|(
name|Integer
name|seqNo
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|boolean
name|removeMasterKey
parameter_list|(
name|Integer
name|keySeq
parameter_list|)
throws|throws
name|TException
function_decl|;
name|String
index|[]
name|getMasterKeys
parameter_list|()
throws|throws
name|TException
function_decl|;
name|void
name|createFunction
parameter_list|(
name|Function
name|func
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|alterFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|,
name|Function
name|newFunction
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|void
name|dropFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
throws|,
name|TException
function_decl|;
name|Function
name|getFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
name|List
argument_list|<
name|String
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
name|GetAllFunctionsResponse
name|getAllFunctions
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * Get a structure that details valid transactions.    * @return list of valid transactions    * @throws TException    */
name|ValidTxnList
name|getValidTxns
parameter_list|()
throws|throws
name|TException
function_decl|;
comment|/**    * Get a structure that details valid transactions.    * @param currentTxn The current transaction of the caller.  This will be removed from the    *                   exceptions list so that the caller sees records from his own transaction.    * @return list of valid transactions    * @throws TException    */
name|ValidTxnList
name|getValidTxns
parameter_list|(
name|long
name|currentTxn
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Initiate a transaction.    * @param user User who is opening this transaction.  This is the Hive user,    *             not necessarily the OS user.  It is assumed that this user has already been    *             authenticated and authorized at this point.    * @return transaction identifier    * @throws TException    */
name|long
name|openTxn
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Initiate a batch of transactions.  It is not guaranteed that the    * requested number of transactions will be instantiated.  The system has a    * maximum number instantiated per request, controlled by hive.txn.max    * .batch.open in hive-site.xml.  If the user requests more than this    * value, only the configured max will be returned.    *    *<p>Increasing the number of transactions requested in the batch will    * allow applications that stream data into Hive to place more commits in a    * single file, thus reducing load on the namenode and making reads of the    * data more efficient.  However, opening more transactions in a batch will    * also result in readers needing to keep a larger list of open    * transactions to ignore, potentially slowing their reads.  Users will    * need to test in their system to understand the optimal number of    * transactions to request in a batch.    *</p>    * @param user User who is opening this transaction.  This is the Hive user,    *             not necessarily the OS user.  It is assumed that this user has already been    *             authenticated and authorized at this point.    * @param numTxns number of requested transactions to open    * @return list of opened txn ids.  As noted above, this may be less than    * requested, so the user should check how many were returned rather than    * optimistically assuming that the result matches the request.    * @throws TException    */
name|OpenTxnsResponse
name|openTxns
parameter_list|(
name|String
name|user
parameter_list|,
name|int
name|numTxns
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Rollback a transaction.  This will also unlock any locks associated with    * this transaction.    * @param txnid id of transaction to be rolled back.    * @throws NoSuchTxnException if the requested transaction does not exist.    * Note that this can result from the transaction having timed out and been    * deleted.    * @throws TException    */
name|void
name|rollbackTxn
parameter_list|(
name|long
name|txnid
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TException
function_decl|;
comment|/**    * Commit a transaction.  This will also unlock any locks associated with    * this transaction.    * @param txnid id of transaction to be committed.    * @throws NoSuchTxnException if the requested transaction does not exist.    * This can result fro the transaction having timed out and been deleted by    * the compactor.    * @throws TxnAbortedException if the requested transaction has been    * aborted.  This can result from the transaction timing out.    * @throws TException    */
name|void
name|commitTxn
parameter_list|(
name|long
name|txnid
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
function_decl|;
comment|/**    * Abort a list of transactions. This is for use by "ABORT TRANSACTIONS" in the grammar.    * @throws TException    */
name|void
name|abortTxns
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|txnids
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Show the list of currently open transactions.  This is for use by "show transactions" in the    * grammar, not for applications that want to find a list of current transactions to work with.    * Those wishing the latter should call {@link #getValidTxns()}.    * @return List of currently opened transactions, included aborted ones.    * @throws TException    */
name|GetOpenTxnsInfoResponse
name|showTxns
parameter_list|()
throws|throws
name|TException
function_decl|;
comment|/**    * Request a set of locks.  All locks needed for a particular query, DML,    * or DDL operation should be batched together and requested in one lock    * call.  This avoids deadlocks.  It also avoids blocking other users who    * only require some of the locks required by this user.    *    *<p>If the operation requires a transaction (INSERT, UPDATE,    * or DELETE) that transaction id must be provided as part this lock    * request.  All locks associated with a transaction will be released when    * that transaction is committed or rolled back.</p>    * *    *<p>Once a lock is acquired, {@link #heartbeat(long, long)} must be called    * on a regular basis to avoid the lock being timed out by the system.</p>    * @param request The lock request.  {@link LockRequestBuilder} can be used    *                construct this request.    * @return a lock response, which will provide two things,    * the id of the lock (to be used in all further calls regarding this lock)    * as well as a state of the lock.  If the state is ACQUIRED then the user    * can proceed.  If it is WAITING the user should wait and call    * {@link #checkLock(long)} before proceeding.  All components of the lock    * will have the same state.    * @throws NoSuchTxnException if the requested transaction does not exist.    * This can result fro the transaction having timed out and been deleted by    * the compactor.    * @throws TxnAbortedException if the requested transaction has been    * aborted.  This can result from the transaction timing out.    * @throws TException    */
name|LockResponse
name|lock
parameter_list|(
name|LockRequest
name|request
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
function_decl|;
comment|/**    * Check the status of a set of locks requested via a    * {@link #lock(org.apache.hadoop.hive.metastore.api.LockRequest)} call.    * Once a lock is acquired, {@link #heartbeat(long, long)} must be called    * on a regular basis to avoid the lock being timed out by the system.    * @param lockid lock id returned by lock().    * @return a lock response, which will provide two things,    * the id of the lock (to be used in all further calls regarding this lock)    * as well as a state of the lock.  If the state is ACQUIRED then the user    * can proceed.  If it is WAITING the user should wait and call    * this method again before proceeding.  All components of the lock    * will have the same state.    * @throws NoSuchTxnException if the requested transaction does not exist.    * This can result fro the transaction having timed out and been deleted by    * the compactor.    * @throws TxnAbortedException if the requested transaction has been    * aborted.  This can result from the transaction timing out.    * @throws NoSuchLockException if the requested lockid does not exist.    * This can result from the lock timing out and being unlocked by the system.    * @throws TException    */
name|LockResponse
name|checkLock
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|NoSuchLockException
throws|,
name|TException
function_decl|;
comment|/**    * Unlock a set of locks.  This can only be called when the locks are not    * assocaited with a transaction.    * @param lockid lock id returned by    * {@link #lock(org.apache.hadoop.hive.metastore.api.LockRequest)}    * @throws NoSuchLockException if the requested lockid does not exist.    * This can result from the lock timing out and being unlocked by the system.    * @throws TxnOpenException if the locks are are associated with a    * transaction.    * @throws TException    */
name|void
name|unlock
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|NoSuchLockException
throws|,
name|TxnOpenException
throws|,
name|TException
function_decl|;
comment|/**    * Show all currently held and waiting locks.    * @return List of currently held and waiting locks.    * @throws TException    */
name|ShowLocksResponse
name|showLocks
parameter_list|()
throws|throws
name|TException
function_decl|;
comment|/**    * Send a heartbeat to indicate that the client holding these locks (if    * any) and that opened this transaction (if one exists) is still alive.    * The default timeout for transactions and locks is 300 seconds,    * though it is configurable.  To determine how often to heartbeat you will    * need to ask your system administrator how the metastore thrift service    * has been configured.    * @param txnid the id of the open transaction.  If no transaction is open    *              (it is a DDL or query) then this can be set to 0.    * @param lockid the id of the locks obtained.  If no locks have been    *               obtained then this can be set to 0.    * @throws NoSuchTxnException if the requested transaction does not exist.    * This can result fro the transaction having timed out and been deleted by    * the compactor.    * @throws TxnAbortedException if the requested transaction has been    * aborted.  This can result from the transaction timing out.    * @throws NoSuchLockException if the requested lockid does not exist.    * This can result from the lock timing out and being unlocked by the system.    * @throws TException    */
name|void
name|heartbeat
parameter_list|(
name|long
name|txnid
parameter_list|,
name|long
name|lockid
parameter_list|)
throws|throws
name|NoSuchLockException
throws|,
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
function_decl|;
comment|/**    * Send heartbeats for a range of transactions.  This is for the streaming ingest client that    * will have many transactions open at once.  Everyone else should use    * {@link #heartbeat(long, long)}.    * @param min minimum transaction id to heartbeat, inclusive    * @param max maximum transaction id to heartbeat, inclusive    * @return a pair of lists that tell which transactions in the list did not exist (they may    * have already been closed) and which were aborted.    * @throws TException    */
name|HeartbeatTxnRangeResponse
name|heartbeatTxnRange
parameter_list|(
name|long
name|min
parameter_list|,
name|long
name|max
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Send a request to compact a table or partition.  This will not block until the compaction is    * complete.  It will instead put a request on the queue for that table or partition to be    * compacted.  No checking is done on the dbname, tableName, or partitionName to make sure they    * refer to valid objects.  It is assumed this has already been done by the caller.    * @param dbname Name of the database the table is in.  If null, this will be assumed to be    *               'default'.    * @param tableName Name of the table to be compacted.  This cannot be null.  If partitionName    *                  is null, this must be a non-partitioned table.    * @param partitionName Name of the partition to be compacted    * @param type Whether this is a major or minor compaction.    * @throws TException    */
name|void
name|compact
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|CompactionType
name|type
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get a list of all current compactions.    * @return List of all current compactions.  This includes compactions waiting to happen,    * in progress, and finished but waiting to clean the existing files.    * @throws TException    */
name|ShowCompactResponse
name|showCompactions
parameter_list|()
throws|throws
name|TException
function_decl|;
comment|/**    * Send a list of partitions to the metastore to indicate which partitions were loaded    * dynamically.    * @param txnId id of the transaction    * @param dbName database name    * @param tableName table name    * @param partNames partition name, as constructed by Warehouse.makePartName    * @throws TException    */
name|void
name|addDynamicPartitions
parameter_list|(
name|long
name|txnId
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * A filter provided by the client that determines if a given notification event should be    * returned.    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCatalog"
block|}
argument_list|)
interface|interface
name|NotificationFilter
block|{
comment|/**      * Whether a notification event should be accepted      * @param event      * @return if true, event will be added to list, if false it will be ignored      */
name|boolean
name|accept
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
function_decl|;
block|}
comment|/**    * Get the next set of notifications from the database.    * @param lastEventId The last event id that was consumed by this reader.  The returned    *                    notifications will start at the next eventId available after this eventId.    * @param maxEvents Maximum number of events to return.  If< 1, then all available events will    *                  be returned.    * @param filter User provided filter to remove unwanted events.  If null, all events will be    *               returned.    * @return list of notifications, sorted by eventId.  It is guaranteed that the events are in    * the order that the operations were done on the database.    * @throws TException    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCatalog"
block|}
argument_list|)
name|NotificationEventResponse
name|getNextNotification
parameter_list|(
name|long
name|lastEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|,
name|NotificationFilter
name|filter
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Get the last used notification event id.    * @return last used id    * @throws TException    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCatalog"
block|}
argument_list|)
name|CurrentNotificationEventId
name|getCurrentNotificationEventId
parameter_list|()
throws|throws
name|TException
function_decl|;
comment|/**    * Request that the metastore fire an event.  Currently this is only supported for DML    * operations, since the metastore knows when DDL operations happen.    * @param request    * @return response, type depends on type of request    * @throws TException    */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"Apache Hive, HCatalog"
block|}
argument_list|)
name|FireEventResponse
name|fireListenerEvent
parameter_list|(
name|FireEventRequest
name|request
parameter_list|)
throws|throws
name|TException
function_decl|;
class|class
name|IncompatibleMetastoreException
extends|extends
name|MetaException
block|{
name|IncompatibleMetastoreException
parameter_list|(
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * get all role-grants for users/roles that have been granted the given role    * Note that in the returned list of RolePrincipalGrants, the roleName is    * redundant as it would match the role_name argument of this function    * @param getPrincRoleReq    * @return    * @throws MetaException    * @throws TException    */
name|GetPrincipalsInRoleResponse
name|get_principals_in_role
parameter_list|(
name|GetPrincipalsInRoleRequest
name|getPrincRoleReq
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
comment|/**    * get all role-grants for roles that have been granted to given principal    * Note that in the returned list of RolePrincipalGrants, the principal information    * redundant as it would match the principal information in request    * @param getRolePrincReq    * @return    * @throws MetaException    * @throws TException    */
name|GetRoleGrantsForPrincipalResponse
name|get_role_grants_for_principal
parameter_list|(
name|GetRoleGrantsForPrincipalRequest
name|getRolePrincReq
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
function_decl|;
specifier|public
name|AggrStats
name|getAggrColStatsFor
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
function_decl|;
name|boolean
name|setPartitionColumnStatistics
parameter_list|(
name|SetPartitionsStatsRequest
name|request
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
function_decl|;
comment|/**    * Flush any catalog objects held by the metastore implementation.  Note that this does not    * flush statistics objects.  This should be called at the beginning of each query.    */
name|void
name|flushCache
parameter_list|()
function_decl|;
comment|/**    * Gets file metadata, as cached by metastore, for respective file IDs.    * The metadata that is not cached in metastore may be missing.    */
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|>
name|getFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|TException
function_decl|;
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MetadataPpdResult
argument_list|>
argument_list|>
name|getFileMetadataBySarg
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|ByteBuffer
name|sarg
parameter_list|,
name|boolean
name|doGetFooters
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Cleares the file metadata cache for respective file IDs.    */
name|void
name|clearFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|TException
function_decl|;
comment|/**    * Adds file metadata for respective file IDs to metadata cache in metastore.    */
name|void
name|putFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|metadata
parameter_list|)
throws|throws
name|TException
function_decl|;
name|boolean
name|isSameConfObj
parameter_list|(
name|HiveConf
name|c
parameter_list|)
function_decl|;
name|boolean
name|cacheFileMetadata
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|boolean
name|allParts
parameter_list|)
throws|throws
name|TException
function_decl|;
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeys
parameter_list|(
name|PrimaryKeysRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeys
parameter_list|(
name|ForeignKeysRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
name|void
name|createTableWithConstraints
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
name|tTbl
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
name|void
name|dropConstraint
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|constraintName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
function_decl|;
block|}
end_interface

end_unit

