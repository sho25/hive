begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|messaging
operator|.
name|event
operator|.
name|filters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_comment
comment|/**  * Utility function that constructs a notification filter to match a given db name and/or table name.  * If dbName == null, fetches all warehouse events.  * If dnName != null, but tableName == null, fetches all events for the db  * If dbName != null&& tableName != null, fetches all events for the specified table  */
end_comment

begin_class
specifier|public
class|class
name|DatabaseAndTableFilter
extends|extends
name|BasicFilter
block|{
specifier|private
specifier|final
name|String
name|databaseName
decl_stmt|,
name|tableName
decl_stmt|;
specifier|public
name|DatabaseAndTableFilter
parameter_list|(
specifier|final
name|String
name|databaseName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
block|{
name|this
operator|.
name|databaseName
operator|=
name|databaseName
expr_stmt|;
name|this
operator|.
name|tableName
operator|=
name|tableName
expr_stmt|;
block|}
annotation|@
name|Override
name|boolean
name|shouldAccept
parameter_list|(
specifier|final
name|NotificationEvent
name|event
parameter_list|)
block|{
if|if
condition|(
name|databaseName
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
comment|// if our dbName is null, we're interested in all wh events
block|}
if|if
condition|(
name|databaseName
operator|.
name|equalsIgnoreCase
argument_list|(
name|event
operator|.
name|getDbName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
operator|(
name|tableName
operator|==
literal|null
operator|)
comment|// if our dbName is equal, but tableName is blank, we're interested in this db-level event
operator|||
operator|(
name|tableName
operator|.
name|equalsIgnoreCase
argument_list|(
name|event
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|)
comment|// table level event that matches us
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

