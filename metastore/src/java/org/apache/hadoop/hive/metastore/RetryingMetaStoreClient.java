begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|annotation
operator|.
name|NoReconnect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|/**  * RetryingMetaStoreClient. Creates a proxy for a IMetaStoreClient  * implementation and retries calls to it on failure.  * If the login user is authenticated using keytab, it relogins user before  * each call.  *  */
end_comment

begin_class
annotation|@
name|Public
specifier|public
class|class
name|RetryingMetaStoreClient
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RetryingMetaStoreClient
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|IMetaStoreClient
name|base
decl_stmt|;
specifier|private
specifier|final
name|int
name|retryLimit
decl_stmt|;
specifier|private
specifier|final
name|long
name|retryDelaySeconds
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|metaCallTimeMap
decl_stmt|;
specifier|private
specifier|final
name|long
name|connectionLifeTimeInMillis
decl_stmt|;
specifier|private
name|long
name|lastConnectionTime
decl_stmt|;
specifier|private
name|boolean
name|localMetaStore
decl_stmt|;
specifier|protected
name|RetryingMetaStoreClient
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|constructorArgTypes
parameter_list|,
name|Object
index|[]
name|constructorArgs
parameter_list|,
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|metaCallTimeMap
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|IMetaStoreClient
argument_list|>
name|msClientClass
parameter_list|)
throws|throws
name|MetaException
block|{
name|this
operator|.
name|retryLimit
operator|=
name|hiveConf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTFAILURERETRIES
argument_list|)
expr_stmt|;
name|this
operator|.
name|retryDelaySeconds
operator|=
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_CLIENT_CONNECT_RETRY_DELAY
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|metaCallTimeMap
operator|=
name|metaCallTimeMap
expr_stmt|;
name|this
operator|.
name|connectionLifeTimeInMillis
operator|=
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_CLIENT_SOCKET_LIFETIME
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastConnectionTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|String
name|msUri
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|)
decl_stmt|;
name|localMetaStore
operator|=
operator|(
name|msUri
operator|==
literal|null
operator|)
operator|||
name|msUri
operator|.
name|trim
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
name|reloginExpiringKeytabUser
argument_list|()
expr_stmt|;
name|this
operator|.
name|base
operator|=
operator|(
name|IMetaStoreClient
operator|)
name|MetaStoreUtils
operator|.
name|newInstance
argument_list|(
name|msClientClass
argument_list|,
name|constructorArgTypes
argument_list|,
name|constructorArgs
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|IMetaStoreClient
name|getProxy
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|boolean
name|allowEmbedded
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|getProxy
argument_list|(
name|hiveConf
argument_list|,
operator|new
name|Class
index|[]
block|{
name|HiveConf
operator|.
name|class
block|,
name|HiveMetaHookLoader
operator|.
name|class
block|,
name|Boolean
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|hiveConf
block|,
literal|null
block|,
name|allowEmbedded
block|}
argument_list|,
literal|null
argument_list|,
name|HiveMetaStoreClient
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
specifier|static
name|IMetaStoreClient
name|getProxy
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|HiveMetaHookLoader
name|hookLoader
parameter_list|,
name|String
name|mscClassName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|getProxy
argument_list|(
name|hiveConf
argument_list|,
name|hookLoader
argument_list|,
literal|null
argument_list|,
name|mscClassName
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|IMetaStoreClient
name|getProxy
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|HiveMetaHookLoader
name|hookLoader
parameter_list|,
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|metaCallTimeMap
parameter_list|,
name|String
name|mscClassName
parameter_list|,
name|boolean
name|allowEmbedded
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|getProxy
argument_list|(
name|hiveConf
argument_list|,
operator|new
name|Class
index|[]
block|{
name|HiveConf
operator|.
name|class
block|,
name|HiveMetaHookLoader
operator|.
name|class
block|,
name|Boolean
operator|.
name|class
block|}
argument_list|,
operator|new
name|Object
index|[]
block|{
name|hiveConf
block|,
name|hookLoader
block|,
name|allowEmbedded
block|}
argument_list|,
name|metaCallTimeMap
argument_list|,
name|mscClassName
argument_list|)
return|;
block|}
comment|/**    * This constructor is meant for Hive internal use only.    * Please use getProxy(HiveConf hiveConf, HiveMetaHookLoader hookLoader) for external purpose.    */
specifier|public
specifier|static
name|IMetaStoreClient
name|getProxy
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|constructorArgTypes
parameter_list|,
name|Object
index|[]
name|constructorArgs
parameter_list|,
name|String
name|mscClassName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|getProxy
argument_list|(
name|hiveConf
argument_list|,
name|constructorArgTypes
argument_list|,
name|constructorArgs
argument_list|,
literal|null
argument_list|,
name|mscClassName
argument_list|)
return|;
block|}
comment|/**    * This constructor is meant for Hive internal use only.    * Please use getProxy(HiveConf hiveConf, HiveMetaHookLoader hookLoader) for external purpose.    */
specifier|public
specifier|static
name|IMetaStoreClient
name|getProxy
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
index|[]
name|constructorArgTypes
parameter_list|,
name|Object
index|[]
name|constructorArgs
parameter_list|,
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|metaCallTimeMap
parameter_list|,
name|String
name|mscClassName
parameter_list|)
throws|throws
name|MetaException
block|{
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Class
argument_list|<
name|?
extends|extends
name|IMetaStoreClient
argument_list|>
name|baseClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|IMetaStoreClient
argument_list|>
operator|)
name|MetaStoreUtils
operator|.
name|getClass
argument_list|(
name|mscClassName
argument_list|)
decl_stmt|;
name|RetryingMetaStoreClient
name|handler
init|=
operator|new
name|RetryingMetaStoreClient
argument_list|(
name|hiveConf
argument_list|,
name|constructorArgTypes
argument_list|,
name|constructorArgs
argument_list|,
name|metaCallTimeMap
argument_list|,
name|baseClass
argument_list|)
decl_stmt|;
return|return
operator|(
name|IMetaStoreClient
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|RetryingMetaStoreClient
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|baseClass
operator|.
name|getInterfaces
argument_list|()
argument_list|,
name|handler
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
name|ret
init|=
literal|null
decl_stmt|;
name|int
name|retriesMade
init|=
literal|0
decl_stmt|;
name|TException
name|caughtException
init|=
literal|null
decl_stmt|;
name|boolean
name|allowReconnect
init|=
operator|!
name|method
operator|.
name|isAnnotationPresent
argument_list|(
name|NoReconnect
operator|.
name|class
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|reloginExpiringKeytabUser
argument_list|()
expr_stmt|;
if|if
condition|(
name|allowReconnect
condition|)
block|{
if|if
condition|(
name|retriesMade
operator|>
literal|0
operator|||
name|hasConnectionLifeTimeReached
argument_list|(
name|method
argument_list|)
condition|)
block|{
name|base
operator|.
name|reconnect
argument_list|()
expr_stmt|;
name|lastConnectionTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|metaCallTimeMap
operator|==
literal|null
condition|)
block|{
name|ret
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|base
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// need to capture the timing
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ret
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|base
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|long
name|timeTaken
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
decl_stmt|;
name|addMethodTime
argument_list|(
name|method
argument_list|,
name|timeTaken
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
name|Throwable
name|t
init|=
name|e
operator|.
name|getCause
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|TApplicationException
condition|)
block|{
name|TApplicationException
name|tae
init|=
operator|(
name|TApplicationException
operator|)
name|t
decl_stmt|;
switch|switch
condition|(
name|tae
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|TApplicationException
operator|.
name|UNSUPPORTED_CLIENT_TYPE
case|:
case|case
name|TApplicationException
operator|.
name|UNKNOWN_METHOD
case|:
case|case
name|TApplicationException
operator|.
name|WRONG_METHOD_NAME
case|:
case|case
name|TApplicationException
operator|.
name|INVALID_PROTOCOL
case|:
throw|throw
name|t
throw|;
default|default:
comment|// TODO: most other options are probably unrecoverable... throw?
name|caughtException
operator|=
name|tae
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|t
operator|instanceof
name|TProtocolException
operator|)
operator|||
operator|(
name|t
operator|instanceof
name|TTransportException
operator|)
condition|)
block|{
comment|// TODO: most protocol exceptions are probably unrecoverable... throw?
name|caughtException
operator|=
operator|(
name|TException
operator|)
name|t
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|t
operator|instanceof
name|MetaException
operator|)
operator|&&
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|matches
argument_list|(
literal|"(?s).*(JDO[a-zA-Z]*|TProtocol|TTransport)Exception.*"
argument_list|)
operator|&&
operator|!
name|t
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"java.sql.SQLIntegrityConstraintViolationException"
argument_list|)
condition|)
block|{
name|caughtException
operator|=
operator|(
name|MetaException
operator|)
name|t
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|t
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|matches
argument_list|(
literal|"(?s).*(IO|TTransport)Exception.*"
argument_list|)
operator|&&
operator|!
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|contains
argument_list|(
literal|"java.sql.SQLIntegrityConstraintViolationException"
argument_list|)
condition|)
block|{
name|caughtException
operator|=
name|e
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|retriesMade
operator|>=
name|retryLimit
operator|||
name|base
operator|.
name|isLocalMetaStore
argument_list|()
condition|)
block|{
throw|throw
name|caughtException
throw|;
block|}
name|retriesMade
operator|++
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"MetaStoreClient lost connection. Attempting to reconnect."
argument_list|,
name|caughtException
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|retryDelaySeconds
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|addMethodTime
parameter_list|(
name|Method
name|method
parameter_list|,
name|long
name|timeTaken
parameter_list|)
block|{
name|String
name|methodStr
init|=
name|getMethodString
argument_list|(
name|method
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|Long
name|curTime
init|=
name|metaCallTimeMap
operator|.
name|get
argument_list|(
name|methodStr
argument_list|)
decl_stmt|,
name|newTime
init|=
name|timeTaken
decl_stmt|;
if|if
condition|(
name|curTime
operator|!=
literal|null
operator|&&
name|metaCallTimeMap
operator|.
name|replace
argument_list|(
name|methodStr
argument_list|,
name|curTime
argument_list|,
name|newTime
operator|+
name|curTime
argument_list|)
condition|)
break|break;
if|if
condition|(
name|curTime
operator|==
literal|null
operator|&&
operator|(
literal|null
operator|==
name|metaCallTimeMap
operator|.
name|putIfAbsent
argument_list|(
name|methodStr
argument_list|,
name|newTime
argument_list|)
operator|)
condition|)
break|break;
block|}
block|}
comment|/**    * @param method    * @return String representation with arg types. eg getDatabase_(String, )    */
specifier|private
name|String
name|getMethodString
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
name|StringBuilder
name|methodSb
init|=
operator|new
name|StringBuilder
argument_list|(
name|method
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|methodSb
operator|.
name|append
argument_list|(
literal|"_("
argument_list|)
expr_stmt|;
for|for
control|(
name|Class
argument_list|<
name|?
argument_list|>
name|paramClass
range|:
name|method
operator|.
name|getParameterTypes
argument_list|()
control|)
block|{
name|methodSb
operator|.
name|append
argument_list|(
name|paramClass
operator|.
name|getSimpleName
argument_list|()
argument_list|)
expr_stmt|;
name|methodSb
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|methodSb
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
return|return
name|methodSb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|hasConnectionLifeTimeReached
parameter_list|(
name|Method
name|method
parameter_list|)
block|{
if|if
condition|(
name|connectionLifeTimeInMillis
operator|<=
literal|0
operator|||
name|localMetaStore
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|shouldReconnect
init|=
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|lastConnectionTime
operator|)
operator|>=
name|connectionLifeTimeInMillis
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Reconnection status for Method: "
operator|+
name|method
operator|.
name|getName
argument_list|()
operator|+
literal|" is "
operator|+
name|shouldReconnect
argument_list|)
expr_stmt|;
block|}
return|return
name|shouldReconnect
return|;
block|}
comment|/**    * Relogin if login user is logged in using keytab    * Relogin is actually done by ugi code only if sufficient time has passed    * A no-op if kerberos security is not enabled    * @throws MetaException    */
specifier|private
name|void
name|reloginExpiringKeytabUser
parameter_list|()
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
name|UserGroupInformation
operator|.
name|isSecurityEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
decl_stmt|;
comment|//checkTGT calls ugi.relogin only after checking if it is close to tgt expiry
comment|//hadoop relogin is actually done only every x minutes (x=10 in hadoop 1.x)
if|if
condition|(
name|ugi
operator|.
name|isFromKeytab
argument_list|()
condition|)
block|{
name|ugi
operator|.
name|checkTGTAndReloginFromKeytab
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error doing relogin using keytab "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

