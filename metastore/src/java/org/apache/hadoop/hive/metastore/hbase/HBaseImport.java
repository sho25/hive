begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|RawStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A tool to take the contents of an RDBMS based Hive metastore and import it into an HBase based  * one.  To use this the config files for Hive configured to work with the RDBMS (that is,  * including the JDBC string, etc.) and for HBase must be in the path.  This tool will then  * handle connecting to the RDBMS via the {@link org.apache.hadoop.hive.metastore.ObjectStore}  * and HBase via {@link org.apache.hadoop.hive.metastore.hbase.HBaseStore} and transferring the  * data.  */
end_comment

begin_class
specifier|public
class|class
name|HBaseImport
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseImport
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|HBaseImport
name|tool
init|=
operator|new
name|HBaseImport
argument_list|()
decl_stmt|;
try|try
block|{
name|tool
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Caught exception "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" with message<"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|">"
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Configuration
name|rdbmsConf
decl_stmt|;
specifier|private
name|Configuration
name|hbaseConf
decl_stmt|;
specifier|private
name|RawStore
name|rdbmsStore
decl_stmt|;
specifier|private
name|RawStore
name|hbaseStore
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Database
argument_list|>
name|dbs
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Table
argument_list|>
name|tables
decl_stmt|;
annotation|@
name|VisibleForTesting
name|HBaseImport
parameter_list|()
block|{
name|dbs
operator|=
operator|new
name|ArrayList
argument_list|<
name|Database
argument_list|>
argument_list|()
expr_stmt|;
name|tables
operator|=
operator|new
name|ArrayList
argument_list|<
name|Table
argument_list|>
argument_list|()
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|void
name|run
parameter_list|()
throws|throws
name|MetaException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|init
argument_list|()
expr_stmt|;
name|copyRoles
argument_list|()
expr_stmt|;
name|copyDbs
argument_list|()
expr_stmt|;
name|copyTables
argument_list|()
expr_stmt|;
name|copyPartitions
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|MetaException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
block|{
if|if
condition|(
name|rdbmsStore
operator|!=
literal|null
condition|)
block|{
comment|// We've been configured for testing, so don't do anything here.
return|return;
block|}
name|rdbmsConf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
comment|// We're depending on having everything properly in the path
name|hbaseConf
operator|=
operator|new
name|HiveConf
argument_list|()
expr_stmt|;
name|HiveConf
operator|.
name|setVar
argument_list|(
name|hbaseConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_RAW_STORE_IMPL
argument_list|,
name|HBaseStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HiveConf
operator|.
name|setBoolVar
argument_list|(
name|hbaseConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_FASTPATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// First get a connection to the RDBMS based store
name|rdbmsStore
operator|=
operator|new
name|ObjectStore
argument_list|()
expr_stmt|;
name|rdbmsStore
operator|.
name|setConf
argument_list|(
name|rdbmsConf
argument_list|)
expr_stmt|;
comment|// Get a connection to the HBase based store
name|hbaseStore
operator|=
operator|new
name|HBaseStore
argument_list|()
expr_stmt|;
name|hbaseStore
operator|.
name|setConf
argument_list|(
name|hbaseConf
argument_list|)
expr_stmt|;
comment|// This will go create the tables if they don't exist
name|hbaseStore
operator|.
name|verifySchema
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|copyRoles
parameter_list|()
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|screen
argument_list|(
literal|"Copying roles"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|roleName
range|:
name|rdbmsStore
operator|.
name|listRoleNames
argument_list|()
control|)
block|{
name|Role
name|role
init|=
name|rdbmsStore
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|screen
argument_list|(
literal|"Copying role "
operator|+
name|roleName
argument_list|)
expr_stmt|;
name|hbaseStore
operator|.
name|addRole
argument_list|(
name|roleName
argument_list|,
name|role
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyDbs
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|screen
argument_list|(
literal|"Copying databases"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|rdbmsStore
operator|.
name|getAllDatabases
argument_list|()
control|)
block|{
name|Database
name|db
init|=
name|rdbmsStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|dbs
operator|.
name|add
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|screen
argument_list|(
literal|"Copying database "
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|hbaseStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyTables
parameter_list|()
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|screen
argument_list|(
literal|"Copying tables"
argument_list|)
expr_stmt|;
for|for
control|(
name|Database
name|db
range|:
name|dbs
control|)
block|{
name|screen
argument_list|(
literal|"Coyping tables in database "
operator|+
name|db
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|rdbmsStore
operator|.
name|getAllTables
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
control|)
block|{
name|Table
name|table
init|=
name|rdbmsStore
operator|.
name|getTable
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|tables
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|screen
argument_list|(
literal|"Copying table "
operator|+
name|db
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|hbaseStore
operator|.
name|createTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|copyPartitions
parameter_list|()
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|screen
argument_list|(
literal|"Copying partitions"
argument_list|)
expr_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|tables
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Copying partitions for table "
operator|+
name|table
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|rdbmsStore
operator|.
name|getPartitions
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Copying "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|"."
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|"."
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|hbaseStore
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|screen
parameter_list|(
name|String
name|msg
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|HBaseImport
name|setConnections
parameter_list|(
name|RawStore
name|rdbms
parameter_list|,
name|RawStore
name|hbase
parameter_list|)
block|{
name|rdbmsStore
operator|=
name|rdbms
expr_stmt|;
name|hbaseStore
operator|=
name|hbase
expr_stmt|;
return|return
operator|new
name|HBaseImport
argument_list|()
return|;
block|}
block|}
end_class

end_unit

