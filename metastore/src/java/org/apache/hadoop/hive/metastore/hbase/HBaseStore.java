begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartFilterExprUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartitionExpressionProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|RawStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CurrentNotificationEventId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|RolePrincipalGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|HBaseFilterPlanUtil
operator|.
name|PlanResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|HBaseFilterPlanUtil
operator|.
name|ScanPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
operator|.
name|ExpressionTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * Implementation of RawStore that stores data in HBase  */
end_comment

begin_class
specifier|public
class|class
name|HBaseStore
implements|implements
name|RawStore
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|// Do not access this directly, call getHBase to make sure it is initialized.
specifier|private
name|HBaseReadWrite
name|hbase
init|=
literal|null
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|int
name|txnNestLevel
init|=
literal|0
decl_stmt|;
specifier|private
name|PartitionExpressionProxy
name|expressionProxy
init|=
literal|null
decl_stmt|;
specifier|public
name|HBaseStore
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|txnNestLevel
operator|!=
literal|0
condition|)
name|rollbackTransaction
argument_list|()
expr_stmt|;
name|getHBase
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|openTransaction
parameter_list|()
block|{
if|if
condition|(
name|txnNestLevel
operator|++
operator|<=
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Opening HBase transaction"
argument_list|)
expr_stmt|;
name|getHBase
argument_list|()
operator|.
name|begin
argument_list|()
expr_stmt|;
name|txnNestLevel
operator|=
literal|1
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commitTransaction
parameter_list|()
block|{
if|if
condition|(
operator|--
name|txnNestLevel
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Committing HBase transaction"
argument_list|)
expr_stmt|;
name|getHBase
argument_list|()
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackTransaction
parameter_list|()
block|{
name|txnNestLevel
operator|=
literal|0
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rolling back HBase transaction"
argument_list|)
expr_stmt|;
name|getHBase
argument_list|()
operator|.
name|rollback
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
comment|// HiveMetaStore already checks for existence of the database, don't recheck
name|getHBase
argument_list|()
operator|.
name|putDb
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create database "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Database
name|getDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Database
name|db
init|=
name|getHBase
argument_list|()
operator|.
name|getDb
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Unable to find db "
operator|+
name|name
argument_list|)
throw|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|db
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get db"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Error reading db "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropDatabase
parameter_list|(
name|String
name|dbname
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|deleteDb
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to delete db"
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop database "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|alterDatabase
parameter_list|(
name|String
name|dbname
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
comment|// ObjectStore fetches the old db before updating it, but I can't see the possible value of
comment|// that since the caller will have needed to call getDatabase to have the db object.
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|putDb
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to alter database "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Database
argument_list|>
name|dbs
init|=
name|getHBase
argument_list|()
operator|.
name|scanDatabases
argument_list|(
name|likeToRegex
argument_list|(
name|pattern
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|dbs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Database
name|db
range|:
name|dbs
control|)
name|dbNames
operator|.
name|add
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|dbNames
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get databases "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to get databases, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|getDatabases
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|createType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
comment|// HiveMetaStore above us checks if the table already exists, so we can blindly store it here.
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|putTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create table "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|deleteTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to delete db"
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop table "
operator|+
name|tableNameForErrorMsg
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|getHBase
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to find table "
operator|+
name|tableNameForErrorMsg
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|table
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get table"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Error reading table "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartition
parameter_list|(
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|putPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to add partition"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|putPartitions
argument_list|(
name|parts
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to add partitions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|PartitionSpecProxy
name|partitionSpec
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Partition
name|part
init|=
name|getHBase
argument_list|()
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Unable to find partition "
operator|+
name|partNameForErrorMsg
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
argument_list|)
throw|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|part
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get partition"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Error reading partition "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|doesPartitionExist
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|boolean
name|exists
init|=
name|getHBase
argument_list|()
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|exists
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get partition"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Error reading partition "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|deletePartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to delete db"
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop partition "
operator|+
name|partNameForErrorMsg
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|getHBase
argument_list|()
operator|.
name|scanPartitionsInTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|parts
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get partitions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Error scanning partitions"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|Table
name|newTable
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|replaceTable
argument_list|(
name|getHBase
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
if|if
condition|(
name|newTable
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
operator|&&
name|newTable
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
comment|// They renamed the table, so we need to change each partition as well, since it changes
comment|// the key.
try|try
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|oldParts
init|=
name|getPartitions
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|oldParts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|oldPart
range|:
name|oldParts
control|)
block|{
name|Partition
name|newPart
init|=
name|oldPart
operator|.
name|deepCopy
argument_list|()
decl_stmt|;
name|newPart
operator|.
name|setTableName
argument_list|(
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|newParts
operator|.
name|add
argument_list|(
name|newPart
argument_list|)
expr_stmt|;
block|}
name|getHBase
argument_list|()
operator|.
name|replacePartitions
argument_list|(
name|oldParts
argument_list|,
name|newParts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No partitions found for old table so not worrying about it"
argument_list|)
expr_stmt|;
block|}
block|}
name|commit
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to alter table "
operator|+
name|tableNameForErrorMsg
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to alter table "
operator|+
name|tableNameForErrorMsg
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
name|getHBase
argument_list|()
operator|.
name|scanTables
argument_list|(
name|dbName
argument_list|,
name|likeToRegex
argument_list|(
name|pattern
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|tables
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|tables
control|)
name|tableNames
operator|.
name|add
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|tableNames
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get tables "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to get tables, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|dbname
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
name|getHBase
argument_list|()
operator|.
name|getTables
argument_list|(
name|dbname
argument_list|,
name|tableNames
argument_list|)
decl_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|tables
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get tables "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to get tables, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|getTables
argument_list|(
name|dbName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_tables
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
block|{
comment|// TODO needs to wait until we support pushing filters into HBase.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|getHBase
argument_list|()
operator|.
name|scanPartitionsInTable
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|parts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
name|getHBase
argument_list|()
operator|.
name|getTable
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|p
range|:
name|parts
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|buildExternalPartName
argument_list|(
name|table
argument_list|,
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|names
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get partitions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Error scanning partitions"
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNamesByFilter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO needs to wait until we support pushing filters into HBase.
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Partition
name|oldPart
init|=
name|getHBase
argument_list|()
operator|.
name|getPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
name|getHBase
argument_list|()
operator|.
name|replacePartition
argument_list|(
name|oldPart
argument_list|,
name|new_part
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to add partition"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterPartitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|part_vals_list
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|new_parts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|oldParts
init|=
name|getHBase
argument_list|()
operator|.
name|getPartitions
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals_list
argument_list|)
decl_stmt|;
name|getHBase
argument_list|()
operator|.
name|replacePartitions
argument_list|(
name|oldParts
argument_list|,
name|new_parts
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to add partition"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addIndex
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Index
name|getIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|getIndexes
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO - Index not currently supported.  But I need to return an empty list or else drop
comment|// table cores.
return|return
operator|new
name|ArrayList
argument_list|<
name|Index
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listIndexNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterIndex
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|baseTblName
parameter_list|,
name|String
name|name
parameter_list|,
name|Index
name|newIndex
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
specifier|final
name|ExpressionTree
name|exprTree
init|=
operator|(
name|filter
operator|!=
literal|null
operator|&&
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|PartFilterExprUtil
operator|.
name|getFilterParser
argument_list|(
name|filter
argument_list|)
operator|.
name|tree
else|:
name|ExpressionTree
operator|.
name|EMPTY_TREE
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getPartitionsByExprInternal
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|exprTree
argument_list|,
name|maxParts
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getPartitionsByExpr
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|)
throws|throws
name|TException
block|{
specifier|final
name|ExpressionTree
name|exprTree
init|=
name|PartFilterExprUtil
operator|.
name|makeExpressionTree
argument_list|(
name|expressionProxy
argument_list|,
name|expr
argument_list|)
decl_stmt|;
comment|// TODO: investigate if there should be any role for defaultPartitionName in this
comment|// implementation. direct sql code path in ObjectStore does not use it.
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|getPartitionsByExprInternal
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|exprTree
argument_list|,
name|maxParts
argument_list|,
name|result
argument_list|)
return|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|getPartitionsByExprInternal
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|ExpressionTree
name|exprTree
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|Table
name|table
init|=
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Unable to find table "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
argument_list|)
throw|;
block|}
name|String
name|firstPartitionColumn
init|=
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// general hbase filter plan from expression tree
name|PlanResult
name|planRes
init|=
name|HBaseFilterPlanUtil
operator|.
name|getFilterPlan
argument_list|(
name|exprTree
argument_list|,
name|firstPartitionColumn
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Hbase Filter Plan generated : "
operator|+
name|planRes
operator|.
name|plan
argument_list|)
expr_stmt|;
block|}
comment|// results from scans need to be merged as there can be overlapping results between
comment|// the scans. Use a map of list of partition values to partition for this.
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|Partition
argument_list|>
name|mergedParts
init|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ScanPlan
name|splan
range|:
name|planRes
operator|.
name|plan
operator|.
name|getPlans
argument_list|()
control|)
block|{
try|try
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|getHBase
argument_list|()
operator|.
name|scanPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|splan
operator|.
name|getStartRowSuffix
argument_list|()
argument_list|,
name|splan
operator|.
name|getEndRowSuffix
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|reachedMax
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|mergedParts
operator|.
name|put
argument_list|(
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergedParts
operator|.
name|size
argument_list|()
operator|==
name|maxParts
condition|)
block|{
name|reachedMax
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|reachedMax
condition|)
block|{
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get partitions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Error scanning partitions"
operator|+
name|tableNameForErrorMsg
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
operator|+
literal|": "
operator|+
name|e
argument_list|)
throw|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|Partition
argument_list|>
name|mp
range|:
name|mergedParts
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|mp
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Matched partitions "
operator|+
name|result
argument_list|)
expr_stmt|;
block|}
comment|// return true if there might be some additional partitions that don't match filter conditions
comment|// being returned
return|return
operator|!
name|planRes
operator|.
name|hasUnsupportedCondition
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|parts
operator|.
name|add
argument_list|(
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|parts
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|markPartitionForEvent
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partVals
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|/*    * The design for roles.  Roles are a pain because of their hierarchical nature.  When a user    * comes in and we need to be able to determine all roles he is a part of, we do not want to    * have to walk the hierarchy in the database.  This means we need to flatten the role map for    * each user.  But we also have to track how the roles are connected for each user, in case one    * role is revoked from another (e.g. if role1 is included in role2 but then revoked    * from it and user1 was granted both role2 and role1 we cannot remove user1 from role1    * because he was granted that separately).    *    * We want to optimize for the read case and put the cost on grant and revoke of roles, since    * we assume that is the less common case.  So we lay out the roles data as follows:    *    * There is a ROLES table that records each role, plus what other principals have been granted    * into it, along with the info on grantor, etc.    *    * There is a USER_TO_ROLES table that contains the mapping of each user to every role he is a    * part of.    *    * This makes determining what roles a user participates in very quick, as USER_TO_ROLE is a    * simple list for each user.  It makes granting users into roles expensive, and granting roles    * into roles very expensive.  Each time a user is granted into a role, we need to walk the    * hierarchy in the role table (which means moving through that table multiple times) to    * determine every role the user participates in.  Each a role is granted into another role    * this hierarchical walk must be done for every principal in the role being granted into.  To    * mitigate this pain somewhat whenever doing these mappings we cache the entire ROLES table in    * memory since we assume it is not large.    *    * On a related note, whenever a role is dropped we must walk not only all these role tables    * above (equivalent to a role being revoked from another role, since we have to rebuilding    * mappings for any users in roles that contained that role and any users directly in that    * role), but we also have to remove all the privileges associated with that role directly.    * That means a walk of the DBS table and of the TBLS table.    */
annotation|@
name|Override
specifier|public
name|boolean
name|addRole
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|ownerName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|int
name|now
init|=
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|Role
name|role
init|=
operator|new
name|Role
argument_list|(
name|roleName
argument_list|,
name|now
argument_list|,
name|ownerName
argument_list|)
decl_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|getHBase
argument_list|()
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Role "
operator|+
name|roleName
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|getHBase
argument_list|()
operator|.
name|putRole
argument_list|(
name|role
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create role "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|usersInRole
init|=
name|getHBase
argument_list|()
operator|.
name|findAllUsersInRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|getHBase
argument_list|()
operator|.
name|deleteRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|getHBase
argument_list|()
operator|.
name|removeRoleGrants
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|user
range|:
name|usersInRole
control|)
block|{
name|getHBase
argument_list|()
operator|.
name|buildRoleMapForUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to delete role"
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop role "
operator|+
name|roleName
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grantRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|usersToRemap
init|=
name|findUsersToRemapRolesFor
argument_list|(
name|role
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|)
decl_stmt|;
name|HbaseMetastoreProto
operator|.
name|RoleGrantInfo
operator|.
name|Builder
name|builder
init|=
name|HbaseMetastoreProto
operator|.
name|RoleGrantInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|userName
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setPrincipalName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|principalType
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPrincipalType
argument_list|(
name|HBaseUtils
operator|.
name|convertPrincipalTypes
argument_list|(
name|principalType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setAddTime
argument_list|(
call|(
name|int
call|)
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|grantor
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setGrantor
argument_list|(
name|grantor
argument_list|)
expr_stmt|;
if|if
condition|(
name|grantorType
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setGrantorType
argument_list|(
name|HBaseUtils
operator|.
name|convertPrincipalTypes
argument_list|(
name|grantorType
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setGrantOption
argument_list|(
name|grantOption
argument_list|)
expr_stmt|;
name|getHBase
argument_list|()
operator|.
name|addPrincipalToRole
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|user
range|:
name|usersToRemap
control|)
block|{
name|getHBase
argument_list|()
operator|.
name|buildRoleMapForUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to grant role"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to grant role "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revokeRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
comment|// This can have a couple of different meanings.  If grantOption is true, then this is only
comment|// revoking the grant option, the role itself doesn't need to be removed.  If it is false
comment|// then we need to remove the userName from the role altogether.
try|try
block|{
if|if
condition|(
name|grantOption
condition|)
block|{
comment|// If this is a grant only change, we don't need to rebuild the user mappings.
name|getHBase
argument_list|()
operator|.
name|dropPrincipalFromRole
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|,
name|grantOption
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|usersToRemap
init|=
name|findUsersToRemapRolesFor
argument_list|(
name|role
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|)
decl_stmt|;
name|getHBase
argument_list|()
operator|.
name|dropPrincipalFromRole
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|,
name|grantOption
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|user
range|:
name|usersToRemap
control|)
block|{
name|getHBase
argument_list|()
operator|.
name|buildRoleMapForUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to revoke role "
operator|+
name|role
operator|.
name|getRoleName
argument_list|()
operator|+
literal|" from "
operator|+
name|userName
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to revoke role "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getUserPrivilegeSet
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|PrincipalPrivilegeSet
name|pps
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
name|PrincipalPrivilegeSet
name|global
init|=
name|getHBase
argument_list|()
operator|.
name|getGlobalPrivs
argument_list|()
decl_stmt|;
if|if
condition|(
name|global
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|pgi
decl_stmt|;
if|if
condition|(
name|global
operator|.
name|getUserPrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pgi
operator|=
name|global
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|pgi
operator|!=
literal|null
condition|)
block|{
name|pps
operator|.
name|putToUserPrivileges
argument_list|(
name|userName
argument_list|,
name|pgi
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|global
operator|.
name|getRolePrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
name|getHBase
argument_list|()
operator|.
name|getUserRoles
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|roles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|role
range|:
name|roles
control|)
block|{
name|pgi
operator|=
name|global
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|role
argument_list|)
expr_stmt|;
if|if
condition|(
name|pgi
operator|!=
literal|null
condition|)
block|{
name|pps
operator|.
name|putToRolePrivileges
argument_list|(
name|role
argument_list|,
name|pgi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|pps
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get db privileges for user"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to get db privileges for user, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getDBPrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|PrincipalPrivilegeSet
name|pps
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
name|Database
name|db
init|=
name|getHBase
argument_list|()
operator|.
name|getDb
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|getPrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|pgi
decl_stmt|;
comment|// Find the user privileges for this db
if|if
condition|(
name|db
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getUserPrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pgi
operator|=
name|db
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|pgi
operator|!=
literal|null
condition|)
block|{
name|pps
operator|.
name|putToUserPrivileges
argument_list|(
name|userName
argument_list|,
name|pgi
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|db
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getRolePrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
name|getHBase
argument_list|()
operator|.
name|getUserRoles
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|roles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|role
range|:
name|roles
control|)
block|{
name|pgi
operator|=
name|db
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|role
argument_list|)
expr_stmt|;
if|if
condition|(
name|pgi
operator|!=
literal|null
condition|)
block|{
name|pps
operator|.
name|putToRolePrivileges
argument_list|(
name|role
argument_list|,
name|pgi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|pps
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get db privileges for user"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to get db privileges for user, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getTablePrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|PrincipalPrivilegeSet
name|pps
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|getHBase
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|pgi
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|getPrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|table
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getUserPrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|pgi
operator|=
name|table
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|userName
argument_list|)
expr_stmt|;
if|if
condition|(
name|pgi
operator|!=
literal|null
condition|)
block|{
name|pps
operator|.
name|putToUserPrivileges
argument_list|(
name|userName
argument_list|,
name|pgi
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|table
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getRolePrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|roles
init|=
name|getHBase
argument_list|()
operator|.
name|getUserRoles
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|roles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|String
name|role
range|:
name|roles
control|)
block|{
name|pgi
operator|=
name|table
operator|.
name|getPrivileges
argument_list|()
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|get
argument_list|(
name|role
argument_list|)
expr_stmt|;
if|if
condition|(
name|pgi
operator|!=
literal|null
condition|)
block|{
name|pps
operator|.
name|putToRolePrivileges
argument_list|(
name|role
argument_list|,
name|pgi
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|pps
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get db privileges for user"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to get db privileges for user, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getPartitionPrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partition
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// We don't support partition privileges
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getColumnPrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// We don't support column level privileges
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalGlobalGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grants
decl_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|PrincipalPrivilegeSet
name|pps
init|=
name|getHBase
argument_list|()
operator|.
name|getGlobalPrivs
argument_list|()
decl_stmt|;
if|if
condition|(
name|pps
operator|==
literal|null
condition|)
return|return
name|privileges
return|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|map
decl_stmt|;
switch|switch
condition|(
name|principalType
condition|)
block|{
case|case
name|USER
case|:
name|map
operator|=
name|pps
operator|.
name|getUserPrivileges
argument_list|()
expr_stmt|;
break|break;
case|case
name|ROLE
case|:
name|map
operator|=
name|pps
operator|.
name|getRolePrivileges
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown or unsupported principal type "
operator|+
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|map
operator|==
literal|null
condition|)
return|return
name|privileges
return|;
name|grants
operator|=
name|map
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
if|if
condition|(
name|grants
operator|==
literal|null
operator|||
name|grants
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
name|privileges
return|;
for|for
control|(
name|PrivilegeGrantInfo
name|pgi
range|:
name|grants
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|principalName
argument_list|,
name|principalType
argument_list|,
name|pgi
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|privileges
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalDBGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grants
decl_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Database
name|db
init|=
name|getHBase
argument_list|()
operator|.
name|getDb
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
return|return
name|privileges
return|;
name|PrincipalPrivilegeSet
name|pps
init|=
name|db
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|pps
operator|==
literal|null
condition|)
return|return
name|privileges
return|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|map
decl_stmt|;
switch|switch
condition|(
name|principalType
condition|)
block|{
case|case
name|USER
case|:
name|map
operator|=
name|pps
operator|.
name|getUserPrivileges
argument_list|()
expr_stmt|;
break|break;
case|case
name|ROLE
case|:
name|map
operator|=
name|pps
operator|.
name|getRolePrivileges
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown or unsupported principal type "
operator|+
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|map
operator|==
literal|null
condition|)
return|return
name|privileges
return|;
name|grants
operator|=
name|map
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
if|if
condition|(
name|grants
operator|==
literal|null
operator|||
name|grants
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
name|privileges
return|;
for|for
control|(
name|PrivilegeGrantInfo
name|pgi
range|:
name|grants
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|principalName
argument_list|,
name|principalType
argument_list|,
name|pgi
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|privileges
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listAllTableGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grants
decl_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|getHBase
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
return|return
name|privileges
return|;
name|PrincipalPrivilegeSet
name|pps
init|=
name|table
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|pps
operator|==
literal|null
condition|)
return|return
name|privileges
return|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|map
decl_stmt|;
switch|switch
condition|(
name|principalType
condition|)
block|{
case|case
name|USER
case|:
name|map
operator|=
name|pps
operator|.
name|getUserPrivileges
argument_list|()
expr_stmt|;
break|break;
case|case
name|ROLE
case|:
name|map
operator|=
name|pps
operator|.
name|getRolePrivileges
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown or unsupported principal type "
operator|+
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|map
operator|==
literal|null
condition|)
return|return
name|privileges
return|;
name|grants
operator|=
name|map
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
if|if
condition|(
name|grants
operator|==
literal|null
operator|||
name|grants
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
name|privileges
return|;
for|for
control|(
name|PrivilegeGrantInfo
name|pgi
range|:
name|grants
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|principalName
argument_list|,
name|principalType
argument_list|,
name|pgi
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|privileges
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
comment|// We don't support partition grants
return|return
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
comment|// We don't support column grants
return|return
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
comment|// We don't support column grants
return|return
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grantPrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|HiveObjectPrivilege
name|priv
range|:
name|privileges
operator|.
name|getPrivileges
argument_list|()
control|)
block|{
comment|// Locate the right object to deal with
name|PrivilegeInfo
name|privilegeInfo
init|=
name|findPrivilegeToGrantOrRevoke
argument_list|(
name|priv
argument_list|)
decl_stmt|;
comment|// Now, let's see if we've already got this privilege
for|for
control|(
name|PrivilegeGrantInfo
name|info
range|:
name|privilegeInfo
operator|.
name|grants
control|)
block|{
if|if
condition|(
name|info
operator|.
name|getPrivilege
argument_list|()
operator|.
name|equals
argument_list|(
name|priv
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|priv
operator|.
name|getPrincipalName
argument_list|()
operator|+
literal|" already has "
operator|+
name|priv
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
operator|+
literal|" on "
operator|+
name|privilegeInfo
operator|.
name|typeErrMsg
argument_list|)
throw|;
block|}
block|}
name|privilegeInfo
operator|.
name|grants
operator|.
name|add
argument_list|(
name|priv
operator|.
name|getGrantInfo
argument_list|()
argument_list|)
expr_stmt|;
name|writeBackGrantOrRevoke
argument_list|(
name|priv
argument_list|,
name|privilegeInfo
argument_list|)
expr_stmt|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revokePrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|HiveObjectPrivilege
name|priv
range|:
name|privileges
operator|.
name|getPrivileges
argument_list|()
control|)
block|{
name|PrivilegeInfo
name|privilegeInfo
init|=
name|findPrivilegeToGrantOrRevoke
argument_list|(
name|priv
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|privilegeInfo
operator|.
name|grants
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|privilegeInfo
operator|.
name|grants
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getPrivilege
argument_list|()
operator|.
name|equals
argument_list|(
name|priv
operator|.
name|getGrantInfo
argument_list|()
operator|.
name|getPrivilege
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|grantOption
condition|)
name|privilegeInfo
operator|.
name|grants
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|setGrantOption
argument_list|(
literal|false
argument_list|)
expr_stmt|;
else|else
name|privilegeInfo
operator|.
name|grants
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|writeBackGrantOrRevoke
argument_list|(
name|priv
argument_list|,
name|privilegeInfo
argument_list|)
expr_stmt|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PrivilegeInfo
block|{
name|Database
name|db
decl_stmt|;
name|Table
name|table
decl_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grants
decl_stmt|;
name|String
name|typeErrMsg
decl_stmt|;
name|PrincipalPrivilegeSet
name|privSet
decl_stmt|;
block|}
specifier|private
name|PrivilegeInfo
name|findPrivilegeToGrantOrRevoke
parameter_list|(
name|HiveObjectPrivilege
name|privilege
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|PrivilegeInfo
name|result
init|=
operator|new
name|PrivilegeInfo
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|privilege
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
condition|)
block|{
case|case
name|GLOBAL
case|:
try|try
block|{
name|result
operator|.
name|privSet
operator|=
name|createOnNull
argument_list|(
name|getHBase
argument_list|()
operator|.
name|getGlobalPrivs
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to fetch global privileges"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to fetch global privileges, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|result
operator|.
name|typeErrMsg
operator|=
literal|"global"
expr_stmt|;
break|break;
case|case
name|DATABASE
case|:
name|result
operator|.
name|db
operator|=
name|getDatabase
argument_list|(
name|privilege
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|typeErrMsg
operator|=
literal|"database "
operator|+
name|result
operator|.
name|db
operator|.
name|getName
argument_list|()
expr_stmt|;
name|result
operator|.
name|privSet
operator|=
name|createOnNull
argument_list|(
name|result
operator|.
name|db
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE
case|:
name|result
operator|.
name|table
operator|=
name|getTable
argument_list|(
name|privilege
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|privilege
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectName
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|typeErrMsg
operator|=
literal|"table "
operator|+
name|result
operator|.
name|table
operator|.
name|getTableName
argument_list|()
expr_stmt|;
name|result
operator|.
name|privSet
operator|=
name|createOnNull
argument_list|(
name|result
operator|.
name|table
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|PARTITION
case|:
case|case
name|COLUMN
case|:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"HBase metastore does not support partition or column "
operator|+
literal|"permissions"
argument_list|)
throw|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Woah bad, unknown object type "
operator|+
name|privilege
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
argument_list|)
throw|;
block|}
comment|// Locate the right PrivilegeGrantInfo
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|grantInfos
decl_stmt|;
switch|switch
condition|(
name|privilege
operator|.
name|getPrincipalType
argument_list|()
condition|)
block|{
case|case
name|USER
case|:
name|grantInfos
operator|=
name|result
operator|.
name|privSet
operator|.
name|getUserPrivileges
argument_list|()
expr_stmt|;
name|result
operator|.
name|typeErrMsg
operator|=
literal|"user"
expr_stmt|;
break|break;
case|case
name|GROUP
case|:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"HBase metastore does not support group permissions"
argument_list|)
throw|;
case|case
name|ROLE
case|:
name|grantInfos
operator|=
name|result
operator|.
name|privSet
operator|.
name|getRolePrivileges
argument_list|()
expr_stmt|;
name|result
operator|.
name|typeErrMsg
operator|=
literal|"role"
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Woah bad, unknown principal type "
operator|+
name|privilege
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
throw|;
block|}
comment|// Find the requested name in the grantInfo
name|result
operator|.
name|grants
operator|=
name|grantInfos
operator|.
name|get
argument_list|(
name|privilege
operator|.
name|getPrincipalName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|.
name|grants
operator|==
literal|null
condition|)
block|{
comment|// Means we don't have any grants for this user yet.
name|result
operator|.
name|grants
operator|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|()
expr_stmt|;
name|grantInfos
operator|.
name|put
argument_list|(
name|privilege
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|result
operator|.
name|grants
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|PrincipalPrivilegeSet
name|createOnNull
parameter_list|(
name|PrincipalPrivilegeSet
name|pps
parameter_list|)
block|{
comment|// If this is the first time a user has been granted a privilege set will be null.
if|if
condition|(
name|pps
operator|==
literal|null
condition|)
block|{
name|pps
operator|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|==
literal|null
condition|)
block|{
name|pps
operator|.
name|setUserPrivileges
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|==
literal|null
condition|)
block|{
name|pps
operator|.
name|setRolePrivileges
argument_list|(
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|pps
return|;
block|}
specifier|private
name|void
name|writeBackGrantOrRevoke
parameter_list|(
name|HiveObjectPrivilege
name|priv
parameter_list|,
name|PrivilegeInfo
name|pi
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
comment|// Now write it back
switch|switch
condition|(
name|priv
operator|.
name|getHiveObject
argument_list|()
operator|.
name|getObjectType
argument_list|()
condition|)
block|{
case|case
name|GLOBAL
case|:
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|putGlobalPrivs
argument_list|(
name|pi
operator|.
name|privSet
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to write global privileges"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to write global privileges, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
break|break;
case|case
name|DATABASE
case|:
name|pi
operator|.
name|db
operator|.
name|setPrivileges
argument_list|(
name|pi
operator|.
name|privSet
argument_list|)
expr_stmt|;
name|alterDatabase
argument_list|(
name|pi
operator|.
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|pi
operator|.
name|db
argument_list|)
expr_stmt|;
break|break;
case|case
name|TABLE
case|:
name|pi
operator|.
name|table
operator|.
name|setPrivileges
argument_list|(
name|pi
operator|.
name|privSet
argument_list|)
expr_stmt|;
name|alterTable
argument_list|(
name|pi
operator|.
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|pi
operator|.
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|pi
operator|.
name|table
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Dude, you missed the second switch!"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Role
name|getRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Role
name|role
init|=
name|getHBase
argument_list|()
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Unable to find role "
operator|+
name|roleName
argument_list|)
throw|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|role
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get role"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Error reading table "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listRoleNames
parameter_list|()
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Role
argument_list|>
name|roles
init|=
name|getHBase
argument_list|()
operator|.
name|scanRoles
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|roleNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|roles
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Role
name|role
range|:
name|roles
control|)
name|roleNames
operator|.
name|add
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|roleNames
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Role
argument_list|>
name|listRoles
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|List
argument_list|<
name|Role
argument_list|>
name|roles
init|=
operator|new
name|ArrayList
argument_list|<
name|Role
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|roles
operator|.
name|addAll
argument_list|(
name|getHBase
argument_list|()
operator|.
name|getPrincipalDirectRoles
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|// Add the public role if this is a user
if|if
condition|(
name|principalType
operator|==
name|PrincipalType
operator|.
name|USER
condition|)
block|{
name|roles
operator|.
name|add
argument_list|(
operator|new
name|Role
argument_list|(
name|HiveMetaStore
operator|.
name|PUBLIC
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|roles
return|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|listRolesWithGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Role
argument_list|>
name|roles
init|=
name|listRoles
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|rpgs
init|=
operator|new
name|ArrayList
argument_list|<
name|RolePrincipalGrant
argument_list|>
argument_list|(
name|roles
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Role
name|role
range|:
name|roles
control|)
block|{
name|HbaseMetastoreProto
operator|.
name|RoleGrantInfoList
name|grants
init|=
name|getHBase
argument_list|()
operator|.
name|getRolePrincipals
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|grants
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|RoleGrantInfo
name|grant
range|:
name|grants
operator|.
name|getGrantInfoList
argument_list|()
control|)
block|{
if|if
condition|(
name|grant
operator|.
name|getPrincipalType
argument_list|()
operator|==
name|HBaseUtils
operator|.
name|convertPrincipalTypes
argument_list|(
name|principalType
argument_list|)
operator|&&
name|grant
operator|.
name|getPrincipalName
argument_list|()
operator|.
name|equals
argument_list|(
name|principalName
argument_list|)
condition|)
block|{
name|rpgs
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipalGrant
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|principalName
argument_list|,
name|principalType
argument_list|,
name|grant
operator|.
name|getGrantOption
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|grant
operator|.
name|getAddTime
argument_list|()
argument_list|,
name|grant
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|HBaseUtils
operator|.
name|convertPrincipalTypes
argument_list|(
name|grant
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|rpgs
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|listRoleMembers
parameter_list|(
name|String
name|roleName
parameter_list|)
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|HbaseMetastoreProto
operator|.
name|RoleGrantInfoList
name|gil
init|=
name|getHBase
argument_list|()
operator|.
name|getRolePrincipals
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|roleMaps
init|=
operator|new
name|ArrayList
argument_list|<
name|RolePrincipalGrant
argument_list|>
argument_list|(
name|gil
operator|.
name|getGrantInfoList
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|RoleGrantInfo
name|giw
range|:
name|gil
operator|.
name|getGrantInfoList
argument_list|()
control|)
block|{
name|roleMaps
operator|.
name|add
argument_list|(
operator|new
name|RolePrincipalGrant
argument_list|(
name|roleName
argument_list|,
name|giw
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|HBaseUtils
operator|.
name|convertPrincipalTypes
argument_list|(
name|giw
operator|.
name|getPrincipalType
argument_list|()
argument_list|)
argument_list|,
name|giw
operator|.
name|getGrantOption
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|giw
operator|.
name|getAddTime
argument_list|()
argument_list|,
name|giw
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|HBaseUtils
operator|.
name|convertPrincipalTypes
argument_list|(
name|giw
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|roleMaps
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartitionWithAuth
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|user_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
comment|// We don't do authorization checks for partitions.
return|return
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsWithAuth
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
comment|// We don't do authorization checks for partitions.
return|return
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNamesPs
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|listPartitionsPsWithAuth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|parts
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|partNames
operator|.
name|add
argument_list|(
name|buildExternalPartName
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|partNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsPsWithAuth
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
comment|// We don't handle auth info with partitions
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|getHBase
argument_list|()
operator|.
name|scanPartitions
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|)
decl_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|parts
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to list partition names"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Failed to list part names, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateTableColumnStatistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|updateStatistics
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|colStats
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to update column statistics"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Failed to update column statistics, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updatePartitionColumnStatistics
parameter_list|(
name|ColumnStatistics
name|statsObj
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|updateStatistics
argument_list|(
name|statsObj
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|,
name|statsObj
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|,
name|statsObj
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getPartName
argument_list|()
argument_list|,
name|partVals
argument_list|,
name|statsObj
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to update column statistics"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Failed to update column statistics, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ColumnStatistics
name|getTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|ColumnStatistics
name|cs
init|=
name|getHBase
argument_list|()
operator|.
name|getTableStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colName
argument_list|)
decl_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|cs
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to fetch column statistics"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Failed to fetch column statistics, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|partVals
operator|.
name|add
argument_list|(
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
name|partVals
operator|.
name|add
argument_list|(
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|cs
init|=
name|getHBase
argument_list|()
operator|.
name|getPartitionStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|partVals
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|cs
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to fetch column statistics"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Failed fetching column statistics, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deletePartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
comment|// NOP, stats will be deleted along with the partition when it is dropped.
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
comment|// NOP, stats will be deleted along with the table when it is dropped.
return|return
literal|true
return|;
block|}
comment|/**    * Return aggregated statistics for each column in the colNames list aggregated over partitions in    * the partNames list    *    */
annotation|@
name|Override
specifier|public
name|AggrStats
name|get_aggr_stats_for
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|partVals
operator|.
name|add
argument_list|(
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|AggrStats
name|stats
init|=
name|getHBase
argument_list|()
operator|.
name|getAggrStats
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|partVals
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|stats
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to fetch aggregate column statistics"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Failed fetching aggregate column statistics, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|cleanupEvents
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|,
name|String
name|delegationToken
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTokenIdentifiers
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|addMasterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMasterKey
parameter_list|(
name|Integer
name|seqNo
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeMasterKey
parameter_list|(
name|Integer
name|keySeq
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getMasterKeys
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verifySchema
parameter_list|()
throws|throws
name|MetaException
block|{    }
annotation|@
name|Override
specifier|public
name|String
name|getMetaStoreSchemaVersion
parameter_list|()
throws|throws
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMetaStoreSchemaVersion
parameter_list|(
name|String
name|version
parameter_list|,
name|String
name|comment
parameter_list|)
throws|throws
name|MetaException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|commit
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to drop partitions"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Failure dropping partitions, "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalDBGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Database
argument_list|>
name|dbs
init|=
name|getHBase
argument_list|()
operator|.
name|scanDatabases
argument_list|(
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Database
name|db
range|:
name|dbs
control|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grants
decl_stmt|;
name|PrincipalPrivilegeSet
name|pps
init|=
name|db
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|pps
operator|==
literal|null
condition|)
continue|continue;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|map
decl_stmt|;
switch|switch
condition|(
name|principalType
condition|)
block|{
case|case
name|USER
case|:
name|map
operator|=
name|pps
operator|.
name|getUserPrivileges
argument_list|()
expr_stmt|;
break|break;
case|case
name|ROLE
case|:
name|map
operator|=
name|pps
operator|.
name|getRolePrivileges
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown or unsupported principal type "
operator|+
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|map
operator|==
literal|null
condition|)
continue|continue;
name|grants
operator|=
name|map
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
if|if
condition|(
name|grants
operator|==
literal|null
operator|||
name|grants
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
for|for
control|(
name|PrivilegeGrantInfo
name|pgi
range|:
name|grants
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|db
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|principalName
argument_list|,
name|principalType
argument_list|,
name|pgi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|privileges
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
name|getHBase
argument_list|()
operator|.
name|scanTables
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|tables
control|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grants
decl_stmt|;
name|PrincipalPrivilegeSet
name|pps
init|=
name|table
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|pps
operator|==
literal|null
condition|)
continue|continue;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|map
decl_stmt|;
switch|switch
condition|(
name|principalType
condition|)
block|{
case|case
name|USER
case|:
name|map
operator|=
name|pps
operator|.
name|getUserPrivileges
argument_list|()
expr_stmt|;
break|break;
case|case
name|ROLE
case|:
name|map
operator|=
name|pps
operator|.
name|getRolePrivileges
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown or unsupported principal type "
operator|+
name|principalType
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|map
operator|==
literal|null
condition|)
continue|continue;
name|grants
operator|=
name|map
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
if|if
condition|(
name|grants
operator|==
literal|null
operator|||
name|grants
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
continue|continue;
for|for
control|(
name|PrivilegeGrantInfo
name|pgi
range|:
name|grants
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|principalName
argument_list|,
name|principalType
argument_list|,
name|pgi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|privileges
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableColumnGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listGlobalGrantsAll
parameter_list|()
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|PrincipalPrivilegeSet
name|pps
init|=
name|getHBase
argument_list|()
operator|.
name|getGlobalPrivs
argument_list|()
decl_stmt|;
if|if
condition|(
name|pps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|e
range|:
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|PrivilegeGrantInfo
name|pgi
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|pgi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|e
range|:
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|PrivilegeGrantInfo
name|pgi
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|pgi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|privileges
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listDBGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Database
name|db
init|=
name|getHBase
argument_list|()
operator|.
name|getDb
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|pps
init|=
name|db
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|pps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|e
range|:
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|PrivilegeGrantInfo
name|pgi
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|pgi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|e
range|:
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|PrivilegeGrantInfo
name|pgi
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|pgi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|privileges
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPartitionColumnGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privileges
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|getHBase
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|pps
init|=
name|table
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|pps
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|e
range|:
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|PrivilegeGrantInfo
name|pgi
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|pgi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|e
range|:
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|PrivilegeGrantInfo
name|pgi
range|:
name|e
operator|.
name|getValue
argument_list|()
control|)
block|{
name|privileges
operator|.
name|add
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
name|pgi
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|privileges
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPartitionGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableColumnGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createFunction
parameter_list|(
name|Function
name|func
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|putFunction
argument_list|(
name|func
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to create function"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|,
name|Function
name|newFunction
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|putFunction
argument_list|(
name|newFunction
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to alter function "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|getHBase
argument_list|()
operator|.
name|deleteFunction
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to delete function"
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Function
name|getFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|Function
name|func
init|=
name|getHBase
argument_list|()
operator|.
name|getFunction
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|)
decl_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|func
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get function"
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|commit
init|=
literal|false
decl_stmt|;
name|openTransaction
argument_list|()
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|Function
argument_list|>
name|funcs
init|=
name|getHBase
argument_list|()
operator|.
name|scanFunctions
argument_list|(
name|dbName
argument_list|,
name|likeToRegex
argument_list|(
name|pattern
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|funcNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|funcs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Function
name|func
range|:
name|funcs
control|)
name|funcNames
operator|.
name|add
argument_list|(
name|func
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|commit
operator|=
literal|true
expr_stmt|;
return|return
name|funcNames
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get functions"
operator|+
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to read from or write to hbase "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|commitOrRoleBack
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NotificationEventResponse
name|getNextNotification
parameter_list|(
name|NotificationEventRequest
name|rqst
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNotificationEvent
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanNotificationEvents
parameter_list|(
name|int
name|olderThan
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|CurrentNotificationEventId
name|getCurrentNotificationEventId
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flushCache
parameter_list|()
block|{
name|getHBase
argument_list|()
operator|.
name|flushCatalogCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
comment|// initialize expressionProxy. Also re-initialize it if
comment|// setConf is being called with new configuration object (though that
comment|// is not expected to happen, doing it just for safety)
if|if
condition|(
name|expressionProxy
operator|==
literal|null
operator|||
name|conf
operator|!=
name|configuration
condition|)
block|{
name|expressionProxy
operator|=
name|PartFilterExprUtil
operator|.
name|createExpressionProxy
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
block|}
name|conf
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
specifier|private
name|HBaseReadWrite
name|getHBase
parameter_list|()
block|{
if|if
condition|(
name|hbase
operator|==
literal|null
condition|)
name|hbase
operator|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|hbase
return|;
block|}
comment|// This is for building error messages only.  It does not look up anything in the metastore.
specifier|private
name|String
name|tableNameForErrorMsg
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
name|dbName
operator|+
literal|"."
operator|+
name|tableName
return|;
block|}
comment|// This is for building error messages only.  It does not look up anything in the metastore as
comment|// they may just throw another error.
specifier|private
name|String
name|partNameForErrorMsg
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
return|return
name|tableNameForErrorMsg
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|+
literal|"."
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|partVals
argument_list|,
literal|':'
argument_list|)
return|;
block|}
specifier|private
name|String
name|buildExternalPartName
parameter_list|(
name|Table
name|table
parameter_list|,
name|Partition
name|part
parameter_list|)
block|{
return|return
name|buildExternalPartName
argument_list|(
name|table
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|buildExternalPartName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|buildExternalPartName
argument_list|(
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
argument_list|,
name|partVals
argument_list|)
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|findUsersToRemapRolesFor
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|type
parameter_list|)
throws|throws
name|IOException
throws|,
name|NoSuchObjectException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|usersToRemap
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|USER
case|:
comment|// In this case it's just the user being added to the role that we need to remap for.
name|usersToRemap
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|usersToRemap
operator|.
name|add
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
break|break;
case|case
name|ROLE
case|:
comment|// In this case we need to remap for all users in the containing role (not the role being
comment|// granted into the containing role).
name|usersToRemap
operator|=
name|getHBase
argument_list|()
operator|.
name|findAllUsersInRole
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown principal type "
operator|+
name|type
argument_list|)
throw|;
block|}
return|return
name|usersToRemap
return|;
block|}
comment|/**    * Build a partition name for external use.  Necessary since HBase itself doesn't store    * partition names.    * @param table  table object    * @param partVals partition values.    * @return    */
specifier|static
name|String
name|buildExternalPartName
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partCols
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|pc
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
name|partCols
operator|.
name|add
argument_list|(
name|pc
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|partCols
argument_list|,
name|partVals
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|partNameToVals
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|kvp
init|=
name|name
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|kv
range|:
name|kvp
control|)
block|{
name|vals
operator|.
name|add
argument_list|(
name|kv
operator|.
name|substring
argument_list|(
name|kv
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|vals
return|;
block|}
specifier|private
name|String
name|likeToRegex
parameter_list|(
name|String
name|like
parameter_list|)
block|{
if|if
condition|(
name|like
operator|==
literal|null
condition|)
return|return
literal|null
return|;
comment|// Convert Hive's strange like syntax to Java regex.  Per
comment|// https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-Show
comment|// the supported syntax is that * means Java .* and | means 'or'
comment|// This implementation leaves other regular expression syntax alone, which means people can
comment|// use it, even though it wouldn't work on RDBMS backed metastores.
return|return
name|like
operator|.
name|replace
argument_list|(
literal|"*"
argument_list|,
literal|".*"
argument_list|)
return|;
block|}
specifier|private
name|void
name|commitOrRoleBack
parameter_list|(
name|boolean
name|commit
parameter_list|)
block|{
if|if
condition|(
name|commit
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Committing transaction"
argument_list|)
expr_stmt|;
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Rolling back transaction"
argument_list|)
expr_stmt|;
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

