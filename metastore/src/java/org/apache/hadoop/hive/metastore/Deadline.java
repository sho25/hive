begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_comment
comment|/**  * This class is used to monitor long running methods in a thread.  * It is recommended to use it as a ThreadLocal variable.  */
end_comment

begin_class
specifier|public
class|class
name|Deadline
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|Deadline
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * its value is init from conf, and could be reset from client.    */
specifier|private
name|long
name|timeout
decl_stmt|;
comment|/**    * it is reset before executing a method    */
specifier|private
name|long
name|startTime
init|=
operator|-
literal|1
decl_stmt|;
comment|/**    * The name of public methods in HMSHandler    */
specifier|private
name|String
name|method
decl_stmt|;
specifier|private
name|Deadline
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
comment|/**    * Deadline object per thread.    */
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Deadline
argument_list|>
name|DEADLINE_THREAD_LOCAL
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Deadline
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Deadline
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|static
name|void
name|setCurrentDeadline
parameter_list|(
name|Deadline
name|deadline
parameter_list|)
block|{
name|DEADLINE_THREAD_LOCAL
operator|.
name|set
argument_list|(
name|deadline
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Deadline
name|getCurrentDeadline
parameter_list|()
block|{
return|return
name|DEADLINE_THREAD_LOCAL
operator|.
name|get
argument_list|()
return|;
block|}
specifier|static
name|void
name|removeCurrentDeadline
parameter_list|()
block|{
name|DEADLINE_THREAD_LOCAL
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|/**    * register a Deadline threadlocal object to current thread.    * @param timeout    */
specifier|public
specifier|static
name|void
name|registerIfNot
parameter_list|(
name|long
name|timeout
parameter_list|)
block|{
if|if
condition|(
name|getCurrentDeadline
argument_list|()
operator|==
literal|null
condition|)
block|{
name|setCurrentDeadline
argument_list|(
operator|new
name|Deadline
argument_list|(
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * reset the timeout value of this timer.    * @param timeout    */
specifier|public
specifier|static
name|void
name|resetTimeout
parameter_list|(
name|long
name|timeout
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|timeout
operator|<=
literal|0
condition|)
block|{
throw|throw
name|newMetaException
argument_list|(
operator|new
name|DeadlineException
argument_list|(
literal|"The reset timeout value should be "
operator|+
literal|"larger than 0: "
operator|+
name|timeout
argument_list|)
argument_list|)
throw|;
block|}
name|Deadline
name|deadline
init|=
name|getCurrentDeadline
argument_list|()
decl_stmt|;
if|if
condition|(
name|deadline
operator|!=
literal|null
condition|)
block|{
name|deadline
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
operator|new
name|DeadlineException
argument_list|(
literal|"The threadlocal Deadline is null,"
operator|+
literal|" please register it firstly."
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * start the timer before a method is invoked.    * @param method    */
specifier|public
specifier|static
name|void
name|startTimer
parameter_list|(
name|String
name|method
parameter_list|)
throws|throws
name|MetaException
block|{
name|Deadline
name|deadline
init|=
name|getCurrentDeadline
argument_list|()
decl_stmt|;
if|if
condition|(
name|deadline
operator|!=
literal|null
condition|)
block|{
name|deadline
operator|.
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|deadline
operator|.
name|method
operator|=
name|method
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
operator|new
name|DeadlineException
argument_list|(
literal|"The threadlocal Deadline is null,"
operator|+
literal|" please register it firstly."
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * end the time after a method is done.    */
specifier|public
specifier|static
name|void
name|stopTimer
parameter_list|()
throws|throws
name|MetaException
block|{
name|Deadline
name|deadline
init|=
name|getCurrentDeadline
argument_list|()
decl_stmt|;
if|if
condition|(
name|deadline
operator|!=
literal|null
condition|)
block|{
name|deadline
operator|.
name|startTime
operator|=
operator|-
literal|1
expr_stmt|;
name|deadline
operator|.
name|method
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
operator|new
name|DeadlineException
argument_list|(
literal|"The threadlocal Deadline is null,"
operator|+
literal|" please register it firstly."
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|/**    * remove the registered Deadline threadlocal object from current thread.    */
specifier|public
specifier|static
name|void
name|clear
parameter_list|()
block|{
name|removeCurrentDeadline
argument_list|()
expr_stmt|;
block|}
comment|/**    * Check whether the long running method timeout.    * @throws DeadlineException when the method timeout    */
specifier|public
specifier|static
name|void
name|checkTimeout
parameter_list|()
throws|throws
name|MetaException
block|{
name|Deadline
name|deadline
init|=
name|getCurrentDeadline
argument_list|()
decl_stmt|;
if|if
condition|(
name|deadline
operator|!=
literal|null
condition|)
block|{
name|deadline
operator|.
name|check
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
operator|new
name|DeadlineException
argument_list|(
literal|"The threadlocal Deadline is null,"
operator|+
literal|" please register it first."
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|check
parameter_list|()
throws|throws
name|MetaException
block|{
try|try
block|{
if|if
condition|(
name|startTime
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|DeadlineException
argument_list|(
literal|"Should execute startTimer() method before "
operator|+
literal|"checkTimeout. Error happens in method: "
operator|+
name|method
argument_list|)
throw|;
block|}
if|if
condition|(
name|startTime
operator|+
name|timeout
operator|<
name|System
operator|.
name|currentTimeMillis
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DeadlineException
argument_list|(
literal|"Timeout when executing method: "
operator|+
name|method
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|DeadlineException
name|e
parameter_list|)
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * convert DeadlineException to MetaException    * @param e    * @return    */
specifier|private
specifier|static
name|MetaException
name|newMetaException
parameter_list|(
name|DeadlineException
name|e
parameter_list|)
block|{
name|MetaException
name|metaException
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|metaException
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|metaException
return|;
block|}
block|}
end_class

end_unit

