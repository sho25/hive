begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_comment
comment|// hadoop stuff
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_class
specifier|public
class|class
name|FileStore
implements|implements
name|RawStore
block|{
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetaStore
operator|.
name|LogKey
argument_list|)
decl_stmt|;
specifier|private
name|File
name|msRoot_
decl_stmt|;
specifier|private
name|Configuration
name|conf
decl_stmt|;
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|msRootPath
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREDIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|msRootPath
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"metastore.dir is empty in hadoop config"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"metastore.dir is empty in hadoop config"
argument_list|)
throw|;
block|}
try|try
block|{
name|msRoot_
operator|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|msRootPath
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msRootPath
operator|+
literal|" is not a valid URI"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|FileStore
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|String
name|msRootPath
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREDIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
name|msRootPath
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"metastore.dir is empty in hadoop config"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"metastore.dir is empty in hadoop config"
argument_list|)
throw|;
block|}
try|try
block|{
name|msRoot_
operator|=
operator|new
name|File
argument_list|(
operator|new
name|URI
argument_list|(
name|msRootPath
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|msRootPath
operator|+
literal|" is not a valid URI"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|File
name|getSchemaFile
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getSchemaDir
argument_list|(
name|db
argument_list|,
name|table
argument_list|)
argument_list|,
literal|"schema"
argument_list|)
return|;
block|}
specifier|private
name|File
name|getSchemaDir
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|table
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
name|getDBDir
argument_list|(
name|db
argument_list|)
argument_list|,
name|table
operator|+
literal|".dir"
argument_list|)
return|;
block|}
specifier|private
name|File
name|getDBDir
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
name|File
name|f
init|=
name|dbName
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
condition|?
name|msRoot_
else|:
operator|new
name|File
argument_list|(
name|msRoot_
argument_list|,
name|dbName
operator|+
literal|".db"
argument_list|)
decl_stmt|;
return|return
name|f
return|;
block|}
specifier|public
name|boolean
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// ignores the location param
name|boolean
name|mkdir
init|=
name|getDBDir
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|mkdir
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mkdir
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to create directory for database "
operator|+
name|db
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|mkdir
return|;
block|}
specifier|public
name|boolean
name|createDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|this
operator|.
name|createDatabase
argument_list|(
operator|new
name|Database
argument_list|(
name|name
argument_list|,
literal|"ignored param"
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
name|Properties
name|load
parameter_list|(
name|DB
name|parent
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
block|{
name|Properties
name|schema
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|File
name|schemaFile
init|=
name|getSchemaFile
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaFile
operator|.
name|exists
argument_list|()
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|()
throw|;
block|}
try|try
block|{
name|FileInputStream
name|fis
init|=
operator|new
name|FileInputStream
argument_list|(
name|schemaFile
argument_list|)
decl_stmt|;
name|schema
operator|.
name|load
argument_list|(
name|fis
argument_list|)
expr_stmt|;
name|fis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"got IOException trying to get table schema for : "
operator|+
name|tableName
operator|+
literal|" - "
operator|+
name|e
argument_list|)
throw|;
block|}
return|return
name|schema
return|;
block|}
specifier|protected
name|void
name|store
parameter_list|(
name|DB
name|parent
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Properties
name|schema
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|MetaException
block|{
name|File
name|schemaFile
init|=
name|getSchemaFile
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|overwrite
operator|==
literal|false
operator|&&
name|schemaFile
operator|.
name|exists
argument_list|()
operator|==
literal|true
condition|)
block|{
comment|// IGNORE FOR NOW            throw new MetaException("trying to overwrite table " + tableName + " already exists");
block|}
name|File
name|dir
init|=
name|getSchemaDir
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|mkdirs
argument_list|()
operator|&&
operator|!
name|overwrite
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"could not create: "
operator|+
name|dir
argument_list|)
throw|;
block|}
try|try
block|{
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|schemaFile
argument_list|)
decl_stmt|;
name|schema
operator|.
name|store
argument_list|(
name|fos
argument_list|,
literal|"meta data"
argument_list|)
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|rename
parameter_list|(
name|DB
name|parent
parameter_list|,
name|String
name|tableName
parameter_list|,
name|DB
name|newParent
parameter_list|,
name|String
name|newTableName
parameter_list|)
throws|throws
name|MetaException
block|{
name|File
name|currentF
init|=
name|getSchemaDir
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|File
name|newF
init|=
name|getSchemaDir
argument_list|(
name|newParent
operator|.
name|getName
argument_list|()
argument_list|,
name|newTableName
argument_list|)
decl_stmt|;
name|boolean
name|renameTo
init|=
name|currentF
operator|.
name|renameTo
argument_list|(
name|newF
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|renameTo
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Rename failed"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|drop
parameter_list|(
name|DB
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|IOException
block|{
name|MetaStoreUtils
operator|.
name|recursiveDelete
argument_list|(
name|getSchemaDir
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * getTablesByPattern    *    * Looks at metastore directories    *    * @param parent    * @param tablePattern    * @return the list of tables    * @exception MetaException    *    */
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getTablesByPattern
parameter_list|(
name|DB
name|parent
parameter_list|,
name|String
name|tablePattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|tablePattern
operator|==
literal|null
operator|||
name|tablePattern
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Empty table name"
argument_list|)
throw|;
block|}
name|tablePattern
operator|+=
literal|".dir$"
expr_stmt|;
name|Pattern
name|tpat
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|tablePattern
argument_list|)
decl_stmt|;
name|File
name|msPath
init|=
name|getDBDir
argument_list|(
name|parent
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|tpaths
index|[]
init|=
name|msPath
operator|.
name|list
argument_list|()
decl_stmt|;
if|if
condition|(
name|tpaths
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|fatal
argument_list|(
literal|"Internal fatal err - bad db dir: "
operator|+
name|msPath
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Internal fatal err - bad db dir: "
operator|+
name|msPath
argument_list|)
throw|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|tpaths
operator|!=
literal|null
operator|&&
name|i
operator|<
name|tpaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Matcher
name|m
init|=
name|tpat
operator|.
name|matcher
argument_list|(
name|tpaths
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|tpaths
index|[
name|i
index|]
decl_stmt|;
comment|// strip off .dir in new hiding place for meta data
name|name
operator|=
name|name
operator|.
name|replaceAll
argument_list|(
literal|".dir$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|this
operator|.
name|getTablesByPattern
argument_list|(
operator|new
name|DB
argument_list|(
name|dbName
argument_list|,
name|conf
argument_list|)
argument_list|,
name|pattern
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unknown database "
operator|+
name|dbName
argument_list|)
throw|;
block|}
block|}
comment|/**    * dbExists    *    * @return boolean whether the db exists    * @exception MetaException (for future use possibly)    * NOTE - there is no strict version of this now. Strict meaning no extraneous .table.field1.field11...    *    */
specifier|public
name|boolean
name|dbExists
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
block|{
name|File
name|f
init|=
name|getDBDir
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
return|return
name|dbName
operator|.
name|equals
argument_list|(
name|MetaStore
operator|.
name|DefaultDB
argument_list|)
operator|||
name|f
operator|.
name|isDirectory
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|dropDatabase
parameter_list|(
name|String
name|dbname
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// no-op
block|}
specifier|public
name|Database
name|getDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
try|try
block|{
name|DB
name|db
init|=
operator|new
name|DB
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
decl_stmt|;
return|return
operator|new
name|Database
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
name|db
operator|.
name|whRoot_
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * getDatabases    *    * @return the list of dbs. is never null.    * @exception MetaException    * Assuming 1 level here - bugbug    *    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|()
throws|throws
name|MetaException
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|dbPattern
init|=
literal|".+\\.db$"
decl_stmt|;
name|Pattern
name|tpat
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|dbPattern
argument_list|)
decl_stmt|;
name|String
name|tpaths
index|[]
init|=
name|msRoot_
operator|.
name|list
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tpaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Matcher
name|m
init|=
name|tpat
operator|.
name|matcher
argument_list|(
name|tpaths
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|name
init|=
name|tpaths
index|[
name|i
index|]
decl_stmt|;
comment|// strip off .db in new hiding place for meta data
name|name
operator|=
name|name
operator|.
name|replaceAll
argument_list|(
literal|".db$"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|names
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|names
operator|.
name|add
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
return|return
name|names
return|;
block|}
specifier|public
name|boolean
name|tableExists
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
name|getSchemaFile
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
operator|.
name|exists
argument_list|()
return|;
block|}
specifier|public
name|void
name|alterTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|Table
name|newTable
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|Properties
name|p
init|=
name|MetaStoreUtils
operator|.
name|getSchema
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
try|try
block|{
name|DB
name|db
init|=
operator|new
name|DB
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|RWTable
operator|.
name|create
argument_list|(
name|db
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|p
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|dropTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
operator|new
name|DB
argument_list|(
name|dbName
argument_list|,
name|conf
argument_list|)
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|false
argument_list|)
operator|.
name|drop
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
name|Properties
name|p
init|=
operator|new
name|DB
argument_list|(
name|dbName
argument_list|,
name|conf
argument_list|)
operator|.
name|getTable
argument_list|(
name|tableName
argument_list|,
literal|true
argument_list|)
operator|.
name|getSchema
argument_list|()
decl_stmt|;
return|return
name|MetaStoreUtils
operator|.
name|getTable
argument_list|(
name|conf
argument_list|,
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|createType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// no-op
block|}
specifier|public
name|boolean
name|dropType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
return|return
literal|true
return|;
comment|// no-op
block|}
specifier|public
name|boolean
name|addPartition
parameter_list|(
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
literal|true
return|;
comment|// no-op as there is no metadata
block|}
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
literal|true
return|;
comment|// no-op
block|}
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
specifier|public
name|Type
name|getType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
return|return
literal|null
return|;
comment|// no-op
block|}
specifier|public
name|boolean
name|openTransaction
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|rollbackTransaction
parameter_list|()
block|{
comment|// no-op
block|}
specifier|public
name|boolean
name|commitTransaction
parameter_list|()
block|{
return|return
literal|true
return|;
comment|// no-op
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
comment|// no-op
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

