begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_comment
comment|/**  * It handles cleanup of dropped partition/table/database in ACID related metastore tables  */
end_comment

begin_class
specifier|public
class|class
name|AcidEventListener
extends|extends
name|MetaStoreEventListener
block|{
specifier|private
name|TxnStore
name|txnHandler
decl_stmt|;
specifier|private
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|public
name|AcidEventListener
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
operator|(
name|HiveConf
operator|)
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropDatabase
parameter_list|(
name|DropDatabaseEvent
name|dbEvent
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// We can loop thru all the tables to check if they are ACID first and then perform cleanup,
comment|// but it's more efficient to unconditionally perform cleanup for the database, especially
comment|// when there are a lot of tables
name|txnHandler
operator|=
name|getTxnHandler
argument_list|()
expr_stmt|;
name|txnHandler
operator|.
name|cleanupRecords
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbEvent
operator|.
name|getDatabase
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropTable
parameter_list|(
name|DropTableEvent
name|tableEvent
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|TxnUtils
operator|.
name|isAcidTable
argument_list|(
name|tableEvent
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
name|txnHandler
operator|=
name|getTxnHandler
argument_list|()
expr_stmt|;
name|txnHandler
operator|.
name|cleanupRecords
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
literal|null
argument_list|,
name|tableEvent
operator|.
name|getTable
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|onDropPartition
parameter_list|(
name|DropPartitionEvent
name|partitionEvent
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|TxnUtils
operator|.
name|isAcidTable
argument_list|(
name|partitionEvent
operator|.
name|getTable
argument_list|()
argument_list|)
condition|)
block|{
name|txnHandler
operator|=
name|getTxnHandler
argument_list|()
expr_stmt|;
name|txnHandler
operator|.
name|cleanupRecords
argument_list|(
name|HiveObjectType
operator|.
name|PARTITION
argument_list|,
literal|null
argument_list|,
name|partitionEvent
operator|.
name|getTable
argument_list|()
argument_list|,
name|partitionEvent
operator|.
name|getPartitionIterator
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|TxnStore
name|getTxnHandler
parameter_list|()
block|{
name|boolean
name|hackOn
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
operator|||
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_IN_TEZ_TEST
argument_list|)
decl_stmt|;
name|String
name|origTxnMgr
init|=
literal|null
decl_stmt|;
name|boolean
name|origConcurrency
init|=
literal|false
decl_stmt|;
comment|// Since TxnUtils.getTxnStore calls TxnHandler.setConf -> checkQFileTestHack -> TxnDbUtil.setConfValues,
comment|// which may change the values of below two entries, we need to avoid pulluting the original values
if|if
condition|(
name|hackOn
condition|)
block|{
name|origTxnMgr
operator|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|)
expr_stmt|;
name|origConcurrency
operator|=
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|)
expr_stmt|;
block|}
name|txnHandler
operator|=
name|TxnUtils
operator|.
name|getTxnStore
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
comment|// Set them back
if|if
condition|(
name|hackOn
condition|)
block|{
name|hiveConf
operator|.
name|setVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_TXN_MANAGER
argument_list|,
name|origTxnMgr
argument_list|)
expr_stmt|;
name|hiveConf
operator|.
name|setBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_SUPPORT_CONCURRENCY
argument_list|,
name|origConcurrency
argument_list|)
expr_stmt|;
block|}
return|return
name|txnHandler
return|;
block|}
block|}
end_class

end_unit

