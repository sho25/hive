begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|ANTLRStringStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|antlr
operator|.
name|runtime
operator|.
name|CharStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_comment
comment|/**  * The Class representing the filter as a  binary tree. The tree has TreeNode's  * at intermediate level and the leaf level nodes are of type LeafNode.  */
end_comment

begin_class
specifier|public
class|class
name|ExpressionTree
block|{
comment|/** The logical operations supported. */
specifier|public
enum|enum
name|LogicalOperator
block|{
name|AND
block|,
name|OR
block|}
comment|/** The operators supported. */
specifier|public
enum|enum
name|Operator
block|{
name|EQUALS
argument_list|(
literal|"="
argument_list|,
literal|"=="
argument_list|)
block|,
name|GREATERTHAN
argument_list|(
literal|">"
argument_list|)
block|,
name|LESSTHAN
argument_list|(
literal|"<"
argument_list|)
block|,
name|LESSTHANOREQUALTO
argument_list|(
literal|"<="
argument_list|)
block|,
name|GREATERTHANOREQUALTO
argument_list|(
literal|">="
argument_list|)
block|,
name|LIKE
argument_list|(
literal|"LIKE"
argument_list|,
literal|"matches"
argument_list|)
block|,
name|NOTEQUALS
argument_list|(
literal|"<>"
argument_list|,
literal|"!="
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|op
decl_stmt|;
specifier|private
specifier|final
name|String
name|jdoOp
decl_stmt|;
comment|// private constructor
specifier|private
name|Operator
parameter_list|(
name|String
name|op
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|jdoOp
operator|=
name|op
expr_stmt|;
block|}
specifier|private
name|Operator
parameter_list|(
name|String
name|op
parameter_list|,
name|String
name|jdoOp
parameter_list|)
block|{
name|this
operator|.
name|op
operator|=
name|op
expr_stmt|;
name|this
operator|.
name|jdoOp
operator|=
name|jdoOp
expr_stmt|;
block|}
specifier|public
name|String
name|getOp
parameter_list|()
block|{
return|return
name|op
return|;
block|}
specifier|public
name|String
name|getJdoOp
parameter_list|()
block|{
return|return
name|jdoOp
return|;
block|}
specifier|public
specifier|static
name|Operator
name|fromString
parameter_list|(
name|String
name|inputOperator
parameter_list|)
block|{
for|for
control|(
name|Operator
name|op
range|:
name|Operator
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|op
operator|.
name|getOp
argument_list|()
operator|.
name|equals
argument_list|(
name|inputOperator
argument_list|)
condition|)
block|{
return|return
name|op
return|;
block|}
block|}
throw|throw
operator|new
name|Error
argument_list|(
literal|"Invalid value "
operator|+
name|inputOperator
operator|+
literal|" for "
operator|+
name|Operator
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * The Class representing a Node in the ExpressionTree.    */
specifier|public
specifier|static
class|class
name|TreeNode
block|{
specifier|private
name|TreeNode
name|lhs
decl_stmt|;
specifier|private
name|LogicalOperator
name|andOr
decl_stmt|;
specifier|private
name|TreeNode
name|rhs
decl_stmt|;
specifier|public
name|TreeNode
parameter_list|()
block|{     }
specifier|public
name|TreeNode
parameter_list|(
name|TreeNode
name|lhs
parameter_list|,
name|LogicalOperator
name|andOr
parameter_list|,
name|TreeNode
name|rhs
parameter_list|)
block|{
name|this
operator|.
name|lhs
operator|=
name|lhs
expr_stmt|;
name|this
operator|.
name|andOr
operator|=
name|andOr
expr_stmt|;
name|this
operator|.
name|rhs
operator|=
name|rhs
expr_stmt|;
block|}
comment|/**      * Generates a JDO filter statement      * @param table      *        The table on which the filter is applied.  If table is not null,      *        then this method generates a JDO statement to get all partitions      *        of the table that match the filter.      *        If table is null, then this method generates a JDO statement to get all      *        tables that match the filter.      * @param params      *        A map of parameter key to values for the filter statement.      * @return a JDO filter statement      * @throws MetaException      */
specifier|public
name|String
name|generateJDOFilter
parameter_list|(
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|MetaException
block|{
name|StringBuilder
name|filterBuffer
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|lhs
operator|!=
literal|null
condition|)
block|{
name|filterBuffer
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
name|filterBuffer
operator|.
name|append
argument_list|(
name|lhs
operator|.
name|generateJDOFilter
argument_list|(
name|table
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rhs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|andOr
operator|==
name|LogicalOperator
operator|.
name|AND
condition|)
block|{
name|filterBuffer
operator|.
name|append
argument_list|(
literal|"&& "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filterBuffer
operator|.
name|append
argument_list|(
literal|" || "
argument_list|)
expr_stmt|;
block|}
name|filterBuffer
operator|.
name|append
argument_list|(
name|rhs
operator|.
name|generateJDOFilter
argument_list|(
name|table
argument_list|,
name|params
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|filterBuffer
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
block|}
return|return
name|filterBuffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/**    * The Class representing the leaf level nodes in the ExpressionTree.    */
specifier|public
specifier|static
class|class
name|LeafNode
extends|extends
name|TreeNode
block|{
specifier|public
name|String
name|keyName
decl_stmt|;
specifier|public
name|Operator
name|operator
decl_stmt|;
specifier|public
name|Object
name|value
decl_stmt|;
specifier|public
name|boolean
name|isReverseOrder
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PARAM_PREFIX
init|=
literal|"hive_filter_param_"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|generateJDOFilter
parameter_list|(
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
return|return
name|generateJDOFilterOverPartitions
argument_list|(
name|table
argument_list|,
name|params
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|generateJDOFilterOverTables
argument_list|(
name|params
argument_list|)
return|;
block|}
block|}
specifier|private
name|String
name|generateJDOFilterOverTables
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|keyName
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|HIVE_FILTER_FIELD_OWNER
argument_list|)
condition|)
block|{
name|keyName
operator|=
literal|"this.owner"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyName
operator|.
name|equals
argument_list|(
name|Constants
operator|.
name|HIVE_FILTER_FIELD_LAST_ACCESS
argument_list|)
condition|)
block|{
comment|//lastAccessTime expects an integer, so we cannot use the "like operator"
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|LIKE
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Like is not supported for HIVE_FILTER_FIELD_LAST_ACCESS"
argument_list|)
throw|;
block|}
name|keyName
operator|=
literal|"this.lastAccessTime"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyName
operator|.
name|startsWith
argument_list|(
name|Constants
operator|.
name|HIVE_FILTER_FIELD_PARAMS
argument_list|)
condition|)
block|{
comment|//can only support "=" and "<>" for now, because our JDO lib is buggy when
comment|// using objects from map.get()
if|if
condition|(
operator|!
operator|(
name|operator
operator|==
name|Operator
operator|.
name|EQUALS
operator|||
name|operator
operator|==
name|Operator
operator|.
name|NOTEQUALS
operator|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Only = and<> are supported "
operator|+
literal|"opreators for HIVE_FILTER_FIELD_PARAMS"
argument_list|)
throw|;
block|}
name|String
name|paramKeyName
init|=
name|keyName
operator|.
name|substring
argument_list|(
name|Constants
operator|.
name|HIVE_FILTER_FIELD_PARAMS
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|keyName
operator|=
literal|"this.parameters.get(\""
operator|+
name|paramKeyName
operator|+
literal|"\")"
expr_stmt|;
comment|//value is persisted as a string in the db, so make sure it's a string here
comment|// in case we get an integer.
name|value
operator|=
name|value
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Invalid key name in filter.  "
operator|+
literal|"Use constants from org.apache.hadoop.hive.metastore.api"
argument_list|)
throw|;
block|}
return|return
name|generateJDOFilterGeneral
argument_list|(
name|params
argument_list|)
return|;
block|}
comment|/**      * Generates a general filter.  Given a map of<key, value>,      * generates a statement of the form:      * key1 operator value2 (&& | || ) key2 operator value2 ...      *      * Currently supported types for value are String and Integer.      * The LIKE operator for Integers is unsupported.      */
specifier|private
name|String
name|generateJDOFilterGeneral
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|paramName
init|=
name|PARAM_PREFIX
operator|+
name|params
operator|.
name|size
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|paramName
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|String
name|filter
decl_stmt|;
if|if
condition|(
name|isReverseOrder
condition|)
block|{
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|LIKE
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Value should be on the RHS for LIKE operator : "
operator|+
literal|"Key<"
operator|+
name|keyName
operator|+
literal|">"
argument_list|)
throw|;
block|}
else|else
block|{
name|filter
operator|=
name|paramName
operator|+
literal|" "
operator|+
name|operator
operator|.
name|getJdoOp
argument_list|()
operator|+
literal|" "
operator|+
name|keyName
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|LIKE
condition|)
block|{
name|filter
operator|=
literal|" "
operator|+
name|keyName
operator|+
literal|"."
operator|+
name|operator
operator|.
name|getJdoOp
argument_list|()
operator|+
literal|"("
operator|+
name|paramName
operator|+
literal|") "
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
literal|" "
operator|+
name|keyName
operator|+
literal|" "
operator|+
name|operator
operator|.
name|getJdoOp
argument_list|()
operator|+
literal|" "
operator|+
name|paramName
expr_stmt|;
block|}
block|}
return|return
name|filter
return|;
block|}
specifier|private
name|String
name|generateJDOFilterOverPartitions
parameter_list|(
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|MetaException
block|{
name|int
name|partitionColumnCount
init|=
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|partitionColumnIndex
decl_stmt|;
for|for
control|(
name|partitionColumnIndex
operator|=
literal|0
init|;
name|partitionColumnIndex
operator|<
name|partitionColumnCount
condition|;
name|partitionColumnIndex
operator|++
control|)
block|{
if|if
condition|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
name|partitionColumnIndex
argument_list|)
operator|.
name|getName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|keyName
argument_list|)
condition|)
block|{
break|break;
block|}
block|}
assert|assert
operator|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
assert|;
if|if
condition|(
name|partitionColumnIndex
operator|==
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Specified key<"
operator|+
name|keyName
operator|+
literal|"> is not a partitioning key for the table"
argument_list|)
throw|;
block|}
comment|//Can only support partitions whose types are string
if|if
condition|(
operator|!
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|get
argument_list|(
name|partitionColumnIndex
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|Constants
operator|.
name|STRING_TYPE_NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Filtering is supported only on partition keys of type string"
argument_list|)
throw|;
block|}
name|String
name|valueParam
init|=
literal|null
decl_stmt|;
try|try
block|{
name|valueParam
operator|=
operator|(
name|String
operator|)
name|value
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Filtering is supported only on partition keys of type string"
argument_list|)
throw|;
block|}
name|String
name|paramName
init|=
name|PARAM_PREFIX
operator|+
name|params
operator|.
name|size
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|paramName
argument_list|,
name|valueParam
argument_list|)
expr_stmt|;
name|String
name|filter
decl_stmt|;
name|String
name|keyEqual
init|=
name|FileUtils
operator|.
name|escapePathName
argument_list|(
name|keyName
argument_list|)
operator|+
literal|"="
decl_stmt|;
name|int
name|keyEqualLength
init|=
name|keyEqual
operator|.
name|length
argument_list|()
decl_stmt|;
name|String
name|valString
decl_stmt|;
comment|// partitionname ==>  (key=value/)*(key=value)
if|if
condition|(
name|partitionColumnIndex
operator|==
operator|(
name|partitionColumnCount
operator|-
literal|1
operator|)
condition|)
block|{
name|valString
operator|=
literal|"partitionName.substring(partitionName.indexOf(\""
operator|+
name|keyEqual
operator|+
literal|"\")+"
operator|+
name|keyEqualLength
operator|+
literal|")"
expr_stmt|;
block|}
else|else
block|{
name|valString
operator|=
literal|"partitionName.substring(partitionName.indexOf(\""
operator|+
name|keyEqual
operator|+
literal|"\")+"
operator|+
name|keyEqualLength
operator|+
literal|").substring(0, partitionName.substring(partitionName.indexOf(\""
operator|+
name|keyEqual
operator|+
literal|"\")+"
operator|+
name|keyEqualLength
operator|+
literal|").indexOf(\"/\"))"
expr_stmt|;
block|}
comment|//Handle "a> 10" and "10> a" appropriately
if|if
condition|(
name|isReverseOrder
condition|)
block|{
comment|//For LIKE, the value should be on the RHS
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|LIKE
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Value should be on the RHS for LIKE operator : "
operator|+
literal|"Key<"
operator|+
name|keyName
operator|+
literal|">"
argument_list|)
throw|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|EQUALS
condition|)
block|{
name|filter
operator|=
name|makeFilterForEquals
argument_list|(
name|keyName
argument_list|,
name|valueParam
argument_list|,
name|paramName
argument_list|,
name|params
argument_list|,
name|partitionColumnIndex
argument_list|,
name|partitionColumnCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
name|paramName
operator|+
literal|" "
operator|+
name|operator
operator|.
name|getJdoOp
argument_list|()
operator|+
literal|" "
operator|+
name|valString
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|LIKE
condition|)
block|{
comment|//generate this.values.get(i).matches("abc%")
name|filter
operator|=
literal|" "
operator|+
name|valString
operator|+
literal|"."
operator|+
name|operator
operator|.
name|getJdoOp
argument_list|()
operator|+
literal|"("
operator|+
name|paramName
operator|+
literal|") "
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|operator
operator|==
name|Operator
operator|.
name|EQUALS
condition|)
block|{
name|filter
operator|=
name|makeFilterForEquals
argument_list|(
name|keyName
argument_list|,
name|valueParam
argument_list|,
name|paramName
argument_list|,
name|params
argument_list|,
name|partitionColumnIndex
argument_list|,
name|partitionColumnCount
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
literal|" "
operator|+
name|valString
operator|+
literal|" "
operator|+
name|operator
operator|.
name|getJdoOp
argument_list|()
operator|+
literal|" "
operator|+
name|paramName
expr_stmt|;
block|}
block|}
return|return
name|filter
return|;
block|}
block|}
comment|/**    * For equals, we can make the JDO query much faster by filtering based on the    * partition name. For a condition like ds="2010-10-01", we can see if there    * are any partitions with a name that contains the substring "ds=2010-10-01/"    * False matches aren't possible since "=" is escaped for partition names    * and the trailing '/' ensures that we won't get a match with ds=2010-10-011    *    * Two cases to keep in mind: Case with only one partition column (no '/'s)    * Case where the partition key column is at the end of the name. (no    * tailing '/')    *    * @param keyName name of the partition col e.g. ds    * @param value    * @param paramName name of the parameter to use for JDOQL    * @param params a map from the parameter name to their values    * @return    * @throws MetaException    */
specifier|private
specifier|static
name|String
name|makeFilterForEquals
parameter_list|(
name|String
name|keyName
parameter_list|,
name|String
name|value
parameter_list|,
name|String
name|paramName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|,
name|int
name|keyPos
parameter_list|,
name|int
name|keyCount
parameter_list|)
throws|throws
name|MetaException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKeyToVal
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|partKeyToVal
operator|.
name|put
argument_list|(
name|keyName
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// If a partition has multiple partition keys, we make the assumption that
comment|// makePartName with one key will return a substring of the name made
comment|// with both all the keys.
name|String
name|escapedNameFragment
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|partKeyToVal
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|StringBuilder
name|fltr
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|keyCount
operator|==
literal|1
condition|)
block|{
comment|// Case where this is no other partition columns
name|params
operator|.
name|put
argument_list|(
name|paramName
argument_list|,
name|escapedNameFragment
argument_list|)
expr_stmt|;
name|fltr
operator|.
name|append
argument_list|(
literal|"partitionName == "
argument_list|)
operator|.
name|append
argument_list|(
name|paramName
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyPos
operator|+
literal|1
operator|==
name|keyCount
condition|)
block|{
comment|// Case where the partition column is at the end of the name. There will
comment|// be a leading '/' but no trailing '/'
name|params
operator|.
name|put
argument_list|(
name|paramName
argument_list|,
literal|"/"
operator|+
name|escapedNameFragment
argument_list|)
expr_stmt|;
name|fltr
operator|.
name|append
argument_list|(
literal|"partitionName.endsWith("
argument_list|)
operator|.
name|append
argument_list|(
name|paramName
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|keyPos
operator|==
literal|0
condition|)
block|{
comment|// Case where the parttion column is at the beginning of the name. There will
comment|// be a trailing '/' but no leading '/'
name|params
operator|.
name|put
argument_list|(
name|paramName
argument_list|,
name|escapedNameFragment
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|fltr
operator|.
name|append
argument_list|(
literal|"partitionName.startsWith("
argument_list|)
operator|.
name|append
argument_list|(
name|paramName
argument_list|)
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Case where the partition column is in the middle of the name. There will
comment|// be a leading '/' and an trailing '/'
name|params
operator|.
name|put
argument_list|(
name|paramName
argument_list|,
literal|"/"
operator|+
name|escapedNameFragment
operator|+
literal|"/"
argument_list|)
expr_stmt|;
name|fltr
operator|.
name|append
argument_list|(
literal|"partitionName.indexOf("
argument_list|)
operator|.
name|append
argument_list|(
name|paramName
argument_list|)
operator|.
name|append
argument_list|(
literal|")>= 0"
argument_list|)
expr_stmt|;
block|}
return|return
name|fltr
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**    * The root node for the tree.    */
specifier|private
name|TreeNode
name|root
init|=
literal|null
decl_stmt|;
comment|/**    * The node stack used to keep track of the tree nodes during parsing.    */
specifier|private
specifier|final
name|Stack
argument_list|<
name|TreeNode
argument_list|>
name|nodeStack
init|=
operator|new
name|Stack
argument_list|<
name|TreeNode
argument_list|>
argument_list|()
decl_stmt|;
comment|/**    * Adds a intermediate node of either type(AND/OR). Pops last two nodes from    * the stack and sets them as children of the new node and pushes itself    * onto the stack.    * @param andOr the operator type    */
specifier|public
name|void
name|addIntermediateNode
parameter_list|(
name|LogicalOperator
name|andOr
parameter_list|)
block|{
name|TreeNode
name|rhs
init|=
name|nodeStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|TreeNode
name|lhs
init|=
name|nodeStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|TreeNode
name|newNode
init|=
operator|new
name|TreeNode
argument_list|(
name|lhs
argument_list|,
name|andOr
argument_list|,
name|rhs
argument_list|)
decl_stmt|;
name|nodeStack
operator|.
name|push
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
name|root
operator|=
name|newNode
expr_stmt|;
block|}
comment|/**    * Adds a leaf node, pushes the new node onto the stack.    * @param newNode the new node    */
specifier|public
name|void
name|addLeafNode
parameter_list|(
name|LeafNode
name|newNode
parameter_list|)
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|root
operator|=
name|newNode
expr_stmt|;
block|}
name|nodeStack
operator|.
name|push
argument_list|(
name|newNode
argument_list|)
expr_stmt|;
block|}
comment|/** Generate the JDOQL filter for the given expression tree    * @param table the table being queried    * @param params the input map which is updated with the    *     the parameterized values. Keys are the parameter names and values    *     are the parameter values    * @return the string representation of the expression tree    * @throws MetaException    */
specifier|public
name|String
name|generateJDOFilter
parameter_list|(
name|Table
name|table
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|params
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|root
operator|.
name|generateJDOFilter
argument_list|(
name|table
argument_list|,
name|params
argument_list|)
return|;
block|}
comment|/** Case insensitive ANTLR string stream */
specifier|public
specifier|static
class|class
name|ANTLRNoCaseStringStream
extends|extends
name|ANTLRStringStream
block|{
specifier|public
name|ANTLRNoCaseStringStream
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|super
argument_list|(
name|input
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|LA
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|int
name|returnChar
init|=
name|super
operator|.
name|LA
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnChar
operator|==
name|CharStream
operator|.
name|EOF
condition|)
block|{
return|return
name|returnChar
return|;
block|}
elseif|else
if|if
condition|(
name|returnChar
operator|==
literal|0
condition|)
block|{
return|return
name|returnChar
return|;
block|}
return|return
name|Character
operator|.
name|toUpperCase
argument_list|(
operator|(
name|char
operator|)
name|returnChar
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

