begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|HiveMetaStore
operator|.
name|HMSHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Base class for all the events which are defined for metastore.  *  * This class is not thread-safe and not expected to be called in parallel.  */
end_comment

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Public
annotation|@
name|InterfaceStability
operator|.
name|Stable
annotation|@
name|NotThreadSafe
specifier|public
specifier|abstract
class|class
name|ListenerEvent
block|{
comment|/**    * status of the event, whether event was successful or not.    */
specifier|private
specifier|final
name|boolean
name|status
decl_stmt|;
specifier|private
specifier|final
name|HMSHandler
name|handler
decl_stmt|;
comment|/**    * Key/value parameters used by listeners to store notifications results    * i.e. DbNotificationListener sets a DB_NOTIFICATION_EVENT_ID.    *    * NotThreadSafe: The parameters map is not expected to be access in parallel by Hive, so keep it thread-unsafe    * to avoid locking overhead.    */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
comment|/** For performance concerns, it is preferable to cache the unmodifiable parameters variable that will be returned on the    * {@link #getParameters()} method. It is expected that {@link #putParameter(String, String)} is called less times    * than {@link #getParameters()}, so performance may be better by using this cache.    */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|unmodifiableParameters
decl_stmt|;
comment|// Listener parameters aren't expected to have many values. So far only
comment|// DbNotificationListener will add a parameter; let's set a low initial capacity for now.
comment|// If we find out many parameters are added, then we can adjust or remove this initial capacity.
specifier|private
specifier|static
specifier|final
name|int
name|PARAMETERS_INITIAL_CAPACITY
init|=
literal|1
decl_stmt|;
comment|// Properties passed by the client, to be used in execution hooks.
specifier|private
name|EnvironmentContext
name|environmentContext
init|=
literal|null
decl_stmt|;
specifier|public
name|ListenerEvent
parameter_list|(
name|boolean
name|status
parameter_list|,
name|HMSHandler
name|handler
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|status
expr_stmt|;
name|this
operator|.
name|handler
operator|=
name|handler
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|PARAMETERS_INITIAL_CAPACITY
argument_list|)
expr_stmt|;
name|updateUnmodifiableParameters
argument_list|()
expr_stmt|;
block|}
comment|/**    * @return the status of event.    */
specifier|public
name|boolean
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
comment|/**    * Set the environment context of the event.    *    * @param environmentContext An EnvironmentContext object that contains environment parameters sent from    *                           the HMS client.    */
specifier|public
name|void
name|setEnvironmentContext
parameter_list|(
name|EnvironmentContext
name|environmentContext
parameter_list|)
block|{
name|this
operator|.
name|environmentContext
operator|=
name|environmentContext
expr_stmt|;
block|}
comment|/**    * @return environment properties of the event    */
specifier|public
name|EnvironmentContext
name|getEnvironmentContext
parameter_list|()
block|{
return|return
name|environmentContext
return|;
block|}
comment|/**    * @return the handler    */
specifier|public
name|HMSHandler
name|getHandler
parameter_list|()
block|{
return|return
name|handler
return|;
block|}
comment|/**    * Return all parameters of the listener event. Parameters are read-only (unmodifiable map). If a new parameter    * must be added, please use the putParameter() method.    *    *    * @return A map object with all parameters.    */
specifier|public
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|unmodifiableParameters
return|;
block|}
comment|/**    * Put a new parameter to the listener event.    *    * Overridden parameters is not allowed, and an exception may be thrown to avoid a mis-configuration    * between listeners setting the same parameters.    *    * @param name Name of the parameter.    * @param value Value of the parameter.    * @throws IllegalStateException if a parameter already exists.    */
specifier|public
name|void
name|putParameter
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|putParameterIfAbsent
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|updateUnmodifiableParameters
argument_list|()
expr_stmt|;
block|}
comment|/**    * Put a new set the parameters to the listener event.    *    * Overridden parameters is not allowed, and an exception may be thrown to avoid a mis-configuration    * between listeners setting the same parameters.    *    * @param parameters A Map object with the a set of parameters.    * @throws IllegalStateException if a parameter already exists.    */
specifier|public
name|void
name|putParameters
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|putParameterIfAbsent
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateUnmodifiableParameters
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * Put a parameter to the listener event only if the parameter is absent.    *    * Overridden parameters is not allowed, and an exception may be thrown to avoid a mis-configuration    * between listeners setting the same parameters.    *    * @param name Name of the parameter.    * @param value Value of the parameter.    * @throws IllegalStateException if a parameter already exists.    */
specifier|private
name|void
name|putParameterIfAbsent
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|parameters
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Invalid attempt to overwrite a read-only parameter: "
operator|+
name|name
argument_list|)
throw|;
block|}
name|parameters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/**    * Keeps a cache of unmodifiable parameters returned by the getParameters() method.    */
specifier|private
name|void
name|updateUnmodifiableParameters
parameter_list|()
block|{
name|unmodifiableParameters
operator|=
name|Collections
operator|.
name|unmodifiableMap
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

