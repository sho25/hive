begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_class
specifier|public
class|class
name|ProtectMode
block|{
specifier|public
specifier|static
name|String
name|PARAMETER_NAME
init|=
literal|"PROTECT_MODE"
decl_stmt|;
specifier|public
specifier|static
name|String
name|FLAG_OFFLINE
init|=
literal|"OFFLINE"
decl_stmt|;
specifier|public
specifier|static
name|String
name|FLAG_NO_DROP
init|=
literal|"NO_DROP"
decl_stmt|;
specifier|public
specifier|static
name|String
name|FLAG_READ_ONLY
init|=
literal|"READ_ONLY"
decl_stmt|;
specifier|public
name|boolean
name|offline
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|readOnly
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|noDrop
init|=
literal|false
decl_stmt|;
specifier|static
specifier|public
name|ProtectMode
name|getProtectModeFromString
parameter_list|(
name|String
name|sourceString
parameter_list|)
block|{
return|return
operator|new
name|ProtectMode
argument_list|(
name|sourceString
argument_list|)
return|;
block|}
specifier|private
name|ProtectMode
parameter_list|(
name|String
name|sourceString
parameter_list|)
block|{
name|String
index|[]
name|tokens
init|=
name|sourceString
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|token
range|:
name|tokens
control|)
block|{
if|if
condition|(
name|token
operator|.
name|equalsIgnoreCase
argument_list|(
name|FLAG_OFFLINE
argument_list|)
condition|)
block|{
name|offline
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|equalsIgnoreCase
argument_list|(
name|FLAG_NO_DROP
argument_list|)
condition|)
block|{
name|noDrop
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|token
operator|.
name|equalsIgnoreCase
argument_list|(
name|FLAG_READ_ONLY
argument_list|)
condition|)
block|{
name|readOnly
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ProtectMode
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|retString
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|offline
condition|)
block|{
name|retString
operator|=
name|FLAG_OFFLINE
expr_stmt|;
block|}
if|if
condition|(
name|noDrop
condition|)
block|{
if|if
condition|(
name|retString
operator|!=
literal|null
condition|)
block|{
name|retString
operator|=
name|retString
operator|+
literal|","
operator|+
name|FLAG_NO_DROP
expr_stmt|;
block|}
else|else
block|{
name|retString
operator|=
name|FLAG_NO_DROP
expr_stmt|;
block|}
block|}
if|if
condition|(
name|readOnly
condition|)
block|{
if|if
condition|(
name|retString
operator|!=
literal|null
condition|)
block|{
name|retString
operator|=
name|retString
operator|+
literal|","
operator|+
name|FLAG_READ_ONLY
expr_stmt|;
block|}
else|else
block|{
name|retString
operator|=
name|FLAG_READ_ONLY
expr_stmt|;
block|}
block|}
return|return
name|retString
return|;
block|}
block|}
end_class

end_unit

