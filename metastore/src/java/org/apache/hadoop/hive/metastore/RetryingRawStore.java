begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|UndeclaredThrowableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JavaUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hooks
operator|.
name|JDOConnectionURLHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_class
annotation|@
name|InterfaceAudience
operator|.
name|Private
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
class|class
name|RetryingRawStore
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|RetryingRawStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|RawStore
name|base
decl_stmt|;
specifier|private
name|int
name|retryInterval
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|retryLimit
init|=
literal|0
decl_stmt|;
specifier|private
name|JDOConnectionURLHook
name|urlHook
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|urlHookClassName
init|=
literal|""
decl_stmt|;
specifier|private
specifier|final
name|int
name|id
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|hiveConf
decl_stmt|;
specifier|private
specifier|final
name|Configuration
name|conf
decl_stmt|;
comment|// thread local conf from HMS
specifier|protected
name|RetryingRawStore
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|Class
argument_list|<
name|?
extends|extends
name|RawStore
argument_list|>
name|rawStoreClass
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|MetaException
block|{
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|this
operator|.
name|hiveConf
operator|=
name|hiveConf
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
comment|// This has to be called before initializing the instance of RawStore
name|init
argument_list|()
expr_stmt|;
name|this
operator|.
name|base
operator|=
operator|(
name|RawStore
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|rawStoreClass
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|RawStore
name|getProxy
parameter_list|(
name|HiveConf
name|hiveConf
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|String
name|rawStoreClassName
parameter_list|,
name|int
name|id
parameter_list|)
throws|throws
name|MetaException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|RawStore
argument_list|>
name|baseClass
init|=
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|RawStore
argument_list|>
operator|)
name|MetaStoreUtils
operator|.
name|getClass
argument_list|(
name|rawStoreClassName
argument_list|)
decl_stmt|;
name|RetryingRawStore
name|handler
init|=
operator|new
name|RetryingRawStore
argument_list|(
name|hiveConf
argument_list|,
name|conf
argument_list|,
name|baseClass
argument_list|,
name|id
argument_list|)
decl_stmt|;
return|return
operator|(
name|RawStore
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|RetryingRawStore
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
name|baseClass
operator|.
name|getInterfaces
argument_list|()
argument_list|,
name|handler
argument_list|)
return|;
block|}
specifier|private
name|void
name|init
parameter_list|()
throws|throws
name|MetaException
block|{
name|retryInterval
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREINTERVAL
argument_list|)
expr_stmt|;
name|retryLimit
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREATTEMPTS
argument_list|)
expr_stmt|;
comment|// Using the hook on startup ensures that the hook always has priority
comment|// over settings in *.xml.  The thread local conf needs to be used because at this point
comment|// it has already been initialized using hiveConf.
name|updateConnectionURL
argument_list|(
name|getConf
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initMS
parameter_list|()
block|{
name|base
operator|.
name|setConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|Object
name|ret
init|=
literal|null
decl_stmt|;
name|boolean
name|gotNewConnectUrl
init|=
literal|false
decl_stmt|;
name|boolean
name|reloadConf
init|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREFORCERELOADCONF
argument_list|)
decl_stmt|;
if|if
condition|(
name|reloadConf
condition|)
block|{
name|updateConnectionURL
argument_list|(
name|getConf
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|int
name|retryCount
init|=
literal|0
decl_stmt|;
name|Exception
name|caughtException
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
if|if
condition|(
name|reloadConf
operator|||
name|gotNewConnectUrl
condition|)
block|{
name|initMS
argument_list|()
expr_stmt|;
block|}
name|ret
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|base
argument_list|,
name|args
argument_list|)
expr_stmt|;
break|break;
block|}
catch|catch
parameter_list|(
name|javax
operator|.
name|jdo
operator|.
name|JDOException
name|e
parameter_list|)
block|{
name|caughtException
operator|=
name|e
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UndeclaredThrowableException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
if|if
condition|(
name|retryCount
operator|>=
name|retryLimit
condition|)
block|{
throw|throw
name|caughtException
throw|;
block|}
assert|assert
operator|(
name|retryInterval
operator|>=
literal|0
operator|)
assert|;
name|retryCount
operator|++
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"JDO datastore error. Retrying metastore command "
operator|+
literal|"after %d ms (attempt %d of %d)"
argument_list|,
name|retryInterval
argument_list|,
name|retryCount
argument_list|,
name|retryLimit
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|retryInterval
argument_list|)
expr_stmt|;
comment|// If we have a connection error, the JDO connection URL hook might
comment|// provide us with a new URL to access the datastore.
name|String
name|lastUrl
init|=
name|getConnectionURL
argument_list|(
name|getConf
argument_list|()
argument_list|)
decl_stmt|;
name|gotNewConnectUrl
operator|=
name|updateConnectionURL
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|lastUrl
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * Updates the connection URL in hiveConf using the hook    *    * @return true if a new connection URL was loaded into the thread local    *         configuration    */
specifier|private
name|boolean
name|updateConnectionURL
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|String
name|badUrl
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|connectUrl
init|=
literal|null
decl_stmt|;
name|String
name|currentUrl
init|=
name|getConnectionURL
argument_list|(
name|conf
argument_list|)
decl_stmt|;
try|try
block|{
comment|// We always call init because the hook name in the configuration could
comment|// have changed.
name|initConnectionUrlHook
argument_list|()
expr_stmt|;
if|if
condition|(
name|urlHook
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|badUrl
operator|!=
literal|null
condition|)
block|{
name|urlHook
operator|.
name|notifyBadConnectionUrl
argument_list|(
name|badUrl
argument_list|)
expr_stmt|;
block|}
name|connectUrl
operator|=
name|urlHook
operator|.
name|getJdoConnectionUrl
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while getting connection URL from the hook: "
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|connectUrl
operator|!=
literal|null
operator|&&
operator|!
name|connectUrl
operator|.
name|equals
argument_list|(
name|currentUrl
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|addPrefix
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Overriding %s with %s"
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORECONNECTURLKEY
operator|.
name|toString
argument_list|()
argument_list|,
name|connectUrl
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|conf
operator|.
name|set
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORECONNECTURLKEY
operator|.
name|toString
argument_list|()
argument_list|,
name|connectUrl
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|String
name|getConnectionURL
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
return|return
name|conf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORECONNECTURLKEY
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|// Multiple threads could try to initialize at the same time.
specifier|synchronized
specifier|private
name|void
name|initConnectionUrlHook
parameter_list|()
throws|throws
name|ClassNotFoundException
block|{
name|String
name|className
init|=
name|hiveConf
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORECONNECTURLHOOK
operator|.
name|toString
argument_list|()
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|urlHookClassName
operator|=
literal|""
expr_stmt|;
name|urlHook
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|boolean
name|urlHookChanged
init|=
operator|!
name|urlHookClassName
operator|.
name|equals
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlHook
operator|==
literal|null
operator|||
name|urlHookChanged
condition|)
block|{
name|urlHookClassName
operator|=
name|className
operator|.
name|trim
argument_list|()
expr_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|urlHookClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|urlHookClassName
argument_list|,
literal|true
argument_list|,
name|JavaUtils
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
name|urlHook
operator|=
operator|(
name|JDOConnectionURLHook
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|urlHookClass
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|private
name|String
name|addPrefix
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|id
operator|+
literal|": "
operator|+
name|s
return|;
block|}
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|conf
return|;
block|}
block|}
end_class

end_unit

