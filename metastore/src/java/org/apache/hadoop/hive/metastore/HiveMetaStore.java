begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|fb_status
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableListMultimap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Multimaps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|JvmPauseMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
operator|.
name|LogInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|cli
operator|.
name|CommonCliOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsConstant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|common
operator|.
name|MetricsFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddIndexEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterIndexEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|ConfigChangeEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropIndexEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|EventCleanerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|InsertEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|LoadPartitionDoneEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreAddIndexEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreAddPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreAlterIndexEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreAlterPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreAlterTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreAuthorizationCallEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreCreateDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreCreateTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreDropDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreDropIndexEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreDropPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreDropTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreEventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreLoadPartitionDoneEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreReadDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreReadTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|HadoopThriftAuthBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|HadoopThriftAuthBridge
operator|.
name|Server
operator|.
name|ServerMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|TUGIContainingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|ServerContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServerEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TThreadPoolServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TFramedTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jdo
operator|.
name|JDOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|SimpleDateFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Condition
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_COMMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|validateName
import|;
end_import

begin_comment
comment|/**  * TODO:pc remove application logic to a separate interface.  */
end_comment

begin_class
specifier|public
class|class
name|HiveMetaStore
extends|extends
name|ThriftHiveMetastore
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveMetaStore
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// boolean that tells if the HiveMetaStore (remote) server is being used.
comment|// Can be used to determine if the calls to metastore api (HMSHandler) are being made with
comment|// embedded metastore or a remote one
specifier|private
specifier|static
name|boolean
name|isMetaStoreRemote
init|=
literal|false
decl_stmt|;
comment|// Used for testing to simulate method timeout.
annotation|@
name|VisibleForTesting
specifier|static
name|boolean
name|TEST_TIMEOUT_ENABLED
init|=
literal|false
decl_stmt|;
annotation|@
name|VisibleForTesting
specifier|static
name|long
name|TEST_TIMEOUT_VALUE
init|=
operator|-
literal|1
decl_stmt|;
comment|/** A fixed date format to be used for hive partition column values. */
specifier|public
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|DateFormat
argument_list|>
name|PARTITION_DATE_FORMAT
init|=
operator|new
name|ThreadLocal
argument_list|<
name|DateFormat
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|DateFormat
name|initialValue
parameter_list|()
block|{
name|DateFormat
name|val
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"yyyy-MM-dd"
argument_list|)
decl_stmt|;
name|val
operator|.
name|setLenient
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// Without this, 2020-20-20 becomes 2021-08-20.
return|return
name|val
return|;
block|}
empty_stmt|;
block|}
decl_stmt|;
comment|/**    * default port on which to start the Hive server    */
specifier|public
specifier|static
specifier|final
name|String
name|ADMIN
init|=
literal|"admin"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PUBLIC
init|=
literal|"public"
decl_stmt|;
specifier|private
specifier|static
name|HadoopThriftAuthBridge
operator|.
name|Server
name|saslServer
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|useSasl
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|ChainedTTransportFactory
extends|extends
name|TTransportFactory
block|{
specifier|private
specifier|final
name|TTransportFactory
name|parentTransFactory
decl_stmt|;
specifier|private
specifier|final
name|TTransportFactory
name|childTransFactory
decl_stmt|;
specifier|private
name|ChainedTTransportFactory
parameter_list|(
name|TTransportFactory
name|parentTransFactory
parameter_list|,
name|TTransportFactory
name|childTransFactory
parameter_list|)
block|{
name|this
operator|.
name|parentTransFactory
operator|=
name|parentTransFactory
expr_stmt|;
name|this
operator|.
name|childTransFactory
operator|=
name|childTransFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TTransport
name|getTransport
parameter_list|(
name|TTransport
name|trans
parameter_list|)
block|{
return|return
name|childTransFactory
operator|.
name|getTransport
argument_list|(
name|parentTransFactory
operator|.
name|getTransport
argument_list|(
name|trans
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|HMSHandler
extends|extends
name|FacebookBase
implements|implements
name|IHMSHandler
block|{
specifier|public
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|HiveMetaStore
operator|.
name|LOG
decl_stmt|;
specifier|private
name|String
name|rawStoreClassName
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|hiveConf
decl_stmt|;
comment|// stores datastore (jpox) properties,
comment|// right now they come from jpox.properties
specifier|private
specifier|static
name|String
name|currentUrl
decl_stmt|;
specifier|private
name|Warehouse
name|wh
decl_stmt|;
comment|// hdfs warehouse
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|RawStore
argument_list|>
name|threadLocalMS
init|=
operator|new
name|ThreadLocal
argument_list|<
name|RawStore
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|RawStore
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|TxnHandler
argument_list|>
name|threadLocalTxn
init|=
operator|new
name|ThreadLocal
argument_list|<
name|TxnHandler
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|TxnHandler
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|RawStore
name|getRawStore
parameter_list|()
block|{
return|return
name|threadLocalMS
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|removeRawStore
parameter_list|()
block|{
name|threadLocalMS
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
comment|// Thread local configuration is needed as many threads could make changes
comment|// to the conf using the connection hook
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Configuration
argument_list|>
name|threadLocalConf
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Configuration
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Configuration
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUDIT_FORMAT
init|=
literal|"ugi=%s\t"
operator|+
comment|// ugi
literal|"ip=%s\t"
operator|+
comment|// remote IP
literal|"cmd=%s\t"
decl_stmt|;
comment|// command
specifier|public
specifier|static
specifier|final
name|Logger
name|auditLog
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|HiveMetaStore
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".audit"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Formatter
argument_list|>
name|auditFormatter
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Formatter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Formatter
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|Formatter
argument_list|(
operator|new
name|StringBuilder
argument_list|(
name|AUDIT_FORMAT
operator|.
name|length
argument_list|()
operator|*
literal|4
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|void
name|logAuditEvent
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|UserGroupInformation
name|ugi
decl_stmt|;
try|try
block|{
name|ugi
operator|=
name|Utils
operator|.
name|getUGI
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
specifier|final
name|Formatter
name|fmt
init|=
name|auditFormatter
operator|.
name|get
argument_list|()
decl_stmt|;
operator|(
operator|(
name|StringBuilder
operator|)
name|fmt
operator|.
name|out
argument_list|()
operator|)
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|address
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|useSasl
condition|)
block|{
if|if
condition|(
name|saslServer
operator|!=
literal|null
operator|&&
name|saslServer
operator|.
name|getRemoteAddress
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|address
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|saslServer
operator|.
name|getRemoteAddress
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|address
operator|=
name|getIpAddress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
name|address
operator|=
literal|"unknown-ip-addr"
expr_stmt|;
block|}
name|auditLog
operator|.
name|info
argument_list|(
name|fmt
operator|.
name|format
argument_list|(
name|AUDIT_FORMAT
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|address
argument_list|,
name|cmd
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|int
name|nextSerialNum
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|threadLocalId
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Integer
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|Integer
argument_list|(
name|nextSerialNum
operator|++
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// This will only be set if the metastore is being accessed from a metastore Thrift server,
comment|// not if it is from the CLI. Also, only if the TTransport being used to connect is an
comment|// instance of TSocket.
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|String
argument_list|>
name|threadLocalIpAddress
init|=
operator|new
name|ThreadLocal
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|String
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|void
name|setIpAddress
parameter_list|(
name|String
name|ipAddress
parameter_list|)
block|{
name|threadLocalIpAddress
operator|.
name|set
argument_list|(
name|ipAddress
argument_list|)
expr_stmt|;
block|}
comment|// This will return null if the metastore is not being accessed from a metastore Thrift server,
comment|// or if the TTransport being used to connect is not an instance of TSocket.
specifier|public
specifier|static
name|String
name|getIpAddress
parameter_list|()
block|{
return|return
name|threadLocalIpAddress
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Integer
name|get
parameter_list|()
block|{
return|return
name|threadLocalId
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|HMSHandler
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|HiveConf
argument_list|(
name|HMSHandler
operator|.
name|class
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HMSHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|MetaException
block|{
name|this
argument_list|(
name|name
argument_list|,
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HMSHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|boolean
name|init
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
name|conf
expr_stmt|;
if|if
condition|(
name|init
condition|)
block|{
name|init
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|HiveConf
name|getHiveConf
parameter_list|()
block|{
return|return
name|hiveConf
return|;
block|}
specifier|private
name|ClassLoader
name|classLoader
decl_stmt|;
specifier|private
name|AlterHandler
name|alterHandler
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MetaStorePreEventListener
argument_list|>
name|preListeners
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MetaStoreEventListener
argument_list|>
name|listeners
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MetaStoreEndFunctionListener
argument_list|>
name|endFunctionListeners
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MetaStoreInitListener
argument_list|>
name|initListeners
decl_stmt|;
specifier|private
name|Pattern
name|partitionValidationPattern
decl_stmt|;
block|{
name|classLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
name|classLoader
operator|=
name|Configuration
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|MetaException
block|{
name|rawStoreClassName
operator|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_RAW_STORE_IMPL
argument_list|)
expr_stmt|;
name|initListeners
operator|=
name|MetaStoreUtils
operator|.
name|getMetaStoreListeners
argument_list|(
name|MetaStoreInitListener
operator|.
name|class
argument_list|,
name|hiveConf
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_INIT_HOOKS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|MetaStoreInitListener
name|singleInitListener
range|:
name|initListeners
control|)
block|{
name|MetaStoreInitContext
name|context
init|=
operator|new
name|MetaStoreInitContext
argument_list|()
decl_stmt|;
name|singleInitListener
operator|.
name|onInit
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
name|String
name|alterHandlerName
init|=
name|hiveConf
operator|.
name|get
argument_list|(
literal|"hive.metastore.alter.impl"
argument_list|,
name|HiveAlterHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|alterHandler
operator|=
operator|(
name|AlterHandler
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|MetaStoreUtils
operator|.
name|getClass
argument_list|(
name|alterHandlerName
argument_list|)
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
name|wh
operator|=
operator|new
name|Warehouse
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
synchronized|synchronized
init|(
name|HMSHandler
operator|.
name|class
init|)
block|{
if|if
condition|(
name|currentUrl
operator|==
literal|null
operator|||
operator|!
name|currentUrl
operator|.
name|equals
argument_list|(
name|MetaStoreInit
operator|.
name|getConnectionURL
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
condition|)
block|{
name|createDefaultDB
argument_list|()
expr_stmt|;
name|createDefaultRoles
argument_list|()
expr_stmt|;
name|addAdminUsers
argument_list|()
expr_stmt|;
name|currentUrl
operator|=
name|MetaStoreInit
operator|.
name|getConnectionURL
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Start Metrics for Embedded mode
if|if
condition|(
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_METRICS
argument_list|)
condition|)
block|{
try|try
block|{
name|MetricsFactory
operator|.
name|init
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// log exception, but ignore inability to start
name|LOG
operator|.
name|error
argument_list|(
literal|"error in Metrics init: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|preListeners
operator|=
name|MetaStoreUtils
operator|.
name|getMetaStoreListeners
argument_list|(
name|MetaStorePreEventListener
operator|.
name|class
argument_list|,
name|hiveConf
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PRE_EVENT_LISTENERS
argument_list|)
argument_list|)
expr_stmt|;
name|listeners
operator|=
name|MetaStoreUtils
operator|.
name|getMetaStoreListeners
argument_list|(
name|MetaStoreEventListener
operator|.
name|class
argument_list|,
name|hiveConf
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_EVENT_LISTENERS
argument_list|)
argument_list|)
expr_stmt|;
name|listeners
operator|.
name|add
argument_list|(
operator|new
name|SessionPropertiesListener
argument_list|(
name|hiveConf
argument_list|)
argument_list|)
expr_stmt|;
name|endFunctionListeners
operator|=
name|MetaStoreUtils
operator|.
name|getMetaStoreListeners
argument_list|(
name|MetaStoreEndFunctionListener
operator|.
name|class
argument_list|,
name|hiveConf
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_END_FUNCTION_LISTENERS
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|partitionValidationRegex
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PARTITION_NAME_WHITELIST_PATTERN
argument_list|)
decl_stmt|;
if|if
condition|(
name|partitionValidationRegex
operator|!=
literal|null
operator|&&
operator|!
name|partitionValidationRegex
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|partitionValidationPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|partitionValidationRegex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partitionValidationPattern
operator|=
literal|null
expr_stmt|;
block|}
name|long
name|cleanFreq
init|=
name|hiveConf
operator|.
name|getTimeVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_EVENT_CLEAN_FREQ
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleanFreq
operator|>
literal|0
condition|)
block|{
comment|// In default config, there is no timer.
name|Timer
name|cleaner
init|=
operator|new
name|Timer
argument_list|(
literal|"Metastore Events Cleaner Thread"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cleaner
operator|.
name|schedule
argument_list|(
operator|new
name|EventCleanerTask
argument_list|(
name|this
argument_list|)
argument_list|,
name|cleanFreq
argument_list|,
name|cleanFreq
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|addPrefix
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|threadLocalId
operator|.
name|get
argument_list|()
operator|+
literal|": "
operator|+
name|s
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|threadLocalConf
operator|.
name|set
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RawStore
name|ms
init|=
name|threadLocalMS
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
name|ms
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// reload if DS related configuration is changed
block|}
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|threadLocalConf
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|threadLocalConf
operator|.
name|set
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
specifier|public
name|Warehouse
name|getWh
parameter_list|()
block|{
return|return
name|wh
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMetaConf
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|MetaException
block|{
name|ConfVars
name|confVar
init|=
name|HiveConf
operator|.
name|getMetaConf
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|confVar
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Invalid configuration key "
operator|+
name|key
argument_list|)
throw|;
block|}
name|String
name|validate
init|=
name|confVar
operator|.
name|validate
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|validate
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Invalid configuration value "
operator|+
name|value
operator|+
literal|" for key "
operator|+
name|key
operator|+
literal|" by "
operator|+
name|validate
argument_list|)
throw|;
block|}
name|Configuration
name|configuration
init|=
name|getConf
argument_list|()
decl_stmt|;
name|String
name|oldValue
init|=
name|configuration
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|configuration
operator|.
name|set
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onConfigChange
argument_list|(
operator|new
name|ConfigChangeEvent
argument_list|(
name|this
argument_list|,
name|key
argument_list|,
name|oldValue
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMetaConf
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
block|{
name|ConfVars
name|confVar
init|=
name|HiveConf
operator|.
name|getMetaConf
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|confVar
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Invalid configuration key "
operator|+
name|key
argument_list|)
throw|;
block|}
return|return
name|getConf
argument_list|()
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * Get a cached RawStore.      *      * @return the cached RawStore      * @throws MetaException      */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCATALOG"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
name|RawStore
name|getMS
parameter_list|()
throws|throws
name|MetaException
block|{
name|RawStore
name|ms
init|=
name|threadLocalMS
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
block|{
name|ms
operator|=
name|newRawStore
argument_list|()
expr_stmt|;
name|ms
operator|.
name|verifySchema
argument_list|()
expr_stmt|;
name|threadLocalMS
operator|.
name|set
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|ms
operator|=
name|threadLocalMS
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|ms
return|;
block|}
specifier|private
name|TxnHandler
name|getTxnHandler
parameter_list|()
block|{
name|TxnHandler
name|txn
init|=
name|threadLocalTxn
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|txn
operator|==
literal|null
condition|)
block|{
name|txn
operator|=
operator|new
name|TxnHandler
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|threadLocalTxn
operator|.
name|set
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
return|return
name|txn
return|;
block|}
specifier|private
name|RawStore
name|newRawStore
parameter_list|()
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|addPrefix
argument_list|(
literal|"Opening raw store with implementation class:"
operator|+
name|rawStoreClassName
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
if|if
condition|(
name|hiveConf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_FASTPATH
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Fastpath, skipping raw store proxy"
argument_list|)
expr_stmt|;
try|try
block|{
name|RawStore
name|rs
init|=
operator|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|RawStore
argument_list|>
operator|)
name|MetaStoreUtils
operator|.
name|getClass
argument_list|(
name|rawStoreClassName
argument_list|)
operator|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|rs
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
return|return
name|rs
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to instantiate raw store directly in fastpath mode"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|RawStoreProxy
operator|.
name|getProxy
argument_list|(
name|hiveConf
argument_list|,
name|conf
argument_list|,
name|rawStoreClassName
argument_list|,
name|threadLocalId
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|createDefaultDB_core
parameter_list|(
name|RawStore
name|ms
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
block|{
try|try
block|{
name|ms
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|DEFAULT_DATABASE_COMMENT
argument_list|,
name|wh
operator|.
name|getDefaultDatabasePath
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|db
operator|.
name|setOwnerName
argument_list|(
name|PUBLIC
argument_list|)
expr_stmt|;
name|db
operator|.
name|setOwnerType
argument_list|(
name|PrincipalType
operator|.
name|ROLE
argument_list|)
expr_stmt|;
name|ms
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * create default database if it doesn't exist.      *      * This is a potential contention when HiveServer2 using embedded metastore and Metastore      * Server try to concurrently invoke createDefaultDB. If one failed, JDOException was caught      * for one more time try, if failed again, simply ignored by warning, which meant another      * succeeds.      *      * @throws MetaException      */
specifier|private
name|void
name|createDefaultDB
parameter_list|()
throws|throws
name|MetaException
block|{
try|try
block|{
name|createDefaultDB_core
argument_list|(
name|getMS
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Retrying creating default database after error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|createDefaultDB_core
argument_list|(
name|getMS
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e1
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * create default roles if they don't exist.      *      * This is a potential contention when HiveServer2 using embedded metastore and Metastore      * Server try to concurrently invoke createDefaultRoles. If one failed, JDOException was caught      * for one more time try, if failed again, simply ignored by warning, which meant another      * succeeds.      *      * @throws MetaException      */
specifier|private
name|void
name|createDefaultRoles
parameter_list|()
throws|throws
name|MetaException
block|{
try|try
block|{
name|createDefaultRoles_core
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Retrying creating default roles after error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|createDefaultRoles_core
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createDefaultRoles_core
parameter_list|()
throws|throws
name|MetaException
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|addRole
argument_list|(
name|ADMIN
argument_list|,
name|ADMIN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ADMIN
operator|+
literal|" role already exists"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// This should never be thrown.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected exception while adding "
operator|+
name|ADMIN
operator|+
literal|" roles"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Added "
operator|+
name|ADMIN
operator|+
literal|" role in metastore"
argument_list|)
expr_stmt|;
try|try
block|{
name|ms
operator|.
name|addRole
argument_list|(
name|PUBLIC
argument_list|,
name|PUBLIC
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|PUBLIC
operator|+
literal|" role already exists"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// This should never be thrown.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected exception while adding "
operator|+
name|PUBLIC
operator|+
literal|" roles"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Added "
operator|+
name|PUBLIC
operator|+
literal|" role in metastore"
argument_list|)
expr_stmt|;
comment|// now grant all privs to admin
name|PrivilegeBag
name|privs
init|=
operator|new
name|PrivilegeBag
argument_list|()
decl_stmt|;
name|privs
operator|.
name|addToPrivileges
argument_list|(
operator|new
name|HiveObjectPrivilege
argument_list|(
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|ADMIN
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
literal|"All"
argument_list|,
literal|0
argument_list|,
name|ADMIN
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|ms
operator|.
name|grantPrivileges
argument_list|(
name|privs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
comment|// Surprisingly these privs are already granted.
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed while granting global privs to admin"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// Unlikely to be thrown.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed while granting global privs to admin"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * add admin users if they don't exist.      *      * This is a potential contention when HiveServer2 using embedded metastore and Metastore      * Server try to concurrently invoke addAdminUsers. If one failed, JDOException was caught for      * one more time try, if failed again, simply ignored by warning, which meant another succeeds.      *      * @throws MetaException      */
specifier|private
name|void
name|addAdminUsers
parameter_list|()
throws|throws
name|MetaException
block|{
try|try
block|{
name|addAdminUsers_core
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|JDOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Retrying adding admin users after error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|addAdminUsers_core
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addAdminUsers_core
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// now add pre-configured users to admin role
name|String
name|userStr
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|USERS_IN_ADMIN_ROLE
argument_list|,
literal|""
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|userStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No user is added in admin role, since config is empty"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Since user names need to be valid unix user names, per IEEE Std 1003.1-2001 they cannot
comment|// contain comma, so we can safely split above string on comma.
name|Iterator
argument_list|<
name|String
argument_list|>
name|users
init|=
name|Splitter
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|trimResults
argument_list|()
operator|.
name|omitEmptyStrings
argument_list|()
operator|.
name|split
argument_list|(
name|userStr
argument_list|)
operator|.
name|iterator
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|users
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"No user is added in admin role, since config value "
operator|+
name|userStr
operator|+
literal|" is in incorrect format. We accept comma seprated list of users."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Role
name|adminRole
decl_stmt|;
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
try|try
block|{
name|adminRole
operator|=
name|ms
operator|.
name|getRole
argument_list|(
name|ADMIN
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to retrieve just added admin role"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return;
block|}
while|while
condition|(
name|users
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|userName
init|=
name|users
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|grantRole
argument_list|(
name|adminRole
argument_list|,
name|userName
argument_list|,
name|PrincipalType
operator|.
name|USER
argument_list|,
name|ADMIN
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Added "
operator|+
name|userName
operator|+
literal|" to admin role"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to add "
operator|+
name|userName
operator|+
literal|" in admin role"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|userName
operator|+
literal|" already in admin role"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|logInfo
parameter_list|(
name|String
name|m
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|threadLocalId
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|m
argument_list|)
expr_stmt|;
name|logAuditEvent
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|startFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|String
name|extraLogInfo
parameter_list|)
block|{
name|incrementCounter
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|logInfo
argument_list|(
operator|(
name|getIpAddress
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"source:"
operator|+
name|getIpAddress
argument_list|()
operator|+
literal|" "
operator|)
operator|+
name|function
operator|+
name|extraLogInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|startScope
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception when starting metrics scope"
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|function
return|;
block|}
specifier|private
name|String
name|startFunction
parameter_list|(
name|String
name|function
parameter_list|)
block|{
return|return
name|startFunction
argument_list|(
name|function
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|private
name|String
name|startTableFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|tbl
parameter_list|)
block|{
return|return
name|startFunction
argument_list|(
name|function
argument_list|,
literal|" : db="
operator|+
name|db
operator|+
literal|" tbl="
operator|+
name|tbl
argument_list|)
return|;
block|}
specifier|private
name|String
name|startMultiTableFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|String
name|db
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tbls
parameter_list|)
block|{
name|String
name|tableNames
init|=
name|join
argument_list|(
name|tbls
argument_list|,
literal|","
argument_list|)
decl_stmt|;
return|return
name|startFunction
argument_list|(
name|function
argument_list|,
literal|" : db="
operator|+
name|db
operator|+
literal|" tbls="
operator|+
name|tableNames
argument_list|)
return|;
block|}
specifier|private
name|String
name|startPartitionFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|tbl
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
return|return
name|startFunction
argument_list|(
name|function
argument_list|,
literal|" : db="
operator|+
name|db
operator|+
literal|" tbl="
operator|+
name|tbl
operator|+
literal|"["
operator|+
name|join
argument_list|(
name|partVals
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
argument_list|)
return|;
block|}
specifier|private
name|String
name|startPartitionFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|tbl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|)
block|{
return|return
name|startFunction
argument_list|(
name|function
argument_list|,
literal|" : db="
operator|+
name|db
operator|+
literal|" tbl="
operator|+
name|tbl
operator|+
literal|"partition="
operator|+
name|partName
argument_list|)
return|;
block|}
specifier|private
name|void
name|endFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|boolean
name|successful
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|endFunction
argument_list|(
name|function
argument_list|,
name|successful
argument_list|,
name|e
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|endFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|boolean
name|successful
parameter_list|,
name|Exception
name|e
parameter_list|,
name|String
name|inputTableName
parameter_list|)
block|{
name|endFunction
argument_list|(
name|function
argument_list|,
operator|new
name|MetaStoreEndFunctionContext
argument_list|(
name|successful
argument_list|,
name|e
argument_list|,
name|inputTableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|endFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|MetaStoreEndFunctionContext
name|context
parameter_list|)
block|{
if|if
condition|(
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|endScope
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception when closing metrics scope"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MetaStoreEndFunctionListener
name|listener
range|:
name|endFunctionListeners
control|)
block|{
name|listener
operator|.
name|onEndFunction
argument_list|(
name|function
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|fb_status
name|getStatus
parameter_list|()
block|{
return|return
name|fb_status
operator|.
name|ALIVE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|logInfo
argument_list|(
literal|"Shutting down the object store..."
argument_list|)
expr_stmt|;
name|RawStore
name|ms
init|=
name|threadLocalMS
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|threadLocalMS
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|logInfo
argument_list|(
literal|"Metastore shutdown complete."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getCounters
parameter_list|()
block|{
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|counters
init|=
name|super
operator|.
name|getCounters
argument_list|()
decl_stmt|;
comment|// Allow endFunctionListeners to add any counters they have collected
if|if
condition|(
name|endFunctionListeners
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MetaStoreEndFunctionListener
name|listener
range|:
name|endFunctionListeners
control|)
block|{
name|listener
operator|.
name|exportCounters
argument_list|(
name|counters
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counters
return|;
block|}
specifier|private
name|void
name|create_database_core
parameter_list|(
name|RawStore
name|ms
parameter_list|,
specifier|final
name|Database
name|db
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
block|{
if|if
condition|(
operator|!
name|validateName
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|db
operator|.
name|getName
argument_list|()
operator|+
literal|" is not a valid database name"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|db
operator|.
name|getLocationUri
argument_list|()
condition|)
block|{
name|db
operator|.
name|setLocationUri
argument_list|(
name|wh
operator|.
name|getDefaultDatabasePath
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|db
operator|.
name|setLocationUri
argument_list|(
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|dbPath
init|=
operator|new
name|Path
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|madeDir
init|=
literal|false
decl_stmt|;
try|try
block|{
name|firePreEvent
argument_list|(
operator|new
name|PreCreateDatabaseEvent
argument_list|(
name|db
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|dbPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|dbPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to create database path "
operator|+
name|dbPath
operator|+
literal|", failed to create database "
operator|+
name|db
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|madeDir
operator|=
literal|true
expr_stmt|;
block|}
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|ms
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|madeDir
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|dbPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onCreateDatabase
argument_list|(
operator|new
name|CreateDatabaseEvent
argument_list|(
name|db
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|create_database
parameter_list|(
specifier|final
name|Database
name|db
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"create_database"
argument_list|,
literal|": "
operator|+
name|db
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|get_database_core
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Database "
operator|+
name|db
operator|.
name|getName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// expected
block|}
if|if
condition|(
name|TEST_TIMEOUT_ENABLED
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
name|TEST_TIMEOUT_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
name|Deadline
operator|.
name|checkTimeout
argument_list|()
expr_stmt|;
block|}
name|create_database_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"create_database"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Database
name|get_database
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"get_database"
argument_list|,
literal|": "
operator|+
name|name
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|get_database_core
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreReadDatabaseEvent
argument_list|(
name|db
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_database"
argument_list|,
name|db
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|db
return|;
block|}
comment|/**      * Equivalent to get_database, but does not write to audit logs, or fire pre-event listners.      * Meant to be used for internal hive classes that don't use the thrift interface.      * @param name      * @return      * @throws NoSuchObjectException      * @throws MetaException      */
specifier|public
name|Database
name|get_database_core
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|Database
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|getMS
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
assert|assert
operator|(
name|e
operator|instanceof
name|RuntimeException
operator|)
assert|;
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
return|return
name|db
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_database
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|Database
name|db
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|TException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"alter_database"
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|getMS
argument_list|()
operator|.
name|alterDatabase
argument_list|(
name|dbName
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"alter_database"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|drop_database_core
parameter_list|(
name|RawStore
name|ms
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|,
specifier|final
name|boolean
name|cascade
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|IOException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Database
name|db
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|tablePaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|partitionPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|db
operator|=
name|ms
operator|.
name|getDatabase
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreDropDatabaseEvent
argument_list|(
name|db
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allTables
init|=
name|get_all_tables
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allFunctions
init|=
name|get_functions
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|,
literal|"*"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cascade
condition|)
block|{
if|if
condition|(
operator|!
name|allTables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Database "
operator|+
name|db
operator|.
name|getName
argument_list|()
operator|+
literal|" is not empty. One or more tables exist."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|allFunctions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Database "
operator|+
name|db
operator|.
name|getName
argument_list|()
operator|+
literal|" is not empty. One or more functions exist."
argument_list|)
throw|;
block|}
block|}
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Database not dropped since "
operator|+
name|path
operator|+
literal|" is not writable by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|databasePath
init|=
name|wh
operator|.
name|getDnsPath
argument_list|(
name|wh
operator|.
name|getDatabasePath
argument_list|(
name|db
argument_list|)
argument_list|)
decl_stmt|;
comment|// drop any functions before dropping db
for|for
control|(
name|String
name|funcName
range|:
name|allFunctions
control|)
block|{
name|drop_function
argument_list|(
name|name
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
block|}
comment|// drop tables before dropping db
name|int
name|tableBatchSize
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_BATCH_RETRIEVE_MAX
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
literal|0
decl_stmt|;
comment|// retrieve the tables from the metastore in batches to alleviate memory constraints
while|while
condition|(
name|startIndex
operator|<
name|allTables
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|endIndex
init|=
name|Math
operator|.
name|min
argument_list|(
name|startIndex
operator|+
name|tableBatchSize
argument_list|,
name|allTables
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tables
operator|=
name|ms
operator|.
name|getTableObjectsByName
argument_list|(
name|name
argument_list|,
name|allTables
operator|.
name|subList
argument_list|(
name|startIndex
argument_list|,
name|endIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|tables
operator|!=
literal|null
operator|&&
operator|!
name|tables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Table
name|table
range|:
name|tables
control|)
block|{
comment|// If the table is not external and it might not be in a subdirectory of the database
comment|// add it's locations to the list of paths to delete
name|Path
name|tablePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|isExternal
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|tablePath
operator|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|tablePath
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Database metadata not deleted since table: "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|" has a parent location "
operator|+
name|tablePath
operator|.
name|getParent
argument_list|()
operator|+
literal|" which is not writable by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSubdirectory
argument_list|(
name|databasePath
argument_list|,
name|tablePath
argument_list|)
condition|)
block|{
name|tablePaths
operator|.
name|add
argument_list|(
name|tablePath
argument_list|)
expr_stmt|;
block|}
block|}
comment|// For each partition in each table, drop the partitions and get a list of
comment|// partitions' locations which might need to be deleted
name|partitionPaths
operator|=
name|dropPartitionsAndGetLocations
argument_list|(
name|ms
argument_list|,
name|name
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tablePath
argument_list|,
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|deleteData
operator|&&
operator|!
name|isExternal
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
comment|// Drop the table but not its data
name|drop_table
argument_list|(
name|name
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|startIndex
operator|=
name|endIndex
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ms
operator|.
name|dropDatabase
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteData
condition|)
block|{
comment|// Delete the data in the partitions which have other locations
name|deletePartitionData
argument_list|(
name|partitionPaths
argument_list|)
expr_stmt|;
comment|// Delete the data in the tables which have other locations
for|for
control|(
name|Path
name|tablePath
range|:
name|tablePaths
control|)
block|{
name|deleteTableData
argument_list|(
name|tablePath
argument_list|)
expr_stmt|;
block|}
comment|// Delete the data in the database
try|try
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
operator|new
name|Path
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete database directory: "
operator|+
name|db
operator|.
name|getLocationUri
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// it is not a terrible thing even if the data is not deleted
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onDropDatabase
argument_list|(
operator|new
name|DropDatabaseEvent
argument_list|(
name|db
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns a BEST GUESS as to whether or not other is a subdirectory of parent. It does not      * take into account any intricacies of the underlying file system, which is assumed to be      * HDFS. This should not return any false positives, but may return false negatives.      *      * @param parent      * @param other      * @return      */
specifier|private
name|boolean
name|isSubdirectory
parameter_list|(
name|Path
name|parent
parameter_list|,
name|Path
name|other
parameter_list|)
block|{
return|return
name|other
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|parent
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|?
name|parent
operator|.
name|toString
argument_list|()
else|:
name|parent
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drop_database
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|,
specifier|final
name|boolean
name|cascade
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"drop_database"
argument_list|,
literal|": "
operator|+
name|dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEFAULT_DATABASE_NAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
name|endFunction
argument_list|(
literal|"drop_database"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Can not drop default database"
argument_list|)
throw|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|drop_database_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|deleteData
argument_list|,
name|cascade
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_database"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_databases
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"get_databases"
argument_list|,
literal|": "
operator|+
name|pattern
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getDatabases
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_databases"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_all_databases
parameter_list|()
throws|throws
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"get_all_databases"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getAllDatabases
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_all_databases"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|create_type_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|validateName
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Invalid type name"
argument_list|)
throw|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|is_type_exists
argument_list|(
name|ms
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Type "
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|ms
operator|.
name|createType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|create_type
parameter_list|(
specifier|final
name|Type
name|type
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|startFunction
argument_list|(
literal|"create_type"
argument_list|,
literal|": "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|create_type_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"create_type"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|get_type
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|startFunction
argument_list|(
literal|"get_type"
argument_list|,
literal|": "
operator|+
name|name
argument_list|)
expr_stmt|;
name|Type
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getType
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|ret
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Type \""
operator|+
name|name
operator|+
literal|"\" not found."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_type"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|is_type_exists
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|typeName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
operator|(
name|ms
operator|.
name|getType
argument_list|(
name|typeName
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
specifier|private
name|void
name|drop_type_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
name|String
name|typeName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
comment|// drop any partitions
if|if
condition|(
operator|!
name|is_type_exists
argument_list|(
name|ms
argument_list|,
name|typeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|typeName
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|ms
operator|.
name|dropType
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop type "
operator|+
name|typeName
argument_list|)
throw|;
block|}
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_type
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|startFunction
argument_list|(
literal|"drop_type"
argument_list|,
literal|": "
operator|+
name|name
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// TODO:pc validate that there are no types that refer to this
name|success
operator|=
name|getMS
argument_list|()
operator|.
name|dropType
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_type"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|get_type_all
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO Auto-generated method stub
name|startFunction
argument_list|(
literal|"get_type_all"
argument_list|,
literal|": "
operator|+
name|name
argument_list|)
expr_stmt|;
name|endFunction
argument_list|(
literal|"get_type_all"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
specifier|private
name|void
name|create_table_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|Table
name|tbl
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|validateName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|,
name|hiveConf
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
operator|+
literal|" is not a valid object name"
argument_list|)
throw|;
block|}
name|String
name|validate
init|=
name|MetaStoreUtils
operator|.
name|validateTblColumns
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|validate
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Invalid column "
operator|+
name|validate
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|validate
operator|=
name|MetaStoreUtils
operator|.
name|validateTblColumns
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|validate
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Invalid partition column "
operator|+
name|validate
argument_list|)
throw|;
block|}
block|}
name|SkewedInfo
name|skew
init|=
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|skew
operator|!=
literal|null
condition|)
block|{
name|validate
operator|=
name|MetaStoreUtils
operator|.
name|validateSkewedColNames
argument_list|(
name|skew
operator|.
name|getSkewedColNames
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|validate
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Invalid skew column "
operator|+
name|validate
argument_list|)
throw|;
block|}
name|validate
operator|=
name|MetaStoreUtils
operator|.
name|validateSkewedColNamesSubsetCol
argument_list|(
name|skew
operator|.
name|getSkewedColNames
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|validate
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Invalid skew column "
operator|+
name|validate
argument_list|)
throw|;
block|}
block|}
name|Path
name|tblPath
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|,
name|madeDir
init|=
literal|false
decl_stmt|;
try|try
block|{
name|firePreEvent
argument_list|(
operator|new
name|PreCreateTableEvent
argument_list|(
name|tbl
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|Database
name|db
init|=
name|ms
operator|.
name|getDatabase
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"The database "
operator|+
name|tbl
operator|.
name|getDbName
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
comment|// get_table checks whether database exists, it should be moved here
if|if
condition|(
name|is_table_exists
argument_list|(
name|ms
argument_list|,
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Table "
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tbl
operator|.
name|getTableType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
operator|||
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tblPath
operator|=
name|wh
operator|.
name|getTablePath
argument_list|(
name|ms
operator|.
name|getDatabase
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isExternal
argument_list|(
name|tbl
argument_list|)
operator|&&
operator|!
name|MetaStoreUtils
operator|.
name|isNonNativeTable
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Location: "
operator|+
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|" specified for non-external table:"
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tblPath
operator|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|tblPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tblPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|tblPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|tblPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|tblPath
operator|+
literal|" is not a directory or unable to create one"
argument_list|)
throw|;
block|}
name|madeDir
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|)
operator|&&
operator|!
name|MetaStoreUtils
operator|.
name|isView
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
name|MetaStoreUtils
operator|.
name|updateTableStatsFast
argument_list|(
name|db
argument_list|,
name|tbl
argument_list|,
name|wh
argument_list|,
name|madeDir
argument_list|)
expr_stmt|;
block|}
comment|// set create time
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|tbl
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|==
literal|null
operator|||
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|)
operator|==
literal|null
condition|)
block|{
name|tbl
operator|.
name|putToParameters
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ms
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|madeDir
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|tblPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|CreateTableEvent
name|createTableEvent
init|=
operator|new
name|CreateTableEvent
argument_list|(
name|tbl
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|createTableEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onCreateTable
argument_list|(
name|createTableEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|create_table
parameter_list|(
specifier|final
name|Table
name|tbl
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|create_table_with_environment_context
argument_list|(
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|create_table_with_environment_context
parameter_list|(
specifier|final
name|Table
name|tbl
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|startFunction
argument_list|(
literal|"create_table"
argument_list|,
literal|": "
operator|+
name|tbl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|create_table_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"create_table"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|is_table_exists
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
operator|(
name|ms
operator|.
name|getTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
specifier|private
name|boolean
name|drop_table_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|IOException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|isExternal
init|=
literal|false
decl_stmt|;
name|Path
name|tblPath
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|partPaths
init|=
literal|null
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
name|boolean
name|ifPurge
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
comment|// drop any partitions
name|tbl
operator|=
name|get_table_core
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|name
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table metadata is corrupted"
argument_list|)
throw|;
block|}
name|ifPurge
operator|=
name|isMustPurge
argument_list|(
name|envContext
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreDropTableEvent
argument_list|(
name|tbl
argument_list|,
name|deleteData
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|isIndexTable
init|=
name|isIndexTable
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexName
operator|==
literal|null
operator|&&
name|isIndexTable
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The table "
operator|+
name|name
operator|+
literal|" is an index table. Please do drop index instead."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isIndexTable
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
name|ms
operator|.
name|getIndexes
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
while|while
condition|(
name|indexes
operator|!=
literal|null
operator|&&
name|indexes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Index
name|idx
range|:
name|indexes
control|)
block|{
name|this
operator|.
name|drop_index_by_name
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|idx
operator|.
name|getIndexName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|indexes
operator|=
name|ms
operator|.
name|getIndexes
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|isExternal
operator|=
name|isExternal
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tblPath
operator|=
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|tblPath
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|target
init|=
name|indexName
operator|==
literal|null
condition|?
literal|"Table"
else|:
literal|"Index table"
decl_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|target
operator|+
literal|" metadata not deleted since "
operator|+
name|tblPath
operator|.
name|getParent
argument_list|()
operator|+
literal|" is not writable by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// tblPath will be null when tbl is a view. We skip the following if block in that case.
name|checkTrashPurgeCombination
argument_list|(
name|tblPath
argument_list|,
name|dbname
operator|+
literal|"."
operator|+
name|name
argument_list|,
name|ifPurge
argument_list|)
expr_stmt|;
comment|// Drop the partitions and get a list of locations which need to be deleted
name|partPaths
operator|=
name|dropPartitionsAndGetLocations
argument_list|(
name|ms
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|tblPath
argument_list|,
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|deleteData
operator|&&
operator|!
name|isExternal
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ms
operator|.
name|dropTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|String
name|tableName
init|=
name|dbname
operator|+
literal|"."
operator|+
name|name
decl_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|indexName
operator|==
literal|null
condition|?
literal|"Unable to drop table "
operator|+
name|tableName
else|:
literal|"Unable to drop index table "
operator|+
name|tableName
operator|+
literal|" for index "
operator|+
name|indexName
argument_list|)
throw|;
block|}
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteData
operator|&&
operator|!
name|isExternal
condition|)
block|{
comment|// Data needs deletion. Check if trash may be skipped.
comment|// Delete the data in the partitions which have other locations
name|deletePartitionData
argument_list|(
name|partPaths
argument_list|,
name|ifPurge
argument_list|)
expr_stmt|;
comment|// Delete the data in the table
name|deleteTableData
argument_list|(
name|tblPath
argument_list|,
name|ifPurge
argument_list|)
expr_stmt|;
comment|// ok even if the data is not deleted
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|DropTableEvent
name|dropTableEvent
init|=
operator|new
name|DropTableEvent
argument_list|(
name|tbl
argument_list|,
name|success
argument_list|,
name|deleteData
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|dropTableEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onDropTable
argument_list|(
name|dropTableEvent
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
comment|/**      * Will throw MetaException if combination of trash policy/purge can't be satisfied      * @param pathToData path to data which may potentially be moved to trash      * @param objectName db.table, or db.table.part      * @param ifPurge if PURGE options is specified      */
specifier|private
name|void
name|checkTrashPurgeCombination
parameter_list|(
name|Path
name|pathToData
parameter_list|,
name|String
name|objectName
parameter_list|,
name|boolean
name|ifPurge
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|!
operator|(
name|pathToData
operator|!=
literal|null
operator|&&
operator|!
name|ifPurge
operator|)
condition|)
block|{
comment|//pathToData may be NULL for a view
return|return;
block|}
name|boolean
name|trashEnabled
init|=
literal|false
decl_stmt|;
try|try
block|{
name|trashEnabled
operator|=
literal|0
operator|<
name|hiveConf
operator|.
name|getFloat
argument_list|(
literal|"fs.trash.interval"
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|ex
parameter_list|)
block|{
comment|// nothing to do
block|}
if|if
condition|(
name|trashEnabled
condition|)
block|{
try|try
block|{
name|HadoopShims
operator|.
name|HdfsEncryptionShim
name|shim
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|createHdfsEncryptionShim
argument_list|(
name|FileSystem
operator|.
name|get
argument_list|(
name|hiveConf
argument_list|)
argument_list|,
name|hiveConf
argument_list|)
decl_stmt|;
if|if
condition|(
name|shim
operator|.
name|isPathEncrypted
argument_list|(
name|pathToData
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop "
operator|+
name|objectName
operator|+
literal|" because it is in an encryption zone"
operator|+
literal|" and trash is enabled.  Use PURGE option to skip trash."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|MetaException
name|e
init|=
operator|new
name|MetaException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|e
operator|.
name|initCause
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
block|}
comment|/**      * Deletes the data in a table's location, if it fails logs an error      *      * @param tablePath      */
specifier|private
name|void
name|deleteTableData
parameter_list|(
name|Path
name|tablePath
parameter_list|)
block|{
name|deleteTableData
argument_list|(
name|tablePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Deletes the data in a table's location, if it fails logs an error      *      * @param tablePath      * @param ifPurge completely purge the table (skipping trash) while removing      *                data from warehouse      */
specifier|private
name|void
name|deleteTableData
parameter_list|(
name|Path
name|tablePath
parameter_list|,
name|boolean
name|ifPurge
parameter_list|)
block|{
if|if
condition|(
name|tablePath
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|tablePath
argument_list|,
literal|true
argument_list|,
name|ifPurge
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete table directory: "
operator|+
name|tablePath
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Give a list of partitions' locations, tries to delete each one      * and for each that fails logs an error.      *      * @param partPaths      */
specifier|private
name|void
name|deletePartitionData
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|partPaths
parameter_list|)
block|{
name|deletePartitionData
argument_list|(
name|partPaths
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**     * Give a list of partitions' locations, tries to delete each one     * and for each that fails logs an error.     *     * @param partPaths     * @param ifPurge completely purge the partition (skipping trash) while     *                removing data from warehouse     */
specifier|private
name|void
name|deletePartitionData
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|partPaths
parameter_list|,
name|boolean
name|ifPurge
parameter_list|)
block|{
if|if
condition|(
name|partPaths
operator|!=
literal|null
operator|&&
operator|!
name|partPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Path
name|partPath
range|:
name|partPaths
control|)
block|{
try|try
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|partPath
argument_list|,
literal|true
argument_list|,
name|ifPurge
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete partition directory: "
operator|+
name|partPath
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Retrieves the partitions specified by partitionKeys. If checkLocation, for locations of      * partitions which may not be subdirectories of tablePath checks to make the locations are      * writable.      *      * Drops the metadata for each partition.      *      * Provides a list of locations of partitions which may not be subdirectories of tablePath.      *      * @param ms      * @param dbName      * @param tableName      * @param tablePath      * @param partitionKeys      * @param checkLocation      * @return      * @throws MetaException      * @throws IOException      * @throws InvalidInputException      * @throws InvalidObjectException      * @throws NoSuchObjectException      */
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|dropPartitionsAndGetLocations
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Path
name|tablePath
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionKeys
parameter_list|,
name|boolean
name|checkLocation
parameter_list|)
throws|throws
name|MetaException
throws|,
name|IOException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|int
name|partitionBatchSize
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_BATCH_RETRIEVE_MAX
argument_list|)
decl_stmt|;
name|Path
name|tableDnsPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tablePath
operator|!=
literal|null
condition|)
block|{
name|tableDnsPath
operator|=
name|wh
operator|.
name|getDnsPath
argument_list|(
name|tablePath
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|partPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|ms
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
comment|// call dropPartition on each of the table's partitions to follow the
comment|// procedure for cleanly dropping partitions.
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partsToDelete
init|=
name|ms
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionBatchSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|partsToDelete
operator|==
literal|null
operator|||
name|partsToDelete
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|partsToDelete
control|)
block|{
if|if
condition|(
name|checkLocation
operator|&&
name|part
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
operator|&&
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Path
name|partPath
init|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableDnsPath
operator|==
literal|null
operator|||
operator|(
name|partPath
operator|!=
literal|null
operator|&&
operator|!
name|isSubdirectory
argument_list|(
name|tableDnsPath
argument_list|,
name|partPath
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|partPath
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table metadata not deleted since the partition "
operator|+
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|partitionKeys
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
operator|+
literal|" has parent location "
operator|+
name|partPath
operator|.
name|getParent
argument_list|()
operator|+
literal|" which is not writable "
operator|+
literal|"by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
name|partPaths
operator|.
name|add
argument_list|(
name|partPath
argument_list|)
expr_stmt|;
block|}
block|}
name|partNames
operator|.
name|add
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ms
operator|.
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
block|}
return|return
name|partPaths
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drop_table
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|drop_table_with_environment_context
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|drop_table_with_environment_context
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|startTableFunction
argument_list|(
literal|"drop_table"
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|success
operator|=
name|drop_table_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_table"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Is this an external table?      *      * @param table      *          Check if this table is external.      * @return True if the table is external, otherwise false.      */
specifier|private
name|boolean
name|isExternal
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isIndexTable
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
name|MetaStoreUtils
operator|.
name|isIndexTable
argument_list|(
name|table
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|get_table
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|Table
name|t
init|=
literal|null
decl_stmt|;
name|startTableFunction
argument_list|(
literal|"get_table"
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|t
operator|=
name|get_table_core
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreReadTableEvent
argument_list|(
name|t
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_table"
argument_list|,
name|t
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableMeta
argument_list|>
name|get_table_meta
parameter_list|(
name|String
name|dbnames
parameter_list|,
name|String
name|tblNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tblTypes
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|TableMeta
argument_list|>
name|t
init|=
literal|null
decl_stmt|;
name|startTableFunction
argument_list|(
literal|"get_table_metas"
argument_list|,
name|dbnames
argument_list|,
name|tblNames
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|t
operator|=
name|getMS
argument_list|()
operator|.
name|getTableMeta
argument_list|(
name|dbnames
argument_list|,
name|tblNames
argument_list|,
name|tblTypes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_table_metas"
argument_list|,
name|t
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
comment|/**      * Equivalent of get_table, but does not log audits and fire pre-event listener.      * Meant to be used for calls made by other hive classes, that are not using the      * thrift interface.      * @param dbname      * @param name      * @return Table object      * @throws MetaException      * @throws NoSuchObjectException      */
specifier|public
name|Table
name|get_table_core
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|Table
name|t
decl_stmt|;
try|try
block|{
name|t
operator|=
name|getMS
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|dbname
operator|+
literal|"."
operator|+
name|name
operator|+
literal|" table not found"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|t
return|;
block|}
comment|/**      * Gets multiple tables from the hive metastore.      *      * @param dbName      *          The name of the database in which the tables reside      * @param tableNames      *          The names of the tables to get.      *      * @return A list of tables whose names are in the the list "names" and      *         are retrievable from the database specified by "dbnames."      *         There is no guarantee of the order of the returned tables.      *         If there are duplicate names, only one instance of the table will be returned.      * @throws MetaException      * @throws InvalidOperationException      * @throws UnknownDBException      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|get_table_objects_by_name
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<
name|Table
argument_list|>
argument_list|()
decl_stmt|;
name|startMultiTableFunction
argument_list|(
literal|"get_multi_table"
argument_list|,
name|dbName
argument_list|,
name|tableNames
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
name|int
name|tableBatchSize
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_BATCH_RETRIEVE_MAX
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
operator|||
name|dbName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnknownDBException
argument_list|(
literal|"DB name is null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tableNames
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|dbName
operator|+
literal|" cannot find null tables"
argument_list|)
throw|;
block|}
comment|// The list of table names could contain duplicates. RawStore.getTableObjectsByName()
comment|// only guarantees returning no duplicate table objects in one batch. If we need
comment|// to break into multiple batches, remove duplicates first.
name|List
argument_list|<
name|String
argument_list|>
name|distinctTableNames
init|=
name|tableNames
decl_stmt|;
if|if
condition|(
name|distinctTableNames
operator|.
name|size
argument_list|()
operator|>
name|tableBatchSize
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lowercaseTableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tableName
range|:
name|tableNames
control|)
block|{
name|lowercaseTableNames
operator|.
name|add
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|distinctTableNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|lowercaseTableNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|int
name|startIndex
init|=
literal|0
decl_stmt|;
comment|// Retrieve the tables from the metastore in batches. Some databases like
comment|// Oracle cannot have over 1000 expressions in a in-list
while|while
condition|(
name|startIndex
operator|<
name|distinctTableNames
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|endIndex
init|=
name|Math
operator|.
name|min
argument_list|(
name|startIndex
operator|+
name|tableBatchSize
argument_list|,
name|distinctTableNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|tables
operator|.
name|addAll
argument_list|(
name|ms
operator|.
name|getTableObjectsByName
argument_list|(
name|dbName
argument_list|,
name|distinctTableNames
operator|.
name|subList
argument_list|(
name|startIndex
argument_list|,
name|endIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|startIndex
operator|=
name|endIndex
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|UnknownDBException
condition|)
block|{
throw|throw
operator|(
name|UnknownDBException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_multi_table"
argument_list|,
name|tables
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|join
argument_list|(
name|tableNames
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tables
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_table_names_by_filter
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|filter
parameter_list|,
specifier|final
name|short
name|maxTables
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
literal|null
decl_stmt|;
name|startFunction
argument_list|(
literal|"get_table_names_by_filter"
argument_list|,
literal|": db = "
operator|+
name|dbName
operator|+
literal|", filter = "
operator|+
name|filter
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
operator|||
name|dbName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnknownDBException
argument_list|(
literal|"DB name is null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|filter
operator|+
literal|" cannot apply null filter"
argument_list|)
throw|;
block|}
name|tables
operator|=
name|getMS
argument_list|()
operator|.
name|listTableNamesByFilter
argument_list|(
name|dbName
argument_list|,
name|filter
argument_list|,
name|maxTables
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|UnknownDBException
condition|)
block|{
throw|throw
operator|(
name|UnknownDBException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_table_names_by_filter"
argument_list|,
name|tables
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|join
argument_list|(
name|tables
argument_list|,
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tables
return|;
block|}
specifier|private
name|Partition
name|append_partition_common
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|,
name|madeDir
init|=
literal|false
decl_stmt|;
name|Path
name|partLocation
init|=
literal|null
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|part
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setValues
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|MetaStoreUtils
operator|.
name|validatePartitionNameCharacters
argument_list|(
name|part_vals
argument_list|,
name|partitionValidationPattern
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|ms
operator|.
name|getTable
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to add partition because table or database do not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Cannot append a partition to a view"
argument_list|)
throw|;
block|}
name|firePreEvent
argument_list|(
operator|new
name|PreAddPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|setSd
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
name|partLocation
operator|=
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part_vals
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|partLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|old_part
init|=
literal|null
decl_stmt|;
try|try
block|{
name|old_part
operator|=
name|ms
operator|.
name|getPartition
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// this means there is no existing partition
name|old_part
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|old_part
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Partition already exists:"
operator|+
name|part
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|partLocation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|partLocation
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|partLocation
operator|+
literal|" is not a directory or unable to create one"
argument_list|)
throw|;
block|}
name|madeDir
operator|=
literal|true
expr_stmt|;
block|}
comment|// set create time
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|part
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
name|part
operator|.
name|putToParameters
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|)
operator|&&
operator|!
name|MetaStoreUtils
operator|.
name|isView
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
name|MetaStoreUtils
operator|.
name|updatePartitionStatsFast
argument_list|(
name|part
argument_list|,
name|wh
argument_list|,
name|madeDir
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
name|ms
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|madeDir
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|partLocation
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|AddPartitionEvent
name|addPartitionEvent
init|=
operator|new
name|AddPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|addPartitionEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onAddPartition
argument_list|(
name|addPartitionEvent
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|part
return|;
block|}
specifier|private
name|void
name|firePreEvent
parameter_list|(
name|PreEventContext
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
for|for
control|(
name|MetaStorePreEventListener
name|listener
range|:
name|preListeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|onEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|append_partition
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
return|return
name|append_partition_with_environment_context
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|append_partition_with_environment_context
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|startPartitionFunction
argument_list|(
literal|"append_partition"
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|part
range|:
name|part_vals
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|Partition
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|append_partition_common
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"append_partition"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
class|class
name|PartValEqWrapper
block|{
name|Partition
name|partition
decl_stmt|;
specifier|public
name|PartValEqWrapper
parameter_list|(
name|Partition
name|partition
parameter_list|)
block|{
name|this
operator|.
name|partition
operator|=
name|partition
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|partition
operator|.
name|isSetValues
argument_list|()
condition|?
name|partition
operator|.
name|getValues
argument_list|()
operator|.
name|hashCode
argument_list|()
else|:
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|PartValEqWrapper
operator|)
condition|)
return|return
literal|false
return|;
name|Partition
name|p1
init|=
name|this
operator|.
name|partition
decl_stmt|,
name|p2
init|=
operator|(
operator|(
name|PartValEqWrapper
operator|)
name|obj
operator|)
operator|.
name|partition
decl_stmt|;
if|if
condition|(
operator|!
name|p1
operator|.
name|isSetValues
argument_list|()
operator|||
operator|!
name|p2
operator|.
name|isSetValues
argument_list|()
condition|)
return|return
name|p1
operator|.
name|isSetValues
argument_list|()
operator|==
name|p2
operator|.
name|isSetValues
argument_list|()
return|;
if|if
condition|(
name|p1
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|p2
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|p1
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|String
name|v1
init|=
name|p1
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|v2
init|=
name|p2
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|v1
operator|==
literal|null
operator|&&
name|v2
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|v1
operator|==
literal|null
operator|||
operator|!
name|v1
operator|.
name|equals
argument_list|(
name|v2
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PartValEqWrapperLite
block|{
name|List
argument_list|<
name|String
argument_list|>
name|values
decl_stmt|;
name|String
name|location
decl_stmt|;
specifier|public
name|PartValEqWrapperLite
parameter_list|(
name|Partition
name|partition
parameter_list|)
block|{
name|this
operator|.
name|values
operator|=
name|partition
operator|.
name|isSetValues
argument_list|()
condition|?
name|partition
operator|.
name|getValues
argument_list|()
else|:
literal|null
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|values
operator|==
literal|null
condition|?
literal|0
else|:
name|values
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|obj
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|PartValEqWrapperLite
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|lhsValues
init|=
name|this
operator|.
name|values
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|rhsValues
init|=
operator|(
operator|(
name|PartValEqWrapperLite
operator|)
name|obj
operator|)
operator|.
name|values
decl_stmt|;
if|if
condition|(
name|lhsValues
operator|==
literal|null
operator|||
name|rhsValues
operator|==
literal|null
condition|)
return|return
name|lhsValues
operator|==
name|rhsValues
return|;
if|if
condition|(
name|lhsValues
operator|.
name|size
argument_list|()
operator|!=
name|rhsValues
operator|.
name|size
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lhsValues
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|String
name|lhsValue
init|=
name|lhsValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|rhsValue
init|=
name|rhsValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|lhsValue
operator|==
literal|null
operator|&&
name|rhsValue
operator|!=
literal|null
operator|)
operator|||
operator|(
name|lhsValue
operator|!=
literal|null
operator|&&
operator|!
name|lhsValue
operator|.
name|equals
argument_list|(
name|rhsValue
argument_list|)
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|add_partitions_core
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|TException
block|{
name|logInfo
argument_list|(
literal|"add_partitions"
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
comment|// Ensures that the list doesn't have dups, and keeps track of directories we have created.
name|Map
argument_list|<
name|PartValEqWrapper
argument_list|,
name|Boolean
argument_list|>
name|addedPartitions
init|=
operator|new
name|HashMap
argument_list|<
name|PartValEqWrapper
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|existingParts
init|=
literal|null
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|ms
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to add partitions because "
operator|+
literal|"database or table "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|parts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|firePreEvent
argument_list|(
operator|new
name|PreAddPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|parts
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
if|if
condition|(
operator|!
name|part
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tblName
argument_list|)
operator|||
operator|!
name|part
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Partition does not belong to target table "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|": "
operator|+
name|part
argument_list|)
throw|;
block|}
name|boolean
name|shouldAdd
init|=
name|startAddPartition
argument_list|(
name|ms
argument_list|,
name|part
argument_list|,
name|ifNotExists
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldAdd
condition|)
block|{
if|if
condition|(
name|existingParts
operator|==
literal|null
condition|)
block|{
name|existingParts
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|existingParts
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Not adding partition "
operator|+
name|part
operator|+
literal|" as it already exists"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|madeDir
init|=
name|createLocationForAddedPartition
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
name|addedPartitions
operator|.
name|put
argument_list|(
operator|new
name|PartValEqWrapper
argument_list|(
name|part
argument_list|)
argument_list|,
name|madeDir
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Technically, for ifNotExists case, we could insert one and discard the other
comment|// because the first one now "exists", but it seems better to report the problem
comment|// upstream as such a command doesn't make sense.
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Duplicate partitions in the list: "
operator|+
name|part
argument_list|)
throw|;
block|}
name|initializeAddedPartition
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|,
name|madeDir
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|success
operator|=
name|ms
operator|.
name|addPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|success
operator|=
literal|true
expr_stmt|;
block|}
name|success
operator|=
name|success
operator|&&
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|PartValEqWrapper
argument_list|,
name|Boolean
argument_list|>
name|e
range|:
name|addedPartitions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
operator|new
name|Path
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// we just created this directory - it's not a case of pre-creation, so we nuke
block|}
block|}
name|fireMetaStoreAddPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|parts
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fireMetaStoreAddPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|result
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|existingParts
operator|!=
literal|null
condition|)
block|{
comment|// The request has succeeded but we failed to add these partitions.
name|fireMetaStoreAddPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|existingParts
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|AddPartitionsResult
name|add_partitions_req
parameter_list|(
name|AddPartitionsRequest
name|request
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|AddPartitionsResult
name|result
init|=
operator|new
name|AddPartitionsResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getParts
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|result
return|;
block|}
try|try
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|add_partitions_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|request
operator|.
name|getDbName
argument_list|()
argument_list|,
name|request
operator|.
name|getTblName
argument_list|()
argument_list|,
name|request
operator|.
name|getParts
argument_list|()
argument_list|,
name|request
operator|.
name|isIfNotExists
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isNeedResult
argument_list|()
condition|)
block|{
name|result
operator|.
name|setPartitions
argument_list|(
name|parts
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
throw|throw
name|te
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|add_partitions
parameter_list|(
specifier|final
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|AlreadyExistsException
block|{
name|startFunction
argument_list|(
literal|"add_partition"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Integer
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// Old API assumed all partitions belong to the same table; keep the same assumption
name|ret
operator|=
name|add_partitions_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDbName
argument_list|()
argument_list|,
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableName
argument_list|()
argument_list|,
name|parts
argument_list|,
literal|false
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
assert|assert
name|ret
operator|==
name|parts
operator|.
name|size
argument_list|()
assert|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|String
name|tableName
init|=
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|endFunction
argument_list|(
literal|"add_partition"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|add_partitions_pspec
parameter_list|(
specifier|final
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|partSpecs
parameter_list|)
throws|throws
name|TException
block|{
name|logInfo
argument_list|(
literal|"add_partitions_pspec"
argument_list|)
expr_stmt|;
if|if
condition|(
name|partSpecs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|0
return|;
block|}
name|String
name|dbName
init|=
name|partSpecs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|partSpecs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableName
argument_list|()
decl_stmt|;
return|return
name|add_partitions_pspec_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partSpecs
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|int
name|add_partitions_pspec_core
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|partSpecs
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|TException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
comment|// Ensures that the list doesn't have dups, and keeps track of directories we have created.
name|Map
argument_list|<
name|PartValEqWrapperLite
argument_list|,
name|Boolean
argument_list|>
name|addedPartitions
init|=
operator|new
name|HashMap
argument_list|<
name|PartValEqWrapperLite
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|PartitionSpecProxy
name|partitionSpecProxy
init|=
name|PartitionSpecProxy
operator|.
name|Factory
operator|.
name|get
argument_list|(
name|partSpecs
argument_list|)
decl_stmt|;
name|PartitionSpecProxy
operator|.
name|PartitionIterator
name|partitionIterator
init|=
name|partitionSpecProxy
operator|.
name|getPartitionIterator
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|ms
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to add partitions because "
operator|+
literal|"database or table "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|firePreEvent
argument_list|(
operator|new
name|PreAddPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|partitionSpecProxy
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|nPartitions
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|partitionIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Partition
name|part
init|=
name|partitionIterator
operator|.
name|getCurrent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|part
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|tblName
argument_list|)
operator|||
operator|!
name|part
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Partition does not belong to target table "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|": "
operator|+
name|part
argument_list|)
throw|;
block|}
name|boolean
name|shouldAdd
init|=
name|startAddPartition
argument_list|(
name|ms
argument_list|,
name|part
argument_list|,
name|ifNotExists
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|shouldAdd
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Not adding partition "
operator|+
name|part
operator|+
literal|" as it already exists"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|boolean
name|madeDir
init|=
name|createLocationForAddedPartition
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
name|addedPartitions
operator|.
name|put
argument_list|(
operator|new
name|PartValEqWrapperLite
argument_list|(
name|part
argument_list|)
argument_list|,
name|madeDir
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// Technically, for ifNotExists case, we could insert one and discard the other
comment|// because the first one now "exists", but it seems better to report the problem
comment|// upstream as such a command doesn't make sense.
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Duplicate partitions in the list: "
operator|+
name|part
argument_list|)
throw|;
block|}
name|initializeAddedPartition
argument_list|(
name|tbl
argument_list|,
name|partitionIterator
argument_list|,
name|madeDir
argument_list|)
expr_stmt|;
operator|++
name|nPartitions
expr_stmt|;
name|partitionIterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|success
operator|=
name|ms
operator|.
name|addPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionSpecProxy
argument_list|,
name|ifNotExists
argument_list|)
operator|&&
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|nPartitions
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|PartValEqWrapperLite
argument_list|,
name|Boolean
argument_list|>
name|e
range|:
name|addedPartitions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
operator|new
name|Path
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|location
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// we just created this directory - it's not a case of pre-creation, so we nuke
block|}
block|}
block|}
name|fireMetaStoreAddPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|partitionSpecProxy
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|startAddPartition
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|Partition
name|part
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|MetaStoreUtils
operator|.
name|validatePartitionNameCharacters
argument_list|(
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|partitionValidationPattern
argument_list|)
expr_stmt|;
name|boolean
name|doesExist
init|=
name|ms
operator|.
name|doesPartitionExist
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doesExist
operator|&&
operator|!
name|ifNotExists
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Partition already exists: "
operator|+
name|part
argument_list|)
throw|;
block|}
return|return
operator|!
name|doesExist
return|;
block|}
comment|/**      * Handles the location for a partition being created.      * @param tbl Table.      * @param part Partition.      * @return Whether the partition SD location is set to a newly created directory.      */
specifier|private
name|boolean
name|createLocationForAddedPartition
parameter_list|(
specifier|final
name|Table
name|tbl
parameter_list|,
specifier|final
name|Partition
name|part
parameter_list|)
throws|throws
name|MetaException
block|{
name|Path
name|partLocation
init|=
literal|null
decl_stmt|;
name|String
name|partLocationStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partLocationStr
operator|=
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|partLocationStr
operator|==
literal|null
operator|||
name|partLocationStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// set default location if not specified and this is
comment|// a physical table partition (not a view)
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partLocation
operator|=
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Cannot specify location for a view partition"
argument_list|)
throw|;
block|}
name|partLocation
operator|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|partLocationStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|result
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|partLocation
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|partLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check to see if the directory already exists before calling
comment|// mkdirs() because if the file system is read-only, mkdirs will
comment|// throw an exception even if the directory already exists.
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|partLocation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|partLocation
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|partLocation
operator|+
literal|" is not a directory or unable to create one"
argument_list|)
throw|;
block|}
name|result
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|initializeAddedPartition
parameter_list|(
specifier|final
name|Table
name|tbl
parameter_list|,
specifier|final
name|Partition
name|part
parameter_list|,
name|boolean
name|madeDir
parameter_list|)
throws|throws
name|MetaException
block|{
name|initializeAddedPartition
argument_list|(
name|tbl
argument_list|,
operator|new
name|PartitionSpecProxy
operator|.
name|SimplePartitionWrapperIterator
argument_list|(
name|part
argument_list|)
argument_list|,
name|madeDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initializeAddedPartition
parameter_list|(
specifier|final
name|Table
name|tbl
parameter_list|,
specifier|final
name|PartitionSpecProxy
operator|.
name|PartitionIterator
name|part
parameter_list|,
name|boolean
name|madeDir
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|hiveConf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVESTATSAUTOGATHER
argument_list|)
operator|&&
operator|!
name|MetaStoreUtils
operator|.
name|isView
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
name|MetaStoreUtils
operator|.
name|updatePartitionStatsFast
argument_list|(
name|part
argument_list|,
name|wh
argument_list|,
name|madeDir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|// set create time
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|part
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|.
name|getParameters
argument_list|()
operator|==
literal|null
operator|||
name|part
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|)
operator|==
literal|null
condition|)
block|{
name|part
operator|.
name|putToParameters
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Inherit table properties into partition properties.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblParams
init|=
name|tbl
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|String
name|inheritProps
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_PART_INHERIT_TBL_PROPS
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// Default value is empty string in which case no properties will be inherited.
comment|// * implies all properties needs to be inherited
name|Set
argument_list|<
name|String
argument_list|>
name|inheritKeys
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|inheritProps
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|inheritKeys
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|inheritKeys
operator|=
name|tblParams
operator|.
name|keySet
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|inheritKeys
control|)
block|{
name|String
name|paramVal
init|=
name|tblParams
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|paramVal
condition|)
block|{
comment|// add the property only if it exists in table properties
name|part
operator|.
name|putToParameters
argument_list|(
name|key
argument_list|,
name|paramVal
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Partition
name|add_partition_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|Partition
name|part
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|tbl
operator|=
name|ms
operator|.
name|getTable
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to add partition because table or database do not exist"
argument_list|)
throw|;
block|}
name|firePreEvent
argument_list|(
operator|new
name|PreAddPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|shouldAdd
init|=
name|startAddPartition
argument_list|(
name|ms
argument_list|,
name|part
argument_list|,
literal|false
argument_list|)
decl_stmt|;
assert|assert
name|shouldAdd
assert|;
comment|// start would throw if it already existed here
name|boolean
name|madeDir
init|=
name|createLocationForAddedPartition
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|)
decl_stmt|;
try|try
block|{
name|initializeAddedPartition
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|,
name|madeDir
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
name|madeDir
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we proceed only if we'd actually succeeded anyway, otherwise,
comment|// we'd have thrown an exception
name|success
operator|=
name|success
operator|&&
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
name|fireMetaStoreAddPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|part
argument_list|)
argument_list|,
name|envContext
argument_list|,
name|success
argument_list|)
expr_stmt|;
block|}
return|return
name|part
return|;
block|}
specifier|private
name|void
name|fireMetaStoreAddPartitionEvent
parameter_list|(
specifier|final
name|Table
name|tbl
parameter_list|,
specifier|final
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|,
name|boolean
name|success
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|tbl
operator|!=
literal|null
operator|&&
name|parts
operator|!=
literal|null
operator|&&
operator|!
name|parts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|AddPartitionEvent
name|addPartitionEvent
init|=
operator|new
name|AddPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|parts
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|addPartitionEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onAddPartition
argument_list|(
name|addPartitionEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|fireMetaStoreAddPartitionEvent
parameter_list|(
specifier|final
name|Table
name|tbl
parameter_list|,
specifier|final
name|PartitionSpecProxy
name|partitionSpec
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|,
name|boolean
name|success
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|tbl
operator|!=
literal|null
operator|&&
name|partitionSpec
operator|!=
literal|null
condition|)
block|{
name|AddPartitionEvent
name|addPartitionEvent
init|=
operator|new
name|AddPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|partitionSpec
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|addPartitionEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onAddPartition
argument_list|(
name|addPartitionEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|add_partition
parameter_list|(
specifier|final
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
return|return
name|add_partition_with_environment_context
argument_list|(
name|part
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|add_partition_with_environment_context
parameter_list|(
specifier|final
name|Partition
name|part
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|startTableFunction
argument_list|(
literal|"add_partition"
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|add_partition_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|part
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"add_partition"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|part
operator|!=
literal|null
condition|?
name|part
operator|.
name|getTableName
argument_list|()
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|exchange_partition
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
parameter_list|,
name|String
name|sourceDbName
parameter_list|,
name|String
name|sourceTableName
parameter_list|,
name|String
name|destDbName
parameter_list|,
name|String
name|destTableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
throws|,
name|TException
block|{
name|exchange_partitions
argument_list|(
name|partitionSpecs
argument_list|,
name|sourceDbName
argument_list|,
name|sourceTableName
argument_list|,
name|destDbName
argument_list|,
name|destTableName
argument_list|)
expr_stmt|;
return|return
operator|new
name|Partition
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|exchange_partitions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
parameter_list|,
name|String
name|sourceDbName
parameter_list|,
name|String
name|sourceTableName
parameter_list|,
name|String
name|destDbName
parameter_list|,
name|String
name|destTableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
throws|,
name|TException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|pathCreated
init|=
literal|false
decl_stmt|;
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|Table
name|destinationTable
init|=
name|ms
operator|.
name|getTable
argument_list|(
name|destDbName
argument_list|,
name|destTableName
argument_list|)
decl_stmt|;
name|Table
name|sourceTable
init|=
name|ms
operator|.
name|getTable
argument_list|(
name|sourceDbName
argument_list|,
name|sourceTableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|MetaStoreUtils
operator|.
name|getPvals
argument_list|(
name|sourceTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partitionSpecs
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partValsPresent
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionKeysPresent
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|sourceTable
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|String
name|partVal
init|=
name|partVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|partVal
operator|!=
literal|null
operator|&&
operator|!
name|partVal
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
name|partValsPresent
operator|.
name|add
argument_list|(
name|partVal
argument_list|)
expr_stmt|;
name|partitionKeysPresent
operator|.
name|add
argument_list|(
name|fs
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionsToExchange
init|=
name|get_partitions_ps
argument_list|(
name|sourceDbName
argument_list|,
name|sourceTableName
argument_list|,
name|partVals
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|boolean
name|sameColumns
init|=
name|MetaStoreUtils
operator|.
name|compareFieldColumns
argument_list|(
name|sourceTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|,
name|destinationTable
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|samePartitions
init|=
name|MetaStoreUtils
operator|.
name|compareFieldColumns
argument_list|(
name|sourceTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|destinationTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sameColumns
operator|||
operator|!
name|samePartitions
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"The tables have different schemas."
operator|+
literal|" Their partitions cannot be exchanged."
argument_list|)
throw|;
block|}
name|Path
name|sourcePath
init|=
operator|new
name|Path
argument_list|(
name|sourceTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|partitionKeysPresent
argument_list|,
name|partValsPresent
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|destPath
init|=
operator|new
name|Path
argument_list|(
name|destinationTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|partitionKeysPresent
argument_list|,
name|partValsPresent
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|destPartitions
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitionsToExchange
control|)
block|{
name|Partition
name|destPartition
init|=
operator|new
name|Partition
argument_list|(
name|partition
argument_list|)
decl_stmt|;
name|destPartition
operator|.
name|setDbName
argument_list|(
name|destDbName
argument_list|)
expr_stmt|;
name|destPartition
operator|.
name|setTableName
argument_list|(
name|destinationTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Path
name|destPartitionPath
init|=
operator|new
name|Path
argument_list|(
name|destinationTable
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|destinationTable
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|destPartition
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|destPartitionPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ms
operator|.
name|addPartition
argument_list|(
name|destPartition
argument_list|)
expr_stmt|;
name|destPartitions
operator|.
name|add
argument_list|(
name|destPartition
argument_list|)
expr_stmt|;
name|ms
operator|.
name|dropPartition
argument_list|(
name|partition
operator|.
name|getDbName
argument_list|()
argument_list|,
name|sourceTable
operator|.
name|getTableName
argument_list|()
argument_list|,
name|partition
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|destParentPath
init|=
name|destPath
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|destParentPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|destParentPath
argument_list|,
literal|true
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to create path "
operator|+
name|destParentPath
argument_list|)
throw|;
block|}
block|}
comment|/**          * TODO: Use the hard link feature of hdfs          * once https://issues.apache.org/jira/browse/HDFS-3370 is done          */
name|pathCreated
operator|=
name|wh
operator|.
name|renameDir
argument_list|(
name|sourcePath
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|destPartitions
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|||
operator|!
name|pathCreated
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|pathCreated
condition|)
block|{
name|wh
operator|.
name|renameDir
argument_list|(
name|destPath
argument_list|,
name|sourcePath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|boolean
name|drop_partition_common
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|IOException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Path
name|partPath
init|=
literal|null
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
name|Partition
name|part
init|=
literal|null
decl_stmt|;
name|boolean
name|isArchived
init|=
literal|false
decl_stmt|;
name|Path
name|archiveParentDir
init|=
literal|null
decl_stmt|;
name|boolean
name|mustPurge
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|part
operator|=
name|ms
operator|.
name|getPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|get_table_core
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreDropPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|,
name|deleteData
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|mustPurge
operator|=
name|isMustPurge
argument_list|(
name|envContext
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Partition doesn't exist. "
operator|+
name|part_vals
argument_list|)
throw|;
block|}
name|isArchived
operator|=
name|MetaStoreUtils
operator|.
name|isArchived
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|isArchived
condition|)
block|{
name|archiveParentDir
operator|=
name|MetaStoreUtils
operator|.
name|getOriginalLocation
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|verifyIsWritablePath
argument_list|(
name|archiveParentDir
argument_list|)
expr_stmt|;
name|checkTrashPurgeCombination
argument_list|(
name|archiveParentDir
argument_list|,
name|db_name
operator|+
literal|"."
operator|+
name|tbl_name
operator|+
literal|"."
operator|+
name|part_vals
argument_list|,
name|mustPurge
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ms
operator|.
name|dropPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop partition"
argument_list|)
throw|;
block|}
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|part
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|partPath
operator|=
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|verifyIsWritablePath
argument_list|(
name|partPath
argument_list|)
expr_stmt|;
name|checkTrashPurgeCombination
argument_list|(
name|partPath
argument_list|,
name|db_name
operator|+
literal|"."
operator|+
name|tbl_name
operator|+
literal|"."
operator|+
name|part_vals
argument_list|,
name|mustPurge
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteData
operator|&&
operator|(
operator|(
name|partPath
operator|!=
literal|null
operator|)
operator|||
operator|(
name|archiveParentDir
operator|!=
literal|null
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|tbl
operator|!=
literal|null
operator|&&
operator|!
name|isExternal
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
if|if
condition|(
name|mustPurge
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"dropPartition() will purge "
operator|+
name|partPath
operator|+
literal|" directly, skipping trash."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"dropPartition() will move "
operator|+
name|partPath
operator|+
literal|" to trash-directory."
argument_list|)
expr_stmt|;
block|}
comment|// Archived partitions have har:/to_har_file as their location.
comment|// The original directory was saved in params
if|if
condition|(
name|isArchived
condition|)
block|{
assert|assert
operator|(
name|archiveParentDir
operator|!=
literal|null
operator|)
assert|;
name|wh
operator|.
name|deleteDir
argument_list|(
name|archiveParentDir
argument_list|,
literal|true
argument_list|,
name|mustPurge
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
operator|(
name|partPath
operator|!=
literal|null
operator|)
assert|;
name|wh
operator|.
name|deleteDir
argument_list|(
name|partPath
argument_list|,
literal|true
argument_list|,
name|mustPurge
argument_list|)
expr_stmt|;
name|deleteParentRecursive
argument_list|(
name|partPath
operator|.
name|getParent
argument_list|()
argument_list|,
name|part_vals
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|,
name|mustPurge
argument_list|)
expr_stmt|;
block|}
comment|// ok even if the data is not deleted
block|}
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|DropPartitionEvent
name|dropPartitionEvent
init|=
operator|new
name|DropPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|,
name|success
argument_list|,
name|deleteData
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|dropPartitionEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onDropPartition
argument_list|(
name|dropPartitionEvent
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isMustPurge
parameter_list|(
name|EnvironmentContext
name|envContext
parameter_list|,
name|Table
name|tbl
parameter_list|)
block|{
comment|// Data needs deletion. Check if trash may be skipped.
comment|// Trash may be skipped iff:
comment|//  1. deleteData == true, obviously.
comment|//  2. tbl is external.
comment|//  3. Either
comment|//    3.1. User has specified PURGE from the commandline, and if not,
comment|//    3.2. User has set the table to auto-purge.
return|return
operator|(
operator|(
name|envContext
operator|!=
literal|null
operator|)
operator|&&
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|envContext
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"ifPurge"
argument_list|)
argument_list|)
operator|)
operator|||
operator|(
name|tbl
operator|.
name|isSetParameters
argument_list|()
operator|&&
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"auto.purge"
argument_list|)
argument_list|)
operator|)
return|;
block|}
specifier|private
name|void
name|deleteParentRecursive
parameter_list|(
name|Path
name|parent
parameter_list|,
name|int
name|depth
parameter_list|,
name|boolean
name|mustPurge
parameter_list|)
throws|throws
name|IOException
throws|,
name|MetaException
block|{
if|if
condition|(
name|depth
operator|>
literal|0
operator|&&
name|parent
operator|!=
literal|null
operator|&&
name|wh
operator|.
name|isWritable
argument_list|(
name|parent
argument_list|)
operator|&&
name|wh
operator|.
name|isEmpty
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|parent
argument_list|,
literal|true
argument_list|,
name|mustPurge
argument_list|)
expr_stmt|;
name|deleteParentRecursive
argument_list|(
name|parent
operator|.
name|getParent
argument_list|()
argument_list|,
name|depth
operator|-
literal|1
argument_list|,
name|mustPurge
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_partition
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|drop_partition_with_environment_context
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|deleteData
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|PathAndPartValSize
block|{
specifier|public
name|PathAndPartValSize
parameter_list|(
name|Path
name|path
parameter_list|,
name|int
name|partValSize
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|partValSize
operator|=
name|partValSize
expr_stmt|;
block|}
specifier|public
name|Path
name|path
decl_stmt|;
specifier|public
name|int
name|partValSize
decl_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DropPartitionsResult
name|drop_partitions_req
parameter_list|(
name|DropPartitionsRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|String
name|dbName
init|=
name|request
operator|.
name|getDbName
argument_list|()
decl_stmt|,
name|tblName
init|=
name|request
operator|.
name|getTblName
argument_list|()
decl_stmt|;
name|boolean
name|ifExists
init|=
name|request
operator|.
name|isSetIfExists
argument_list|()
operator|&&
name|request
operator|.
name|isIfExists
argument_list|()
decl_stmt|;
name|boolean
name|deleteData
init|=
name|request
operator|.
name|isSetDeleteData
argument_list|()
operator|&&
name|request
operator|.
name|isDeleteData
argument_list|()
decl_stmt|;
name|boolean
name|ignoreProtection
init|=
name|request
operator|.
name|isSetIgnoreProtection
argument_list|()
operator|&&
name|request
operator|.
name|isIgnoreProtection
argument_list|()
decl_stmt|;
name|boolean
name|needResult
init|=
operator|!
name|request
operator|.
name|isSetNeedResult
argument_list|()
operator|||
name|request
operator|.
name|isNeedResult
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PathAndPartValSize
argument_list|>
name|dirsToDelete
init|=
operator|new
name|ArrayList
argument_list|<
name|PathAndPartValSize
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|archToDelete
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|EnvironmentContext
name|envContext
init|=
name|request
operator|.
name|isSetEnvironmentContext
argument_list|()
condition|?
name|request
operator|.
name|getEnvironmentContext
argument_list|()
else|:
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
literal|null
decl_stmt|;
name|boolean
name|mustPurge
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// We need Partition-s for firing events and for result; DN needs MPartition-s to drop.
comment|// Great... Maybe we could bypass fetching MPartitions by issuing direct SQL deletes.
name|tbl
operator|=
name|get_table_core
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|mustPurge
operator|=
name|isMustPurge
argument_list|(
name|envContext
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|int
name|minCount
init|=
literal|0
decl_stmt|;
name|RequestPartsSpec
name|spec
init|=
name|request
operator|.
name|getParts
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|spec
operator|.
name|isSetExprs
argument_list|()
condition|)
block|{
comment|// Dropping by expressions.
name|parts
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|spec
operator|.
name|getExprs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|DropPartitionsExpr
name|expr
range|:
name|spec
operator|.
name|getExprs
argument_list|()
control|)
block|{
operator|++
name|minCount
expr_stmt|;
comment|// At least one partition per expression, if not ifExists
name|List
argument_list|<
name|Partition
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasUnknown
init|=
name|ms
operator|.
name|getPartitionsByExpr
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|expr
operator|.
name|getExpr
argument_list|()
argument_list|,
literal|null
argument_list|,
operator|(
name|short
operator|)
operator|-
literal|1
argument_list|,
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasUnknown
condition|)
block|{
comment|// Expr is built by DDLSA, it should only contain part cols and simple ops
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unexpected unknown partitions to drop"
argument_list|)
throw|;
block|}
comment|// this is to prevent dropping archived partition which is archived in a
comment|// different level the drop command specified.
if|if
condition|(
operator|!
name|ignoreProtection
operator|&&
name|expr
operator|.
name|isSetPartArchiveLevel
argument_list|()
condition|)
block|{
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isArchived
argument_list|(
name|part
argument_list|)
operator|&&
name|MetaStoreUtils
operator|.
name|getArchivingLevel
argument_list|(
name|part
argument_list|)
operator|<
name|expr
operator|.
name|getPartArchiveLevel
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Cannot drop a subset of partitions "
operator|+
literal|" in an archive, partition "
operator|+
name|part
argument_list|)
throw|;
block|}
block|}
block|}
name|parts
operator|.
name|addAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|spec
operator|.
name|isSetNames
argument_list|()
condition|)
block|{
name|partNames
operator|=
name|spec
operator|.
name|getNames
argument_list|()
expr_stmt|;
name|minCount
operator|=
name|partNames
operator|.
name|size
argument_list|()
expr_stmt|;
name|parts
operator|=
name|ms
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Partition spec is not set"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|parts
operator|.
name|size
argument_list|()
operator|<
name|minCount
operator|)
operator|&&
operator|!
name|ifExists
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Some partitions to drop are missing"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|colNames
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|partNames
operator|==
literal|null
condition|)
block|{
name|partNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|parts
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|colNames
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|col
range|:
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|colNames
operator|.
name|add
argument_list|(
name|col
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
comment|// TODO - we need to speed this up for the normal path where all partitions are under
comment|// the table and we don't have to stat every partition
name|firePreEvent
argument_list|(
operator|new
name|PreDropPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|,
name|deleteData
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|colNames
operator|!=
literal|null
condition|)
block|{
name|partNames
operator|.
name|add
argument_list|(
name|FileUtils
operator|.
name|makePartName
argument_list|(
name|colNames
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Preserve the old behavior of failing when we cannot write, even w/o deleteData,
comment|// and even if the table is external. That might not make any sense.
if|if
condition|(
name|MetaStoreUtils
operator|.
name|isArchived
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|Path
name|archiveParentDir
init|=
name|MetaStoreUtils
operator|.
name|getOriginalLocation
argument_list|(
name|part
argument_list|)
decl_stmt|;
name|verifyIsWritablePath
argument_list|(
name|archiveParentDir
argument_list|)
expr_stmt|;
name|checkTrashPurgeCombination
argument_list|(
name|archiveParentDir
argument_list|,
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|"."
operator|+
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|mustPurge
argument_list|)
expr_stmt|;
name|archToDelete
operator|.
name|add
argument_list|(
name|archiveParentDir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|part
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|Path
name|partPath
init|=
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
decl_stmt|;
name|verifyIsWritablePath
argument_list|(
name|partPath
argument_list|)
expr_stmt|;
name|checkTrashPurgeCombination
argument_list|(
name|partPath
argument_list|,
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|"."
operator|+
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|mustPurge
argument_list|)
expr_stmt|;
name|dirsToDelete
operator|.
name|add
argument_list|(
operator|new
name|PathAndPartValSize
argument_list|(
name|partPath
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ms
operator|.
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|DropPartitionsResult
name|result
init|=
operator|new
name|DropPartitionsResult
argument_list|()
decl_stmt|;
if|if
condition|(
name|needResult
condition|)
block|{
name|result
operator|.
name|setPartitions
argument_list|(
name|parts
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteData
operator|&&
operator|!
name|isExternal
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|mustPurge
condition|?
literal|"dropPartition() will purge partition-directories directly, skipping trash."
else|:
literal|"dropPartition() will move partition-directories to trash-directory."
argument_list|)
expr_stmt|;
comment|// Archived partitions have har:/to_har_file as their location.
comment|// The original directory was saved in params
for|for
control|(
name|Path
name|path
range|:
name|archToDelete
control|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
name|mustPurge
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|PathAndPartValSize
name|p
range|:
name|dirsToDelete
control|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|p
operator|.
name|path
argument_list|,
literal|true
argument_list|,
name|mustPurge
argument_list|)
expr_stmt|;
try|try
block|{
name|deleteParentRecursive
argument_list|(
name|p
operator|.
name|path
operator|.
name|getParent
argument_list|()
argument_list|,
name|p
operator|.
name|partValSize
operator|-
literal|1
argument_list|,
name|mustPurge
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error from deleteParentRecursive"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Failed to delete parent: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|DropPartitionEvent
name|dropPartitionEvent
init|=
operator|new
name|DropPartitionEvent
argument_list|(
name|tbl
argument_list|,
name|part
argument_list|,
name|success
argument_list|,
name|deleteData
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|dropPartitionEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onDropPartition
argument_list|(
name|dropPartitionEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|void
name|verifyIsWritablePath
parameter_list|(
name|Path
name|dir
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|dir
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table partition not deleted since "
operator|+
name|dir
operator|.
name|getParent
argument_list|()
operator|+
literal|" is not writable by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error from isWritable"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table partition not deleted since "
operator|+
name|dir
operator|.
name|getParent
argument_list|()
operator|+
literal|" access cannot be checked: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_partition_with_environment_context
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startPartitionFunction
argument_list|(
literal|"drop_partition"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Partition values:"
operator|+
name|part_vals
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|drop_partition_common
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_partition"
argument_list|,
name|ret
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|get_partition
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|startPartitionFunction
argument_list|(
literal|"get_partition"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|Partition
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|fireReadTablePreEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partition"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Fire a pre-event for read table operation, if there are any      * pre-event listeners registered      *      * @param dbName      * @param tblName      * @throws MetaException      * @throws NoSuchObjectException      */
specifier|private
name|void
name|fireReadTablePreEvent
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
name|preListeners
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// do this only if there is a pre event listener registered (avoid unnecessary
comment|// metastore api call)
name|Table
name|t
init|=
name|getMS
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" table not found"
argument_list|)
throw|;
block|}
name|firePreEvent
argument_list|(
operator|new
name|PreReadTableEvent
argument_list|(
name|t
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|get_partition_with_auth
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|String
name|user_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|startPartitionFunction
argument_list|(
literal|"get_partition_with_auth"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|fireReadTablePreEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|Partition
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartitionWithAuth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|user_name
argument_list|,
name|group_names
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partition_with_auth"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|startTableFunction
argument_list|(
literal|"get_partitions"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|fireReadTablePreEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartitions
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_with_auth
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|short
name|maxParts
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"get_partitions_with_auth"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartitionsWithAuth
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_with_auth"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|get_partitions_pspec
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|int
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|String
name|dbName
init|=
name|db_name
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|tableName
init|=
name|tbl_name
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|startTableFunction
argument_list|(
literal|"get_partitions_pspec"
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|partitionSpecs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|get_table_core
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|get_partitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|(
name|short
operator|)
name|max_parts
argument_list|)
decl_stmt|;
if|if
condition|(
name|is_partition_spec_grouping_enabled
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|partitionSpecs
operator|=
name|get_partitionspecs_grouped_by_storage_descriptor
argument_list|(
name|table
argument_list|,
name|partitions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PartitionSpec
name|pSpec
init|=
operator|new
name|PartitionSpec
argument_list|()
decl_stmt|;
name|pSpec
operator|.
name|setPartitionList
argument_list|(
operator|new
name|PartitionListComposingSpec
argument_list|(
name|partitions
argument_list|)
argument_list|)
expr_stmt|;
name|pSpec
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|pSpec
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|pSpec
operator|.
name|setRootPath
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|partitionSpecs
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|pSpec
argument_list|)
expr_stmt|;
block|}
return|return
name|partitionSpecs
return|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_pspec"
argument_list|,
name|partitionSpecs
operator|!=
literal|null
operator|&&
operator|!
name|partitionSpecs
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|null
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|StorageDescriptorKey
block|{
specifier|private
specifier|final
name|StorageDescriptor
name|sd
decl_stmt|;
name|StorageDescriptorKey
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
block|}
name|StorageDescriptor
name|getSd
parameter_list|()
block|{
return|return
name|sd
return|;
block|}
specifier|private
name|String
name|hashCodeKey
parameter_list|()
block|{
return|return
name|sd
operator|.
name|getInputFormat
argument_list|()
operator|+
literal|"\t"
operator|+
name|sd
operator|.
name|getOutputFormat
argument_list|()
operator|+
literal|"\t"
operator|+
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
operator|+
literal|"\t"
operator|+
name|sd
operator|.
name|getCols
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hashCodeKey
argument_list|()
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|rhs
operator|==
name|this
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
operator|(
name|rhs
operator|instanceof
name|StorageDescriptorKey
operator|)
condition|)
return|return
literal|false
return|;
return|return
operator|(
name|hashCodeKey
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|StorageDescriptorKey
operator|)
name|rhs
operator|)
operator|.
name|hashCodeKey
argument_list|()
argument_list|)
operator|)
return|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|get_partitionspecs_grouped_by_storage_descriptor
parameter_list|(
name|Table
name|table
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
assert|assert
name|is_partition_spec_grouping_enabled
argument_list|(
name|table
argument_list|)
assert|;
specifier|final
name|String
name|tablePath
init|=
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|ImmutableListMultimap
argument_list|<
name|Boolean
argument_list|,
name|Partition
argument_list|>
name|partitionsWithinTableDirectory
init|=
name|Multimaps
operator|.
name|index
argument_list|(
name|partitions
argument_list|,
operator|new
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
argument_list|<
name|Partition
argument_list|,
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|apply
parameter_list|(
name|Partition
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|startsWith
argument_list|(
name|tablePath
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|partSpecs
init|=
operator|new
name|ArrayList
argument_list|<
name|PartitionSpec
argument_list|>
argument_list|()
decl_stmt|;
comment|// Classify partitions within the table directory into groups,
comment|// based on shared SD properties.
name|Map
argument_list|<
name|StorageDescriptorKey
argument_list|,
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
argument_list|>
name|sdToPartList
init|=
operator|new
name|HashMap
argument_list|<
name|StorageDescriptorKey
argument_list|,
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|partitionsWithinTableDirectory
operator|.
name|containsKey
argument_list|(
literal|true
argument_list|)
condition|)
block|{
name|ImmutableList
argument_list|<
name|Partition
argument_list|>
name|partsWithinTableDir
init|=
name|partitionsWithinTableDirectory
operator|.
name|get
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partsWithinTableDir
control|)
block|{
name|PartitionWithoutSD
name|partitionWithoutSD
init|=
operator|new
name|PartitionWithoutSD
argument_list|(
name|partition
operator|.
name|getValues
argument_list|()
argument_list|,
name|partition
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|partition
operator|.
name|getLastAccessTime
argument_list|()
argument_list|,
name|partition
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|substring
argument_list|(
name|tablePath
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|partition
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
name|StorageDescriptorKey
name|sdKey
init|=
operator|new
name|StorageDescriptorKey
argument_list|(
name|partition
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sdToPartList
operator|.
name|containsKey
argument_list|(
name|sdKey
argument_list|)
condition|)
block|{
name|sdToPartList
operator|.
name|put
argument_list|(
name|sdKey
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|PartitionWithoutSD
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|sdToPartList
operator|.
name|get
argument_list|(
name|sdKey
argument_list|)
operator|.
name|add
argument_list|(
name|partitionWithoutSD
argument_list|)
expr_stmt|;
block|}
comment|// for (partitionsWithinTableDirectory);
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|StorageDescriptorKey
argument_list|,
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
argument_list|>
name|entry
range|:
name|sdToPartList
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|partSpecs
operator|.
name|add
argument_list|(
name|getSharedSDPartSpec
argument_list|(
name|table
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Done grouping partitions within table-dir.
comment|// Lump all partitions outside the tablePath into one PartSpec.
if|if
condition|(
name|partitionsWithinTableDirectory
operator|.
name|containsKey
argument_list|(
literal|false
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionsOutsideTableDir
init|=
name|partitionsWithinTableDirectory
operator|.
name|get
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|partitionsOutsideTableDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|PartitionSpec
name|partListSpec
init|=
operator|new
name|PartitionSpec
argument_list|()
decl_stmt|;
name|partListSpec
operator|.
name|setDbName
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|partListSpec
operator|.
name|setTableName
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|partListSpec
operator|.
name|setPartitionList
argument_list|(
operator|new
name|PartitionListComposingSpec
argument_list|(
name|partitionsOutsideTableDir
argument_list|)
argument_list|)
expr_stmt|;
name|partSpecs
operator|.
name|add
argument_list|(
name|partListSpec
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partSpecs
return|;
block|}
specifier|private
name|PartitionSpec
name|getSharedSDPartSpec
parameter_list|(
name|Table
name|table
parameter_list|,
name|StorageDescriptorKey
name|sdKey
parameter_list|,
name|List
argument_list|<
name|PartitionWithoutSD
argument_list|>
name|partitions
parameter_list|)
block|{
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|(
name|sdKey
operator|.
name|getSd
argument_list|()
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setLocation
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
comment|// Use table-dir as root-dir.
name|PartitionSpecWithSharedSD
name|sharedSDPartSpec
init|=
operator|new
name|PartitionSpecWithSharedSD
argument_list|(
name|partitions
argument_list|,
name|sd
argument_list|)
decl_stmt|;
name|PartitionSpec
name|ret
init|=
operator|new
name|PartitionSpec
argument_list|()
decl_stmt|;
name|ret
operator|.
name|setRootPath
argument_list|(
name|sd
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setSharedSDPartitionSpec
argument_list|(
name|sharedSDPartSpec
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setDbName
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|.
name|setTableName
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|boolean
name|is_partition_spec_grouping_enabled
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
return|return
name|parameters
operator|.
name|containsKey
argument_list|(
literal|"hive.hcatalog.partition.spec.grouping.enabled"
argument_list|)
operator|&&
name|parameters
operator|.
name|get
argument_list|(
literal|"hive.hcatalog.partition.spec.grouping.enabled"
argument_list|)
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partition_names
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|startTableFunction
argument_list|(
literal|"get_partition_names"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|fireReadTablePreEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|listPartitionNames
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partition_names"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_partition
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|rename_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
literal|null
argument_list|,
name|new_part
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_partition_with_environment_context
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|Partition
name|newPartition
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|rename_partition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|newPartition
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rename_partition
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
comment|// Call rename_partition without an environment context.
name|rename_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|new_part
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|rename_partition
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|Partition
name|new_part
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"alter_partition"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New partition values:"
operator|+
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|part_vals
operator|!=
literal|null
operator|&&
name|part_vals
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Old Partition values:"
operator|+
name|part_vals
argument_list|)
expr_stmt|;
block|}
block|}
name|Partition
name|oldPart
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|firePreEvent
argument_list|(
operator|new
name|PreAlterPartitionEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|new_part
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|part_vals
operator|!=
literal|null
operator|&&
operator|!
name|part_vals
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MetaStoreUtils
operator|.
name|validatePartitionNameCharacters
argument_list|(
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|,
name|partitionValidationPattern
argument_list|)
expr_stmt|;
block|}
name|oldPart
operator|=
name|alterHandler
operator|.
name|alterPartition
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|wh
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|new_part
argument_list|)
expr_stmt|;
comment|// Only fetch the table if we actually have a listener
name|Table
name|table
init|=
literal|null
decl_stmt|;
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|table
operator|=
name|getMS
argument_list|()
operator|.
name|getTable
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|AlterPartitionEvent
name|alterPartitionEvent
init|=
operator|new
name|AlterPartitionEvent
argument_list|(
name|oldPart
argument_list|,
name|new_part
argument_list|,
name|table
argument_list|,
literal|true
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|alterPartitionEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onAlterPartition
argument_list|(
name|alterPartitionEvent
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"alter_partition"
argument_list|,
name|oldPart
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_partitions
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|Partition
argument_list|>
name|new_parts
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"alter_partitions"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Partition
name|tmpPart
range|:
name|new_parts
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New partition values:"
operator|+
name|tmpPart
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// all partitions are altered atomically
comment|// all prehooks are fired together followed by all post hooks
name|List
argument_list|<
name|Partition
argument_list|>
name|oldParts
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|Partition
name|tmpPart
range|:
name|new_parts
control|)
block|{
name|firePreEvent
argument_list|(
operator|new
name|PreAlterPartitionEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
literal|null
argument_list|,
name|tmpPart
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|oldParts
operator|=
name|alterHandler
operator|.
name|alterPartitions
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|wh
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|new_parts
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|olditr
init|=
name|oldParts
operator|.
name|iterator
argument_list|()
decl_stmt|;
comment|// Only fetch the table if we have a listener that needs it.
name|Table
name|table
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Partition
name|tmpPart
range|:
name|new_parts
control|)
block|{
name|Partition
name|oldTmpPart
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|olditr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|oldTmpPart
operator|=
name|olditr
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"failed to alterpartitions"
argument_list|)
throw|;
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|table
operator|=
name|getMS
argument_list|()
operator|.
name|getTable
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
name|AlterPartitionEvent
name|alterPartitionEvent
init|=
operator|new
name|AlterPartitionEvent
argument_list|(
name|oldTmpPart
argument_list|,
name|tmpPart
argument_list|,
name|table
argument_list|,
literal|true
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onAlterPartition
argument_list|(
name|alterPartitionEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"alter_partition"
argument_list|,
name|oldParts
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_index
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|base_table_name
parameter_list|,
specifier|final
name|String
name|index_name
parameter_list|,
specifier|final
name|Index
name|newIndex
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"alter_index"
argument_list|,
literal|": db="
operator|+
name|dbname
operator|+
literal|" base_tbl="
operator|+
name|base_table_name
operator|+
literal|" idx="
operator|+
name|index_name
operator|+
literal|" newidx="
operator|+
name|newIndex
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|newIndex
operator|.
name|putToParameters
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
name|Index
name|oldIndex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|oldIndex
operator|=
name|get_index_by_name
argument_list|(
name|dbname
argument_list|,
name|base_table_name
argument_list|,
name|index_name
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAlterIndexEvent
argument_list|(
name|oldIndex
argument_list|,
name|newIndex
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|getMS
argument_list|()
operator|.
name|alterIndex
argument_list|(
name|dbname
argument_list|,
name|base_table_name
argument_list|,
name|index_name
argument_list|,
name|newIndex
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"alter_index"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|,
name|base_table_name
argument_list|)
expr_stmt|;
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|AlterIndexEvent
name|alterIndexEvent
init|=
operator|new
name|AlterIndexEvent
argument_list|(
name|oldIndex
argument_list|,
name|newIndex
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onAlterIndex
argument_list|(
name|alterIndexEvent
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getVersion
parameter_list|()
throws|throws
name|TException
block|{
name|endFunction
argument_list|(
name|startFunction
argument_list|(
literal|"getVersion"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|"3.0"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_table
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Table
name|newTable
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
block|{
comment|// Do not set an environment context.
name|alter_table_core
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|newTable
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_table_with_cascade
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Table
name|newTable
parameter_list|,
specifier|final
name|boolean
name|cascade
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
block|{
comment|// Do not set an environment context.
name|alter_table_core
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|newTable
argument_list|,
literal|null
argument_list|,
name|cascade
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_table_with_environment_context
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Table
name|newTable
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|alter_table_core
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|newTable
argument_list|,
name|envContext
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|alter_table_core
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Table
name|newTable
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|,
specifier|final
name|boolean
name|cascade
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"alter_table"
argument_list|,
literal|": db="
operator|+
name|dbname
operator|+
literal|" tbl="
operator|+
name|name
operator|+
literal|" newtbl="
operator|+
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update the time if it hasn't been specified.
if|if
condition|(
name|newTable
operator|.
name|getParameters
argument_list|()
operator|==
literal|null
operator|||
name|newTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|)
operator|==
literal|null
condition|)
block|{
name|newTable
operator|.
name|putToParameters
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Table
name|oldt
init|=
name|get_table_core
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAlterTableEvent
argument_list|(
name|oldt
argument_list|,
name|newTable
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|alterHandler
operator|.
name|alterTable
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|wh
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|newTable
argument_list|,
name|cascade
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|AlterTableEvent
name|alterTableEvent
init|=
operator|new
name|AlterTableEvent
argument_list|(
name|oldt
argument_list|,
name|newTable
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|alterTableEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onAlterTable
argument_list|(
name|alterTableEvent
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// thrown when the table to be altered does not exist
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"alter_table"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_tables
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"get_tables"
argument_list|,
literal|": db="
operator|+
name|dbname
operator|+
literal|" pat="
operator|+
name|pattern
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getTables
argument_list|(
name|dbname
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_tables"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_all_tables
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|)
throws|throws
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"get_all_tables"
argument_list|,
literal|": db="
operator|+
name|dbname
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getAllTables
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_all_tables"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_fields
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
return|return
name|get_fields_with_environment_context
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_fields_with_environment_context
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|startFunction
argument_list|(
literal|"get_fields_with_environment_context"
argument_list|,
literal|": db="
operator|+
name|db
operator|+
literal|"tbl="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|String
index|[]
name|names
init|=
name|tableName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
name|base_table_name
init|=
name|names
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|tbl
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
name|ClassLoader
name|orgHiveLoader
init|=
literal|null
decl_stmt|;
name|Configuration
name|curConf
init|=
name|hiveConf
decl_stmt|;
try|try
block|{
try|try
block|{
name|tbl
operator|=
name|get_table_core
argument_list|(
name|db
argument_list|,
name|base_table_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
operator|||
name|hiveConf
operator|.
name|getStringCollection
argument_list|(
name|ConfVars
operator|.
name|SERDESUSINGMETASTOREFORSCHEMA
operator|.
name|varname
argument_list|)
operator|.
name|contains
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|=
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
if|if
condition|(
name|envContext
operator|!=
literal|null
condition|)
block|{
name|String
name|addedJars
init|=
name|envContext
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"hive.added.jars.path"
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|addedJars
argument_list|)
condition|)
block|{
comment|//for thread safe
name|curConf
operator|=
name|getConf
argument_list|()
expr_stmt|;
name|orgHiveLoader
operator|=
name|curConf
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
name|ClassLoader
name|loader
init|=
name|MetaStoreUtils
operator|.
name|addToClassPath
argument_list|(
name|orgHiveLoader
argument_list|,
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|split
argument_list|(
name|addedJars
argument_list|,
literal|","
argument_list|)
argument_list|)
decl_stmt|;
name|curConf
operator|.
name|setClassLoader
argument_list|(
name|loader
argument_list|)
expr_stmt|;
block|}
block|}
name|Deserializer
name|s
init|=
name|MetaStoreUtils
operator|.
name|getDeserializer
argument_list|(
name|curConf
argument_list|,
name|tbl
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ret
operator|=
name|MetaStoreUtils
operator|.
name|getFieldsFromDeserializer
argument_list|(
name|tableName
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|UnknownDBException
condition|)
block|{
throw|throw
operator|(
name|UnknownDBException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|UnknownTableException
condition|)
block|{
throw|throw
operator|(
name|UnknownTableException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|orgHiveLoader
operator|!=
literal|null
condition|)
block|{
name|curConf
operator|.
name|setClassLoader
argument_list|(
name|orgHiveLoader
argument_list|)
expr_stmt|;
block|}
name|endFunction
argument_list|(
literal|"get_fields_with_environment_context"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Return the schema of the table. This function includes partition columns      * in addition to the regular columns.      *      * @param db      *          Name of the database      * @param tableName      *          Name of the table      * @return List of columns, each column is a FieldSchema structure      * @throws MetaException      * @throws UnknownTableException      * @throws UnknownDBException      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_schema
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
return|return
name|get_schema_with_environment_context
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Return the schema of the table. This function includes partition columns      * in addition to the regular columns.      *      * @param db      *          Name of the database      * @param tableName      *          Name of the table      * @param envContext      *          Store session based properties      * @return List of columns, each column is a FieldSchema structure      * @throws MetaException      * @throws UnknownTableException      * @throws UnknownDBException      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_schema_with_environment_context
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|startFunction
argument_list|(
literal|"get_schema_with_environment_context"
argument_list|,
literal|": db="
operator|+
name|db
operator|+
literal|"tbl="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
index|[]
name|names
init|=
name|tableName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
name|base_table_name
init|=
name|names
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|tbl
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|get_table_core
argument_list|(
name|db
argument_list|,
name|base_table_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
init|=
name|get_fields_with_environment_context
argument_list|(
name|db
argument_list|,
name|base_table_name
argument_list|,
name|envContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
operator|||
name|fieldSchemas
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
name|tableName
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Combine the column field schemas and the partition keys to create the
comment|// whole schema
name|fieldSchemas
operator|.
name|addAll
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|fieldSchemas
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|UnknownDBException
condition|)
block|{
throw|throw
operator|(
name|UnknownDBException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|UnknownTableException
condition|)
block|{
throw|throw
operator|(
name|UnknownTableException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_schema_with_environment_context"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCpuProfile
parameter_list|(
name|int
name|profileDurationInSec
parameter_list|)
throws|throws
name|TException
block|{
return|return
literal|""
return|;
block|}
comment|/**      * Returns the value of the given configuration variable name. If the      * configuration variable with the given name doesn't exist, or if there      * were an exception thrown while retrieving the variable, or if name is      * null, defaultValue is returned.      */
annotation|@
name|Override
specifier|public
name|String
name|get_config_value
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|TException
throws|,
name|ConfigValSecurityException
block|{
name|startFunction
argument_list|(
literal|"get_config_value"
argument_list|,
literal|": name="
operator|+
name|name
operator|+
literal|" defaultValue="
operator|+
name|defaultValue
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|defaultValue
return|;
block|}
comment|// Allow only keys that start with hive.*, hdfs.*, mapred.* for security
comment|// i.e. don't allow access to db password
if|if
condition|(
operator|!
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(hive|hdfs|mapred).*"
argument_list|,
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConfigValSecurityException
argument_list|(
literal|"For security reasons, the "
operator|+
literal|"config key "
operator|+
name|name
operator|+
literal|" cannot be accessed"
argument_list|)
throw|;
block|}
name|String
name|toReturn
init|=
name|defaultValue
decl_stmt|;
try|try
block|{
name|toReturn
operator|=
name|hiveConf
operator|.
name|get
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|threadLocalId
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
literal|"RuntimeException thrown in get_config_value - msg: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" cause: "
operator|+
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|toReturn
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ConfigValSecurityException
condition|)
block|{
throw|throw
operator|(
name|ConfigValSecurityException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|TException
name|te
init|=
operator|new
name|TException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|te
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|te
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_config_value"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPartValsFromName
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|partName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
block|{
comment|// Unescape the partition name
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hm
init|=
name|Warehouse
operator|.
name|makeSpecFromName
argument_list|(
name|partName
argument_list|)
decl_stmt|;
comment|// getPartition expects partition values in a list. use info from the
comment|// table to put the partition column values in order
name|Table
name|t
init|=
name|ms
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" table not found"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|t
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|hm
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"incomplete partition name - missing "
operator|+
name|key
argument_list|)
throw|;
block|}
name|partVals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|partVals
return|;
block|}
specifier|private
name|Partition
name|get_partition_by_name_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|fireReadTablePreEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
literal|null
decl_stmt|;
try|try
block|{
name|partVals
operator|=
name|getPartValsFromName
argument_list|(
name|ms
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Partition
name|p
init|=
name|ms
operator|.
name|getPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|db_name
operator|+
literal|"."
operator|+
name|tbl_name
operator|+
literal|" partition ("
operator|+
name|part_name
operator|+
literal|") not found"
argument_list|)
throw|;
block|}
return|return
name|p
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|get_partition_by_name
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"get_partition_by_name"
argument_list|,
literal|": db="
operator|+
name|db_name
operator|+
literal|" tbl="
operator|+
name|tbl_name
operator|+
literal|" part="
operator|+
name|part_name
argument_list|)
expr_stmt|;
name|Partition
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|get_partition_by_name_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partition_by_name"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|append_partition_by_name
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|part_name
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|append_partition_by_name_with_environment_context
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|append_partition_by_name_with_environment_context
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|part_name
parameter_list|,
specifier|final
name|EnvironmentContext
name|env_context
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"append_partition_by_name"
argument_list|,
literal|": db="
operator|+
name|db_name
operator|+
literal|" tbl="
operator|+
name|tbl_name
operator|+
literal|" part="
operator|+
name|part_name
argument_list|)
expr_stmt|;
name|Partition
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|getPartValsFromName
argument_list|(
name|ms
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
decl_stmt|;
name|ret
operator|=
name|append_partition_common
argument_list|(
name|ms
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partVals
argument_list|,
name|env_context
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"append_partition_by_name"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|drop_partition_by_name_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|part_name
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|IOException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
literal|null
decl_stmt|;
try|try
block|{
name|partVals
operator|=
name|getPartValsFromName
argument_list|(
name|ms
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|drop_partition_common
argument_list|(
name|ms
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partVals
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_partition_by_name
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|part_name
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|drop_partition_by_name_with_environment_context
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|,
name|deleteData
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_partition_by_name_with_environment_context
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|part_name
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"drop_partition_by_name"
argument_list|,
literal|": db="
operator|+
name|db_name
operator|+
literal|" tbl="
operator|+
name|tbl_name
operator|+
literal|" part="
operator|+
name|part_name
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|drop_partition_by_name_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_partition_by_name"
argument_list|,
name|ret
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_ps
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
name|startPartitionFunction
argument_list|(
literal|"get_partitions_ps"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|get_partitions_ps_with_auth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_ps"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_ps_with_auth
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|short
name|max_parts
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
name|startPartitionFunction
argument_list|(
literal|"get_partitions_ps_with_auth"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|fireReadTablePreEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|listPartitionsPsWithAuth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_ps_with_auth"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partition_names_ps
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
name|startPartitionFunction
argument_list|(
literal|"get_partitions_names_ps"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|fireReadTablePreEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|listPartitionNamesPs
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_names_ps"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|partition_name_to_vals
parameter_list|(
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|part_name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Warehouse
operator|.
name|makeSpecFromName
argument_list|(
name|part_name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part_vals
operator|.
name|addAll
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|part_vals
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partition_name_to_spec
parameter_list|(
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|part_name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
return|;
block|}
return|return
name|Warehouse
operator|.
name|makeSpecFromName
argument_list|(
name|part_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Index
name|add_index
parameter_list|(
specifier|final
name|Index
name|newIndex
parameter_list|,
specifier|final
name|Table
name|indexTable
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"add_index"
argument_list|,
literal|": "
operator|+
name|newIndex
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|indexTable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Index
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|add_index_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|newIndex
argument_list|,
name|indexTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|String
name|tableName
init|=
name|indexTable
operator|!=
literal|null
condition|?
name|indexTable
operator|.
name|getTableName
argument_list|()
else|:
literal|null
decl_stmt|;
name|endFunction
argument_list|(
literal|"add_index"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Index
name|add_index_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|Index
name|index
parameter_list|,
specifier|final
name|Table
name|indexTable
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|,
name|indexTableCreated
init|=
literal|false
decl_stmt|;
name|String
index|[]
name|qualified
init|=
name|MetaStoreUtils
operator|.
name|getQualifiedName
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getIndexTableName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAddIndexEvent
argument_list|(
name|index
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|Index
name|old_index
init|=
literal|null
decl_stmt|;
try|try
block|{
name|old_index
operator|=
name|get_index_by_name
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
if|if
condition|(
name|old_index
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Index already exists:"
operator|+
name|index
argument_list|)
throw|;
block|}
name|Table
name|origTbl
init|=
name|ms
operator|.
name|getTable
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|origTbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to add index because database or the orginal table do not exist"
argument_list|)
throw|;
block|}
comment|// set create time
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|Table
name|indexTbl
init|=
name|indexTable
decl_stmt|;
if|if
condition|(
name|indexTbl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexTbl
operator|=
name|ms
operator|.
name|getTable
argument_list|(
name|qualified
index|[
literal|0
index|]
argument_list|,
name|qualified
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{           }
if|if
condition|(
name|indexTbl
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to add index because index table already exists"
argument_list|)
throw|;
block|}
name|this
operator|.
name|create_table
argument_list|(
name|indexTable
argument_list|)
expr_stmt|;
name|indexTableCreated
operator|=
literal|true
expr_stmt|;
block|}
name|index
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
name|index
operator|.
name|putToParameters
argument_list|(
name|hive_metastoreConstants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|addIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|index
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|indexTableCreated
condition|)
block|{
try|try
block|{
name|drop_table
argument_list|(
name|qualified
index|[
literal|0
index|]
argument_list|,
name|qualified
index|[
literal|1
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|AddIndexEvent
name|addIndexEvent
init|=
operator|new
name|AddIndexEvent
argument_list|(
name|index
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onAddIndex
argument_list|(
name|addIndexEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_index_by_name
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"drop_index_by_name"
argument_list|,
literal|": db="
operator|+
name|dbName
operator|+
literal|" tbl="
operator|+
name|tblName
operator|+
literal|" index="
operator|+
name|indexName
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|drop_index_by_name_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|indexName
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_index_by_name"
argument_list|,
name|ret
argument_list|,
name|ex
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|drop_index_by_name_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|IOException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Index
name|index
init|=
literal|null
decl_stmt|;
name|Path
name|tblPath
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|partPaths
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
comment|// drop the underlying index table
name|index
operator|=
name|get_index_by_name
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
comment|// throws exception if not exists
name|firePreEvent
argument_list|(
operator|new
name|PreDropIndexEvent
argument_list|(
name|index
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|dropIndex
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|String
name|idxTblName
init|=
name|index
operator|.
name|getIndexTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|idxTblName
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|qualified
init|=
name|MetaStoreUtils
operator|.
name|getQualifiedName
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|idxTblName
argument_list|)
decl_stmt|;
name|Table
name|tbl
init|=
name|get_table_core
argument_list|(
name|qualified
index|[
literal|0
index|]
argument_list|,
name|qualified
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table metadata is corrupted"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tblPath
operator|=
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|tblPath
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Index table metadata not deleted since "
operator|+
name|tblPath
operator|.
name|getParent
argument_list|()
operator|+
literal|" is not writable by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Drop the partitions and get a list of partition locations which need to be deleted
name|partPaths
operator|=
name|dropPartitionsAndGetLocations
argument_list|(
name|ms
argument_list|,
name|qualified
index|[
literal|0
index|]
argument_list|,
name|qualified
index|[
literal|1
index|]
argument_list|,
name|tblPath
argument_list|,
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ms
operator|.
name|dropTable
argument_list|(
name|qualified
index|[
literal|0
index|]
argument_list|,
name|qualified
index|[
literal|1
index|]
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop underlying data table "
operator|+
name|qualified
index|[
literal|0
index|]
operator|+
literal|"."
operator|+
name|qualified
index|[
literal|1
index|]
operator|+
literal|" for index "
operator|+
name|indexName
argument_list|)
throw|;
block|}
block|}
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteData
operator|&&
name|tblPath
operator|!=
literal|null
condition|)
block|{
name|deletePartitionData
argument_list|(
name|partPaths
argument_list|)
expr_stmt|;
name|deleteTableData
argument_list|(
name|tblPath
argument_list|)
expr_stmt|;
comment|// ok even if the data is not deleted
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|DropIndexEvent
name|dropIndexEvent
init|=
operator|new
name|DropIndexEvent
argument_list|(
name|index
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onDropIndex
argument_list|(
name|dropIndexEvent
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|public
name|Index
name|get_index_by_name
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"get_index_by_name"
argument_list|,
literal|": db="
operator|+
name|dbName
operator|+
literal|" tbl="
operator|+
name|tblName
operator|+
literal|" index="
operator|+
name|indexName
argument_list|)
expr_stmt|;
name|Index
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|get_index_by_name_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_index_by_name"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Index
name|get_index_by_name_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|index_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|Index
name|index
init|=
name|ms
operator|.
name|getIndex
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|index_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|db_name
operator|+
literal|"."
operator|+
name|tbl_name
operator|+
literal|" index="
operator|+
name|index_name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|index
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_index_names
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|short
name|maxIndexes
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"get_index_names"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|listIndexNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxIndexes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_index_names"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|get_indexes
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|short
name|maxIndexes
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"get_indexes"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Index
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getIndexes
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxIndexes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_indexes"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|String
name|lowerCaseConvertPartName
parameter_list|(
name|String
name|partName
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|isFirst
init|=
literal|true
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partSpec
init|=
name|Warehouse
operator|.
name|makeEscSpecFromName
argument_list|(
name|partName
argument_list|)
decl_stmt|;
name|String
name|convertedPartName
init|=
operator|new
name|String
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|partSpec
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|partColName
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|partColVal
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isFirst
condition|)
block|{
name|convertedPartName
operator|+=
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|isFirst
operator|=
literal|false
expr_stmt|;
block|}
name|convertedPartName
operator|+=
name|partColName
operator|.
name|toLowerCase
argument_list|()
operator|+
literal|"="
operator|+
name|partColVal
expr_stmt|;
block|}
return|return
name|convertedPartName
return|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnStatistics
name|get_table_column_statistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
throws|,
name|InvalidObjectException
block|{
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|colName
operator|=
name|colName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|startFunction
argument_list|(
literal|"get_column_statistics_by_table: db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tableName
operator|+
literal|" column="
operator|+
name|colName
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|statsObj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|statsObj
operator|=
name|getMS
argument_list|()
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|colName
argument_list|)
argument_list|)
expr_stmt|;
assert|assert
name|statsObj
operator|.
name|getStatsObjSize
argument_list|()
operator|<=
literal|1
assert|;
return|return
name|statsObj
return|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_column_statistics_by_table: "
argument_list|,
name|statsObj
operator|!=
literal|null
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|TableStatsResult
name|get_table_statistics_req
parameter_list|(
name|TableStatsRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|String
name|dbName
init|=
name|request
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|request
operator|.
name|getTblName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|startFunction
argument_list|(
literal|"get_table_statistics_req: db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tblName
argument_list|)
expr_stmt|;
name|TableStatsResult
name|result
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lowerCaseColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|request
operator|.
name|getColNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|request
operator|.
name|getColNames
argument_list|()
control|)
block|{
name|lowerCaseColNames
operator|.
name|add
argument_list|(
name|colName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|ColumnStatistics
name|cs
init|=
name|getMS
argument_list|()
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|lowerCaseColNames
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|TableStatsResult
argument_list|(
operator|(
name|cs
operator|==
literal|null
operator|||
name|cs
operator|.
name|getStatsObj
argument_list|()
operator|==
literal|null
operator|)
condition|?
name|Lists
operator|.
expr|<
name|ColumnStatisticsObj
operator|>
name|newArrayList
argument_list|()
else|:
name|cs
operator|.
name|getStatsObj
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_table_statistics_req: "
argument_list|,
name|result
operator|==
literal|null
argument_list|,
literal|null
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnStatistics
name|get_partition_column_statistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidInputException
throws|,
name|TException
throws|,
name|InvalidObjectException
block|{
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|colName
operator|=
name|colName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|String
name|convertedPartName
init|=
name|lowerCaseConvertPartName
argument_list|(
name|partName
argument_list|)
decl_stmt|;
name|startFunction
argument_list|(
literal|"get_column_statistics_by_partition: db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tableName
operator|+
literal|" partition="
operator|+
name|convertedPartName
operator|+
literal|" column="
operator|+
name|colName
argument_list|)
expr_stmt|;
name|ColumnStatistics
name|statsObj
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|list
init|=
name|getMS
argument_list|()
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|convertedPartName
argument_list|)
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
name|colName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|list
operator|.
name|size
argument_list|()
operator|+
literal|" statistics for single column and partition"
argument_list|)
throw|;
block|}
name|statsObj
operator|=
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_column_statistics_by_partition: "
argument_list|,
name|statsObj
operator|!=
literal|null
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
return|return
name|statsObj
return|;
block|}
annotation|@
name|Override
specifier|public
name|PartitionsStatsResult
name|get_partitions_statistics_req
parameter_list|(
name|PartitionsStatsRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|String
name|dbName
init|=
name|request
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|request
operator|.
name|getTblName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|startFunction
argument_list|(
literal|"get_partitions_statistics_req: db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tblName
argument_list|)
expr_stmt|;
name|PartitionsStatsResult
name|result
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lowerCaseColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|request
operator|.
name|getColNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|request
operator|.
name|getColNames
argument_list|()
control|)
block|{
name|lowerCaseColNames
operator|.
name|add
argument_list|(
name|colName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|lowerCasePartNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|request
operator|.
name|getPartNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|request
operator|.
name|getPartNames
argument_list|()
control|)
block|{
name|lowerCasePartNames
operator|.
name|add
argument_list|(
name|lowerCaseConvertPartName
argument_list|(
name|partName
argument_list|)
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|stats
init|=
name|getMS
argument_list|()
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|lowerCasePartNames
argument_list|,
name|lowerCaseColNames
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatistics
name|stat
range|:
name|stats
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|stat
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getPartName
argument_list|()
argument_list|,
name|stat
operator|.
name|getStatsObj
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
operator|new
name|PartitionsStatsResult
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_statistics_req: "
argument_list|,
name|result
operator|==
literal|null
argument_list|,
literal|null
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|update_table_column_statistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
block|{
name|String
name|dbName
init|=
literal|null
decl_stmt|;
name|String
name|tableName
init|=
literal|null
decl_stmt|;
name|String
name|colName
init|=
literal|null
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
name|colStats
operator|.
name|getStatsDesc
argument_list|()
decl_stmt|;
name|dbName
operator|=
name|statsDesc
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|statsDesc
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|statsDesc
operator|.
name|setLastAnalyzed
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
name|colStats
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|statsObj
range|:
name|statsObjs
control|)
block|{
name|colName
operator|=
name|statsObj
operator|.
name|getColName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|statsObj
operator|.
name|setColName
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|startFunction
argument_list|(
literal|"write_column_statistics:  db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tableName
operator|+
literal|" column="
operator|+
name|colName
argument_list|)
expr_stmt|;
block|}
name|colStats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setStatsObj
argument_list|(
name|statsObjs
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|updateTableColumnStatistics
argument_list|(
name|colStats
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"write_column_statistics: "
argument_list|,
name|ret
operator|!=
literal|false
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|update_partition_column_statistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
block|{
name|String
name|dbName
init|=
literal|null
decl_stmt|;
name|String
name|tableName
init|=
literal|null
decl_stmt|;
name|String
name|partName
init|=
literal|null
decl_stmt|;
name|String
name|colName
init|=
literal|null
decl_stmt|;
name|ColumnStatisticsDesc
name|statsDesc
init|=
name|colStats
operator|.
name|getStatsDesc
argument_list|()
decl_stmt|;
name|dbName
operator|=
name|statsDesc
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|statsDesc
operator|.
name|getTableName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|partName
operator|=
name|lowerCaseConvertPartName
argument_list|(
name|statsDesc
operator|.
name|getPartName
argument_list|()
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|statsDesc
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|statsDesc
operator|.
name|setLastAnalyzed
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|statsObjs
init|=
name|colStats
operator|.
name|getStatsObj
argument_list|()
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|statsObj
range|:
name|statsObjs
control|)
block|{
name|colName
operator|=
name|statsObj
operator|.
name|getColName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|statsObj
operator|.
name|setColName
argument_list|(
name|colName
argument_list|)
expr_stmt|;
name|startFunction
argument_list|(
literal|"write_partition_column_statistics:  db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tableName
operator|+
literal|" part="
operator|+
name|partName
operator|+
literal|"column="
operator|+
name|colName
argument_list|)
expr_stmt|;
block|}
name|colStats
operator|.
name|setStatsDesc
argument_list|(
name|statsDesc
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setStatsObj
argument_list|(
name|statsObjs
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|getPartValsFromName
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|colStats
argument_list|,
name|partVals
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"write_partition_column_statistics: "
argument_list|,
name|ret
operator|!=
literal|false
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|delete_partition_column_statistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|TException
throws|,
name|InvalidInputException
block|{
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|colName
operator|!=
literal|null
condition|)
block|{
name|colName
operator|=
name|colName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|String
name|convertedPartName
init|=
name|lowerCaseConvertPartName
argument_list|(
name|partName
argument_list|)
decl_stmt|;
name|startFunction
argument_list|(
literal|"delete_column_statistics_by_partition: db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tableName
operator|+
literal|" partition="
operator|+
name|convertedPartName
operator|+
literal|" column="
operator|+
name|colName
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|getPartValsFromName
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|convertedPartName
argument_list|)
decl_stmt|;
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|deletePartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|convertedPartName
argument_list|,
name|partVals
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"delete_column_statistics_by_partition: "
argument_list|,
name|ret
operator|!=
literal|false
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|delete_table_column_statistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|TException
throws|,
name|InvalidInputException
block|{
name|dbName
operator|=
name|dbName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|tableName
operator|=
name|tableName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|colName
operator|!=
literal|null
condition|)
block|{
name|colName
operator|=
name|colName
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
block|}
name|startFunction
argument_list|(
literal|"delete_column_statistics_by_table: db="
operator|+
name|dbName
operator|+
literal|" table="
operator|+
name|tableName
operator|+
literal|" column="
operator|+
name|colName
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|deleteTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colName
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"delete_column_statistics_by_table: "
argument_list|,
name|ret
operator|!=
literal|false
argument_list|,
literal|null
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_by_filter
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|String
name|filter
parameter_list|,
specifier|final
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"get_partitions_by_filter"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|fireReadTablePreEvent
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|,
name|maxParts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_by_filter"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|get_part_specs_by_filter
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|String
name|filter
parameter_list|,
specifier|final
name|int
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"get_partitions_by_filter_pspec"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|partitionSpecs
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Table
name|table
init|=
name|get_table_core
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|get_partitions_by_filter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|,
operator|(
name|short
operator|)
name|maxParts
argument_list|)
decl_stmt|;
if|if
condition|(
name|is_partition_spec_grouping_enabled
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|partitionSpecs
operator|=
name|get_partitionspecs_grouped_by_storage_descriptor
argument_list|(
name|table
argument_list|,
name|partitions
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PartitionSpec
name|pSpec
init|=
operator|new
name|PartitionSpec
argument_list|()
decl_stmt|;
name|pSpec
operator|.
name|setPartitionList
argument_list|(
operator|new
name|PartitionListComposingSpec
argument_list|(
name|partitions
argument_list|)
argument_list|)
expr_stmt|;
name|pSpec
operator|.
name|setRootPath
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|pSpec
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|pSpec
operator|.
name|setTableName
argument_list|(
name|tblName
argument_list|)
expr_stmt|;
name|partitionSpecs
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|pSpec
argument_list|)
expr_stmt|;
block|}
return|return
name|partitionSpecs
return|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_by_filter_pspec"
argument_list|,
name|partitionSpecs
operator|!=
literal|null
operator|&&
operator|!
name|partitionSpecs
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|null
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|PartitionsByExprResult
name|get_partitions_by_expr
parameter_list|(
name|PartitionsByExprRequest
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|String
name|dbName
init|=
name|req
operator|.
name|getDbName
argument_list|()
decl_stmt|,
name|tblName
init|=
name|req
operator|.
name|getTblName
argument_list|()
decl_stmt|;
name|startTableFunction
argument_list|(
literal|"get_partitions_by_expr"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|fireReadTablePreEvent
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|PartitionsByExprResult
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|LinkedList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasUnknownPartitions
init|=
name|getMS
argument_list|()
operator|.
name|getPartitionsByExpr
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|req
operator|.
name|getExpr
argument_list|()
argument_list|,
name|req
operator|.
name|getDefaultPartitionName
argument_list|()
argument_list|,
name|req
operator|.
name|getMaxParts
argument_list|()
argument_list|,
name|partitions
argument_list|)
decl_stmt|;
name|ret
operator|=
operator|new
name|PartitionsByExprResult
argument_list|(
name|partitions
argument_list|,
name|hasUnknownPartitions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_by_expr"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|rethrowException
parameter_list|(
name|Exception
name|e
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
comment|// TODO: Both of these are TException, why do we need these separate clauses?
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_by_names
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"get_partitions_by_names"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|fireReadTablePreEvent
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_by_names"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|get_privilege_set
parameter_list|(
name|HiveObjectRef
name|hiveObject
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|firePreEvent
argument_list|(
operator|new
name|PreAuthorizationCallEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|COLUMN
condition|)
block|{
name|String
name|partName
init|=
name|getPartName
argument_list|(
name|hiveObject
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|get_column_privilege_set
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|partName
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|PARTITION
condition|)
block|{
name|String
name|partName
init|=
name|getPartName
argument_list|(
name|hiveObject
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|get_partition_privilege_set
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|DATABASE
condition|)
block|{
return|return
name|this
operator|.
name|get_db_privilege_set
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|TABLE
condition|)
block|{
return|return
name|this
operator|.
name|get_table_privilege_set
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|GLOBAL
condition|)
block|{
return|return
name|this
operator|.
name|get_user_privilege_set
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getPartName
parameter_list|(
name|HiveObjectRef
name|hiveObject
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|partName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partValue
init|=
name|hiveObject
operator|.
name|getPartValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|partValue
operator|!=
literal|null
operator|&&
name|partValue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Table
name|table
init|=
name|get_table_core
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
name|partName
operator|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|partName
return|;
block|}
specifier|private
name|PrincipalPrivilegeSet
name|get_column_privilege_set
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|String
name|partName
parameter_list|,
specifier|final
name|String
name|columnName
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_column_privilege_set"
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getColumnPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|columnName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|PrincipalPrivilegeSet
name|get_db_privilege_set
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_db_privilege_set"
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getDBPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|PrincipalPrivilegeSet
name|get_partition_privilege_set
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|String
name|partName
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_partition_privilege_set"
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartitionPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|PrincipalPrivilegeSet
name|get_table_privilege_set
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_table_privilege_set"
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getTablePrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grant_role
parameter_list|(
specifier|final
name|String
name|roleName
parameter_list|,
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
specifier|final
name|String
name|grantor
parameter_list|,
specifier|final
name|PrincipalType
name|grantorType
parameter_list|,
specifier|final
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"add_role_member"
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAuthorizationCallEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|PUBLIC
operator|.
name|equals
argument_list|(
name|roleName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"No user can be added to "
operator|+
name|PUBLIC
operator|+
literal|". Since all users implictly"
operator|+
literal|" belong to "
operator|+
name|PUBLIC
operator|+
literal|" role."
argument_list|)
throw|;
block|}
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|Role
name|role
init|=
name|ms
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|principalType
operator|==
name|PrincipalType
operator|.
name|ROLE
condition|)
block|{
comment|//check if this grant statement will end up creating a cycle
if|if
condition|(
name|isNewRoleAParent
argument_list|(
name|principalName
argument_list|,
name|roleName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Cannot grant role "
operator|+
name|principalName
operator|+
literal|" to "
operator|+
name|roleName
operator|+
literal|" as "
operator|+
name|roleName
operator|+
literal|" already belongs to the role "
operator|+
name|principalName
operator|+
literal|". (no cycles allowed)"
argument_list|)
throw|;
block|}
block|}
name|ret
operator|=
name|ms
operator|.
name|grantRole
argument_list|(
name|role
argument_list|,
name|principalName
argument_list|,
name|principalType
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Check if newRole is in parent hierarchy of curRole      * @param newRole      * @param curRole      * @return true if newRole is curRole or present in its hierarchy      * @throws MetaException      */
specifier|private
name|boolean
name|isNewRoleAParent
parameter_list|(
name|String
name|newRole
parameter_list|,
name|String
name|curRole
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|newRole
operator|.
name|equals
argument_list|(
name|curRole
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|//do this check recursively on all the parent roles of curRole
name|List
argument_list|<
name|Role
argument_list|>
name|parentRoleMaps
init|=
name|getMS
argument_list|()
operator|.
name|listRoles
argument_list|(
name|curRole
argument_list|,
name|PrincipalType
operator|.
name|ROLE
argument_list|)
decl_stmt|;
for|for
control|(
name|Role
name|parentRole
range|:
name|parentRoleMaps
control|)
block|{
if|if
condition|(
name|isNewRoleAParent
argument_list|(
name|newRole
argument_list|,
name|parentRole
operator|.
name|getRoleName
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Role
argument_list|>
name|list_roles
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_roles"
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAuthorizationCallEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|getMS
argument_list|()
operator|.
name|listRoles
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|create_role
parameter_list|(
specifier|final
name|Role
name|role
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"create_role"
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAuthorizationCallEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|PUBLIC
operator|.
name|equals
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|PUBLIC
operator|+
literal|" role implictly exists. It can't be created."
argument_list|)
throw|;
block|}
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|addRole
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|role
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_role
parameter_list|(
specifier|final
name|String
name|roleName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"drop_role"
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAuthorizationCallEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ADMIN
operator|.
name|equals
argument_list|(
name|roleName
argument_list|)
operator|||
name|PUBLIC
operator|.
name|equals
argument_list|(
name|roleName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|PUBLIC
operator|+
literal|","
operator|+
name|ADMIN
operator|+
literal|" roles can't be dropped."
argument_list|)
throw|;
block|}
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|removeRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_role_names
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_role_names"
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAuthorizationCallEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|listRoleNames
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grant_privileges
parameter_list|(
specifier|final
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"grant_privileges"
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAuthorizationCallEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|grantPrivileges
argument_list|(
name|privileges
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revoke_role
parameter_list|(
specifier|final
name|String
name|roleName
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|revoke_role
argument_list|(
name|roleName
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|revoke_role
parameter_list|(
specifier|final
name|String
name|roleName
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"remove_role_member"
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAuthorizationCallEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|PUBLIC
operator|.
name|equals
argument_list|(
name|roleName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|PUBLIC
operator|+
literal|" role can't be revoked."
argument_list|)
throw|;
block|}
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|Role
name|mRole
init|=
name|ms
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|ret
operator|=
name|ms
operator|.
name|revokeRole
argument_list|(
name|mRole
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|,
name|grantOption
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|GrantRevokeRoleResponse
name|grant_revoke_role
parameter_list|(
name|GrantRevokeRoleRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|GrantRevokeRoleResponse
name|response
init|=
operator|new
name|GrantRevokeRoleResponse
argument_list|()
decl_stmt|;
name|boolean
name|grantOption
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isSetGrantOption
argument_list|()
condition|)
block|{
name|grantOption
operator|=
name|request
operator|.
name|isGrantOption
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|request
operator|.
name|getRequestType
argument_list|()
condition|)
block|{
case|case
name|GRANT
case|:
block|{
name|boolean
name|result
init|=
name|grant_role
argument_list|(
name|request
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|request
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|request
operator|.
name|getPrincipalType
argument_list|()
argument_list|,
name|request
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|request
operator|.
name|getGrantorType
argument_list|()
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
name|response
operator|.
name|setSuccess
argument_list|(
name|result
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REVOKE
case|:
block|{
name|boolean
name|result
init|=
name|revoke_role
argument_list|(
name|request
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|request
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|request
operator|.
name|getPrincipalType
argument_list|()
argument_list|,
name|grantOption
argument_list|)
decl_stmt|;
name|response
operator|.
name|setSuccess
argument_list|(
name|result
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unknown request type "
operator|+
name|request
operator|.
name|getRequestType
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|GrantRevokePrivilegeResponse
name|grant_revoke_privileges
parameter_list|(
name|GrantRevokePrivilegeRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
block|{
name|GrantRevokePrivilegeResponse
name|response
init|=
operator|new
name|GrantRevokePrivilegeResponse
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|request
operator|.
name|getRequestType
argument_list|()
condition|)
block|{
case|case
name|GRANT
case|:
block|{
name|boolean
name|result
init|=
name|grant_privileges
argument_list|(
name|request
operator|.
name|getPrivileges
argument_list|()
argument_list|)
decl_stmt|;
name|response
operator|.
name|setSuccess
argument_list|(
name|result
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|REVOKE
case|:
block|{
name|boolean
name|revokeGrantOption
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|isSetRevokeGrantOption
argument_list|()
condition|)
block|{
name|revokeGrantOption
operator|=
name|request
operator|.
name|isRevokeGrantOption
argument_list|()
expr_stmt|;
block|}
name|boolean
name|result
init|=
name|revoke_privileges
argument_list|(
name|request
operator|.
name|getPrivileges
argument_list|()
argument_list|,
name|revokeGrantOption
argument_list|)
decl_stmt|;
name|response
operator|.
name|setSuccess
argument_list|(
name|result
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unknown request type "
operator|+
name|request
operator|.
name|getRequestType
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revoke_privileges
parameter_list|(
specifier|final
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|revoke_privileges
argument_list|(
name|privileges
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|revoke_privileges
parameter_list|(
specifier|final
name|PrivilegeBag
name|privileges
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"revoke_privileges"
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAuthorizationCallEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|revokePrivileges
argument_list|(
name|privileges
argument_list|,
name|grantOption
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|PrincipalPrivilegeSet
name|get_user_privilege_set
parameter_list|(
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_user_privilege_set"
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getUserPrivilegeSet
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_privileges
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|HiveObjectRef
name|hiveObject
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|firePreEvent
argument_list|(
operator|new
name|PreAuthorizationCallEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|getAllPrivileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|GLOBAL
condition|)
block|{
return|return
name|list_global_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|DATABASE
condition|)
block|{
return|return
name|list_db_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|TABLE
condition|)
block|{
return|return
name|list_table_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|PARTITION
condition|)
block|{
return|return
name|list_partition_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getPartValues
argument_list|()
argument_list|)
return|;
block|}
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|COLUMN
condition|)
block|{
if|if
condition|(
name|hiveObject
operator|.
name|getPartValues
argument_list|()
operator|==
literal|null
operator|||
name|hiveObject
operator|.
name|getPartValues
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|list_table_column_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
return|return
name|list_partition_column_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getPartValues
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|getAllPrivileges
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|TException
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|privs
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
name|privs
operator|.
name|addAll
argument_list|(
name|list_global_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
argument_list|)
expr_stmt|;
name|privs
operator|.
name|addAll
argument_list|(
name|list_db_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|privs
operator|.
name|addAll
argument_list|(
name|list_table_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|privs
operator|.
name|addAll
argument_list|(
name|list_partition_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|privs
operator|.
name|addAll
argument_list|(
name|list_table_column_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|privs
operator|.
name|addAll
argument_list|(
name|list_partition_column_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|privs
return|;
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_table_column_privileges
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|String
name|columnName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_table_column_privileges"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
return|return
name|getMS
argument_list|()
operator|.
name|listPrincipalTableColumnGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
if|if
condition|(
name|principalName
operator|==
literal|null
condition|)
block|{
return|return
name|getMS
argument_list|()
operator|.
name|listTableColumnGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|getMS
argument_list|()
operator|.
name|listPrincipalTableColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_partition_column_privileges
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
specifier|final
name|String
name|columnName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_partition_column_privileges"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
return|return
name|getMS
argument_list|()
operator|.
name|listPrincipalPartitionColumnGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
name|Table
name|tbl
init|=
name|get_table_core
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partValues
argument_list|)
decl_stmt|;
if|if
condition|(
name|principalName
operator|==
literal|null
condition|)
block|{
return|return
name|getMS
argument_list|()
operator|.
name|listPartitionColumnGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|getMS
argument_list|()
operator|.
name|listPrincipalPartitionColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
name|partName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_db_privileges
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_security_db_grant"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
return|return
name|getMS
argument_list|()
operator|.
name|listPrincipalDBGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
if|if
condition|(
name|principalName
operator|==
literal|null
condition|)
block|{
return|return
name|getMS
argument_list|()
operator|.
name|listDBGrantsAll
argument_list|(
name|dbName
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getMS
argument_list|()
operator|.
name|listPrincipalDBGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_partition_privileges
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_security_partition_grant"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
return|return
name|getMS
argument_list|()
operator|.
name|listPrincipalPartitionGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
name|Table
name|tbl
init|=
name|get_table_core
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partValues
argument_list|)
decl_stmt|;
if|if
condition|(
name|principalName
operator|==
literal|null
condition|)
block|{
return|return
name|getMS
argument_list|()
operator|.
name|listPartitionGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
return|;
block|}
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|getMS
argument_list|()
operator|.
name|listPrincipalPartitionGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
name|partName
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_table_privileges
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_security_table_grant"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
condition|)
block|{
return|return
name|getMS
argument_list|()
operator|.
name|listPrincipalTableGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
if|if
condition|(
name|principalName
operator|==
literal|null
condition|)
block|{
return|return
name|getMS
argument_list|()
operator|.
name|listTableGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|getMS
argument_list|()
operator|.
name|listAllTableGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_global_privileges
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_security_user_grant"
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|principalName
operator|==
literal|null
condition|)
block|{
return|return
name|getMS
argument_list|()
operator|.
name|listGlobalGrantsAll
argument_list|()
return|;
block|}
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|getMS
argument_list|()
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancel_delegation_token
parameter_list|(
name|String
name|token_str_form
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"cancel_delegation_token"
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HiveMetaStore
operator|.
name|cancelDelegationToken
argument_list|(
name|token_str_form
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"cancel_delegation_token"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|renew_delegation_token
parameter_list|(
name|String
name|token_str_form
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"renew_delegation_token"
argument_list|)
expr_stmt|;
name|Long
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|HiveMetaStore
operator|.
name|renewDelegationToken
argument_list|(
name|token_str_form
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"renew_delegation_token"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get_delegation_token
parameter_list|(
name|String
name|token_owner
parameter_list|,
name|String
name|renewer_kerberos_principal_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"get_delegation_token"
argument_list|)
expr_stmt|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|HiveMetaStore
operator|.
name|getDelegationToken
argument_list|(
name|token_owner
argument_list|,
name|renewer_kerberos_principal_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_delegation_token"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|markPartitionForEvent
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
specifier|final
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
throws|,
name|UnknownDBException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|startPartitionFunction
argument_list|(
literal|"markPartitionForEvent"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partName
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreLoadPartitionDoneEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partName
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|getMS
argument_list|()
operator|.
name|markPartitionForEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partName
argument_list|,
name|evtType
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|tbl
condition|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
literal|"Table: "
operator|+
name|tbl_name
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
else|else
block|{
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onLoadPartitionDone
argument_list|(
operator|new
name|LoadPartitionDoneEvent
argument_list|(
literal|true
argument_list|,
name|tbl
argument_list|,
name|partName
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|original
parameter_list|)
block|{
name|ex
operator|=
name|original
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception caught in mark partition event "
argument_list|,
name|original
argument_list|)
expr_stmt|;
if|if
condition|(
name|original
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|UnknownTableException
condition|)
block|{
throw|throw
operator|(
name|UnknownTableException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|UnknownDBException
condition|)
block|{
throw|throw
operator|(
name|UnknownDBException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|UnknownPartitionException
condition|)
block|{
throw|throw
operator|(
name|UnknownPartitionException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|InvalidPartitionException
condition|)
block|{
throw|throw
operator|(
name|InvalidPartitionException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|original
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|original
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"markPartitionForEvent"
argument_list|,
name|tbl
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
specifier|final
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|UnknownDBException
throws|,
name|UnknownTableException
throws|,
name|TException
throws|,
name|UnknownPartitionException
throws|,
name|InvalidPartitionException
block|{
name|startPartitionFunction
argument_list|(
literal|"isPartitionMarkedForEvent"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partName
argument_list|)
expr_stmt|;
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|isPartitionMarkedForEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partName
argument_list|,
name|evtType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|original
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception caught for isPartitionMarkedForEvent "
argument_list|,
name|original
argument_list|)
expr_stmt|;
name|ex
operator|=
name|original
expr_stmt|;
if|if
condition|(
name|original
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|UnknownTableException
condition|)
block|{
throw|throw
operator|(
name|UnknownTableException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|UnknownDBException
condition|)
block|{
throw|throw
operator|(
name|UnknownDBException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|UnknownPartitionException
condition|)
block|{
throw|throw
operator|(
name|UnknownPartitionException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|InvalidPartitionException
condition|)
block|{
throw|throw
operator|(
name|InvalidPartitionException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|original
throw|;
block|}
else|else
block|{
throw|throw
name|newMetaException
argument_list|(
name|original
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"isPartitionMarkedForEvent"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|set_ugi
parameter_list|(
name|String
name|username
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|groupNames
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|groupNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|partition_name_has_valid_characters
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|throw_exception
parameter_list|)
throws|throws
name|TException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"partition_name_has_valid_characters"
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|throw_exception
condition|)
block|{
name|MetaStoreUtils
operator|.
name|validatePartitionNameCharacters
argument_list|(
name|part_vals
argument_list|,
name|partitionValidationPattern
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|MetaStoreUtils
operator|.
name|partitionNameHasValidCharacters
argument_list|(
name|part_vals
argument_list|,
name|partitionValidationPattern
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|endFunction
argument_list|(
literal|"partition_name_has_valid_characters"
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
specifier|private
specifier|static
name|MetaException
name|newMetaException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
return|return
operator|(
name|MetaException
operator|)
name|e
return|;
block|}
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
name|me
return|;
block|}
specifier|private
name|void
name|validateFunctionInfo
parameter_list|(
name|Function
name|func
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|validateName
argument_list|(
name|func
operator|.
name|getFunctionName
argument_list|()
argument_list|,
literal|null
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|func
operator|.
name|getFunctionName
argument_list|()
operator|+
literal|" is not a valid object name"
argument_list|)
throw|;
block|}
name|String
name|className
init|=
name|func
operator|.
name|getClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Function class name cannot be null"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|create_function
parameter_list|(
name|Function
name|func
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|validateFunctionInfo
argument_list|(
name|func
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|Database
name|db
init|=
name|ms
operator|.
name|getDatabase
argument_list|(
name|func
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"The database "
operator|+
name|func
operator|.
name|getDbName
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|Function
name|existingFunc
init|=
name|ms
operator|.
name|getFunction
argument_list|(
name|func
operator|.
name|getDbName
argument_list|()
argument_list|,
name|func
operator|.
name|getFunctionName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingFunc
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Function "
operator|+
name|func
operator|.
name|getFunctionName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
comment|// set create time
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|func
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
name|ms
operator|.
name|createFunction
argument_list|(
name|func
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|drop_function
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Function
name|func
init|=
literal|null
decl_stmt|;
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|func
operator|=
name|ms
operator|.
name|getFunction
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
if|if
condition|(
name|func
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Function "
operator|+
name|funcName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
name|ms
operator|.
name|dropFunction
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_function
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|,
name|Function
name|newFunc
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|validateFunctionInfo
argument_list|(
name|newFunc
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|ms
operator|.
name|alterFunction
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|,
name|newFunc
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_functions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"get_functions"
argument_list|,
literal|": db="
operator|+
name|dbName
operator|+
literal|" pat="
operator|+
name|pattern
argument_list|)
expr_stmt|;
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|funcNames
init|=
literal|null
decl_stmt|;
try|try
block|{
name|funcNames
operator|=
name|ms
operator|.
name|getFunctions
argument_list|(
name|dbName
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_functions"
argument_list|,
name|funcNames
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|funcNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|GetAllFunctionsResponse
name|get_all_functions
parameter_list|()
throws|throws
name|MetaException
block|{
name|GetAllFunctionsResponse
name|response
init|=
operator|new
name|GetAllFunctionsResponse
argument_list|()
decl_stmt|;
name|startFunction
argument_list|(
literal|"get_all_functions"
argument_list|)
expr_stmt|;
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Function
argument_list|>
name|allFunctions
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|allFunctions
operator|=
name|ms
operator|.
name|getAllFunctions
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_all_functions"
argument_list|,
name|allFunctions
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|setFunctions
argument_list|(
name|allFunctions
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|Function
name|get_function
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"get_function"
argument_list|,
literal|": "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|funcName
argument_list|)
expr_stmt|;
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|Function
name|func
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|func
operator|=
name|ms
operator|.
name|getFunction
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
if|if
condition|(
name|func
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Function "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|funcName
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
name|newMetaException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_function"
argument_list|,
name|func
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|func
return|;
block|}
comment|// Transaction and locking methods
annotation|@
name|Override
specifier|public
name|GetOpenTxnsResponse
name|get_open_txns
parameter_list|()
throws|throws
name|TException
block|{
return|return
name|getTxnHandler
argument_list|()
operator|.
name|getOpenTxns
argument_list|()
return|;
block|}
comment|// Transaction and locking methods
annotation|@
name|Override
specifier|public
name|GetOpenTxnsInfoResponse
name|get_open_txns_info
parameter_list|()
throws|throws
name|TException
block|{
return|return
name|getTxnHandler
argument_list|()
operator|.
name|getOpenTxnsInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|OpenTxnsResponse
name|open_txns
parameter_list|(
name|OpenTxnRequest
name|rqst
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|getTxnHandler
argument_list|()
operator|.
name|openTxns
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abort_txn
parameter_list|(
name|AbortTxnRequest
name|rqst
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TException
block|{
name|getTxnHandler
argument_list|()
operator|.
name|abortTxn
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commit_txn
parameter_list|(
name|CommitTxnRequest
name|rqst
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
block|{
name|getTxnHandler
argument_list|()
operator|.
name|commitTxn
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|LockResponse
name|lock
parameter_list|(
name|LockRequest
name|rqst
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
block|{
return|return
name|getTxnHandler
argument_list|()
operator|.
name|lock
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LockResponse
name|check_lock
parameter_list|(
name|CheckLockRequest
name|rqst
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|NoSuchLockException
throws|,
name|TException
block|{
return|return
name|getTxnHandler
argument_list|()
operator|.
name|checkLock
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlock
parameter_list|(
name|UnlockRequest
name|rqst
parameter_list|)
throws|throws
name|NoSuchLockException
throws|,
name|TxnOpenException
throws|,
name|TException
block|{
name|getTxnHandler
argument_list|()
operator|.
name|unlock
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ShowLocksResponse
name|show_locks
parameter_list|(
name|ShowLocksRequest
name|rqst
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|getTxnHandler
argument_list|()
operator|.
name|showLocks
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|heartbeat
parameter_list|(
name|HeartbeatRequest
name|ids
parameter_list|)
throws|throws
name|NoSuchLockException
throws|,
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
block|{
name|getTxnHandler
argument_list|()
operator|.
name|heartbeat
argument_list|(
name|ids
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HeartbeatTxnRangeResponse
name|heartbeat_txn_range
parameter_list|(
name|HeartbeatTxnRangeRequest
name|rqst
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|getTxnHandler
argument_list|()
operator|.
name|heartbeatTxnRange
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|compact
parameter_list|(
name|CompactionRequest
name|rqst
parameter_list|)
throws|throws
name|TException
block|{
name|getTxnHandler
argument_list|()
operator|.
name|compact
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ShowCompactResponse
name|show_compact
parameter_list|(
name|ShowCompactRequest
name|rqst
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|getTxnHandler
argument_list|()
operator|.
name|showCompact
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flushCache
parameter_list|()
throws|throws
name|TException
block|{
name|getMS
argument_list|()
operator|.
name|flushCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add_dynamic_partitions
parameter_list|(
name|AddDynamicPartitions
name|rqst
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
block|{
name|getTxnHandler
argument_list|()
operator|.
name|addDynamicPartitions
argument_list|(
name|rqst
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|GetPrincipalsInRoleResponse
name|get_principals_in_role
parameter_list|(
name|GetPrincipalsInRoleRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_principals_in_role"
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAuthorizationCallEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
name|GetPrincipalsInRoleResponse
name|response
init|=
literal|null
decl_stmt|;
try|try
block|{
name|response
operator|=
operator|new
name|GetPrincipalsInRoleResponse
argument_list|(
name|getMS
argument_list|()
operator|.
name|listRoleMembers
argument_list|(
name|request
operator|.
name|getRoleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_principals_in_role"
argument_list|,
name|ex
operator|==
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|response
return|;
block|}
annotation|@
name|Override
specifier|public
name|GetRoleGrantsForPrincipalResponse
name|get_role_grants_for_principal
parameter_list|(
name|GetRoleGrantsForPrincipalRequest
name|request
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_role_grants_for_principal"
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAuthorizationCallEvent
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|roleMaps
init|=
literal|null
decl_stmt|;
try|try
block|{
name|roleMaps
operator|=
name|getMS
argument_list|()
operator|.
name|listRolesWithGrants
argument_list|(
name|request
operator|.
name|getPrincipal_name
argument_list|()
argument_list|,
name|request
operator|.
name|getPrincipal_type
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
name|rethrowException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_role_grants_for_principal"
argument_list|,
name|ex
operator|==
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
comment|//List<RolePrincipalGrant> roleGrantsList = getRolePrincipalGrants(roleMaps);
return|return
operator|new
name|GetRoleGrantsForPrincipalResponse
argument_list|(
name|roleMaps
argument_list|)
return|;
block|}
comment|/**      * Convert each MRoleMap object into a thrift RolePrincipalGrant object      * @param roles      * @return      */
specifier|private
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|getRolePrincipalGrants
parameter_list|(
name|List
argument_list|<
name|Role
argument_list|>
name|roles
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|rolePrinGrantList
init|=
operator|new
name|ArrayList
argument_list|<
name|RolePrincipalGrant
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|roles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Role
name|role
range|:
name|roles
control|)
block|{
name|rolePrinGrantList
operator|.
name|addAll
argument_list|(
name|getMS
argument_list|()
operator|.
name|listRoleMembers
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rolePrinGrantList
return|;
block|}
annotation|@
name|Override
specifier|public
name|AggrStats
name|get_aggr_stats_for
parameter_list|(
name|PartitionsStatsRequest
name|request
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|String
name|dbName
init|=
name|request
operator|.
name|getDbName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|String
name|tblName
init|=
name|request
operator|.
name|getTblName
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
name|startFunction
argument_list|(
literal|"get_aggr_stats_for: db="
operator|+
name|request
operator|.
name|getDbName
argument_list|()
operator|+
literal|" table="
operator|+
name|request
operator|.
name|getTblName
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|lowerCaseColNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|request
operator|.
name|getColNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|request
operator|.
name|getColNames
argument_list|()
control|)
block|{
name|lowerCaseColNames
operator|.
name|add
argument_list|(
name|colName
operator|.
name|toLowerCase
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|lowerCasePartNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|request
operator|.
name|getPartNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|request
operator|.
name|getPartNames
argument_list|()
control|)
block|{
name|lowerCasePartNames
operator|.
name|add
argument_list|(
name|lowerCaseConvertPartName
argument_list|(
name|partName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AggrStats
name|aggrStats
init|=
literal|null
decl_stmt|;
try|try
block|{
name|aggrStats
operator|=
operator|new
name|AggrStats
argument_list|(
name|getMS
argument_list|()
operator|.
name|get_aggr_stats_for
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|lowerCasePartNames
argument_list|,
name|lowerCaseColNames
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|aggrStats
return|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_statistics_req: "
argument_list|,
name|aggrStats
operator|==
literal|null
argument_list|,
literal|null
argument_list|,
name|request
operator|.
name|getTblName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|set_aggr_stats_for
parameter_list|(
name|SetPartitionsStatsRequest
name|request
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|InvalidInputException
throws|,
name|TException
block|{
name|boolean
name|ret
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ColumnStatistics
name|colStats
range|:
name|request
operator|.
name|getColStats
argument_list|()
control|)
block|{
name|ret
operator|=
name|ret
operator|&&
name|update_partition_column_statistics
argument_list|(
name|colStats
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|NotificationEventResponse
name|get_next_notification
parameter_list|(
name|NotificationEventRequest
name|rqst
parameter_list|)
throws|throws
name|TException
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
return|return
name|ms
operator|.
name|getNextNotification
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CurrentNotificationEventId
name|get_current_notificationEventId
parameter_list|()
throws|throws
name|TException
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
return|return
name|ms
operator|.
name|getCurrentNotificationEventId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|FireEventResponse
name|fire_listener_event
parameter_list|(
name|FireEventRequest
name|rqst
parameter_list|)
throws|throws
name|TException
block|{
switch|switch
condition|(
name|rqst
operator|.
name|getData
argument_list|()
operator|.
name|getSetField
argument_list|()
condition|)
block|{
case|case
name|INSERT_DATA
case|:
name|InsertEvent
name|event
init|=
operator|new
name|InsertEvent
argument_list|(
name|rqst
operator|.
name|getDbName
argument_list|()
argument_list|,
name|rqst
operator|.
name|getTableName
argument_list|()
argument_list|,
name|rqst
operator|.
name|getPartitionVals
argument_list|()
argument_list|,
name|rqst
operator|.
name|getData
argument_list|()
operator|.
name|getInsertData
argument_list|()
operator|.
name|getFilesAdded
argument_list|()
argument_list|,
name|rqst
operator|.
name|isSuccessful
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onInsert
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|FireEventResponse
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|TException
argument_list|(
literal|"Event type "
operator|+
name|rqst
operator|.
name|getData
argument_list|()
operator|.
name|getSetField
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" not currently supported."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|GetFileMetadataByExprResult
name|get_file_metadata_by_expr
parameter_list|(
name|GetFileMetadataByExprRequest
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|GetFileMetadataByExprResult
name|result
init|=
operator|new
name|GetFileMetadataByExprResult
argument_list|()
decl_stmt|;
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ms
operator|.
name|isFileMetadataSupported
argument_list|()
condition|)
block|{
name|result
operator|.
name|setIsSupported
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|result
operator|.
name|setMetadata
argument_list|(
name|EMPTY_MAP_FM2
argument_list|)
expr_stmt|;
comment|// Set the required field.
return|return
name|result
return|;
block|}
name|result
operator|.
name|setIsSupported
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
init|=
name|req
operator|.
name|getFileIds
argument_list|()
decl_stmt|;
name|boolean
name|needMetadata
init|=
operator|!
name|req
operator|.
name|isSetDoGetFooters
argument_list|()
operator|||
name|req
operator|.
name|isDoGetFooters
argument_list|()
decl_stmt|;
name|FileMetadataExprType
name|type
init|=
name|req
operator|.
name|isSetType
argument_list|()
condition|?
name|req
operator|.
name|getType
argument_list|()
else|:
name|FileMetadataExprType
operator|.
name|ORC_SARG
decl_stmt|;
name|ByteBuffer
index|[]
name|metadatas
init|=
name|needMetadata
condition|?
operator|new
name|ByteBuffer
index|[
name|fileIds
operator|.
name|size
argument_list|()
index|]
else|:
literal|null
decl_stmt|;
name|ByteBuffer
index|[]
name|ppdResults
init|=
operator|new
name|ByteBuffer
index|[
name|fileIds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|boolean
index|[]
name|eliminated
init|=
operator|new
name|boolean
index|[
name|fileIds
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|getMS
argument_list|()
operator|.
name|getFileMetadataByExpr
argument_list|(
name|fileIds
argument_list|,
name|type
argument_list|,
name|req
operator|.
name|getExpr
argument_list|()
argument_list|,
name|metadatas
argument_list|,
name|ppdResults
argument_list|,
name|eliminated
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadatas
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|long
name|fileId
init|=
name|fileIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ByteBuffer
name|metadata
init|=
name|metadatas
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
continue|continue;
name|metadata
operator|=
operator|(
name|eliminated
index|[
name|i
index|]
operator|||
operator|!
name|needMetadata
operator|)
condition|?
literal|null
else|:
name|handleReadOnlyBufferForThrift
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|MetadataPpdResult
name|mpr
init|=
operator|new
name|MetadataPpdResult
argument_list|()
decl_stmt|;
name|ByteBuffer
name|bitset
init|=
name|eliminated
index|[
name|i
index|]
condition|?
literal|null
else|:
name|handleReadOnlyBufferForThrift
argument_list|(
name|ppdResults
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|mpr
operator|.
name|setMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|mpr
operator|.
name|setIncludeBitset
argument_list|(
name|bitset
argument_list|)
expr_stmt|;
name|result
operator|.
name|putToMetadata
argument_list|(
name|fileId
argument_list|,
name|mpr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|isSetMetadata
argument_list|()
condition|)
block|{
name|result
operator|.
name|setMetadata
argument_list|(
name|EMPTY_MAP_FM2
argument_list|)
expr_stmt|;
comment|// Set the required field.
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|Long
argument_list|,
name|ByteBuffer
argument_list|>
name|EMPTY_MAP_FM1
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|Long
argument_list|,
name|MetadataPpdResult
argument_list|>
name|EMPTY_MAP_FM2
init|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|MetadataPpdResult
argument_list|>
argument_list|(
literal|1
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|GetFileMetadataResult
name|get_file_metadata
parameter_list|(
name|GetFileMetadataRequest
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|GetFileMetadataResult
name|result
init|=
operator|new
name|GetFileMetadataResult
argument_list|()
decl_stmt|;
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ms
operator|.
name|isFileMetadataSupported
argument_list|()
condition|)
block|{
name|result
operator|.
name|setIsSupported
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|result
operator|.
name|setMetadata
argument_list|(
name|EMPTY_MAP_FM1
argument_list|)
expr_stmt|;
comment|// Set the required field.
return|return
name|result
return|;
block|}
name|result
operator|.
name|setIsSupported
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
init|=
name|req
operator|.
name|getFileIds
argument_list|()
decl_stmt|;
name|ByteBuffer
index|[]
name|metadatas
init|=
name|ms
operator|.
name|getFileMetadata
argument_list|(
name|fileIds
argument_list|)
decl_stmt|;
assert|assert
name|metadatas
operator|.
name|length
operator|==
name|fileIds
operator|.
name|size
argument_list|()
assert|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metadatas
operator|.
name|length
condition|;
operator|++
name|i
control|)
block|{
name|ByteBuffer
name|bb
init|=
name|metadatas
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|bb
operator|==
literal|null
condition|)
continue|continue;
name|bb
operator|=
name|handleReadOnlyBufferForThrift
argument_list|(
name|bb
argument_list|)
expr_stmt|;
name|result
operator|.
name|putToMetadata
argument_list|(
name|fileIds
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|bb
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|result
operator|.
name|isSetMetadata
argument_list|()
condition|)
block|{
name|result
operator|.
name|setMetadata
argument_list|(
name|EMPTY_MAP_FM1
argument_list|)
expr_stmt|;
comment|// Set the required field.
block|}
return|return
name|result
return|;
block|}
specifier|private
name|ByteBuffer
name|handleReadOnlyBufferForThrift
parameter_list|(
name|ByteBuffer
name|bb
parameter_list|)
block|{
if|if
condition|(
operator|!
name|bb
operator|.
name|isReadOnly
argument_list|()
condition|)
return|return
name|bb
return|;
comment|// Thrift cannot write read-only buffers... oh well.
comment|// TODO: actually thrift never writes to the buffer, so we could use reflection to
comment|//       unset the unnecessary read-only flag if allocation/copy perf becomes a problem.
name|ByteBuffer
name|copy
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|bb
operator|.
name|capacity
argument_list|()
argument_list|)
decl_stmt|;
name|copy
operator|.
name|put
argument_list|(
name|bb
argument_list|)
expr_stmt|;
name|copy
operator|.
name|flip
argument_list|()
expr_stmt|;
return|return
name|copy
return|;
block|}
annotation|@
name|Override
specifier|public
name|PutFileMetadataResult
name|put_file_metadata
parameter_list|(
name|PutFileMetadataRequest
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|.
name|isFileMetadataSupported
argument_list|()
condition|)
block|{
name|ms
operator|.
name|putFileMetadata
argument_list|(
name|req
operator|.
name|getFileIds
argument_list|()
argument_list|,
name|req
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PutFileMetadataResult
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClearFileMetadataResult
name|clear_file_metadata
parameter_list|(
name|ClearFileMetadataRequest
name|req
parameter_list|)
throws|throws
name|TException
block|{
name|getMS
argument_list|()
operator|.
name|putFileMetadata
argument_list|(
name|req
operator|.
name|getFileIds
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
operator|new
name|ClearFileMetadataResult
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|IHMSHandler
name|newRetryingHMSHandler
parameter_list|(
name|IHMSHandler
name|baseHandler
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|newRetryingHMSHandler
argument_list|(
name|baseHandler
argument_list|,
name|hiveConf
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|IHMSHandler
name|newRetryingHMSHandler
parameter_list|(
name|IHMSHandler
name|baseHandler
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|,
name|boolean
name|local
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|RetryingHMSHandler
operator|.
name|getProxy
argument_list|(
name|hiveConf
argument_list|,
name|baseHandler
argument_list|,
name|local
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Iface
name|newRetryingHMSHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|boolean
name|local
parameter_list|)
throws|throws
name|MetaException
block|{
name|HMSHandler
name|baseHandler
init|=
operator|new
name|HiveMetaStore
operator|.
name|HMSHandler
argument_list|(
name|name
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|RetryingHMSHandler
operator|.
name|getProxy
argument_list|(
name|conf
argument_list|,
name|baseHandler
argument_list|,
name|local
argument_list|)
return|;
block|}
comment|/**    * Discard a current delegation token.    *    * @param tokenStrForm    *          the token in string form    */
specifier|public
specifier|static
name|void
name|cancelDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|IOException
block|{
name|saslServer
operator|.
name|cancelDelegationToken
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a new delegation token.    *    * @param renewer    *          the designated renewer    */
specifier|public
specifier|static
name|String
name|getDelegationToken
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|saslServer
operator|.
name|getDelegationToken
argument_list|(
name|owner
argument_list|,
name|renewer
argument_list|)
return|;
block|}
comment|/**    * @return true if remote metastore has been created    */
specifier|public
specifier|static
name|boolean
name|isMetaStoreRemote
parameter_list|()
block|{
return|return
name|isMetaStoreRemote
return|;
block|}
comment|/**    * Renew a delegation token to extend its lifetime.    *    * @param tokenStrForm    *          the token in string form    */
specifier|public
specifier|static
name|long
name|renewDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|saslServer
operator|.
name|renewDelegationToken
argument_list|(
name|tokenStrForm
argument_list|)
return|;
block|}
comment|/**    * HiveMetaStore specific CLI    *    */
specifier|static
specifier|public
class|class
name|HiveMetastoreCli
extends|extends
name|CommonCliOptions
block|{
specifier|private
name|int
name|port
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|public
name|HiveMetastoreCli
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
block|{
name|super
argument_list|(
literal|"hivemetastore"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|configuration
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_SERVER_PORT
argument_list|)
expr_stmt|;
comment|// -p port
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"port"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Hive Metastore port number, default:"
operator|+
name|this
operator|.
name|port
argument_list|)
operator|.
name|create
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|super
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// support the old syntax "hivemetastore [port]" but complain
name|args
operator|=
name|commandLine
operator|.
name|getArgs
argument_list|()
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// complain about the deprecated syntax -- but still run
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"This usage has been deprecated, consider using the new command "
operator|+
literal|"line syntax (run with -h to see usage information)"
argument_list|)
expr_stmt|;
name|this
operator|.
name|port
operator|=
operator|new
name|Integer
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// notice that command line options take precedence over the
comment|// deprecated (old style) naked args...
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'p'
argument_list|)
condition|)
block|{
name|this
operator|.
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// legacy handling
name|String
name|metastorePort
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"METASTORE_PORT"
argument_list|)
decl_stmt|;
if|if
condition|(
name|metastorePort
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|metastorePort
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|this
operator|.
name|port
return|;
block|}
block|}
comment|/**    * @param args    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|HiveConf
operator|.
name|setLoadMetastoreConfig
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|HMSHandler
operator|.
name|class
argument_list|)
decl_stmt|;
name|HiveMetastoreCli
name|cli
init|=
operator|new
name|HiveMetastoreCli
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|cli
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|isCliVerbose
init|=
name|cli
operator|.
name|isVerbose
argument_list|()
decl_stmt|;
comment|// NOTE: It is critical to do this prior to initializing log4j, otherwise
comment|// any log specific settings via hiveconf will be ignored
name|Properties
name|hiveconf
init|=
name|cli
operator|.
name|addHiveconfToSystemProperties
argument_list|()
decl_stmt|;
comment|// If the log4j.configuration property hasn't already been explicitly set,
comment|// use Hive's default log4j configuration
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"log4j.configurationFile"
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// NOTE: It is critical to do this here so that log4j is reinitialized
comment|// before any of the other core hive classes are loaded
try|try
block|{
name|LogUtils
operator|.
name|initHiveLog4j
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LogInitializationException
name|e
parameter_list|)
block|{
name|HMSHandler
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|String
name|msg
init|=
literal|"Starting hive metastore on port "
operator|+
name|cli
operator|.
name|port
decl_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|cli
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
comment|// set all properties specified on the command line
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|item
range|:
name|hiveconf
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
operator|(
name|String
operator|)
name|item
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add shutdown hook.
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|shutdownMsg
init|=
literal|"Shutting down hive metastore."
decl_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|shutdownMsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCliVerbose
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|shutdownMsg
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_METRICS
argument_list|)
condition|)
block|{
try|try
block|{
name|MetricsFactory
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"error in Metrics deinit: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
argument_list|)
expr_stmt|;
comment|//Start Metrics for Standalone (Remote) Mode
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_METRICS
argument_list|)
condition|)
block|{
try|try
block|{
name|MetricsFactory
operator|.
name|init
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// log exception, but ignore inability to start
name|LOG
operator|.
name|error
argument_list|(
literal|"error in Metrics init: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|Lock
name|startLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
name|Condition
name|startCondition
init|=
name|startLock
operator|.
name|newCondition
argument_list|()
decl_stmt|;
name|AtomicBoolean
name|startedServing
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|startMetaStoreThreads
argument_list|(
name|conf
argument_list|,
name|startLock
argument_list|,
name|startCondition
argument_list|,
name|startedServing
argument_list|)
expr_stmt|;
name|startMetaStore
argument_list|(
name|cli
operator|.
name|getPort
argument_list|()
argument_list|,
name|ShimLoader
operator|.
name|getHadoopThriftAuthBridge
argument_list|()
argument_list|,
name|conf
argument_list|,
name|startLock
argument_list|,
name|startCondition
argument_list|,
name|startedServing
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Catch the exception, log it and rethrow it.
name|HMSHandler
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Metastore Thrift Server threw an exception..."
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
comment|/**    * Start Metastore based on a passed {@link HadoopThriftAuthBridge}    *    * @param port    * @param bridge    * @throws Throwable    */
specifier|public
specifier|static
name|void
name|startMetaStore
parameter_list|(
name|int
name|port
parameter_list|,
name|HadoopThriftAuthBridge
name|bridge
parameter_list|)
throws|throws
name|Throwable
block|{
name|startMetaStore
argument_list|(
name|port
argument_list|,
name|bridge
argument_list|,
operator|new
name|HiveConf
argument_list|(
name|HMSHandler
operator|.
name|class
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start the metastore store.    * @param port    * @param bridge    * @param conf    * @throws Throwable    */
specifier|public
specifier|static
name|void
name|startMetaStore
parameter_list|(
name|int
name|port
parameter_list|,
name|HadoopThriftAuthBridge
name|bridge
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Throwable
block|{
name|startMetaStore
argument_list|(
name|port
argument_list|,
name|bridge
argument_list|,
name|conf
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start Metastore based on a passed {@link HadoopThriftAuthBridge}    *    * @param port    * @param bridge    * @param conf    *          configuration overrides    * @throws Throwable    */
specifier|public
specifier|static
name|void
name|startMetaStore
parameter_list|(
name|int
name|port
parameter_list|,
name|HadoopThriftAuthBridge
name|bridge
parameter_list|,
name|HiveConf
name|conf
parameter_list|,
name|Lock
name|startLock
parameter_list|,
name|Condition
name|startCondition
parameter_list|,
name|AtomicBoolean
name|startedServing
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
name|isMetaStoreRemote
operator|=
literal|true
expr_stmt|;
comment|// Server will create new threads up to max as necessary. After an idle
comment|// period, it will destroy threads to keep the number of threads in the
comment|// pool to min.
name|long
name|maxMessageSize
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORESERVERMAXMESSAGESIZE
argument_list|)
decl_stmt|;
name|int
name|minWorkerThreads
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORESERVERMINTHREADS
argument_list|)
decl_stmt|;
name|int
name|maxWorkerThreads
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORESERVERMAXTHREADS
argument_list|)
decl_stmt|;
name|boolean
name|tcpKeepAlive
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_TCP_KEEP_ALIVE
argument_list|)
decl_stmt|;
name|boolean
name|useFramedTransport
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_USE_THRIFT_FRAMED_TRANSPORT
argument_list|)
decl_stmt|;
name|boolean
name|useCompactProtocol
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_USE_THRIFT_COMPACT_PROTOCOL
argument_list|)
decl_stmt|;
name|useSasl
operator|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_USE_THRIFT_SASL
argument_list|)
expr_stmt|;
name|TServerTransport
name|serverTransport
init|=
name|tcpKeepAlive
condition|?
operator|new
name|TServerSocketKeepAlive
argument_list|(
name|port
argument_list|)
else|:
operator|new
name|TServerSocket
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|TProcessor
name|processor
decl_stmt|;
name|TTransportFactory
name|transFactory
decl_stmt|;
specifier|final
name|TProtocolFactory
name|protocolFactory
decl_stmt|;
specifier|final
name|TProtocolFactory
name|inputProtoFactory
decl_stmt|;
if|if
condition|(
name|useCompactProtocol
condition|)
block|{
name|protocolFactory
operator|=
operator|new
name|TCompactProtocol
operator|.
name|Factory
argument_list|()
expr_stmt|;
name|inputProtoFactory
operator|=
operator|new
name|TCompactProtocol
operator|.
name|Factory
argument_list|(
name|maxMessageSize
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|protocolFactory
operator|=
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
expr_stmt|;
name|inputProtoFactory
operator|=
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
name|maxMessageSize
argument_list|,
name|maxMessageSize
argument_list|)
expr_stmt|;
block|}
name|HMSHandler
name|baseHandler
init|=
operator|new
name|HiveMetaStore
operator|.
name|HMSHandler
argument_list|(
literal|"new db based metaserver"
argument_list|,
name|conf
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|IHMSHandler
name|handler
init|=
name|newRetryingHMSHandler
argument_list|(
name|baseHandler
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|useSasl
condition|)
block|{
comment|// we are in secure mode.
if|if
condition|(
name|useFramedTransport
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Framed transport is not supported with SASL enabled."
argument_list|)
throw|;
block|}
name|saslServer
operator|=
name|bridge
operator|.
name|createServer
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_KERBEROS_KEYTAB_FILE
argument_list|)
argument_list|,
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_KERBEROS_PRINCIPAL
argument_list|)
argument_list|)
expr_stmt|;
comment|// start delegation token manager
name|saslServer
operator|.
name|startDelegationTokenSecretManager
argument_list|(
name|conf
argument_list|,
name|baseHandler
argument_list|,
name|ServerMode
operator|.
name|METASTORE
argument_list|)
expr_stmt|;
name|transFactory
operator|=
name|saslServer
operator|.
name|createTransportFactory
argument_list|(
name|MetaStoreUtils
operator|.
name|getMetaStoreSaslProperties
argument_list|(
name|conf
argument_list|)
argument_list|)
expr_stmt|;
name|processor
operator|=
name|saslServer
operator|.
name|wrapProcessor
argument_list|(
operator|new
name|ThriftHiveMetastore
operator|.
name|Processor
argument_list|<
name|IHMSHandler
argument_list|>
argument_list|(
name|handler
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting DB backed MetaStore Server in Secure Mode"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we are in unsecure mode.
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_EXECUTE_SET_UGI
argument_list|)
condition|)
block|{
name|transFactory
operator|=
name|useFramedTransport
condition|?
operator|new
name|ChainedTTransportFactory
argument_list|(
operator|new
name|TFramedTransport
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|TUGIContainingTransport
operator|.
name|Factory
argument_list|()
argument_list|)
else|:
operator|new
name|TUGIContainingTransport
operator|.
name|Factory
argument_list|()
expr_stmt|;
name|processor
operator|=
operator|new
name|TUGIBasedProcessor
argument_list|<
name|IHMSHandler
argument_list|>
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting DB backed MetaStore Server with SetUGI enabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transFactory
operator|=
name|useFramedTransport
condition|?
operator|new
name|TFramedTransport
operator|.
name|Factory
argument_list|()
else|:
operator|new
name|TTransportFactory
argument_list|()
expr_stmt|;
name|processor
operator|=
operator|new
name|TSetIpAddressProcessor
argument_list|<
name|IHMSHandler
argument_list|>
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting DB backed MetaStore Server"
argument_list|)
expr_stmt|;
block|}
block|}
name|TThreadPoolServer
operator|.
name|Args
name|args
init|=
operator|new
name|TThreadPoolServer
operator|.
name|Args
argument_list|(
name|serverTransport
argument_list|)
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
operator|.
name|transportFactory
argument_list|(
name|transFactory
argument_list|)
operator|.
name|protocolFactory
argument_list|(
name|protocolFactory
argument_list|)
operator|.
name|inputProtocolFactory
argument_list|(
name|inputProtoFactory
argument_list|)
operator|.
name|minWorkerThreads
argument_list|(
name|minWorkerThreads
argument_list|)
operator|.
name|maxWorkerThreads
argument_list|(
name|maxWorkerThreads
argument_list|)
decl_stmt|;
name|TServer
name|tServer
init|=
operator|new
name|TThreadPoolServer
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|TServerEventHandler
name|tServerEventHandler
init|=
operator|new
name|TServerEventHandler
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|preServe
parameter_list|()
block|{         }
annotation|@
name|Override
specifier|public
name|ServerContext
name|createContext
parameter_list|(
name|TProtocol
name|tProtocol
parameter_list|,
name|TProtocol
name|tProtocol1
parameter_list|)
block|{
try|try
block|{
name|Metrics
name|metrics
init|=
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|incrementCounter
argument_list|(
name|MetricsConstant
operator|.
name|OPEN_CONNECTIONS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error Reporting Metastore open connection to Metrics system"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteContext
parameter_list|(
name|ServerContext
name|serverContext
parameter_list|,
name|TProtocol
name|tProtocol
parameter_list|,
name|TProtocol
name|tProtocol1
parameter_list|)
block|{
try|try
block|{
name|Metrics
name|metrics
init|=
name|MetricsFactory
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|metrics
operator|!=
literal|null
condition|)
block|{
name|metrics
operator|.
name|decrementCounter
argument_list|(
name|MetricsConstant
operator|.
name|OPEN_CONNECTIONS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error Reporting Metastore close connection to Metrics system"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|processContext
parameter_list|(
name|ServerContext
name|serverContext
parameter_list|,
name|TTransport
name|tTransport
parameter_list|,
name|TTransport
name|tTransport1
parameter_list|)
block|{         }
block|}
decl_stmt|;
name|tServer
operator|.
name|setServerEventHandler
argument_list|(
name|tServerEventHandler
argument_list|)
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Started the new metaserver on port ["
operator|+
name|port
operator|+
literal|"]..."
argument_list|)
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Options.minWorkerThreads = "
operator|+
name|minWorkerThreads
argument_list|)
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Options.maxWorkerThreads = "
operator|+
name|maxWorkerThreads
argument_list|)
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"TCP keepalive = "
operator|+
name|tcpKeepAlive
argument_list|)
expr_stmt|;
if|if
condition|(
name|startLock
operator|!=
literal|null
condition|)
block|{
name|signalOtherThreadsToStart
argument_list|(
name|tServer
argument_list|,
name|startLock
argument_list|,
name|startCondition
argument_list|,
name|startedServing
argument_list|)
expr_stmt|;
block|}
name|tServer
operator|.
name|serve
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|x
parameter_list|)
block|{
name|x
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|x
throw|;
block|}
block|}
specifier|private
specifier|static
name|void
name|signalOtherThreadsToStart
parameter_list|(
specifier|final
name|TServer
name|server
parameter_list|,
specifier|final
name|Lock
name|startLock
parameter_list|,
specifier|final
name|Condition
name|startCondition
parameter_list|,
specifier|final
name|AtomicBoolean
name|startedServing
parameter_list|)
block|{
comment|// A simple thread to wait until the server has started and then signal the other threads to
comment|// begin
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
do|do
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Signalling thread was interuppted: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|server
operator|.
name|isServing
argument_list|()
condition|)
do|;
name|startLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|startedServing
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|startCondition
operator|.
name|signalAll
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|startLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|/**    * Start threads outside of the thrift service, such as the compactor threads.    * @param conf Hive configuration object    */
specifier|private
specifier|static
name|void
name|startMetaStoreThreads
parameter_list|(
specifier|final
name|HiveConf
name|conf
parameter_list|,
specifier|final
name|Lock
name|startLock
parameter_list|,
specifier|final
name|Condition
name|startCondition
parameter_list|,
specifier|final
name|AtomicBoolean
name|startedServing
parameter_list|)
block|{
comment|// A thread is spun up to start these other threads.  That's because we can't start them
comment|// until after the TServer has started, but once TServer.serve is called we aren't given back
comment|// control.
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
comment|// This is a massive hack.  The compactor threads have to access packages in ql (such as
comment|// AcidInputFormat).  ql depends on metastore so we can't directly access those.  To deal
comment|// with this the compactor thread classes have been put in ql and they are instantiated here
comment|// dyanmically.  This is not ideal but it avoids a massive refactoring of Hive packages.
comment|//
comment|// Wrap the start of the threads in a catch Throwable loop so that any failures
comment|// don't doom the rest of the metastore.
name|startLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|JvmPauseMonitor
name|pauseMonitor
init|=
operator|new
name|JvmPauseMonitor
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|pauseMonitor
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not initiate the JvmPauseMonitor thread."
operator|+
literal|" GCs and Pauses may not be "
operator|+
literal|"warned upon."
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|// Per the javadocs on Condition, do not depend on the condition alone as a start gate
comment|// since spurious wake ups are possible.
while|while
condition|(
operator|!
name|startedServing
operator|.
name|get
argument_list|()
condition|)
name|startCondition
operator|.
name|await
argument_list|()
expr_stmt|;
name|startCompactorInitiator
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|startCompactorWorkers
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|startCompactorCleaner
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|startHouseKeeperService
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failure when starting the compactor, compactions may not happen, "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|startLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|startCompactorInitiator
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_COMPACTOR_INITIATOR_ON
argument_list|)
condition|)
block|{
name|MetaStoreThread
name|initiator
init|=
name|instantiateThread
argument_list|(
literal|"org.apache.hadoop.hive.ql.txn.compactor.Initiator"
argument_list|)
decl_stmt|;
name|initializeAndStartThread
argument_list|(
name|initiator
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|startCompactorWorkers
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|numWorkers
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_COMPACTOR_WORKER_THREADS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numWorkers
condition|;
name|i
operator|++
control|)
block|{
name|MetaStoreThread
name|worker
init|=
name|instantiateThread
argument_list|(
literal|"org.apache.hadoop.hive.ql.txn.compactor.Worker"
argument_list|)
decl_stmt|;
name|initializeAndStartThread
argument_list|(
name|worker
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|startCompactorCleaner
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_COMPACTOR_INITIATOR_ON
argument_list|)
condition|)
block|{
name|MetaStoreThread
name|cleaner
init|=
name|instantiateThread
argument_list|(
literal|"org.apache.hadoop.hive.ql.txn.compactor.Cleaner"
argument_list|)
decl_stmt|;
name|initializeAndStartThread
argument_list|(
name|cleaner
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|MetaStoreThread
name|instantiateThread
parameter_list|(
name|String
name|classname
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
name|classname
argument_list|)
decl_stmt|;
name|Object
name|o
init|=
name|c
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|MetaStoreThread
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|o
operator|.
name|getClass
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|(
name|MetaStoreThread
operator|)
name|o
return|;
block|}
else|else
block|{
name|String
name|s
init|=
name|classname
operator|+
literal|" is not an instance of MetaStoreThread."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|s
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|s
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|int
name|nextThreadId
init|=
literal|1000000
decl_stmt|;
specifier|private
specifier|static
name|void
name|initializeAndStartThread
parameter_list|(
name|MetaStoreThread
name|thread
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting metastore thread of type "
operator|+
name|thread
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setHiveConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|thread
operator|.
name|setThreadId
argument_list|(
name|nextThreadId
operator|++
argument_list|)
expr_stmt|;
name|thread
operator|.
name|init
argument_list|(
operator|new
name|AtomicBoolean
argument_list|()
argument_list|,
operator|new
name|AtomicBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|startHouseKeeperService
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_COMPACTOR_INITIATOR_ON
argument_list|)
condition|)
block|{
return|return;
block|}
name|Class
name|c
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.apache.hadoop.hive.ql.txn.AcidHouseKeeperService"
argument_list|)
decl_stmt|;
comment|//todo: when metastore adds orderly-shutdown logic, houseKeeper.stop()
comment|//should be called form it
name|HouseKeeperService
name|houseKeeper
init|=
operator|(
name|HouseKeeperService
operator|)
name|c
operator|.
name|newInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|houseKeeper
operator|.
name|start
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to start {}"
argument_list|,
name|houseKeeper
operator|.
name|getClass
argument_list|()
operator|+
literal|".  The system will not handle {} "
argument_list|,
name|houseKeeper
operator|.
name|getServiceDescription
argument_list|()
argument_list|,
literal|".  Root Cause: "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

