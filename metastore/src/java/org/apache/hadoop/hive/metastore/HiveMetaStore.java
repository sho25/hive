begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ConfigValSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ThriftHiveMetastore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TThreadPoolServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|fb_status
import|;
end_import

begin_comment
comment|/**  * TODO:pc remove application logic to a separate interface.  */
end_comment

begin_class
specifier|public
class|class
name|HiveMetaStore
extends|extends
name|ThriftHiveMetastore
block|{
specifier|public
specifier|static
class|class
name|HMSHandler
extends|extends
name|FacebookBase
implements|implements
name|ThriftHiveMetastore
operator|.
name|Iface
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveMetaStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|createDefaultDB
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|rawStoreClassName
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|hiveConf
decl_stmt|;
comment|// stores datastore (jpox) properties,
comment|// right now they come from jpox.properties
specifier|private
name|Warehouse
name|wh
decl_stmt|;
comment|// hdfs warehouse
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|RawStore
argument_list|>
name|threadLocalMS
init|=
operator|new
name|ThreadLocal
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Object
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// The next serial number to be assigned
specifier|private
name|boolean
name|checkForDefaultDb
decl_stmt|;
specifier|private
specifier|static
name|int
name|nextSerialNum
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|threadLocalId
init|=
operator|new
name|ThreadLocal
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Object
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|Integer
argument_list|(
name|nextSerialNum
operator|++
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|Integer
name|get
parameter_list|()
block|{
return|return
name|threadLocalId
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|HMSHandler
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HMSHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
name|conf
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|private
name|ClassLoader
name|classLoader
decl_stmt|;
specifier|private
name|AlterHandler
name|alterHandler
decl_stmt|;
block|{
name|classLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
name|classLoader
operator|=
name|Configuration
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|init
parameter_list|()
throws|throws
name|MetaException
block|{
name|rawStoreClassName
operator|=
name|hiveConf
operator|.
name|get
argument_list|(
literal|"hive.metastore.rawstore.impl"
argument_list|)
expr_stmt|;
name|checkForDefaultDb
operator|=
name|hiveConf
operator|.
name|getBoolean
argument_list|(
literal|"hive.metastore.checkForDefaultDb"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|alterHandlerName
init|=
name|hiveConf
operator|.
name|get
argument_list|(
literal|"hive.metastore.alter.impl"
argument_list|,
name|HiveAlterHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|alterHandler
operator|=
operator|(
name|AlterHandler
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|getClass
argument_list|(
name|alterHandlerName
argument_list|,
name|AlterHandler
operator|.
name|class
argument_list|)
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
name|wh
operator|=
operator|new
name|Warehouse
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|createDefaultDB
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * @return      * @throws MetaException      */
specifier|private
name|RawStore
name|getMS
parameter_list|()
throws|throws
name|MetaException
block|{
name|RawStore
name|ms
init|=
name|threadLocalMS
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|threadLocalId
operator|.
name|get
argument_list|()
operator|+
literal|": Opening raw store with implemenation class:"
operator|+
name|rawStoreClassName
argument_list|)
expr_stmt|;
name|ms
operator|=
operator|(
name|RawStore
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|getClass
argument_list|(
name|rawStoreClassName
argument_list|,
name|RawStore
operator|.
name|class
argument_list|)
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
name|threadLocalMS
operator|.
name|set
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|ms
operator|=
name|threadLocalMS
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|ms
return|;
block|}
comment|/**      * create default database if it doesn't exist      *       * @throws MetaException      */
specifier|private
name|void
name|createDefaultDB
parameter_list|()
throws|throws
name|MetaException
block|{
if|if
condition|(
name|HMSHandler
operator|.
name|createDefaultDB
operator|||
operator|!
name|checkForDefaultDb
condition|)
block|{
return|return;
block|}
try|try
block|{
name|getMS
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|getMS
argument_list|()
operator|.
name|createDatabase
argument_list|(
operator|new
name|Database
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|,
name|wh
operator|.
name|getDefaultDatabasePath
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HMSHandler
operator|.
name|createDefaultDB
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|Class
argument_list|<
name|?
argument_list|>
name|getClass
parameter_list|(
name|String
name|rawStoreClassName
parameter_list|,
name|Class
argument_list|<
name|?
argument_list|>
name|class1
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|Class
operator|.
name|forName
argument_list|(
name|rawStoreClassName
argument_list|,
literal|true
argument_list|,
name|classLoader
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|rawStoreClassName
operator|+
literal|" class not found"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|logStartFunction
parameter_list|(
name|String
name|m
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|threadLocalId
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|m
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|logStartFunction
parameter_list|(
name|String
name|f
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|tbl
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|threadLocalId
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|f
operator|+
literal|" : db="
operator|+
name|db
operator|+
literal|" tbl="
operator|+
name|tbl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getStatus
parameter_list|()
block|{
return|return
name|fb_status
operator|.
name|ALIVE
return|;
block|}
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|logStartFunction
argument_list|(
literal|"Shutting down the object store..."
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|threadLocalMS
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getMS
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"unable to shutdown metastore"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|create_database
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|location_uri
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"create_database"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"create_database: "
operator|+
name|name
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|getMS
argument_list|()
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|Database
name|db
init|=
operator|new
name|Database
argument_list|(
name|name
argument_list|,
name|location_uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|getMS
argument_list|()
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
operator|&&
name|wh
operator|.
name|mkdirs
argument_list|(
name|wh
operator|.
name|getDefaultDatabasePath
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
name|success
operator|=
name|getMS
argument_list|()
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|getMS
argument_list|()
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|Database
name|get_database
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"get_database"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"get_database: "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
name|getMS
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|drop_database
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"drop_database"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"drop_database: "
operator|+
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Can't drop default database"
argument_list|)
throw|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|getMS
argument_list|()
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|getMS
argument_list|()
operator|.
name|dropDatabase
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|success
operator|=
name|getMS
argument_list|()
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|getMS
argument_list|()
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|wh
operator|.
name|getDefaultDatabasePath
argument_list|(
name|name
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// it is not a terrible thing even if the data is not deleted
block|}
block|}
return|return
name|success
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_databases
parameter_list|()
throws|throws
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"get_databases"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"get_databases"
argument_list|)
expr_stmt|;
return|return
name|getMS
argument_list|()
operator|.
name|getDatabases
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|create_type
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|incrementCounter
argument_list|(
literal|"create_type"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"create_type: "
operator|+
name|type
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|// check whether type already exists
if|if
condition|(
name|get_type
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Type "
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
comment|// TODO:pc Validation of types should be done by clients or here????
return|return
name|getMS
argument_list|()
operator|.
name|createType
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|public
name|Type
name|get_type
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"get_type"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"get_type: "
operator|+
name|name
argument_list|)
expr_stmt|;
return|return
name|getMS
argument_list|()
operator|.
name|getType
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|drop_type
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"drop_type"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"drop_type: "
operator|+
name|name
argument_list|)
expr_stmt|;
comment|// TODO:pc validate that there are no types that refer to this
return|return
name|getMS
argument_list|()
operator|.
name|dropType
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|get_type_all
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"get_type_all"
argument_list|)
expr_stmt|;
comment|// TODO Auto-generated method stub
name|logStartFunction
argument_list|(
literal|"get_type_all"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|create_table
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|incrementCounter
argument_list|(
literal|"create_table"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"create_table: db="
operator|+
name|tbl
operator|.
name|getDbName
argument_list|()
operator|+
literal|" tbl="
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|validateName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|||
operator|!
name|MetaStoreUtils
operator|.
name|validateColNames
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
operator|||
operator|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|MetaStoreUtils
operator|.
name|validateColNames
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
operator|+
literal|" is not a valid object name"
argument_list|)
throw|;
block|}
name|Path
name|tblPath
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|,
name|madeDir
init|=
literal|false
decl_stmt|;
try|try
block|{
name|getMS
argument_list|()
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tbl
operator|.
name|getTableType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
operator|||
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tblPath
operator|=
name|wh
operator|.
name|getDefaultTablePath
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isExternal
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Location: "
operator|+
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|"specified for non-external table:"
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tblPath
operator|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|tblPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// get_table checks whether database exists, it should be moved here
if|if
condition|(
name|is_table_exists
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Table "
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tblPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|tblPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|tblPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|tblPath
operator|+
literal|" is not a directory or unable to create one"
argument_list|)
throw|;
block|}
name|madeDir
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// set create time
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|tbl
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
name|tbl
operator|.
name|putToParameters
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|getMS
argument_list|()
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|success
operator|=
name|getMS
argument_list|()
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|getMS
argument_list|()
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|madeDir
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|tblPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|is_table_exists
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
operator|(
name|get_table
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|void
name|drop_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"drop_table"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"drop_table"
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|isExternal
init|=
literal|false
decl_stmt|;
name|Path
name|tblPath
init|=
literal|null
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
name|isExternal
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|getMS
argument_list|()
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
comment|// drop any partitions
name|tbl
operator|=
name|get_table
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|name
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table metadata is corrupted"
argument_list|)
throw|;
block|}
name|isExternal
operator|=
name|isExternal
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tblPath
operator|=
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|getMS
argument_list|()
operator|.
name|dropTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop table"
argument_list|)
throw|;
block|}
name|tbl
operator|=
literal|null
expr_stmt|;
comment|// table collections disappear after dropping
name|success
operator|=
name|getMS
argument_list|()
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|getMS
argument_list|()
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteData
operator|&&
operator|(
name|tblPath
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|isExternal
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|tblPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// ok even if the data is not deleted
block|}
block|}
block|}
comment|/**      * Is this an external table?      *       * @param table      *          Check if this table is external.      * @return True if the table is external, otherwise false.      */
specifier|private
name|boolean
name|isExternal
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|table
operator|.
name|getParameters
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|"TRUE"
operator|.
name|equalsIgnoreCase
argument_list|(
name|params
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Table
name|get_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|incrementCounter
argument_list|(
literal|"get_table"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"get_table"
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|getMS
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|dbname
operator|+
literal|"."
operator|+
name|name
operator|+
literal|" table not found"
argument_list|)
throw|;
block|}
return|return
name|t
return|;
block|}
specifier|public
name|boolean
name|set_table_parameters
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"set_table_parameters"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"set_table_parameters"
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
comment|// TODO Auto-generated method stub
return|return
literal|false
return|;
block|}
specifier|private
name|Partition
name|append_partition_common
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|,
name|madeDir
init|=
literal|false
decl_stmt|;
name|Path
name|partLocation
init|=
literal|null
decl_stmt|;
try|try
block|{
name|getMS
argument_list|()
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|part
operator|=
operator|new
name|Partition
argument_list|()
expr_stmt|;
name|part
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setValues
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|getMS
argument_list|()
operator|.
name|getTable
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to add partition because table or database do not exist"
argument_list|)
throw|;
block|}
name|part
operator|.
name|setSd
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|partLocation
operator|=
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part_vals
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|partLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|old_part
init|=
name|get_partition
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old_part
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Partition already exists:"
operator|+
name|part
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|partLocation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|partLocation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|partLocation
operator|+
literal|" is not a directory or unable to create one"
argument_list|)
throw|;
block|}
name|madeDir
operator|=
literal|true
expr_stmt|;
block|}
comment|// set create time
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|part
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
name|part
operator|.
name|putToParameters
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|=
name|getMS
argument_list|()
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|success
operator|=
name|getMS
argument_list|()
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|getMS
argument_list|()
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|madeDir
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|partLocation
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|part
return|;
block|}
specifier|public
name|Partition
name|append_partition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"append_partition"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"append_partition"
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|part
range|:
name|part_vals
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|append_partition_common
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
return|;
block|}
specifier|public
name|int
name|add_partitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|AlreadyExistsException
block|{
name|incrementCounter
argument_list|(
literal|"add_partition"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|String
name|db
init|=
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tbl
init|=
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|logStartFunction
argument_list|(
literal|"add_partitions"
argument_list|,
name|db
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|getMS
argument_list|()
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|add_partition
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
name|getMS
argument_list|()
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|getMS
argument_list|()
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|parts
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|Partition
name|add_partition
parameter_list|(
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"add_partition"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"add_partition"
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|,
name|madeDir
init|=
literal|false
decl_stmt|;
name|Path
name|partLocation
init|=
literal|null
decl_stmt|;
try|try
block|{
name|getMS
argument_list|()
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|Partition
name|old_part
init|=
name|get_partition
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|old_part
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Partition already exists:"
operator|+
name|part
argument_list|)
throw|;
block|}
name|Table
name|tbl
init|=
name|getMS
argument_list|()
operator|.
name|getTable
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to add partition because table or database do not exist"
argument_list|)
throw|;
block|}
name|String
name|partLocationStr
init|=
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|partLocationStr
operator|==
literal|null
operator|||
name|partLocationStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// set default location if not specified
name|partLocation
operator|=
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|partLocation
operator|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|partLocationStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|partLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check to see if the directory already exists before calling mkdirs()
comment|// because if the file system is read-only, mkdirs will throw an
comment|// exception even if the directory already exists.
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|partLocation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|partLocation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|partLocation
operator|+
literal|" is not a directory or unable to create one"
argument_list|)
throw|;
block|}
name|madeDir
operator|=
literal|true
expr_stmt|;
block|}
comment|// set create time
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|part
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
name|part
operator|.
name|putToParameters
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|=
name|getMS
argument_list|()
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
operator|&&
name|getMS
argument_list|()
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|getMS
argument_list|()
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|madeDir
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|partLocation
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|part
return|;
block|}
specifier|private
name|boolean
name|drop_partition_common
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Path
name|partPath
init|=
literal|null
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
try|try
block|{
name|getMS
argument_list|()
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|Partition
name|part
init|=
name|get_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Partition doesn't exist. "
operator|+
name|part_vals
argument_list|)
throw|;
block|}
if|if
condition|(
name|part
operator|.
name|getSd
argument_list|()
operator|==
literal|null
operator|||
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Partition metadata is corrupted"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|getMS
argument_list|()
operator|.
name|dropPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop partition"
argument_list|)
throw|;
block|}
name|success
operator|=
name|getMS
argument_list|()
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
name|partPath
operator|=
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|get_table
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|getMS
argument_list|()
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteData
operator|&&
operator|(
name|partPath
operator|!=
literal|null
operator|)
condition|)
block|{
if|if
condition|(
name|tbl
operator|!=
literal|null
operator|&&
operator|!
name|isExternal
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|partPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// ok even if the data is not deleted
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|drop_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"drop_partition"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"drop_partition"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Partition values:"
operator|+
name|part_vals
argument_list|)
expr_stmt|;
return|return
name|drop_partition_common
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|deleteData
argument_list|)
return|;
block|}
specifier|public
name|Partition
name|get_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"get_partition"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"get_partition"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
return|return
name|getMS
argument_list|()
operator|.
name|getPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"get_partitions"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"get_partitions"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
return|return
name|getMS
argument_list|()
operator|.
name|getPartitions
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partition_names
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"get_partition_names"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"get_partition_names"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
return|return
name|getMS
argument_list|()
operator|.
name|listPartitionNames
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
return|;
block|}
specifier|public
name|void
name|alter_partition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"alter_partition"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"alter_partition"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Partition values:"
operator|+
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|new_part
operator|.
name|putToParameters
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|getMS
argument_list|()
operator|.
name|alterPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|new_part
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"alter is not possible"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|create_index
parameter_list|(
name|Index
name|index_def
parameter_list|)
throws|throws
name|IndexAlreadyExistsException
throws|,
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"create_index"
argument_list|)
expr_stmt|;
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
throws|throws
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"getVersion"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"getVersion"
argument_list|)
expr_stmt|;
return|return
literal|"3.0"
return|;
block|}
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|Table
name|newTable
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"alter_table"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"truncate_table: db="
operator|+
name|dbname
operator|+
literal|" tbl="
operator|+
name|name
operator|+
literal|" newtbl="
operator|+
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|newTable
operator|.
name|putToParameters
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|alterHandler
operator|.
name|alterTable
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|wh
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_tables
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|incrementCounter
argument_list|(
literal|"get_tables"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"get_tables: db="
operator|+
name|dbname
operator|+
literal|" pat="
operator|+
name|pattern
argument_list|)
expr_stmt|;
return|return
name|getMS
argument_list|()
operator|.
name|getTables
argument_list|(
name|dbname
argument_list|,
name|pattern
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_fields
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|incrementCounter
argument_list|(
literal|"get_fields"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"get_fields: db="
operator|+
name|db
operator|+
literal|"tbl="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|String
index|[]
name|names
init|=
name|tableName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
name|base_table_name
init|=
name|names
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|tbl
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|get_table
argument_list|(
name|db
argument_list|,
name|base_table_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|boolean
name|getColsFromSerDe
init|=
name|SerDeUtils
operator|.
name|shouldGetColsFromSerDe
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getColsFromSerDe
condition|)
block|{
return|return
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
return|;
block|}
else|else
block|{
try|try
block|{
name|Deserializer
name|s
init|=
name|MetaStoreUtils
operator|.
name|getDeserializer
argument_list|(
name|hiveConf
argument_list|,
name|tbl
argument_list|)
decl_stmt|;
return|return
name|MetaStoreUtils
operator|.
name|getFieldsFromDeserializer
argument_list|(
name|tableName
argument_list|,
name|s
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Return the schema of the table. This function includes partition columns      * in addition to the regular columns.      *       * @param db      *          Name of the database      * @param tableName      *          Name of the table      * @return List of columns, each column is a FieldSchema structure      * @throws MetaException      * @throws UnknownTableException      * @throws UnknownDBException      */
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_schema
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|incrementCounter
argument_list|(
literal|"get_schema"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"get_schema: db="
operator|+
name|db
operator|+
literal|"tbl="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|String
index|[]
name|names
init|=
name|tableName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
name|base_table_name
init|=
name|names
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|tbl
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|get_table
argument_list|(
name|db
argument_list|,
name|base_table_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
init|=
name|get_fields
argument_list|(
name|db
argument_list|,
name|base_table_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
operator|||
name|fieldSchemas
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
name|tableName
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Combine the column field schemas and the partition keys to create the
comment|// whole schema
name|fieldSchemas
operator|.
name|addAll
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fieldSchemas
return|;
block|}
specifier|public
name|String
name|getCpuProfile
parameter_list|(
name|int
name|profileDurationInSec
parameter_list|)
throws|throws
name|TException
block|{
return|return
literal|""
return|;
block|}
comment|/**      * Returns the value of the given configuration variable name. If the      * configuration variable with the given name doesn't exist, or if there      * were an exception thrown while retrieving the variable, or if name is      * null, defaultValue is returned.      */
specifier|public
name|String
name|get_config_value
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|TException
throws|,
name|ConfigValSecurityException
block|{
name|incrementCounter
argument_list|(
literal|"get_config_value"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"get_config_value: name="
operator|+
name|name
operator|+
literal|" defaultValue="
operator|+
name|defaultValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
name|defaultValue
return|;
block|}
comment|// Allow only keys that start with hive.*, hdfs.*, mapred.* for security
comment|// i.e. don't allow access to db password
if|if
condition|(
operator|!
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(hive|hdfs|mapred).*"
argument_list|,
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConfigValSecurityException
argument_list|(
literal|"For security reasons, the "
operator|+
literal|"config key "
operator|+
name|name
operator|+
literal|" cannot be accessed"
argument_list|)
throw|;
block|}
name|String
name|toReturn
init|=
name|defaultValue
decl_stmt|;
try|try
block|{
name|toReturn
operator|=
name|hiveConf
operator|.
name|get
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|threadLocalId
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
literal|"RuntimeException thrown in get_config_value - msg: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" cause: "
operator|+
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|toReturn
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPartValsFromName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|partName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
block|{
comment|// Unescape the partition name
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hm
init|=
name|Warehouse
operator|.
name|makeSpecFromName
argument_list|(
name|partName
argument_list|)
decl_stmt|;
comment|// getPartition expects partition values in a list. use info from the
comment|// table to put the partition column values in order
name|Table
name|t
init|=
name|getMS
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" table not found"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|t
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|hm
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"incomplete partition name - missing "
operator|+
name|key
argument_list|)
throw|;
block|}
name|partVals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|partVals
return|;
block|}
specifier|public
name|Partition
name|get_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_partition_by_name"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"get_partition_by_name: db="
operator|+
name|db_name
operator|+
literal|" tbl="
operator|+
name|tbl_name
operator|+
literal|" part="
operator|+
name|part_name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
literal|null
decl_stmt|;
try|try
block|{
name|partVals
operator|=
name|getPartValsFromName
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Partition
name|p
init|=
name|getMS
argument_list|()
operator|.
name|getPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|db_name
operator|+
literal|"."
operator|+
name|tbl_name
operator|+
literal|" partition ("
operator|+
name|part_name
operator|+
literal|") not found"
argument_list|)
throw|;
block|}
return|return
name|p
return|;
block|}
specifier|public
name|Partition
name|append_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"append_partition_by_name"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"append_partition_by_name: db="
operator|+
name|db_name
operator|+
literal|" tbl="
operator|+
name|tbl_name
operator|+
literal|" part="
operator|+
name|part_name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|getPartValsFromName
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
decl_stmt|;
return|return
name|append_partition_common
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partVals
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_partition_by_name
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|part_name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"drop_partition_by_name"
argument_list|)
expr_stmt|;
name|logStartFunction
argument_list|(
literal|"drop_partition_by_name: db="
operator|+
name|db_name
operator|+
literal|" tbl="
operator|+
name|tbl_name
operator|+
literal|" part="
operator|+
name|part_name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
literal|null
decl_stmt|;
try|try
block|{
name|partVals
operator|=
name|getPartValsFromName
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|drop_partition_common
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partVals
argument_list|,
name|deleteData
argument_list|)
return|;
block|}
block|}
comment|/**    * @param args    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|int
name|port
init|=
literal|9083
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|TServerTransport
name|serverTransport
init|=
operator|new
name|TServerSocket
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|Iface
name|handler
init|=
operator|new
name|HMSHandler
argument_list|(
literal|"new db based metaserver"
argument_list|)
decl_stmt|;
name|FacebookService
operator|.
name|Processor
name|processor
init|=
operator|new
name|ThriftHiveMetastore
operator|.
name|Processor
argument_list|(
name|handler
argument_list|)
decl_stmt|;
name|TThreadPoolServer
operator|.
name|Options
name|options
init|=
operator|new
name|TThreadPoolServer
operator|.
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|minWorkerThreads
operator|=
literal|200
expr_stmt|;
name|TServer
name|server
init|=
operator|new
name|TThreadPoolServer
argument_list|(
name|processor
argument_list|,
name|serverTransport
argument_list|,
operator|new
name|TTransportFactory
argument_list|()
argument_list|,
operator|new
name|TTransportFactory
argument_list|()
argument_list|,
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Started the new metaserver on port ["
operator|+
name|port
operator|+
literal|"]..."
argument_list|)
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Options.minWorkerThreads = "
operator|+
name|options
operator|.
name|minWorkerThreads
argument_list|)
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Options.maxWorkerThreads = "
operator|+
name|options
operator|.
name|maxWorkerThreads
argument_list|)
expr_stmt|;
name|server
operator|.
name|serve
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|x
parameter_list|)
block|{
name|x
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Metastore Thrift Server threw an exception. Exiting..."
argument_list|)
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

