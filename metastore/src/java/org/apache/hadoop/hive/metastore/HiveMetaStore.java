begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|join
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_COMMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|validateName
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|AbstractMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|LogUtils
operator|.
name|LogInitializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|cli
operator|.
name|CommonCliOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|metrics
operator|.
name|Metrics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ConfigValSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|EnvironmentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|IndexAlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ThriftHiveMetastore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AddPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|AlterTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|CreateTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|DropTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|EventCleanerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|LoadPartitionDoneEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreAddPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreAlterPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreAlterTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreCreateDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreCreateTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreDropDatabaseEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreDropPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreDropTableEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreEventContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreLoadPartitionDoneEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MDBPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MGlobalPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartitionColumnPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MPartitionPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MRole
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MRoleMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MTableColumnPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|model
operator|.
name|MTablePrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|Deserializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|HadoopThriftAuthBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|TUGIContainingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|ReflectionUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|server
operator|.
name|TThreadPoolServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TFramedTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TServerTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|FacebookBase
import|;
end_import

begin_import
import|import
name|com
operator|.
name|facebook
operator|.
name|fb303
operator|.
name|fb_status
import|;
end_import

begin_comment
comment|/**  * TODO:pc remove application logic to a separate interface.  */
end_comment

begin_class
specifier|public
class|class
name|HiveMetaStore
extends|extends
name|ThriftHiveMetastore
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveMetaStore
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**    * default port on which to start the Hive server    */
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_HIVE_METASTORE_PORT
init|=
literal|9083
decl_stmt|;
specifier|private
specifier|static
name|HadoopThriftAuthBridge
operator|.
name|Server
name|saslServer
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|useSasl
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|ChainedTTransportFactory
extends|extends
name|TTransportFactory
block|{
specifier|private
specifier|final
name|TTransportFactory
name|parentTransFactory
decl_stmt|;
specifier|private
specifier|final
name|TTransportFactory
name|childTransFactory
decl_stmt|;
specifier|private
name|ChainedTTransportFactory
parameter_list|(
name|TTransportFactory
name|parentTransFactory
parameter_list|,
name|TTransportFactory
name|childTransFactory
parameter_list|)
block|{
name|this
operator|.
name|parentTransFactory
operator|=
name|parentTransFactory
expr_stmt|;
name|this
operator|.
name|childTransFactory
operator|=
name|childTransFactory
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|TTransport
name|getTransport
parameter_list|(
name|TTransport
name|trans
parameter_list|)
block|{
return|return
name|childTransFactory
operator|.
name|getTransport
argument_list|(
name|parentTransFactory
operator|.
name|getTransport
argument_list|(
name|trans
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|HMSHandler
extends|extends
name|FacebookBase
implements|implements
name|IHMSHandler
block|{
specifier|public
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|HiveMetaStore
operator|.
name|LOG
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|createDefaultDB
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|rawStoreClassName
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|hiveConf
decl_stmt|;
comment|// stores datastore (jpox) properties,
comment|// right now they come from jpox.properties
specifier|private
name|Warehouse
name|wh
decl_stmt|;
comment|// hdfs warehouse
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|RawStore
argument_list|>
name|threadLocalMS
init|=
operator|new
name|ThreadLocal
argument_list|<
name|RawStore
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|RawStore
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// Thread local configuration is needed as many threads could make changes
comment|// to the conf using the connection hook
specifier|private
specifier|final
name|ThreadLocal
argument_list|<
name|Configuration
argument_list|>
name|threadLocalConf
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Configuration
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Configuration
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|AUDIT_FORMAT
init|=
literal|"ugi=%s\t"
operator|+
comment|// ugi
literal|"ip=%s\t"
operator|+
comment|// remote IP
literal|"cmd=%s\t"
decl_stmt|;
comment|// command
specifier|public
specifier|static
specifier|final
name|Log
name|auditLog
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveMetaStore
operator|.
name|class
operator|.
name|getName
argument_list|()
operator|+
literal|".audit"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|Formatter
argument_list|>
name|auditFormatter
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Formatter
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Formatter
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|Formatter
argument_list|(
operator|new
name|StringBuilder
argument_list|(
name|AUDIT_FORMAT
operator|.
name|length
argument_list|()
operator|*
literal|4
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|void
name|logAuditEvent
parameter_list|(
name|String
name|cmd
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|UserGroupInformation
name|ugi
decl_stmt|;
try|try
block|{
name|ugi
operator|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getUGIForConf
argument_list|(
name|getConf
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
specifier|final
name|Formatter
name|fmt
init|=
name|auditFormatter
operator|.
name|get
argument_list|()
decl_stmt|;
operator|(
operator|(
name|StringBuilder
operator|)
name|fmt
operator|.
name|out
argument_list|()
operator|)
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|address
decl_stmt|;
if|if
condition|(
name|useSasl
condition|)
block|{
name|address
operator|=
name|saslServer
operator|.
name|getRemoteAddress
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|address
operator|=
name|getIpAddress
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|address
operator|==
literal|null
condition|)
block|{
name|address
operator|=
literal|"unknown-ip-addr"
expr_stmt|;
block|}
name|auditLog
operator|.
name|info
argument_list|(
name|fmt
operator|.
name|format
argument_list|(
name|AUDIT_FORMAT
argument_list|,
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|address
argument_list|,
name|cmd
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// The next serial number to be assigned
specifier|private
name|boolean
name|checkForDefaultDb
decl_stmt|;
specifier|private
specifier|static
name|int
name|nextSerialNum
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
name|threadLocalId
init|=
operator|new
name|ThreadLocal
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|Integer
name|initialValue
parameter_list|()
block|{
return|return
operator|new
name|Integer
argument_list|(
name|nextSerialNum
operator|++
argument_list|)
return|;
block|}
block|}
decl_stmt|;
comment|// This will only be set if the metastore is being accessed from a metastore Thrift server,
comment|// not if it is from the CLI. Also, only if the TTransport being used to connect is an
comment|// instance of TSocket.
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|String
argument_list|>
name|threadLocalIpAddress
init|=
operator|new
name|ThreadLocal
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
specifier|synchronized
name|String
name|initialValue
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|public
specifier|static
name|void
name|setIpAddress
parameter_list|(
name|String
name|ipAddress
parameter_list|)
block|{
name|threadLocalIpAddress
operator|.
name|set
argument_list|(
name|ipAddress
argument_list|)
expr_stmt|;
block|}
comment|// This will return null if the metastore is not being accessed from a metastore Thrift server,
comment|// or if the TTransport being used to connect is not an instance of TSocket.
specifier|public
specifier|static
name|String
name|getIpAddress
parameter_list|()
block|{
return|return
name|threadLocalIpAddress
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Integer
name|get
parameter_list|()
block|{
return|return
name|threadLocalId
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
name|HMSHandler
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
operator|new
name|HiveConf
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HMSHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|MetaException
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|hiveConf
operator|=
name|conf
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
block|}
specifier|public
name|HiveConf
name|getHiveConf
parameter_list|()
block|{
return|return
name|hiveConf
return|;
block|}
specifier|private
name|ClassLoader
name|classLoader
decl_stmt|;
specifier|private
name|AlterHandler
name|alterHandler
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MetaStorePreEventListener
argument_list|>
name|preListeners
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MetaStoreEventListener
argument_list|>
name|listeners
decl_stmt|;
specifier|private
name|List
argument_list|<
name|MetaStoreEndFunctionListener
argument_list|>
name|endFunctionListeners
decl_stmt|;
block|{
name|classLoader
operator|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
expr_stmt|;
if|if
condition|(
name|classLoader
operator|==
literal|null
condition|)
block|{
name|classLoader
operator|=
name|Configuration
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|init
parameter_list|()
throws|throws
name|MetaException
block|{
name|rawStoreClassName
operator|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_RAW_STORE_IMPL
argument_list|)
expr_stmt|;
name|checkForDefaultDb
operator|=
name|hiveConf
operator|.
name|getBoolean
argument_list|(
literal|"hive.metastore.checkForDefaultDb"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|String
name|alterHandlerName
init|=
name|hiveConf
operator|.
name|get
argument_list|(
literal|"hive.metastore.alter.impl"
argument_list|,
name|HiveAlterHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|alterHandler
operator|=
operator|(
name|AlterHandler
operator|)
name|ReflectionUtils
operator|.
name|newInstance
argument_list|(
name|MetaStoreUtils
operator|.
name|getClass
argument_list|(
name|alterHandlerName
argument_list|)
argument_list|,
name|hiveConf
argument_list|)
expr_stmt|;
name|wh
operator|=
operator|new
name|Warehouse
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|createDefaultDB
argument_list|()
expr_stmt|;
if|if
condition|(
name|hiveConf
operator|.
name|getBoolean
argument_list|(
literal|"hive.metastore.metrics.enabled"
argument_list|,
literal|false
argument_list|)
condition|)
block|{
try|try
block|{
name|Metrics
operator|.
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// log exception, but ignore inability to start
name|LOG
operator|.
name|error
argument_list|(
literal|"error in Metrics init: "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MetaStoreUtils
operator|.
name|printStackTrace
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|preListeners
operator|=
name|MetaStoreUtils
operator|.
name|getMetaStoreListeners
argument_list|(
name|MetaStorePreEventListener
operator|.
name|class
argument_list|,
name|hiveConf
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PRE_EVENT_LISTENERS
argument_list|)
argument_list|)
expr_stmt|;
name|listeners
operator|=
name|MetaStoreUtils
operator|.
name|getMetaStoreListeners
argument_list|(
name|MetaStoreEventListener
operator|.
name|class
argument_list|,
name|hiveConf
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_EVENT_LISTENERS
argument_list|)
argument_list|)
expr_stmt|;
name|endFunctionListeners
operator|=
name|MetaStoreUtils
operator|.
name|getMetaStoreListeners
argument_list|(
name|MetaStoreEndFunctionListener
operator|.
name|class
argument_list|,
name|hiveConf
argument_list|,
name|hiveConf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_END_FUNCTION_LISTENERS
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|cleanFreq
init|=
name|hiveConf
operator|.
name|getLongVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_EVENT_CLEAN_FREQ
argument_list|)
operator|*
literal|1000L
decl_stmt|;
if|if
condition|(
name|cleanFreq
operator|>
literal|0
condition|)
block|{
comment|// In default config, there is no timer.
name|Timer
name|cleaner
init|=
operator|new
name|Timer
argument_list|(
literal|"Metastore Events Cleaner Thread"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|cleaner
operator|.
name|schedule
argument_list|(
operator|new
name|EventCleanerTask
argument_list|(
name|this
argument_list|)
argument_list|,
name|cleanFreq
argument_list|,
name|cleanFreq
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|String
name|addPrefix
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|threadLocalId
operator|.
name|get
argument_list|()
operator|+
literal|": "
operator|+
name|s
return|;
block|}
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|threadLocalConf
operator|.
name|set
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|RawStore
name|ms
init|=
name|threadLocalMS
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
name|ms
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Configuration
name|getConf
parameter_list|()
block|{
name|Configuration
name|conf
init|=
name|threadLocalConf
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|Configuration
argument_list|(
name|hiveConf
argument_list|)
expr_stmt|;
name|threadLocalConf
operator|.
name|set
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
return|return
name|conf
return|;
block|}
comment|/**      * Get a cached RawStore.      *      * @return the cached RawStore      * @throws MetaException      */
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCATALOG"
block|}
argument_list|)
annotation|@
name|InterfaceStability
operator|.
name|Evolving
specifier|public
name|RawStore
name|getMS
parameter_list|()
throws|throws
name|MetaException
block|{
name|RawStore
name|ms
init|=
name|threadLocalMS
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|==
literal|null
condition|)
block|{
name|ms
operator|=
name|newRawStore
argument_list|()
expr_stmt|;
name|threadLocalMS
operator|.
name|set
argument_list|(
name|ms
argument_list|)
expr_stmt|;
name|ms
operator|=
name|threadLocalMS
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
return|return
name|ms
return|;
block|}
specifier|private
name|RawStore
name|newRawStore
parameter_list|()
throws|throws
name|MetaException
block|{
name|LOG
operator|.
name|info
argument_list|(
name|addPrefix
argument_list|(
literal|"Opening raw store with implemenation class:"
operator|+
name|rawStoreClassName
argument_list|)
argument_list|)
expr_stmt|;
name|Configuration
name|conf
init|=
name|getConf
argument_list|()
decl_stmt|;
return|return
name|RetryingRawStore
operator|.
name|getProxy
argument_list|(
name|hiveConf
argument_list|,
name|conf
argument_list|,
name|rawStoreClassName
argument_list|,
name|threadLocalId
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|createDefaultDB_core
parameter_list|(
name|RawStore
name|ms
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
block|{
try|try
block|{
name|ms
operator|.
name|getDatabase
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|ms
operator|.
name|createDatabase
argument_list|(
operator|new
name|Database
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|DEFAULT_DATABASE_COMMENT
argument_list|,
name|getDefaultDatabasePath
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HMSHandler
operator|.
name|createDefaultDB
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * create default database if it doesn't exist      *      * @throws MetaException      */
specifier|private
name|void
name|createDefaultDB
parameter_list|()
throws|throws
name|MetaException
block|{
synchronized|synchronized
init|(
name|HMSHandler
operator|.
name|class
init|)
block|{
if|if
condition|(
name|HMSHandler
operator|.
name|createDefaultDB
operator|||
operator|!
name|checkForDefaultDb
condition|)
block|{
return|return;
block|}
try|try
block|{
name|createDefaultDB_core
argument_list|(
name|getMS
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
assert|assert
operator|(
name|e
operator|instanceof
name|RuntimeException
operator|)
assert|;
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
block|}
block|}
specifier|private
name|void
name|logInfo
parameter_list|(
name|String
name|m
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|threadLocalId
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|m
argument_list|)
expr_stmt|;
name|logAuditEvent
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|startFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|String
name|extraLogInfo
parameter_list|)
block|{
name|incrementCounter
argument_list|(
name|function
argument_list|)
expr_stmt|;
name|logInfo
argument_list|(
operator|(
name|getIpAddress
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
literal|"source:"
operator|+
name|getIpAddress
argument_list|()
operator|+
literal|" "
operator|)
operator|+
name|function
operator|+
name|extraLogInfo
argument_list|)
expr_stmt|;
try|try
block|{
name|Metrics
operator|.
name|startScope
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception when starting metrics scope"
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|MetaStoreUtils
operator|.
name|printStackTrace
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|function
return|;
block|}
specifier|public
name|String
name|startFunction
parameter_list|(
name|String
name|function
parameter_list|)
block|{
return|return
name|startFunction
argument_list|(
name|function
argument_list|,
literal|""
argument_list|)
return|;
block|}
specifier|public
name|String
name|startTableFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|tbl
parameter_list|)
block|{
return|return
name|startFunction
argument_list|(
name|function
argument_list|,
literal|" : db="
operator|+
name|db
operator|+
literal|" tbl="
operator|+
name|tbl
argument_list|)
return|;
block|}
specifier|public
name|String
name|startMultiTableFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|String
name|db
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tbls
parameter_list|)
block|{
name|String
name|tableNames
init|=
name|join
argument_list|(
name|tbls
argument_list|,
literal|","
argument_list|)
decl_stmt|;
return|return
name|startFunction
argument_list|(
name|function
argument_list|,
literal|" : db="
operator|+
name|db
operator|+
literal|" tbls="
operator|+
name|tableNames
argument_list|)
return|;
block|}
specifier|public
name|String
name|startPartitionFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|tbl
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
return|return
name|startFunction
argument_list|(
name|function
argument_list|,
literal|" : db="
operator|+
name|db
operator|+
literal|" tbl="
operator|+
name|tbl
operator|+
literal|"["
operator|+
name|join
argument_list|(
name|partVals
argument_list|,
literal|","
argument_list|)
operator|+
literal|"]"
argument_list|)
return|;
block|}
specifier|public
name|String
name|startPartitionFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|String
name|db
parameter_list|,
name|String
name|tbl
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|)
block|{
return|return
name|startFunction
argument_list|(
name|function
argument_list|,
literal|" : db="
operator|+
name|db
operator|+
literal|" tbl="
operator|+
name|tbl
operator|+
literal|"partition="
operator|+
name|partName
argument_list|)
return|;
block|}
specifier|public
name|void
name|endFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|boolean
name|successful
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|endFunction
argument_list|(
name|function
argument_list|,
operator|new
name|MetaStoreEndFunctionContext
argument_list|(
name|successful
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endFunction
parameter_list|(
name|String
name|function
parameter_list|,
name|MetaStoreEndFunctionContext
name|context
parameter_list|)
block|{
try|try
block|{
name|Metrics
operator|.
name|endScope
argument_list|(
name|function
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Exception when closing metrics scope"
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MetaStoreEndFunctionListener
name|listener
range|:
name|endFunctionListeners
control|)
block|{
name|listener
operator|.
name|onEndFunction
argument_list|(
name|function
argument_list|,
name|context
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|fb_status
name|getStatus
parameter_list|()
block|{
return|return
name|fb_status
operator|.
name|ALIVE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|logInfo
argument_list|(
literal|"Shutting down the object store..."
argument_list|)
expr_stmt|;
name|RawStore
name|ms
init|=
name|threadLocalMS
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|ms
operator|!=
literal|null
condition|)
block|{
name|ms
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|threadLocalMS
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|logInfo
argument_list|(
literal|"Metastore shutdown complete."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getCounters
parameter_list|()
block|{
name|AbstractMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|counters
init|=
name|super
operator|.
name|getCounters
argument_list|()
decl_stmt|;
comment|// Allow endFunctionListeners to add any counters they have collected
if|if
condition|(
name|endFunctionListeners
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MetaStoreEndFunctionListener
name|listener
range|:
name|endFunctionListeners
control|)
block|{
name|listener
operator|.
name|exportCounters
argument_list|(
name|counters
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|counters
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|DATABASE_WAREHOUSE_SUFFIX
init|=
literal|".db"
decl_stmt|;
specifier|private
name|Path
name|getDefaultDatabasePath
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|dbName
operator|.
name|equalsIgnoreCase
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
condition|)
block|{
return|return
name|wh
operator|.
name|getWhRoot
argument_list|()
return|;
block|}
return|return
operator|new
name|Path
argument_list|(
name|wh
operator|.
name|getWhRoot
argument_list|()
argument_list|,
name|dbName
operator|.
name|toLowerCase
argument_list|()
operator|+
name|DATABASE_WAREHOUSE_SUFFIX
argument_list|)
return|;
block|}
specifier|private
name|void
name|create_database_core
parameter_list|(
name|RawStore
name|ms
parameter_list|,
specifier|final
name|Database
name|db
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
block|{
if|if
condition|(
operator|!
name|validateName
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|db
operator|.
name|getName
argument_list|()
operator|+
literal|" is not a valid database name"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|null
operator|==
name|db
operator|.
name|getLocationUri
argument_list|()
condition|)
block|{
name|db
operator|.
name|setLocationUri
argument_list|(
name|getDefaultDatabasePath
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|db
operator|.
name|setLocationUri
argument_list|(
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Path
name|dbPath
init|=
operator|new
name|Path
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|madeDir
init|=
literal|false
decl_stmt|;
try|try
block|{
name|firePreEvent
argument_list|(
operator|new
name|PreCreateDatabaseEvent
argument_list|(
name|db
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|dbPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|dbPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to create database path "
operator|+
name|dbPath
operator|+
literal|", failed to create database "
operator|+
name|db
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|madeDir
operator|=
literal|true
expr_stmt|;
block|}
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|ms
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|madeDir
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|dbPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onCreateDatabase
argument_list|(
operator|new
name|CreateDatabaseEvent
argument_list|(
name|db
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|create_database
parameter_list|(
specifier|final
name|Database
name|db
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"create_database"
argument_list|,
literal|": "
operator|+
name|db
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|get_database
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Database "
operator|+
name|db
operator|.
name|getName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|create_database_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"create_database"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Database
name|get_database
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"get_database"
argument_list|,
literal|": "
operator|+
name|name
argument_list|)
expr_stmt|;
name|Database
name|db
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|getMS
argument_list|()
operator|.
name|getDatabase
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
assert|assert
operator|(
name|e
operator|instanceof
name|RuntimeException
operator|)
assert|;
throw|throw
operator|(
name|RuntimeException
operator|)
name|e
throw|;
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_database"
argument_list|,
name|db
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|db
return|;
block|}
specifier|public
name|void
name|alter_database
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|Database
name|db
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|TException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"alter_database"
operator|+
name|dbName
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|getMS
argument_list|()
operator|.
name|alterDatabase
argument_list|(
name|dbName
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"alter_database"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|drop_database_core
parameter_list|(
name|RawStore
name|ms
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|,
specifier|final
name|boolean
name|cascade
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Database
name|db
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|tablePaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|partitionPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|db
operator|=
name|ms
operator|.
name|getDatabase
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreDropDatabaseEvent
argument_list|(
name|db
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|allTables
init|=
name|get_all_tables
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cascade
operator|&&
operator|!
name|allTables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Database "
operator|+
name|db
operator|.
name|getName
argument_list|()
operator|+
literal|" is not empty"
argument_list|)
throw|;
block|}
name|Path
name|path
init|=
operator|new
name|Path
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Database not dropped since "
operator|+
name|path
operator|+
literal|" is not writable by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
name|Path
name|databasePath
init|=
name|wh
operator|.
name|getDnsPath
argument_list|(
name|wh
operator|.
name|getDatabasePath
argument_list|(
name|db
argument_list|)
argument_list|)
decl_stmt|;
comment|// first drop tables
name|int
name|tableBatchSize
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_BATCH_RETRIEVE_MAX
argument_list|)
decl_stmt|;
name|int
name|startIndex
init|=
literal|0
decl_stmt|;
name|int
name|endIndex
init|=
operator|-
literal|1
decl_stmt|;
comment|// retrieve the tables from the metastore in batches to alleviate memory constraints
while|while
condition|(
name|endIndex
operator|<
name|allTables
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|startIndex
operator|=
name|endIndex
operator|+
literal|1
expr_stmt|;
name|endIndex
operator|=
name|endIndex
operator|+
name|tableBatchSize
expr_stmt|;
if|if
condition|(
name|endIndex
operator|>=
name|allTables
operator|.
name|size
argument_list|()
condition|)
block|{
name|endIndex
operator|=
name|allTables
operator|.
name|size
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tables
operator|=
name|ms
operator|.
name|getTableObjectsByName
argument_list|(
name|name
argument_list|,
name|allTables
operator|.
name|subList
argument_list|(
name|startIndex
argument_list|,
name|endIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|tables
operator|!=
literal|null
operator|&&
operator|!
name|tables
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Table
name|table
range|:
name|tables
control|)
block|{
comment|// If the table is not external and it might not be in a subdirectory of the database
comment|// add it's locations to the list of paths to delete
name|Path
name|tablePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|isExternal
argument_list|(
name|table
argument_list|)
condition|)
block|{
name|tablePath
operator|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|tablePath
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Database metadata not deleted since table: "
operator|+
name|table
operator|.
name|getTableName
argument_list|()
operator|+
literal|" has a parent location "
operator|+
name|tablePath
operator|.
name|getParent
argument_list|()
operator|+
literal|" which is not writable by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isSubdirectory
argument_list|(
name|databasePath
argument_list|,
name|tablePath
argument_list|)
condition|)
block|{
name|tablePaths
operator|.
name|add
argument_list|(
name|tablePath
argument_list|)
expr_stmt|;
block|}
block|}
comment|// For each partition in each table, drop the partitions and get a list of
comment|// partitions' locations which might need to be deleted
name|partitionPaths
operator|=
name|dropPartitionsAndGetLocations
argument_list|(
name|ms
argument_list|,
name|name
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|tablePath
argument_list|,
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|deleteData
operator|&&
operator|!
name|isExternal
argument_list|(
name|table
argument_list|)
argument_list|)
expr_stmt|;
comment|// Drop the table but not its data
name|drop_table
argument_list|(
name|name
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ms
operator|.
name|dropDatabase
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteData
condition|)
block|{
comment|// Delete the data in the partitions which have other locations
name|deletePartitionData
argument_list|(
name|partitionPaths
argument_list|)
expr_stmt|;
comment|// Delete the data in the tables which have other locations
for|for
control|(
name|Path
name|tablePath
range|:
name|tablePaths
control|)
block|{
name|deleteTableData
argument_list|(
name|tablePath
argument_list|)
expr_stmt|;
block|}
comment|// Delete the data in the database
try|try
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
operator|new
name|Path
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete database directory: "
operator|+
name|db
operator|.
name|getLocationUri
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// it is not a terrible thing even if the data is not deleted
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onDropDatabase
argument_list|(
operator|new
name|DropDatabaseEvent
argument_list|(
name|db
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Returns a BEST GUESS as to whether or not other is a subdirectory of parent. It does not      * take into account any intricacies of the underlying file system, which is assumed to be      * HDFS. This should not return any false positives, but may return false negatives.      *      * @param parent      * @param other      * @return      */
specifier|private
name|boolean
name|isSubdirectory
parameter_list|(
name|Path
name|parent
parameter_list|,
name|Path
name|other
parameter_list|)
block|{
return|return
name|other
operator|.
name|toString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|parent
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|Path
operator|.
name|SEPARATOR
argument_list|)
condition|?
name|parent
operator|.
name|toString
argument_list|()
else|:
name|parent
operator|.
name|toString
argument_list|()
operator|+
name|Path
operator|.
name|SEPARATOR
argument_list|)
return|;
block|}
specifier|public
name|void
name|drop_database
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|,
specifier|final
name|boolean
name|cascade
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"drop_database"
argument_list|,
literal|": "
operator|+
name|dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|DEFAULT_DATABASE_NAME
operator|.
name|equalsIgnoreCase
argument_list|(
name|dbName
argument_list|)
condition|)
block|{
name|endFunction
argument_list|(
literal|"drop_database"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Can not drop default database"
argument_list|)
throw|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|drop_database_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|deleteData
argument_list|,
name|cascade
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_database"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_databases
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"get_databases"
argument_list|,
literal|": "
operator|+
name|pattern
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getDatabases
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_databases"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_all_databases
parameter_list|()
throws|throws
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"get_all_databases"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getAllDatabases
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_all_databases"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|void
name|create_type_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|Type
name|type
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|validateName
argument_list|(
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Invalid type name"
argument_list|)
throw|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|is_type_exists
argument_list|(
name|ms
argument_list|,
name|type
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Type "
operator|+
name|type
operator|.
name|getName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|ms
operator|.
name|createType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|create_type
parameter_list|(
specifier|final
name|Type
name|type
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|startFunction
argument_list|(
literal|"create_type"
argument_list|,
literal|": "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|create_type_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"create_type"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
specifier|public
name|Type
name|get_type
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|startFunction
argument_list|(
literal|"get_type"
argument_list|,
literal|": "
operator|+
name|name
argument_list|)
expr_stmt|;
name|Type
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getType
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|ret
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Type \""
operator|+
name|name
operator|+
literal|"\" not found."
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_type"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|is_type_exists
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|typeName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
operator|(
name|ms
operator|.
name|getType
argument_list|(
name|typeName
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
specifier|private
name|void
name|drop_type_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
name|String
name|typeName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
comment|// drop any partitions
if|if
condition|(
operator|!
name|is_type_exists
argument_list|(
name|ms
argument_list|,
name|typeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|typeName
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|ms
operator|.
name|dropType
argument_list|(
name|typeName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop type "
operator|+
name|typeName
argument_list|)
throw|;
block|}
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|drop_type
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|startFunction
argument_list|(
literal|"drop_type"
argument_list|,
literal|": "
operator|+
name|name
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// TODO:pc validate that there are no types that refer to this
name|success
operator|=
name|getMS
argument_list|()
operator|.
name|dropType
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_type"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|success
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|get_type_all
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO Auto-generated method stub
name|startFunction
argument_list|(
literal|"get_type_all"
argument_list|,
literal|": "
operator|+
name|name
argument_list|)
expr_stmt|;
name|endFunction
argument_list|(
literal|"get_type_all"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
specifier|private
name|void
name|create_table_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|Table
name|tbl
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
block|{
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|validateName
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|||
operator|!
name|MetaStoreUtils
operator|.
name|validateColNames
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
operator|||
operator|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|MetaStoreUtils
operator|.
name|validateColNames
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
operator|)
operator|||
operator|!
name|MetaStoreUtils
operator|.
name|validateSkewedColNames
argument_list|(
operator|(
literal|null
operator|==
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|)
condition|?
literal|null
else|:
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColNames
argument_list|()
argument_list|)
operator|||
operator|!
name|MetaStoreUtils
operator|.
name|validateSkewedColNamesSubsetCol
argument_list|(
operator|(
literal|null
operator|==
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|)
condition|?
literal|null
else|:
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColNames
argument_list|()
argument_list|,
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
operator|+
literal|" is not a valid object name"
argument_list|)
throw|;
block|}
name|Path
name|tblPath
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|,
name|madeDir
init|=
literal|false
decl_stmt|;
try|try
block|{
name|firePreEvent
argument_list|(
operator|new
name|PreCreateTableEvent
argument_list|(
name|tbl
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|ms
operator|.
name|getDatabase
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"The database "
operator|+
name|tbl
operator|.
name|getDbName
argument_list|()
operator|+
literal|" does not exist"
argument_list|)
throw|;
block|}
comment|// get_table checks whether database exists, it should be moved here
if|if
condition|(
name|is_table_exists
argument_list|(
name|ms
argument_list|,
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Table "
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tbl
operator|.
name|getTableType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
operator|||
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tblPath
operator|=
name|wh
operator|.
name|getTablePath
argument_list|(
name|ms
operator|.
name|getDatabase
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|isExternal
argument_list|(
name|tbl
argument_list|)
operator|&&
operator|!
name|MetaStoreUtils
operator|.
name|isNonNativeTable
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Location: "
operator|+
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|+
literal|" specified for non-external table:"
operator|+
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tblPath
operator|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|tblPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tblPath
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|tblPath
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|tblPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|tblPath
operator|+
literal|" is not a directory or unable to create one"
argument_list|)
throw|;
block|}
name|madeDir
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// set create time
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|tbl
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|==
literal|null
operator|||
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|)
operator|==
literal|null
condition|)
block|{
name|tbl
operator|.
name|putToParameters
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ms
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|madeDir
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|tblPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|CreateTableEvent
name|createTableEvent
init|=
operator|new
name|CreateTableEvent
argument_list|(
name|tbl
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|createTableEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onCreateTable
argument_list|(
name|createTableEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|create_table
parameter_list|(
specifier|final
name|Table
name|tbl
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|create_table
argument_list|(
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|create_table_with_environment_context
parameter_list|(
specifier|final
name|Table
name|table
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|create_table
argument_list|(
name|table
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|create_table
parameter_list|(
specifier|final
name|Table
name|tbl
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
block|{
name|startFunction
argument_list|(
literal|"create_table"
argument_list|,
literal|": "
operator|+
name|tbl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|create_table_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"create_table"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|is_table_exists
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
operator|(
name|ms
operator|.
name|getTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
operator|!=
literal|null
operator|)
return|;
block|}
specifier|private
name|void
name|drop_table_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|boolean
name|isExternal
init|=
literal|false
decl_stmt|;
name|Path
name|tblPath
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|partPaths
init|=
literal|null
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
name|isExternal
operator|=
literal|false
expr_stmt|;
name|boolean
name|isIndexTable
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
comment|// drop any partitions
name|tbl
operator|=
name|get_table
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|name
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table metadata is corrupted"
argument_list|)
throw|;
block|}
name|firePreEvent
argument_list|(
operator|new
name|PreDropTableEvent
argument_list|(
name|tbl
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|isIndexTable
operator|=
name|isIndexTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|isIndexTable
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"The table "
operator|+
name|name
operator|+
literal|" is an index table. Please do drop index instead."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isIndexTable
condition|)
block|{
try|try
block|{
name|List
argument_list|<
name|Index
argument_list|>
name|indexes
init|=
name|ms
operator|.
name|getIndexes
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
while|while
condition|(
name|indexes
operator|!=
literal|null
operator|&&
name|indexes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|Index
name|idx
range|:
name|indexes
control|)
block|{
name|this
operator|.
name|drop_index_by_name
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|idx
operator|.
name|getIndexName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|indexes
operator|=
name|ms
operator|.
name|getIndexes
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|isExternal
operator|=
name|isExternal
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tblPath
operator|=
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|tblPath
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table metadata not deleted since "
operator|+
name|tblPath
operator|.
name|getParent
argument_list|()
operator|+
literal|" is not writable by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Drop the partitions and get a list of locations which need to be deleted
name|partPaths
operator|=
name|dropPartitionsAndGetLocations
argument_list|(
name|ms
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|tblPath
argument_list|,
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|deleteData
operator|&&
operator|!
name|isExternal
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ms
operator|.
name|dropTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop table"
argument_list|)
throw|;
block|}
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteData
operator|&&
operator|!
name|isExternal
condition|)
block|{
comment|// Delete the data in the partitions which have other locations
name|deletePartitionData
argument_list|(
name|partPaths
argument_list|)
expr_stmt|;
comment|// Delete the data in the table
name|deleteTableData
argument_list|(
name|tblPath
argument_list|)
expr_stmt|;
comment|// ok even if the data is not deleted
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onDropTable
argument_list|(
operator|new
name|DropTableEvent
argument_list|(
name|tbl
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Deletes the data in a table's location, if it fails logs an error      *      * @param tablePath      */
specifier|private
name|void
name|deleteTableData
parameter_list|(
name|Path
name|tablePath
parameter_list|)
block|{
if|if
condition|(
name|tablePath
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|tablePath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete table directory: "
operator|+
name|tablePath
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Give a list of partitions' locations, tries to delete each one      * and for each that fails logs an error.      *      * @param partPaths      */
specifier|private
name|void
name|deletePartitionData
parameter_list|(
name|List
argument_list|<
name|Path
argument_list|>
name|partPaths
parameter_list|)
block|{
if|if
condition|(
name|partPaths
operator|!=
literal|null
operator|&&
operator|!
name|partPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Path
name|partPath
range|:
name|partPaths
control|)
block|{
try|try
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|partPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete partition directory: "
operator|+
name|partPath
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Retrieves the partitions specified by partitionKeys. If checkLocation, for locations of      * partitions which may not be subdirectories of tablePath checks to make the locations are      * writable.      *      * Drops the metadata for each partition.      *      * Provides a list of locations of partitions which may not be subdirectories of tablePath.      *      * @param ms      * @param dbName      * @param tableName      * @param tablePath      * @param partitionKeys      * @param checkLocation      * @return      * @throws MetaException      * @throws IOException      */
specifier|private
name|List
argument_list|<
name|Path
argument_list|>
name|dropPartitionsAndGetLocations
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|Path
name|tablePath
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|partitionKeys
parameter_list|,
name|boolean
name|checkLocation
parameter_list|)
throws|throws
name|MetaException
throws|,
name|IOException
block|{
name|int
name|partitionBatchSize
init|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|hiveConf
argument_list|,
name|ConfVars
operator|.
name|METASTORE_BATCH_RETRIEVE_MAX
argument_list|)
decl_stmt|;
name|Path
name|tableDnsPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tablePath
operator|!=
literal|null
condition|)
block|{
name|tableDnsPath
operator|=
name|wh
operator|.
name|getDnsPath
argument_list|(
name|tablePath
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|partPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|Path
argument_list|>
argument_list|()
decl_stmt|;
comment|// call dropPartition on each of the table's partitions to follow the
comment|// procedure for cleanly dropping partitions.
while|while
condition|(
literal|true
condition|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partsToDelete
init|=
name|ms
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionBatchSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|partsToDelete
operator|==
literal|null
operator|||
name|partsToDelete
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
break|break;
block|}
for|for
control|(
name|Partition
name|part
range|:
name|partsToDelete
control|)
block|{
if|if
condition|(
name|checkLocation
operator|&&
name|part
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
operator|&&
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|Path
name|partPath
init|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tableDnsPath
operator|==
literal|null
operator|||
operator|(
name|partPath
operator|!=
literal|null
operator|&&
operator|!
name|isSubdirectory
argument_list|(
name|tableDnsPath
argument_list|,
name|partPath
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|partPath
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table metadata not deleted since the partition "
operator|+
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|partitionKeys
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
operator|+
literal|" has parent location "
operator|+
name|partPath
operator|.
name|getParent
argument_list|()
operator|+
literal|" which is not writable "
operator|+
literal|"by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
name|partPaths
operator|.
name|add
argument_list|(
name|partPath
argument_list|)
expr_stmt|;
block|}
block|}
name|ms
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partPaths
return|;
block|}
specifier|public
name|void
name|drop_table
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|startTableFunction
argument_list|(
literal|"drop_table"
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|drop_table_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_table"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Is this an external table?      *      * @param table      *          Check if this table is external.      * @return True if the table is external, otherwise false.      */
specifier|private
name|boolean
name|isExternal
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isIndexTable
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
return|return
name|MetaStoreUtils
operator|.
name|isIndexTable
argument_list|(
name|table
argument_list|)
return|;
block|}
specifier|public
name|Table
name|get_table
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|Table
name|t
init|=
literal|null
decl_stmt|;
name|startTableFunction
argument_list|(
literal|"get_table"
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|t
operator|=
name|getMS
argument_list|()
operator|.
name|getTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|dbname
operator|+
literal|"."
operator|+
name|name
operator|+
literal|" table not found"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_table"
argument_list|,
name|t
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|t
return|;
block|}
comment|/**      * Gets multiple tables from the hive metastore.      *      * @param dbname      *          The name of the database in which the tables reside      * @param names      *          The names of the tables to get.      *      * @return A list of tables whose names are in the the list "names" and      *         are retrievable from the database specified by "dbnames."      *         There is no guarantee of the order of the returned tables.      *         If there are duplicate names, only one instance of the table will be returned.      * @throws MetaException      * @throws InvalidOperationException      * @throws UnknownDBException      */
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|get_table_objects_by_name
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
literal|null
decl_stmt|;
name|startMultiTableFunction
argument_list|(
literal|"get_multi_table"
argument_list|,
name|dbname
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dbname
operator|==
literal|null
operator|||
name|dbname
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnknownDBException
argument_list|(
literal|"DB name is null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|dbname
operator|+
literal|" cannot find null tables"
argument_list|)
throw|;
block|}
name|tables
operator|=
name|getMS
argument_list|()
operator|.
name|getTableObjectsByName
argument_list|(
name|dbname
argument_list|,
name|names
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|UnknownDBException
condition|)
block|{
throw|throw
operator|(
name|UnknownDBException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_multi_table"
argument_list|,
name|tables
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|tables
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_table_names_by_filter
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|filter
parameter_list|,
specifier|final
name|short
name|maxTables
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
literal|null
decl_stmt|;
name|startFunction
argument_list|(
literal|"get_table_names_by_filter"
argument_list|,
literal|": db = "
operator|+
name|dbName
operator|+
literal|", filter = "
operator|+
name|filter
argument_list|)
expr_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|dbName
operator|==
literal|null
operator|||
name|dbName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|UnknownDBException
argument_list|(
literal|"DB name is null or empty"
argument_list|)
throw|;
block|}
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|filter
operator|+
literal|" cannot apply null filter"
argument_list|)
throw|;
block|}
name|tables
operator|=
name|getMS
argument_list|()
operator|.
name|listTableNamesByFilter
argument_list|(
name|dbName
argument_list|,
name|filter
argument_list|,
name|maxTables
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|UnknownDBException
condition|)
block|{
throw|throw
operator|(
name|UnknownDBException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_table_names_by_filter"
argument_list|,
name|tables
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|tables
return|;
block|}
specifier|public
name|boolean
name|set_table_parameters
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|endFunction
argument_list|(
name|startTableFunction
argument_list|(
literal|"set_table_parameters"
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// TODO Auto-generated method stub
return|return
literal|false
return|;
block|}
specifier|private
name|Partition
name|append_partition_common
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|,
name|madeDir
init|=
literal|false
decl_stmt|;
name|Path
name|partLocation
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|part
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setValues
argument_list|(
name|part_vals
argument_list|)
expr_stmt|;
name|PreAddPartitionEvent
name|event
init|=
operator|new
name|PreAddPartitionEvent
argument_list|(
name|part
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|firePreEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|Table
name|tbl
init|=
name|ms
operator|.
name|getTable
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to add partition because table or database do not exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Cannot append a partition to a view"
argument_list|)
throw|;
block|}
name|part
operator|.
name|setSd
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
argument_list|)
expr_stmt|;
name|partLocation
operator|=
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part_vals
argument_list|)
argument_list|)
expr_stmt|;
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|partLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|old_part
init|=
literal|null
decl_stmt|;
try|try
block|{
name|old_part
operator|=
name|ms
operator|.
name|getPartition
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// this means there is no existing partition
name|old_part
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|old_part
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Partition already exists:"
operator|+
name|part
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|partLocation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|partLocation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|partLocation
operator|+
literal|" is not a directory or unable to create one"
argument_list|)
throw|;
block|}
name|madeDir
operator|=
literal|true
expr_stmt|;
block|}
comment|// set create time
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|part
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
name|part
operator|.
name|putToParameters
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|madeDir
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|partLocation
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|AddPartitionEvent
name|addPartitionEvent
init|=
operator|new
name|AddPartitionEvent
argument_list|(
name|part
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onAddPartition
argument_list|(
name|addPartitionEvent
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|part
return|;
block|}
specifier|private
name|void
name|firePreEvent
parameter_list|(
name|PreEventContext
name|event
parameter_list|)
throws|throws
name|MetaException
block|{
for|for
control|(
name|MetaStorePreEventListener
name|listener
range|:
name|preListeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|onEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvalidOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|Partition
name|append_partition
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|startPartitionFunction
argument_list|(
literal|"append_partition"
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|part
range|:
name|part_vals
control|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
name|Partition
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|append_partition_common
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"append_partition"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|int
name|add_partitions_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|AlreadyExistsException
block|{
name|String
name|db
init|=
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getDbName
argument_list|()
decl_stmt|;
name|String
name|tbl
init|=
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getTableName
argument_list|()
decl_stmt|;
name|logInfo
argument_list|(
literal|"add_partitions : db="
operator|+
name|db
operator|+
literal|" tbl="
operator|+
name|tbl
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Map
argument_list|<
name|Partition
argument_list|,
name|Boolean
argument_list|>
name|addedPartitions
init|=
operator|new
name|HashMap
argument_list|<
name|Partition
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
comment|// No environment context is passed.
name|Entry
argument_list|<
name|Partition
argument_list|,
name|Boolean
argument_list|>
name|e
init|=
name|add_partition_core_notxn
argument_list|(
name|ms
argument_list|,
name|part
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|addedPartitions
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Partition
argument_list|,
name|Boolean
argument_list|>
name|e
range|:
name|addedPartitions
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
operator|new
name|Path
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// we just created this directory - it's not a case of pre-creation, so we nuke
block|}
block|}
block|}
block|}
return|return
name|parts
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|int
name|add_partitions
parameter_list|(
specifier|final
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|AlreadyExistsException
block|{
name|startFunction
argument_list|(
literal|"add_partition"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|0
return|;
block|}
name|Integer
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|add_partitions_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|parts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"add_partition"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * An implementation of add_partition_core that does not commit      * transaction or rollback transaction as part of its operation      * - it is assumed that will be tended to from outside this call      *      * @param ms      * @param part      * @param envContext      *          parameters passed by the client      * @return      * @throws InvalidObjectException      * @throws AlreadyExistsException      * @throws MetaException      */
specifier|private
name|Entry
argument_list|<
name|Partition
argument_list|,
name|Boolean
argument_list|>
name|add_partition_core_notxn
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|Partition
name|part
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|,
name|madeDir
init|=
literal|false
decl_stmt|;
name|Path
name|partLocation
init|=
literal|null
decl_stmt|;
try|try
block|{
name|firePreEvent
argument_list|(
operator|new
name|PreAddPartitionEvent
argument_list|(
name|part
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|Partition
name|old_part
init|=
literal|null
decl_stmt|;
try|try
block|{
name|old_part
operator|=
name|ms
operator|.
name|getPartition
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// this means there is no existing partition
name|old_part
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|old_part
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Partition already exists:"
operator|+
name|part
argument_list|)
throw|;
block|}
name|Table
name|tbl
init|=
name|ms
operator|.
name|getTable
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to add partition because table or database do not exist"
argument_list|)
throw|;
block|}
name|String
name|partLocationStr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|part
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partLocationStr
operator|=
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|partLocationStr
operator|==
literal|null
operator|||
name|partLocationStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// set default location if not specified and this is
comment|// a physical table partition (not a view)
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|partLocation
operator|=
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|,
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Cannot specify location for a view partition"
argument_list|)
throw|;
block|}
name|partLocation
operator|=
name|wh
operator|.
name|getDnsPath
argument_list|(
operator|new
name|Path
argument_list|(
name|partLocationStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|partLocation
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|partLocation
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check to see if the directory already exists before calling
comment|// mkdirs() because if the file system is read-only, mkdirs will
comment|// throw an exception even if the directory already exists.
if|if
condition|(
operator|!
name|wh
operator|.
name|isDir
argument_list|(
name|partLocation
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|wh
operator|.
name|mkdirs
argument_list|(
name|partLocation
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|partLocation
operator|+
literal|" is not a directory or unable to create one"
argument_list|)
throw|;
block|}
name|madeDir
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// set create time
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|part
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|.
name|getParameters
argument_list|()
operator|==
literal|null
operator|||
name|part
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|)
operator|==
literal|null
condition|)
block|{
name|part
operator|.
name|putToParameters
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Inherit table properties into partition properties.
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblParams
init|=
name|tbl
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|String
name|inheritProps
init|=
name|hiveConf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_PART_INHERIT_TBL_PROPS
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
comment|// Default value is empty string in which case no properties will be inherited.
comment|// * implies all properties needs to be inherited
name|Set
argument_list|<
name|String
argument_list|>
name|inheritKeys
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|inheritProps
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|inheritKeys
operator|.
name|contains
argument_list|(
literal|"*"
argument_list|)
condition|)
block|{
name|inheritKeys
operator|=
name|tblParams
operator|.
name|keySet
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|String
name|key
range|:
name|inheritKeys
control|)
block|{
name|String
name|paramVal
init|=
name|tblParams
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|paramVal
condition|)
block|{
comment|// add the property only if it exists in table properties
name|part
operator|.
name|putToParameters
argument_list|(
name|key
argument_list|,
name|paramVal
argument_list|)
expr_stmt|;
block|}
block|}
name|success
operator|=
name|ms
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|madeDir
condition|)
block|{
name|wh
operator|.
name|deleteDir
argument_list|(
name|partLocation
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|AddPartitionEvent
name|addPartitionEvent
init|=
operator|new
name|AddPartitionEvent
argument_list|(
name|part
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|addPartitionEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onAddPartition
argument_list|(
name|addPartitionEvent
argument_list|)
expr_stmt|;
block|}
block|}
name|Map
argument_list|<
name|Partition
argument_list|,
name|Boolean
argument_list|>
name|returnVal
init|=
operator|new
name|HashMap
argument_list|<
name|Partition
argument_list|,
name|Boolean
argument_list|>
argument_list|()
decl_stmt|;
name|returnVal
operator|.
name|put
argument_list|(
name|part
argument_list|,
name|madeDir
argument_list|)
expr_stmt|;
return|return
name|returnVal
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
specifier|private
name|Partition
name|add_partition_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|Partition
name|part
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Partition
name|retPtn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|retPtn
operator|=
name|add_partition_core_notxn
argument_list|(
name|ms
argument_list|,
name|part
argument_list|,
name|envContext
argument_list|)
operator|.
name|getKey
argument_list|()
expr_stmt|;
comment|// we proceed only if we'd actually succeeded anyway, otherwise,
comment|// we'd have thrown an exception
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|retPtn
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|add_partition
parameter_list|(
specifier|final
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
return|return
name|add_partition
argument_list|(
name|part
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|add_partition_with_environment_context
parameter_list|(
specifier|final
name|Partition
name|part
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
return|return
name|add_partition
argument_list|(
name|part
argument_list|,
name|envContext
argument_list|)
return|;
block|}
specifier|private
name|Partition
name|add_partition
parameter_list|(
specifier|final
name|Partition
name|part
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|startTableFunction
argument_list|(
literal|"add_partition"
argument_list|,
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|Partition
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|add_partition_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|part
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"add_partition"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|drop_partition_common
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Path
name|partPath
init|=
literal|null
decl_stmt|;
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
name|Partition
name|part
init|=
literal|null
decl_stmt|;
name|boolean
name|isArchived
init|=
literal|false
decl_stmt|;
name|Path
name|archiveParentDir
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|part
operator|=
name|ms
operator|.
name|getPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreDropPartitionEvent
argument_list|(
name|part
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
literal|"Partition doesn't exist. "
operator|+
name|part_vals
argument_list|)
throw|;
block|}
name|isArchived
operator|=
name|MetaStoreUtils
operator|.
name|isArchived
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
name|isArchived
condition|)
block|{
name|archiveParentDir
operator|=
name|MetaStoreUtils
operator|.
name|getOriginalLocation
argument_list|(
name|part
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|archiveParentDir
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table partition not deleted since "
operator|+
name|archiveParentDir
operator|.
name|getParent
argument_list|()
operator|+
literal|" is not writable by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|!
name|ms
operator|.
name|dropPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop partition"
argument_list|)
throw|;
block|}
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|part
operator|.
name|getSd
argument_list|()
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
operator|)
condition|)
block|{
name|partPath
operator|=
operator|new
name|Path
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|partPath
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table partition not deleted since "
operator|+
name|partPath
operator|.
name|getParent
argument_list|()
operator|+
literal|" is not writable by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|tbl
operator|=
name|get_table
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deleteData
operator|&&
operator|(
operator|(
name|partPath
operator|!=
literal|null
operator|)
operator|||
operator|(
name|archiveParentDir
operator|!=
literal|null
operator|)
operator|)
condition|)
block|{
if|if
condition|(
name|tbl
operator|!=
literal|null
operator|&&
operator|!
name|isExternal
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
comment|// Archived partitions have har:/to_har_file as their location.
comment|// The original directory was saved in params
if|if
condition|(
name|isArchived
condition|)
block|{
assert|assert
operator|(
name|archiveParentDir
operator|!=
literal|null
operator|)
assert|;
name|wh
operator|.
name|deleteDir
argument_list|(
name|archiveParentDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
assert|assert
operator|(
name|partPath
operator|!=
literal|null
operator|)
assert|;
name|wh
operator|.
name|deleteDir
argument_list|(
name|partPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// ok even if the data is not deleted
block|}
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onDropPartition
argument_list|(
operator|new
name|DropPartitionEvent
argument_list|(
name|part
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|drop_partition
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startPartitionFunction
argument_list|(
literal|"drop_partition"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Partition values:"
operator|+
name|part_vals
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|drop_partition_common
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_partition"
argument_list|,
name|ret
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Partition
name|get_partition
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|startPartitionFunction
argument_list|(
literal|"get_partition"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|Partition
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partition"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|get_partition_with_auth
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|String
name|user_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|startPartitionFunction
argument_list|(
literal|"get_partition_with_auth"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|Partition
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartitionWithAuth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|user_name
argument_list|,
name|group_names
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partition_with_auth"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|startTableFunction
argument_list|(
literal|"get_partitions"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartitions
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_with_auth
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|short
name|maxParts
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"get_partitions_with_auth"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartitionsWithAuth
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxParts
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_with_auth"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partition_names
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
block|{
name|startTableFunction
argument_list|(
literal|"get_partition_names"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|listPartitionNames
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partition_names"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_partition
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|rename_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
literal|null
argument_list|,
name|new_part
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_partition_with_environment_context
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|Partition
name|newPartition
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|rename_partition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|newPartition
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rename_partition
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
comment|// Call rename_partition without an environment context.
name|rename_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|new_part
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|rename_partition
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|Partition
name|new_part
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"alter_partition"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New partition values:"
operator|+
name|new_part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|part_vals
operator|!=
literal|null
operator|&&
name|part_vals
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Old Partition values:"
operator|+
name|part_vals
argument_list|)
expr_stmt|;
block|}
block|}
name|Partition
name|oldPart
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|firePreEvent
argument_list|(
operator|new
name|PreAlterPartitionEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|new_part
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|oldPart
operator|=
name|alterHandler
operator|.
name|alterPartition
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|wh
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|new_part
argument_list|)
expr_stmt|;
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|AlterPartitionEvent
name|alterPartitionEvent
init|=
operator|new
name|AlterPartitionEvent
argument_list|(
name|oldPart
argument_list|,
name|new_part
argument_list|,
literal|true
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|alterPartitionEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onAlterPartition
argument_list|(
name|alterPartitionEvent
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"alter_partition"
argument_list|,
name|oldPart
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_partitions
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|Partition
argument_list|>
name|new_parts
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"alter_partitions"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
for|for
control|(
name|Partition
name|tmpPart
range|:
name|new_parts
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"New partition values:"
operator|+
name|tmpPart
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// all partitions are altered atomically
comment|// all prehooks are fired together followed by all post hooks
name|List
argument_list|<
name|Partition
argument_list|>
name|oldParts
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
for|for
control|(
name|Partition
name|tmpPart
range|:
name|new_parts
control|)
block|{
try|try
block|{
for|for
control|(
name|MetaStorePreEventListener
name|listener
range|:
name|preListeners
control|)
block|{
name|listener
operator|.
name|onEvent
argument_list|(
operator|new
name|PreAlterPartitionEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
literal|null
argument_list|,
name|tmpPart
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|oldParts
operator|=
name|alterHandler
operator|.
name|alterPartitions
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|wh
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|new_parts
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Partition
argument_list|>
name|olditr
init|=
name|oldParts
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|Partition
name|tmpPart
range|:
name|new_parts
control|)
block|{
name|Partition
name|oldTmpPart
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|olditr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|oldTmpPart
operator|=
operator|(
name|Partition
operator|)
name|olditr
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"failed to alterpartitions"
argument_list|)
throw|;
block|}
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|AlterPartitionEvent
name|alterPartitionEvent
init|=
operator|new
name|AlterPartitionEvent
argument_list|(
name|oldTmpPart
argument_list|,
name|tmpPart
argument_list|,
literal|true
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|listener
operator|.
name|onAlterPartition
argument_list|(
name|alterPartitionEvent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|AlreadyExistsException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"alter_partition"
argument_list|,
name|oldParts
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|public
name|boolean
name|create_index
parameter_list|(
name|Index
name|index_def
parameter_list|)
throws|throws
name|IndexAlreadyExistsException
throws|,
name|MetaException
block|{
name|endFunction
argument_list|(
name|startFunction
argument_list|(
literal|"create_index"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|// TODO Auto-generated method stub
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Not yet implemented"
argument_list|)
throw|;
block|}
specifier|public
name|void
name|alter_index
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|base_table_name
parameter_list|,
specifier|final
name|String
name|index_name
parameter_list|,
specifier|final
name|Index
name|newIndex
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"alter_index"
argument_list|,
literal|": db="
operator|+
name|dbname
operator|+
literal|" base_tbl="
operator|+
name|base_table_name
operator|+
literal|" idx="
operator|+
name|index_name
operator|+
literal|" newidx="
operator|+
name|newIndex
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
name|newIndex
operator|.
name|putToParameters
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|getMS
argument_list|()
operator|.
name|alterIndex
argument_list|(
name|dbname
argument_list|,
name|base_table_name
argument_list|,
name|index_name
argument_list|,
name|newIndex
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"alter_index"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
throws|throws
name|TException
block|{
name|endFunction
argument_list|(
name|startFunction
argument_list|(
literal|"getVersion"
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|"3.0"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_table
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Table
name|newTable
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
block|{
comment|// Do not set an environment context.
name|alter_table
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|newTable
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_table_with_environment_context
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Table
name|newTable
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|alter_table
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|newTable
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|alter_table
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Table
name|newTable
parameter_list|,
specifier|final
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"alter_table"
argument_list|,
literal|": db="
operator|+
name|dbname
operator|+
literal|" tbl="
operator|+
name|name
operator|+
literal|" newtbl="
operator|+
name|newTable
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Update the time if it hasn't been specified.
if|if
condition|(
name|newTable
operator|.
name|getParameters
argument_list|()
operator|==
literal|null
operator|||
name|newTable
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|)
operator|==
literal|null
condition|)
block|{
name|newTable
operator|.
name|putToParameters
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Table
name|oldt
init|=
name|get_table
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreAlterTableEvent
argument_list|(
name|oldt
argument_list|,
name|newTable
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|alterHandler
operator|.
name|alterTable
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|wh
argument_list|,
name|dbname
argument_list|,
name|name
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|AlterTableEvent
name|alterTableEvent
init|=
operator|new
name|AlterTableEvent
argument_list|(
name|oldt
argument_list|,
name|newTable
argument_list|,
name|success
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|alterTableEvent
operator|.
name|setEnvironmentContext
argument_list|(
name|envContext
argument_list|)
expr_stmt|;
name|listener
operator|.
name|onAlterTable
argument_list|(
name|alterTableEvent
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
comment|// thrown when the table to be altered does not exist
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|InvalidOperationException
condition|)
block|{
throw|throw
operator|(
name|InvalidOperationException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"alter_table"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_tables
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"get_tables"
argument_list|,
literal|": db="
operator|+
name|dbname
operator|+
literal|" pat="
operator|+
name|pattern
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getTables
argument_list|(
name|dbname
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_tables"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_all_tables
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|)
throws|throws
name|MetaException
block|{
name|startFunction
argument_list|(
literal|"get_all_tables"
argument_list|,
literal|": db="
operator|+
name|dbname
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getAllTables
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_all_tables"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_fields
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|startFunction
argument_list|(
literal|"get_fields"
argument_list|,
literal|": db="
operator|+
name|db
operator|+
literal|"tbl="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|String
index|[]
name|names
init|=
name|tableName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
name|base_table_name
init|=
name|names
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|tbl
decl_stmt|;
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|tbl
operator|=
name|get_table
argument_list|(
name|db
argument_list|,
name|base_table_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|boolean
name|getColsFromSerDe
init|=
name|SerDeUtils
operator|.
name|shouldGetColsFromSerDe
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getColsFromSerDe
condition|)
block|{
name|ret
operator|=
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|Deserializer
name|s
init|=
name|MetaStoreUtils
operator|.
name|getDeserializer
argument_list|(
name|hiveConf
argument_list|,
name|tbl
argument_list|)
decl_stmt|;
name|ret
operator|=
name|MetaStoreUtils
operator|.
name|getFieldsFromDeserializer
argument_list|(
name|tableName
argument_list|,
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|UnknownDBException
condition|)
block|{
throw|throw
operator|(
name|UnknownDBException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|UnknownTableException
condition|)
block|{
throw|throw
operator|(
name|UnknownTableException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_fields"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**      * Return the schema of the table. This function includes partition columns      * in addition to the regular columns.      *      * @param db      *          Name of the database      * @param tableName      *          Name of the table      * @return List of columns, each column is a FieldSchema structure      * @throws MetaException      * @throws UnknownTableException      * @throws UnknownDBException      */
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|get_schema
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|startFunction
argument_list|(
literal|"get_schema"
argument_list|,
literal|": db="
operator|+
name|db
operator|+
literal|"tbl="
operator|+
name|tableName
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
index|[]
name|names
init|=
name|tableName
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|String
name|base_table_name
init|=
name|names
index|[
literal|0
index|]
decl_stmt|;
name|Table
name|tbl
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|get_table
argument_list|(
name|db
argument_list|,
name|base_table_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fieldSchemas
init|=
name|get_fields
argument_list|(
name|db
argument_list|,
name|base_table_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|==
literal|null
operator|||
name|fieldSchemas
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
name|tableName
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// Combine the column field schemas and the partition keys to create the
comment|// whole schema
name|fieldSchemas
operator|.
name|addAll
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|fieldSchemas
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|UnknownDBException
condition|)
block|{
throw|throw
operator|(
name|UnknownDBException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|UnknownTableException
condition|)
block|{
throw|throw
operator|(
name|UnknownTableException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_schema"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getCpuProfile
parameter_list|(
name|int
name|profileDurationInSec
parameter_list|)
throws|throws
name|TException
block|{
return|return
literal|""
return|;
block|}
comment|/**      * Returns the value of the given configuration variable name. If the      * configuration variable with the given name doesn't exist, or if there      * were an exception thrown while retrieving the variable, or if name is      * null, defaultValue is returned.      */
specifier|public
name|String
name|get_config_value
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|TException
throws|,
name|ConfigValSecurityException
block|{
name|startFunction
argument_list|(
literal|"get_config_value"
argument_list|,
literal|": name="
operator|+
name|name
operator|+
literal|" defaultValue="
operator|+
name|defaultValue
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|defaultValue
return|;
block|}
comment|// Allow only keys that start with hive.*, hdfs.*, mapred.* for security
comment|// i.e. don't allow access to db password
if|if
condition|(
operator|!
name|Pattern
operator|.
name|matches
argument_list|(
literal|"(hive|hdfs|mapred).*"
argument_list|,
name|name
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConfigValSecurityException
argument_list|(
literal|"For security reasons, the "
operator|+
literal|"config key "
operator|+
name|name
operator|+
literal|" cannot be accessed"
argument_list|)
throw|;
block|}
name|String
name|toReturn
init|=
name|defaultValue
decl_stmt|;
try|try
block|{
name|toReturn
operator|=
name|hiveConf
operator|.
name|get
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|threadLocalId
operator|.
name|get
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
literal|"RuntimeException thrown in get_config_value - msg: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" cause: "
operator|+
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|toReturn
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|ConfigValSecurityException
condition|)
block|{
throw|throw
operator|(
name|ConfigValSecurityException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|TException
name|te
init|=
operator|new
name|TException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|te
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|te
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_config_value"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getPartValsFromName
parameter_list|(
name|RawStore
name|ms
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|partName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
block|{
comment|// Unescape the partition name
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|hm
init|=
name|Warehouse
operator|.
name|makeSpecFromName
argument_list|(
name|partName
argument_list|)
decl_stmt|;
comment|// getPartition expects partition values in a list. use info from the
comment|// table to put the partition column values in order
name|Table
name|t
init|=
name|ms
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
name|dbName
operator|+
literal|"."
operator|+
name|tblName
operator|+
literal|" table not found"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|t
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|field
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|val
init|=
name|hm
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"incomplete partition name - missing "
operator|+
name|key
argument_list|)
throw|;
block|}
name|partVals
operator|.
name|add
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
return|return
name|partVals
return|;
block|}
specifier|private
name|Partition
name|get_partition_by_name_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
literal|null
decl_stmt|;
try|try
block|{
name|partVals
operator|=
name|getPartValsFromName
argument_list|(
name|ms
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|Partition
name|p
init|=
name|ms
operator|.
name|getPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|db_name
operator|+
literal|"."
operator|+
name|tbl_name
operator|+
literal|" partition ("
operator|+
name|part_name
operator|+
literal|") not found"
argument_list|)
throw|;
block|}
return|return
name|p
return|;
block|}
specifier|public
name|Partition
name|get_partition_by_name
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"get_partition_by_name"
argument_list|,
literal|": db="
operator|+
name|db_name
operator|+
literal|" tbl="
operator|+
name|tbl_name
operator|+
literal|" part="
operator|+
name|part_name
argument_list|)
expr_stmt|;
name|Partition
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|get_partition_by_name_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partition_by_name"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|Partition
name|append_partition_by_name
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|part_name
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"append_partition_by_name"
argument_list|,
literal|": db="
operator|+
name|db_name
operator|+
literal|" tbl="
operator|+
name|tbl_name
operator|+
literal|" part="
operator|+
name|part_name
argument_list|)
expr_stmt|;
name|Partition
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|getPartValsFromName
argument_list|(
name|ms
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
decl_stmt|;
name|ret
operator|=
name|append_partition_common
argument_list|(
name|ms
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partVals
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"append_partition_by_name"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|drop_partition_by_name_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|part_name
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|IOException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
literal|null
decl_stmt|;
try|try
block|{
name|partVals
operator|=
name|getPartValsFromName
argument_list|(
name|ms
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|drop_partition_common
argument_list|(
name|ms
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partVals
argument_list|,
name|deleteData
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_partition_by_name
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|part_name
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"drop_partition_by_name"
argument_list|,
literal|": db="
operator|+
name|db_name
operator|+
literal|" tbl="
operator|+
name|tbl_name
operator|+
literal|" part="
operator|+
name|part_name
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|drop_partition_by_name_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_name
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_partition_by_name"
argument_list|,
name|ret
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_ps
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
name|startPartitionFunction
argument_list|(
literal|"get_partitions_ps"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|get_partitions_ps_with_auth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_ps"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_ps_with_auth
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|short
name|max_parts
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
name|startPartitionFunction
argument_list|(
literal|"get_partitions_ps_with_auth"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|listPartitionsPsWithAuth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_ps_with_auth"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_partition_names_ps
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
name|startPartitionFunction
argument_list|(
literal|"get_partitions_names_ps"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|listPartitionNamesPs
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_names_ps"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|partition_name_to_vals
parameter_list|(
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|part_name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
init|=
name|Warehouse
operator|.
name|makeSpecFromName
argument_list|(
name|part_name
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|part_vals
operator|.
name|addAll
argument_list|(
name|map
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|part_vals
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partition_name_to_spec
parameter_list|(
name|String
name|part_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|part_name
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
return|;
block|}
return|return
name|Warehouse
operator|.
name|makeSpecFromName
argument_list|(
name|part_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Index
name|add_index
parameter_list|(
specifier|final
name|Index
name|newIndex
parameter_list|,
specifier|final
name|Table
name|indexTable
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"add_index"
argument_list|,
literal|": "
operator|+
name|newIndex
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|indexTable
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Index
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|add_index_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|newIndex
argument_list|,
name|indexTable
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|InvalidObjectException
condition|)
block|{
throw|throw
operator|(
name|InvalidObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|AlreadyExistsException
condition|)
block|{
throw|throw
operator|(
name|AlreadyExistsException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"add_index"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Index
name|add_index_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|Index
name|index
parameter_list|,
specifier|final
name|Table
name|indexTable
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|,
name|indexTableCreated
init|=
literal|false
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|Index
name|old_index
init|=
literal|null
decl_stmt|;
try|try
block|{
name|old_index
operator|=
name|get_index_by_name
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|,
name|index
operator|.
name|getIndexName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{         }
if|if
condition|(
name|old_index
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|AlreadyExistsException
argument_list|(
literal|"Index already exists:"
operator|+
name|index
argument_list|)
throw|;
block|}
name|Table
name|origTbl
init|=
name|ms
operator|.
name|getTable
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getOrigTableName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|origTbl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to add index because database or the orginal table do not exist"
argument_list|)
throw|;
block|}
comment|// set create time
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|/
literal|1000
decl_stmt|;
name|Table
name|indexTbl
init|=
name|indexTable
decl_stmt|;
if|if
condition|(
name|indexTbl
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|indexTbl
operator|=
name|ms
operator|.
name|getTable
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getIndexTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{           }
if|if
condition|(
name|indexTbl
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidObjectException
argument_list|(
literal|"Unable to add index because index table already exists"
argument_list|)
throw|;
block|}
name|this
operator|.
name|create_table
argument_list|(
name|indexTable
argument_list|)
expr_stmt|;
name|indexTableCreated
operator|=
literal|true
expr_stmt|;
block|}
name|index
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|time
argument_list|)
expr_stmt|;
name|index
operator|.
name|putToParameters
argument_list|(
name|Constants
operator|.
name|DDL_TIME
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|time
argument_list|)
argument_list|)
expr_stmt|;
name|ms
operator|.
name|addIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
return|return
name|index
return|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|indexTableCreated
condition|)
block|{
try|try
block|{
name|this
operator|.
name|drop_table
argument_list|(
name|index
operator|.
name|getDbName
argument_list|()
argument_list|,
name|index
operator|.
name|getIndexTableName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{             }
block|}
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_index_by_name
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"drop_index_by_name"
argument_list|,
literal|": db="
operator|+
name|dbName
operator|+
literal|" tbl="
operator|+
name|tblName
operator|+
literal|" index="
operator|+
name|indexName
argument_list|)
expr_stmt|;
name|boolean
name|ret
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|drop_index_by_name_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|indexName
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_index_by_name"
argument_list|,
name|ret
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|boolean
name|drop_index_by_name_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|,
specifier|final
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Path
name|tblPath
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|Path
argument_list|>
name|partPaths
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ms
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
comment|// drop the underlying index table
name|Index
name|index
init|=
name|get_index_by_name
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|indexName
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|indexName
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
name|ms
operator|.
name|dropIndex
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
name|String
name|idxTblName
init|=
name|index
operator|.
name|getIndexTableName
argument_list|()
decl_stmt|;
if|if
condition|(
name|idxTblName
operator|!=
literal|null
condition|)
block|{
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
name|tbl
operator|=
name|this
operator|.
name|get_table
argument_list|(
name|dbName
argument_list|,
name|idxTblName
argument_list|)
expr_stmt|;
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Table metadata is corrupted"
argument_list|)
throw|;
block|}
if|if
condition|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|tblPath
operator|=
operator|new
name|Path
argument_list|(
name|tbl
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wh
operator|.
name|isWritable
argument_list|(
name|tblPath
operator|.
name|getParent
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Index table metadata not deleted since "
operator|+
name|tblPath
operator|.
name|getParent
argument_list|()
operator|+
literal|" is not writable by "
operator|+
name|hiveConf
operator|.
name|getUser
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// Drop the partitions and get a list of partition locations which need to be deleted
name|partPaths
operator|=
name|dropPartitionsAndGetLocations
argument_list|(
name|ms
argument_list|,
name|dbName
argument_list|,
name|idxTblName
argument_list|,
name|tblPath
argument_list|,
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ms
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|idxTblName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Unable to drop underlying data table "
operator|+
name|idxTblName
operator|+
literal|" for index "
operator|+
name|idxTblName
argument_list|)
throw|;
block|}
block|}
name|success
operator|=
name|ms
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|ms
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|deleteData
operator|&&
name|tblPath
operator|!=
literal|null
condition|)
block|{
name|deletePartitionData
argument_list|(
name|partPaths
argument_list|)
expr_stmt|;
name|deleteTableData
argument_list|(
name|tblPath
argument_list|)
expr_stmt|;
comment|// ok even if the data is not deleted
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Index
name|get_index_by_name
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"get_index_by_name"
argument_list|,
literal|": db="
operator|+
name|dbName
operator|+
literal|" tbl="
operator|+
name|tblName
operator|+
literal|" index="
operator|+
name|indexName
argument_list|)
expr_stmt|;
name|Index
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|get_index_by_name_core
argument_list|(
name|getMS
argument_list|()
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|,
name|indexName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"drop_index_by_name"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
specifier|private
name|Index
name|get_index_by_name_core
parameter_list|(
specifier|final
name|RawStore
name|ms
parameter_list|,
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|String
name|index_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|Index
name|index
init|=
name|ms
operator|.
name|getIndex
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|index_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|(
name|db_name
operator|+
literal|"."
operator|+
name|tbl_name
operator|+
literal|" index="
operator|+
name|index_name
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
return|return
name|index
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_index_names
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|short
name|maxIndexes
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"get_index_names"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|listIndexNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxIndexes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_index_names"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|get_indexes
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|short
name|maxIndexes
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"get_indexes"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Index
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getIndexes
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|maxIndexes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_indexes"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_by_filter
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|String
name|filter
parameter_list|,
specifier|final
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"get_partitions_by_filter"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartitionsByFilter
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|filter
argument_list|,
name|maxParts
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_by_filter"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|get_partitions_by_names
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tblName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|startTableFunction
argument_list|(
literal|"get_partitions_by_names"
argument_list|,
name|dbName
argument_list|,
name|tblName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartitionsByNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_partitions_by_names"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|get_privilege_set
parameter_list|(
name|HiveObjectRef
name|hiveObject
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|COLUMN
condition|)
block|{
name|String
name|partName
init|=
name|getPartName
argument_list|(
name|hiveObject
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|get_column_privilege_set
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|partName
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|PARTITION
condition|)
block|{
name|String
name|partName
init|=
name|getPartName
argument_list|(
name|hiveObject
argument_list|)
decl_stmt|;
return|return
name|this
operator|.
name|get_partition_privilege_set
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|DATABASE
condition|)
block|{
return|return
name|this
operator|.
name|get_db_privilege_set
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|TABLE
condition|)
block|{
return|return
name|this
operator|.
name|get_table_privilege_set
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|GLOBAL
condition|)
block|{
return|return
name|this
operator|.
name|get_user_privilege_set
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|String
name|getPartName
parameter_list|(
name|HiveObjectRef
name|hiveObject
parameter_list|)
throws|throws
name|MetaException
block|{
name|String
name|partName
init|=
literal|null
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partValue
init|=
name|hiveObject
operator|.
name|getPartValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|partValue
operator|!=
literal|null
operator|&&
name|partValue
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Table
name|table
init|=
name|get_table
argument_list|(
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
decl_stmt|;
name|partName
operator|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|partName
return|;
block|}
specifier|public
name|PrincipalPrivilegeSet
name|get_column_privilege_set
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|String
name|partName
parameter_list|,
specifier|final
name|String
name|columnName
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_column_privilege_set"
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getColumnPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|columnName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|PrincipalPrivilegeSet
name|get_db_privilege_set
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_db_privilege_set"
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getDBPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|PrincipalPrivilegeSet
name|get_partition_privilege_set
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|String
name|partName
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_partition_privilege_set"
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getPartitionPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|PrincipalPrivilegeSet
name|get_table_privilege_set
parameter_list|(
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_table_privilege_set"
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getTablePrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grant_role
parameter_list|(
specifier|final
name|String
name|roleName
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
specifier|final
name|String
name|grantor
parameter_list|,
specifier|final
name|PrincipalType
name|grantorType
parameter_list|,
specifier|final
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"add_role_member"
argument_list|)
expr_stmt|;
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|Role
name|role
init|=
name|ms
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|ret
operator|=
name|ms
operator|.
name|grantRole
argument_list|(
name|role
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|Role
argument_list|>
name|list_roles
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_roles"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Role
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|Role
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|Role
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MRoleMap
argument_list|>
name|roleMap
init|=
name|getMS
argument_list|()
operator|.
name|listRoles
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
decl_stmt|;
if|if
condition|(
name|roleMap
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|MRoleMap
name|role
range|:
name|roleMap
control|)
block|{
name|MRole
name|r
init|=
name|role
operator|.
name|getRole
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|Role
argument_list|(
name|r
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|r
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|r
operator|.
name|getOwnerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ret
operator|=
name|result
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|create_role
parameter_list|(
specifier|final
name|Role
name|role
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"create_role"
argument_list|)
expr_stmt|;
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|addRole
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|,
name|role
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_role
parameter_list|(
specifier|final
name|String
name|roleName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"drop_role"
argument_list|)
expr_stmt|;
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|removeRole
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|get_role_names
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_role_names"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|listRoleNames
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grant_privileges
parameter_list|(
specifier|final
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"grant_privileges"
argument_list|)
expr_stmt|;
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|grantPrivileges
argument_list|(
name|privileges
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revoke_role
parameter_list|(
specifier|final
name|String
name|roleName
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"remove_role_member"
argument_list|)
expr_stmt|;
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|Role
name|mRole
init|=
name|ms
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
name|ret
operator|=
name|ms
operator|.
name|revokeRole
argument_list|(
name|mRole
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revoke_privileges
parameter_list|(
specifier|final
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"revoke_privileges"
argument_list|)
expr_stmt|;
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|revokePrivileges
argument_list|(
name|privileges
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|PrincipalPrivilegeSet
name|get_user_privilege_set
parameter_list|(
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"get_user_privilege_set"
argument_list|)
expr_stmt|;
name|PrincipalPrivilegeSet
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|getUserPrivilegeSet
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|PrincipalType
name|getPrincipalType
parameter_list|(
name|String
name|principalType
parameter_list|)
block|{
return|return
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_privileges
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|HiveObjectRef
name|hiveObject
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|GLOBAL
condition|)
block|{
return|return
name|this
operator|.
name|list_global_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|DATABASE
condition|)
block|{
return|return
name|this
operator|.
name|list_db_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|TABLE
condition|)
block|{
return|return
name|this
operator|.
name|list_table_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|PARTITION
condition|)
block|{
return|return
name|this
operator|.
name|list_partition_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getPartValues
argument_list|()
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|hiveObject
operator|.
name|getObjectType
argument_list|()
operator|==
name|HiveObjectType
operator|.
name|COLUMN
condition|)
block|{
return|return
name|this
operator|.
name|list_column_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
operator|.
name|getDbName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getObjectName
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getPartValues
argument_list|()
argument_list|,
name|hiveObject
operator|.
name|getColumnName
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_column_privileges
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
specifier|final
name|String
name|columnName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_security_column_grant"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|ret
init|=
literal|null
decl_stmt|;
try|try
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|String
name|partName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|partValues
operator|!=
literal|null
operator|&&
name|partValues
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Table
name|tbl
init|=
name|get_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|partName
operator|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partValues
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
name|Collections
operator|.
expr|<
name|HiveObjectPrivilege
operator|>
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|partName
operator|!=
literal|null
condition|)
block|{
name|Partition
name|part
init|=
literal|null
decl_stmt|;
name|part
operator|=
name|get_partition_by_name
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|MPartitionColumnPrivilege
argument_list|>
name|mPartitionCols
init|=
name|ms
operator|.
name|listPrincipalPartitionColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mPartitionCols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mPartitionCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MPartitionColumnPrivilege
name|sCol
init|=
name|mPartitionCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part
operator|==
literal|null
condition|?
literal|null
else|:
name|part
operator|.
name|getValues
argument_list|()
argument_list|,
name|sCol
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
name|HiveObjectPrivilege
name|secObj
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|sCol
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|sCol
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|sCol
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|sCol
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|sCol
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|sCol
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|secObj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|List
argument_list|<
name|MTableColumnPrivilege
argument_list|>
name|mTableCols
init|=
name|ms
operator|.
name|listPrincipalTableColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mTableCols
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|result
operator|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mTableCols
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MTableColumnPrivilege
name|sCol
init|=
name|mTableCols
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|COLUMN
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
name|sCol
operator|.
name|getColumnName
argument_list|()
argument_list|)
decl_stmt|;
name|HiveObjectPrivilege
name|secObj
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|sCol
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|sCol
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|sCol
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|sCol
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|sCol
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|sCol
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|secObj
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ret
operator|=
name|result
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|ret
return|;
block|}
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_db_privileges
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_security_db_grant"
argument_list|)
expr_stmt|;
try|try
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|MDBPrivilege
argument_list|>
name|mDbs
init|=
name|ms
operator|.
name|listPrincipalDBGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mDbs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mDbs
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MDBPrivilege
name|sDB
init|=
name|mDbs
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|DATABASE
argument_list|,
name|dbName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HiveObjectPrivilege
name|secObj
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|sDB
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|sDB
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|sDB
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|sDB
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|sDB
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|sDB
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|secObj
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|return
name|Collections
operator|.
expr|<
name|HiveObjectPrivilege
operator|>
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_partition_privileges
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_security_partition_grant"
argument_list|)
expr_stmt|;
try|try
block|{
name|RawStore
name|ms
init|=
name|getMS
argument_list|()
decl_stmt|;
name|Table
name|tbl
init|=
name|get_table
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|tbl
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partValues
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|MPartitionPrivilege
argument_list|>
name|mParts
init|=
name|ms
operator|.
name|listPrincipalPartitionGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mParts
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mParts
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MPartitionPrivilege
name|sPart
init|=
name|mParts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|PARTITION
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HiveObjectPrivilege
name|secObj
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|sPart
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|sPart
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|sPart
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|sPart
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|sPart
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|sPart
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|secObj
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|return
name|Collections
operator|.
expr|<
name|HiveObjectPrivilege
operator|>
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_table_privileges
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|,
specifier|final
name|String
name|dbName
parameter_list|,
specifier|final
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_security_table_grant"
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|MTablePrivilege
argument_list|>
name|mTbls
init|=
name|getMS
argument_list|()
operator|.
name|listAllTableGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mTbls
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mTbls
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MTablePrivilege
name|sTbl
init|=
name|mTbls
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|TABLE
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HiveObjectPrivilege
name|secObj
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|sTbl
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|sTbl
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|sTbl
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|sTbl
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|sTbl
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|sTbl
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|secObj
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|return
name|Collections
operator|.
expr|<
name|HiveObjectPrivilege
operator|>
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_global_privileges
parameter_list|(
specifier|final
name|String
name|principalName
parameter_list|,
specifier|final
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|incrementCounter
argument_list|(
literal|"list_security_user_grant"
argument_list|)
expr_stmt|;
try|try
block|{
name|List
argument_list|<
name|MGlobalPrivilege
argument_list|>
name|mUsers
init|=
name|getMS
argument_list|()
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
decl_stmt|;
if|if
condition|(
name|mUsers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|HiveObjectPrivilege
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mUsers
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MGlobalPrivilege
name|sUsr
init|=
name|mUsers
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HiveObjectRef
name|objectRef
init|=
operator|new
name|HiveObjectRef
argument_list|(
name|HiveObjectType
operator|.
name|GLOBAL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|HiveObjectPrivilege
name|secUser
init|=
operator|new
name|HiveObjectPrivilege
argument_list|(
name|objectRef
argument_list|,
name|sUsr
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|principalType
argument_list|,
operator|new
name|PrivilegeGrantInfo
argument_list|(
name|sUsr
operator|.
name|getPrivilege
argument_list|()
argument_list|,
name|sUsr
operator|.
name|getCreateTime
argument_list|()
argument_list|,
name|sUsr
operator|.
name|getGrantor
argument_list|()
argument_list|,
name|PrincipalType
operator|.
name|valueOf
argument_list|(
name|sUsr
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|,
name|sUsr
operator|.
name|getGrantOption
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|secUser
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|return
name|Collections
operator|.
expr|<
name|HiveObjectPrivilege
operator|>
name|emptyList
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancel_delegation_token
parameter_list|(
name|String
name|token_str_form
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"cancel_delegation_token"
argument_list|)
expr_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|HiveMetaStore
operator|.
name|cancelDelegationToken
argument_list|(
name|token_str_form
argument_list|)
expr_stmt|;
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"cancel_delegation_token"
argument_list|,
name|success
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|renew_delegation_token
parameter_list|(
name|String
name|token_str_form
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"renew_delegation_token"
argument_list|)
expr_stmt|;
name|Long
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|HiveMetaStore
operator|.
name|renewDelegationToken
argument_list|(
name|token_str_form
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"renew_delegation_token"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|get_delegation_token
parameter_list|(
name|String
name|token_owner
parameter_list|,
name|String
name|renewer_kerberos_principal_name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|startFunction
argument_list|(
literal|"get_delegation_token"
argument_list|)
expr_stmt|;
name|String
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|HiveMetaStore
operator|.
name|getDelegationToken
argument_list|(
name|token_owner
argument_list|,
name|renewer_kerberos_principal_name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|ex
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
elseif|else
if|if
condition|(
name|e
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|e
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"get_delegation_token"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|markPartitionForEvent
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
specifier|final
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
throws|,
name|UnknownDBException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
name|Table
name|tbl
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|startPartitionFunction
argument_list|(
literal|"markPartitionForEvent"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partName
argument_list|)
expr_stmt|;
name|firePreEvent
argument_list|(
operator|new
name|PreLoadPartitionDoneEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partName
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|tbl
operator|=
name|getMS
argument_list|()
operator|.
name|markPartitionForEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partName
argument_list|,
name|evtType
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|==
name|tbl
condition|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
literal|"Table: "
operator|+
name|tbl_name
operator|+
literal|" not found."
argument_list|)
throw|;
block|}
else|else
block|{
for|for
control|(
name|MetaStoreEventListener
name|listener
range|:
name|listeners
control|)
block|{
name|listener
operator|.
name|onLoadPartitionDone
argument_list|(
operator|new
name|LoadPartitionDoneEvent
argument_list|(
literal|true
argument_list|,
name|tbl
argument_list|,
name|partName
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|original
parameter_list|)
block|{
name|ex
operator|=
name|original
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|original
argument_list|)
expr_stmt|;
if|if
condition|(
name|original
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|UnknownTableException
condition|)
block|{
throw|throw
operator|(
name|UnknownTableException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|UnknownDBException
condition|)
block|{
throw|throw
operator|(
name|UnknownDBException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|UnknownPartitionException
condition|)
block|{
throw|throw
operator|(
name|UnknownPartitionException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|InvalidPartitionException
condition|)
block|{
throw|throw
operator|(
name|InvalidPartitionException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|original
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|original
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|original
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"markPartitionForEvent"
argument_list|,
name|tbl
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
specifier|final
name|String
name|db_name
parameter_list|,
specifier|final
name|String
name|tbl_name
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
specifier|final
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|UnknownDBException
throws|,
name|UnknownTableException
throws|,
name|TException
throws|,
name|UnknownPartitionException
throws|,
name|InvalidPartitionException
block|{
name|startPartitionFunction
argument_list|(
literal|"isPartitionMarkedForEvent"
argument_list|,
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partName
argument_list|)
expr_stmt|;
name|Boolean
name|ret
init|=
literal|null
decl_stmt|;
name|Exception
name|ex
init|=
literal|null
decl_stmt|;
try|try
block|{
name|ret
operator|=
name|getMS
argument_list|()
operator|.
name|isPartitionMarkedForEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partName
argument_list|,
name|evtType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|original
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|original
argument_list|)
expr_stmt|;
name|ex
operator|=
name|original
expr_stmt|;
if|if
condition|(
name|original
operator|instanceof
name|NoSuchObjectException
condition|)
block|{
throw|throw
operator|(
name|NoSuchObjectException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|UnknownTableException
condition|)
block|{
throw|throw
operator|(
name|UnknownTableException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|UnknownDBException
condition|)
block|{
throw|throw
operator|(
name|UnknownDBException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|UnknownPartitionException
condition|)
block|{
throw|throw
operator|(
name|UnknownPartitionException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|InvalidPartitionException
condition|)
block|{
throw|throw
operator|(
name|InvalidPartitionException
operator|)
name|original
throw|;
block|}
elseif|else
if|if
condition|(
name|original
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|original
throw|;
block|}
else|else
block|{
name|MetaException
name|me
init|=
operator|new
name|MetaException
argument_list|(
name|original
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|me
operator|.
name|initCause
argument_list|(
name|original
argument_list|)
expr_stmt|;
throw|throw
name|me
throw|;
block|}
block|}
finally|finally
block|{
name|endFunction
argument_list|(
literal|"isPartitionMarkedForEvent"
argument_list|,
name|ret
operator|!=
literal|null
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|set_ugi
parameter_list|(
name|String
name|username
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|groupNames
argument_list|,
name|username
argument_list|)
expr_stmt|;
return|return
name|groupNames
return|;
block|}
block|}
specifier|public
specifier|static
name|IHMSHandler
name|newHMSHandler
parameter_list|(
name|String
name|name
parameter_list|,
name|HiveConf
name|hiveConf
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|RetryingHMSHandler
operator|.
name|getProxy
argument_list|(
name|hiveConf
argument_list|,
name|name
argument_list|)
return|;
block|}
comment|/**    * Discard a current delegation token.    *    * @param tokenStrForm    *          the token in string form    */
specifier|public
specifier|static
name|void
name|cancelDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|IOException
block|{
name|saslServer
operator|.
name|cancelDelegationToken
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
block|}
comment|/**    * Get a new delegation token.    *    * @param renewer    *          the designated renewer    */
specifier|public
specifier|static
name|String
name|getDelegationToken
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|renewer
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
return|return
name|saslServer
operator|.
name|getDelegationToken
argument_list|(
name|owner
argument_list|,
name|renewer
argument_list|)
return|;
block|}
comment|/**    * Renew a delegation token to extend its lifetime.    *    * @param tokenStrForm    *          the token in string form    */
specifier|public
specifier|static
name|long
name|renewDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|saslServer
operator|.
name|renewDelegationToken
argument_list|(
name|tokenStrForm
argument_list|)
return|;
block|}
comment|/**    * HiveMetaStore specific CLI    *    */
specifier|static
specifier|public
class|class
name|HiveMetastoreCli
extends|extends
name|CommonCliOptions
block|{
name|int
name|port
init|=
name|DEFAULT_HIVE_METASTORE_PORT
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"static-access"
argument_list|)
specifier|public
name|HiveMetastoreCli
parameter_list|()
block|{
name|super
argument_list|(
literal|"hivemetastore"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// -p port
name|OPTIONS
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|hasArg
argument_list|()
operator|.
name|withArgName
argument_list|(
literal|"port"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Hive Metastore port number, default:"
operator|+
name|DEFAULT_HIVE_METASTORE_PORT
argument_list|)
operator|.
name|create
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|super
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
comment|// support the old syntax "hivemetastore [port]" but complain
name|args
operator|=
name|commandLine
operator|.
name|getArgs
argument_list|()
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
comment|// complain about the deprecated syntax -- but still run
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"This usage has been deprecated, consider using the new command "
operator|+
literal|"line syntax (run with -h to see usage information)"
argument_list|)
expr_stmt|;
name|port
operator|=
operator|new
name|Integer
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
comment|// notice that command line options take precedence over the
comment|// deprecated (old style) naked args...
if|if
condition|(
name|commandLine
operator|.
name|hasOption
argument_list|(
literal|'p'
argument_list|)
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|commandLine
operator|.
name|getOptionValue
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// legacy handling
name|String
name|metastorePort
init|=
name|System
operator|.
name|getenv
argument_list|(
literal|"METASTORE_PORT"
argument_list|)
decl_stmt|;
if|if
condition|(
name|metastorePort
operator|!=
literal|null
condition|)
block|{
name|port
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|metastorePort
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**    * @param args    */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
name|HiveMetastoreCli
name|cli
init|=
operator|new
name|HiveMetastoreCli
argument_list|()
decl_stmt|;
name|cli
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|isCliVerbose
init|=
name|cli
operator|.
name|isVerbose
argument_list|()
decl_stmt|;
comment|// NOTE: It is critical to do this prior to initializing log4j, otherwise
comment|// any log specific settings via hiveconf will be ignored
name|Properties
name|hiveconf
init|=
name|cli
operator|.
name|addHiveconfToSystemProperties
argument_list|()
decl_stmt|;
comment|// If the log4j.configuration property hasn't already been explicitly set, use Hive's default
comment|// log4j configuration
if|if
condition|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"log4j.configuration"
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|// NOTE: It is critical to do this here so that log4j is reinitialized
comment|// before any of the other core hive classes are loaded
try|try
block|{
name|LogUtils
operator|.
name|initHiveLog4j
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LogInitializationException
name|e
parameter_list|)
block|{
name|HMSHandler
operator|.
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|String
name|msg
init|=
literal|"Starting hive metastore on port "
operator|+
name|cli
operator|.
name|port
decl_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|cli
operator|.
name|isVerbose
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
name|HiveConf
name|conf
init|=
operator|new
name|HiveConf
argument_list|(
name|HMSHandler
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// set all properties specified on the command line
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|item
range|:
name|hiveconf
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|conf
operator|.
name|set
argument_list|(
operator|(
name|String
operator|)
name|item
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|item
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Add shutdown hook.
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|addShutdownHook
argument_list|(
operator|new
name|Thread
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|String
name|shutdownMsg
init|=
literal|"Shutting down hive metastore."
decl_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
name|shutdownMsg
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCliVerbose
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|shutdownMsg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|startMetaStore
argument_list|(
name|cli
operator|.
name|port
argument_list|,
name|ShimLoader
operator|.
name|getHadoopThriftAuthBridge
argument_list|()
argument_list|,
name|conf
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Catch the exception, log it and rethrow it.
name|HMSHandler
operator|.
name|LOG
operator|.
name|error
argument_list|(
literal|"Metastore Thrift Server threw an exception..."
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
name|t
throw|;
block|}
block|}
comment|/**    * Start Metastore based on a passed {@link HadoopThriftAuthBridge}    *    * @param port    * @param bridge    * @throws Throwable    */
specifier|public
specifier|static
name|void
name|startMetaStore
parameter_list|(
name|int
name|port
parameter_list|,
name|HadoopThriftAuthBridge
name|bridge
parameter_list|)
throws|throws
name|Throwable
block|{
name|startMetaStore
argument_list|(
name|port
argument_list|,
name|bridge
argument_list|,
operator|new
name|HiveConf
argument_list|(
name|HMSHandler
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * Start Metastore based on a passed {@link HadoopThriftAuthBridge}    *    * @param port    * @param bridge    * @param conf    *          configuration overrides    * @throws Throwable    */
specifier|public
specifier|static
name|void
name|startMetaStore
parameter_list|(
name|int
name|port
parameter_list|,
name|HadoopThriftAuthBridge
name|bridge
parameter_list|,
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
comment|// Server will create new threads up to max as necessary. After an idle
comment|// period, it will destory threads to keep the number of threads in the
comment|// pool to min.
name|int
name|minWorkerThreads
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORESERVERMINTHREADS
argument_list|)
decl_stmt|;
name|int
name|maxWorkerThreads
init|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORESERVERMAXTHREADS
argument_list|)
decl_stmt|;
name|boolean
name|tcpKeepAlive
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_TCP_KEEP_ALIVE
argument_list|)
decl_stmt|;
name|boolean
name|useFramedTransport
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_USE_THRIFT_FRAMED_TRANSPORT
argument_list|)
decl_stmt|;
name|useSasl
operator|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_USE_THRIFT_SASL
argument_list|)
expr_stmt|;
name|TServerTransport
name|serverTransport
init|=
name|tcpKeepAlive
condition|?
operator|new
name|TServerSocketKeepAlive
argument_list|(
name|port
argument_list|)
else|:
operator|new
name|TServerSocket
argument_list|(
name|port
argument_list|)
decl_stmt|;
name|TProcessor
name|processor
decl_stmt|;
name|TTransportFactory
name|transFactory
decl_stmt|;
if|if
condition|(
name|useSasl
condition|)
block|{
comment|// we are in secure mode.
if|if
condition|(
name|useFramedTransport
condition|)
block|{
throw|throw
operator|new
name|HiveMetaException
argument_list|(
literal|"Framed transport is not supported with SASL enabled."
argument_list|)
throw|;
block|}
name|saslServer
operator|=
name|bridge
operator|.
name|createServer
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_KERBEROS_KEYTAB_FILE
argument_list|)
argument_list|,
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_KERBEROS_PRINCIPAL
argument_list|)
argument_list|)
expr_stmt|;
comment|// start delegation token manager
name|saslServer
operator|.
name|startDelegationTokenSecretManager
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|transFactory
operator|=
name|saslServer
operator|.
name|createTransportFactory
argument_list|()
expr_stmt|;
name|processor
operator|=
name|saslServer
operator|.
name|wrapProcessor
argument_list|(
operator|new
name|ThriftHiveMetastore
operator|.
name|Processor
argument_list|<
name|IHMSHandler
argument_list|>
argument_list|(
name|newHMSHandler
argument_list|(
literal|"new db based metaserver"
argument_list|,
name|conf
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting DB backed MetaStore Server in Secure Mode"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we are in unsecure mode.
name|IHMSHandler
name|handler
init|=
name|newHMSHandler
argument_list|(
literal|"new db based metaserver"
argument_list|,
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_EXECUTE_SET_UGI
argument_list|)
condition|)
block|{
name|transFactory
operator|=
name|useFramedTransport
condition|?
operator|new
name|ChainedTTransportFactory
argument_list|(
operator|new
name|TFramedTransport
operator|.
name|Factory
argument_list|()
argument_list|,
operator|new
name|TUGIContainingTransport
operator|.
name|Factory
argument_list|()
argument_list|)
else|:
operator|new
name|TUGIContainingTransport
operator|.
name|Factory
argument_list|()
expr_stmt|;
name|processor
operator|=
operator|new
name|TUGIBasedProcessor
argument_list|<
name|IHMSHandler
argument_list|>
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting DB backed MetaStore Server with SetUGI enabled"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transFactory
operator|=
name|useFramedTransport
condition|?
operator|new
name|TFramedTransport
operator|.
name|Factory
argument_list|()
else|:
operator|new
name|TTransportFactory
argument_list|()
expr_stmt|;
name|processor
operator|=
operator|new
name|TSetIpAddressProcessor
argument_list|<
name|IHMSHandler
argument_list|>
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Starting DB backed MetaStore Server"
argument_list|)
expr_stmt|;
block|}
block|}
name|TThreadPoolServer
operator|.
name|Args
name|args
init|=
operator|new
name|TThreadPoolServer
operator|.
name|Args
argument_list|(
name|serverTransport
argument_list|)
operator|.
name|processor
argument_list|(
name|processor
argument_list|)
operator|.
name|transportFactory
argument_list|(
name|transFactory
argument_list|)
operator|.
name|protocolFactory
argument_list|(
operator|new
name|TBinaryProtocol
operator|.
name|Factory
argument_list|()
argument_list|)
operator|.
name|minWorkerThreads
argument_list|(
name|minWorkerThreads
argument_list|)
operator|.
name|maxWorkerThreads
argument_list|(
name|maxWorkerThreads
argument_list|)
decl_stmt|;
name|TServer
name|tServer
init|=
operator|new
name|TThreadPoolServer
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Started the new metaserver on port ["
operator|+
name|port
operator|+
literal|"]..."
argument_list|)
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Options.minWorkerThreads = "
operator|+
name|minWorkerThreads
argument_list|)
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"Options.maxWorkerThreads = "
operator|+
name|maxWorkerThreads
argument_list|)
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|info
argument_list|(
literal|"TCP keepalive = "
operator|+
name|tcpKeepAlive
argument_list|)
expr_stmt|;
name|tServer
operator|.
name|serve
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|x
parameter_list|)
block|{
name|x
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|HMSHandler
operator|.
name|LOG
operator|.
name|error
argument_list|(
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
name|x
throw|;
block|}
block|}
block|}
end_class

end_unit

