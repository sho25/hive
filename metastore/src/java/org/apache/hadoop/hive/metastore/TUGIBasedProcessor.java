begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|security
operator|.
name|TUGIContainingTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ThriftHiveMetastore
operator|.
name|Iface
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ThriftHiveMetastore
operator|.
name|set_ugi_args
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ThriftHiveMetastore
operator|.
name|set_ugi_result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TMessageType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocolUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TType
import|;
end_import

begin_comment
comment|/** TUGIBasedProcessor is used in unsecure mode for thrift metastore client server communication.  *  This processor checks whether the first rpc call after connection is set up is set_ugi()  *  through which client sends ugi to server. Processor then perform all subsequent rpcs on the  *  connection using ugi.doAs() so all actions are performed in client user context.  *  Note that old clients will never call set_ugi() and thus ugi will never be received on server  *  side, in which case server exhibits previous behavior and continues as usual.  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|public
class|class
name|TUGIBasedProcessor
parameter_list|<
name|I
extends|extends
name|Iface
parameter_list|>
extends|extends
name|TSetIpAddressProcessor
argument_list|<
name|Iface
argument_list|>
block|{
specifier|private
specifier|final
name|I
name|iface
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|ProcessFunction
argument_list|<
name|Iface
argument_list|,
name|?
extends|extends
name|TBase
argument_list|>
argument_list|>
name|functions
decl_stmt|;
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TUGIBasedProcessor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|TUGIBasedProcessor
parameter_list|(
name|I
name|iface
parameter_list|)
throws|throws
name|SecurityException
throws|,
name|NoSuchFieldException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|NoSuchMethodException
throws|,
name|InvocationTargetException
block|{
name|super
argument_list|(
name|iface
argument_list|)
expr_stmt|;
name|this
operator|.
name|iface
operator|=
name|iface
expr_stmt|;
name|this
operator|.
name|functions
operator|=
name|getProcessMapView
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|boolean
name|process
parameter_list|(
specifier|final
name|TProtocol
name|in
parameter_list|,
specifier|final
name|TProtocol
name|out
parameter_list|)
throws|throws
name|TException
block|{
name|setIpAddress
argument_list|(
name|in
argument_list|)
expr_stmt|;
specifier|final
name|TMessage
name|msg
init|=
name|in
operator|.
name|readMessageBegin
argument_list|()
decl_stmt|;
specifier|final
name|ProcessFunction
argument_list|<
name|Iface
argument_list|,
name|?
extends|extends
name|TBase
argument_list|>
name|fn
init|=
name|functions
operator|.
name|get
argument_list|(
name|msg
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|==
literal|null
condition|)
block|{
name|TProtocolUtil
operator|.
name|skip
argument_list|(
name|in
argument_list|,
name|TType
operator|.
name|STRUCT
argument_list|)
expr_stmt|;
name|in
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|UNKNOWN_METHOD
argument_list|,
literal|"Invalid method name: '"
operator|+
name|msg
operator|.
name|name
operator|+
literal|"'"
argument_list|)
decl_stmt|;
name|out
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
name|msg
operator|.
name|name
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|msg
operator|.
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|out
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|TUGIContainingTransport
name|ugiTrans
init|=
operator|(
name|TUGIContainingTransport
operator|)
name|in
operator|.
name|getTransport
argument_list|()
decl_stmt|;
comment|// Store ugi in transport if the rpc is set_ugi
if|if
condition|(
name|msg
operator|.
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"set_ugi"
argument_list|)
condition|)
block|{
try|try
block|{
name|handleSetUGI
argument_list|(
name|ugiTrans
argument_list|,
operator|(
name|set_ugi
argument_list|<
name|Iface
argument_list|>
operator|)
name|fn
argument_list|,
name|msg
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
name|e
operator|.
name|getCause
argument_list|()
argument_list|)
throw|;
block|}
return|return
literal|true
return|;
block|}
name|UserGroupInformation
name|clientUgi
init|=
name|ugiTrans
operator|.
name|getClientUGI
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|clientUgi
condition|)
block|{
comment|// At this point, transport must contain client ugi, if it doesn't then its an old client.
name|fn
operator|.
name|process
argument_list|(
name|msg
operator|.
name|seqid
argument_list|,
name|in
argument_list|,
name|out
argument_list|,
name|iface
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
comment|// Found ugi, perform doAs().
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
name|pvea
init|=
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
block|{
try|try
block|{
name|fn
operator|.
name|process
argument_list|(
name|msg
operator|.
name|seqid
argument_list|,
name|in
argument_list|,
name|out
argument_list|,
name|iface
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|TException
name|te
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|te
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
try|try
block|{
name|clientUgi
operator|.
name|doAs
argument_list|(
name|pvea
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|rte
parameter_list|)
block|{
if|if
condition|(
name|rte
operator|.
name|getCause
argument_list|()
operator|instanceof
name|TException
condition|)
block|{
throw|throw
operator|(
name|TException
operator|)
name|rte
operator|.
name|getCause
argument_list|()
throw|;
block|}
throw|throw
name|rte
throw|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ie
argument_list|)
throw|;
comment|// unexpected!
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ioe
argument_list|)
throw|;
comment|// unexpected!
block|}
finally|finally
block|{
try|try
block|{
name|FileSystem
operator|.
name|closeAllForUGI
argument_list|(
name|clientUgi
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not clean up file-system handles for UGI: "
operator|+
name|clientUgi
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|handleSetUGI
parameter_list|(
name|TUGIContainingTransport
name|ugiTrans
parameter_list|,
name|set_ugi
argument_list|<
name|Iface
argument_list|>
name|fn
parameter_list|,
name|TMessage
name|msg
parameter_list|,
name|TProtocol
name|iprot
parameter_list|,
name|TProtocol
name|oprot
parameter_list|)
throws|throws
name|TException
throws|,
name|SecurityException
throws|,
name|NoSuchMethodException
throws|,
name|IllegalArgumentException
throws|,
name|IllegalAccessException
throws|,
name|InvocationTargetException
block|{
name|UserGroupInformation
name|clientUgi
init|=
name|ugiTrans
operator|.
name|getClientUGI
argument_list|()
decl_stmt|;
if|if
condition|(
literal|null
operator|!=
name|clientUgi
condition|)
block|{
throw|throw
operator|new
name|TException
argument_list|(
operator|new
name|IllegalStateException
argument_list|(
literal|"UGI is already set. Resetting is not "
operator|+
literal|"allowed. Current ugi is: "
operator|+
name|clientUgi
operator|.
name|getUserName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|set_ugi_args
name|args
init|=
name|fn
operator|.
name|getEmptyArgsInstance
argument_list|()
decl_stmt|;
try|try
block|{
name|args
operator|.
name|read
argument_list|(
name|iprot
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TProtocolException
name|e
parameter_list|)
block|{
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|TApplicationException
name|x
init|=
operator|new
name|TApplicationException
argument_list|(
name|TApplicationException
operator|.
name|PROTOCOL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
name|msg
operator|.
name|name
argument_list|,
name|TMessageType
operator|.
name|EXCEPTION
argument_list|,
name|msg
operator|.
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|iprot
operator|.
name|readMessageEnd
argument_list|()
expr_stmt|;
name|set_ugi_result
name|result
init|=
name|fn
operator|.
name|getResult
argument_list|(
name|iface
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|principals
init|=
name|result
operator|.
name|getSuccess
argument_list|()
decl_stmt|;
comment|// Store the ugi in transport and then continue as usual.
name|ugiTrans
operator|.
name|setClientUGI
argument_list|(
name|UserGroupInformation
operator|.
name|createRemoteUser
argument_list|(
name|principals
operator|.
name|remove
argument_list|(
name|principals
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageBegin
argument_list|(
operator|new
name|TMessage
argument_list|(
name|msg
operator|.
name|name
argument_list|,
name|TMessageType
operator|.
name|REPLY
argument_list|,
name|msg
operator|.
name|seqid
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|write
argument_list|(
name|oprot
argument_list|)
expr_stmt|;
name|oprot
operator|.
name|writeMessageEnd
argument_list|()
expr_stmt|;
name|oprot
operator|.
name|getTransport
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|setIpAddress
parameter_list|(
specifier|final
name|TProtocol
name|in
parameter_list|)
block|{
name|TUGIContainingTransport
name|ugiTrans
init|=
operator|(
name|TUGIContainingTransport
operator|)
name|in
operator|.
name|getTransport
argument_list|()
decl_stmt|;
name|Socket
name|socket
init|=
name|ugiTrans
operator|.
name|getSocket
argument_list|()
decl_stmt|;
if|if
condition|(
name|socket
operator|!=
literal|null
condition|)
block|{
name|setIpAddress
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

