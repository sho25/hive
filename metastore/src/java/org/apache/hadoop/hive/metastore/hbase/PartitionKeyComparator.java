begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|ByteArrayComparable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
operator|.
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|Operator
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde
operator|.
name|serdeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|SerDeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|binarysortable
operator|.
name|BinarySortableSerDe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|ObjectInspectorConverters
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|objectinspector
operator|.
name|primitive
operator|.
name|PrimitiveObjectInspectorFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|BytesWritable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_class
specifier|public
class|class
name|PartitionKeyComparator
extends|extends
name|ByteArrayComparable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PartitionKeyComparator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
class|class
name|Mark
block|{
name|Mark
parameter_list|(
name|String
name|value
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|inclusive
operator|=
name|inclusive
expr_stmt|;
block|}
name|String
name|value
decl_stmt|;
name|boolean
name|inclusive
decl_stmt|;
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
operator|+
operator|(
name|inclusive
condition|?
literal|"_"
else|:
literal|""
operator|)
return|;
block|}
block|}
specifier|static
class|class
name|Range
block|{
name|Range
parameter_list|(
name|String
name|keyName
parameter_list|,
name|Mark
name|start
parameter_list|,
name|Mark
name|end
parameter_list|)
block|{
name|this
operator|.
name|keyName
operator|=
name|keyName
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|start
expr_stmt|;
name|this
operator|.
name|end
operator|=
name|end
expr_stmt|;
block|}
name|String
name|keyName
decl_stmt|;
name|Mark
name|start
decl_stmt|;
name|Mark
name|end
decl_stmt|;
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|""
operator|+
name|keyName
operator|+
literal|":"
operator|+
operator|(
name|start
operator|!=
literal|null
condition|?
name|start
operator|.
name|toString
argument_list|()
else|:
literal|""
operator|)
operator|+
operator|(
name|end
operator|!=
literal|null
condition|?
name|end
operator|.
name|toString
argument_list|()
else|:
literal|""
operator|)
return|;
block|}
block|}
comment|// Cache the information derived from ranges for performance, including
comment|// range in native datatype
specifier|static
class|class
name|NativeRange
block|{
name|int
name|pos
decl_stmt|;
name|Comparable
name|start
decl_stmt|;
name|Comparable
name|end
decl_stmt|;
block|}
specifier|static
class|class
name|Operator
block|{
specifier|public
name|Operator
parameter_list|(
name|Type
name|type
parameter_list|,
name|String
name|keyName
parameter_list|,
name|String
name|val
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|keyName
operator|=
name|keyName
expr_stmt|;
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
block|}
enum|enum
name|Type
block|{
name|LIKE
block|,
name|NOTEQUALS
block|}
empty_stmt|;
name|Type
name|type
decl_stmt|;
name|String
name|keyName
decl_stmt|;
name|String
name|val
decl_stmt|;
block|}
specifier|static
class|class
name|NativeOperator
block|{
name|int
name|pos
decl_stmt|;
name|Comparable
name|val
decl_stmt|;
block|}
name|String
name|names
decl_stmt|;
name|String
name|types
decl_stmt|;
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
decl_stmt|;
name|List
argument_list|<
name|NativeRange
argument_list|>
name|nativeRanges
decl_stmt|;
name|List
argument_list|<
name|Operator
argument_list|>
name|ops
decl_stmt|;
name|List
argument_list|<
name|NativeOperator
argument_list|>
name|nativeOps
decl_stmt|;
name|Properties
name|serdeProps
decl_stmt|;
specifier|public
name|PartitionKeyComparator
parameter_list|(
name|String
name|names
parameter_list|,
name|String
name|types
parameter_list|,
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
parameter_list|,
name|List
argument_list|<
name|Operator
argument_list|>
name|ops
parameter_list|)
block|{
name|super
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|names
operator|=
name|names
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|types
expr_stmt|;
name|this
operator|.
name|ranges
operator|=
name|ranges
expr_stmt|;
name|this
operator|.
name|ops
operator|=
name|ops
expr_stmt|;
name|serdeProps
operator|=
operator|new
name|Properties
argument_list|()
expr_stmt|;
name|serdeProps
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMNS
argument_list|,
literal|"dbName,tableName,"
operator|+
name|names
argument_list|)
expr_stmt|;
name|serdeProps
operator|.
name|setProperty
argument_list|(
name|serdeConstants
operator|.
name|LIST_COLUMN_TYPES
argument_list|,
literal|"string,string,"
operator|+
name|types
argument_list|)
expr_stmt|;
name|this
operator|.
name|nativeRanges
operator|=
operator|new
name|ArrayList
argument_list|<
name|NativeRange
argument_list|>
argument_list|(
name|this
operator|.
name|ranges
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Range
name|range
init|=
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NativeRange
name|nativeRange
init|=
operator|new
name|NativeRange
argument_list|()
decl_stmt|;
empty_stmt|;
name|nativeRanges
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|nativeRange
argument_list|)
expr_stmt|;
name|nativeRange
operator|.
name|pos
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|names
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
operator|.
name|indexOf
argument_list|(
name|range
operator|.
name|keyName
argument_list|)
expr_stmt|;
name|TypeInfo
name|expectedType
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|types
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
name|nativeRange
operator|.
name|pos
index|]
argument_list|)
decl_stmt|;
name|ObjectInspector
name|outputOI
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|expectedType
argument_list|)
decl_stmt|;
name|nativeRange
operator|.
name|start
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|range
operator|.
name|start
operator|!=
literal|null
condition|)
block|{
name|Converter
name|converter
init|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|outputOI
argument_list|)
decl_stmt|;
name|nativeRange
operator|.
name|start
operator|=
operator|(
name|Comparable
operator|)
name|converter
operator|.
name|convert
argument_list|(
name|range
operator|.
name|start
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
name|nativeRange
operator|.
name|end
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|range
operator|.
name|end
operator|!=
literal|null
condition|)
block|{
name|Converter
name|converter
init|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|outputOI
argument_list|)
decl_stmt|;
name|nativeRange
operator|.
name|end
operator|=
operator|(
name|Comparable
operator|)
name|converter
operator|.
name|convert
argument_list|(
name|range
operator|.
name|end
operator|.
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|nativeOps
operator|=
operator|new
name|ArrayList
argument_list|<
name|NativeOperator
argument_list|>
argument_list|(
name|this
operator|.
name|ops
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ops
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Operator
name|op
init|=
name|ops
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NativeOperator
name|nativeOp
init|=
operator|new
name|NativeOperator
argument_list|()
decl_stmt|;
name|nativeOps
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|nativeOp
argument_list|)
expr_stmt|;
name|nativeOp
operator|.
name|pos
operator|=
name|ArrayUtils
operator|.
name|indexOf
argument_list|(
name|names
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|,
name|op
operator|.
name|keyName
argument_list|)
expr_stmt|;
name|TypeInfo
name|expectedType
init|=
name|TypeInfoUtils
operator|.
name|getTypeInfoFromTypeString
argument_list|(
name|types
operator|.
name|split
argument_list|(
literal|","
argument_list|)
index|[
name|nativeOp
operator|.
name|pos
index|]
argument_list|)
decl_stmt|;
name|ObjectInspector
name|outputOI
init|=
name|TypeInfoUtils
operator|.
name|getStandardWritableObjectInspectorFromTypeInfo
argument_list|(
name|expectedType
argument_list|)
decl_stmt|;
name|Converter
name|converter
init|=
name|ObjectInspectorConverters
operator|.
name|getConverter
argument_list|(
name|PrimitiveObjectInspectorFactory
operator|.
name|javaStringObjectInspector
argument_list|,
name|outputOI
argument_list|)
decl_stmt|;
name|nativeOp
operator|.
name|val
operator|=
operator|(
name|Comparable
operator|)
name|converter
operator|.
name|convert
argument_list|(
name|op
operator|.
name|val
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|PartitionKeyComparator
name|parseFrom
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
block|{
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
name|proto
decl_stmt|;
try|try
block|{
name|proto
operator|=
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|Range
argument_list|>
name|ranges
init|=
operator|new
name|ArrayList
argument_list|<
name|Range
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|Range
name|range
range|:
name|proto
operator|.
name|getRangeList
argument_list|()
control|)
block|{
name|Mark
name|start
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|hasStart
argument_list|()
condition|)
block|{
name|start
operator|=
operator|new
name|Mark
argument_list|(
name|range
operator|.
name|getStart
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|range
operator|.
name|getStart
argument_list|()
operator|.
name|getInclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Mark
name|end
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|hasEnd
argument_list|()
condition|)
block|{
name|end
operator|=
operator|new
name|Mark
argument_list|(
name|range
operator|.
name|getEnd
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|,
name|range
operator|.
name|getEnd
argument_list|()
operator|.
name|getInclusive
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ranges
operator|.
name|add
argument_list|(
operator|new
name|Range
argument_list|(
name|range
operator|.
name|getKey
argument_list|()
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Operator
argument_list|>
name|ops
init|=
operator|new
name|ArrayList
argument_list|<
name|Operator
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|Operator
name|op
range|:
name|proto
operator|.
name|getOpList
argument_list|()
control|)
block|{
name|ops
operator|.
name|add
argument_list|(
operator|new
name|Operator
argument_list|(
name|Operator
operator|.
name|Type
operator|.
name|valueOf
argument_list|(
name|op
operator|.
name|getType
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|op
operator|.
name|getKey
argument_list|()
argument_list|,
name|op
operator|.
name|getVal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|PartitionKeyComparator
argument_list|(
name|proto
operator|.
name|getNames
argument_list|()
argument_list|,
name|proto
operator|.
name|getTypes
argument_list|()
argument_list|,
name|ranges
argument_list|,
name|ops
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|Builder
name|builder
init|=
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNames
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setTypes
argument_list|(
name|types
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Range
name|range
init|=
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|Mark
name|startMark
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|start
operator|!=
literal|null
condition|)
block|{
name|startMark
operator|=
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|Mark
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
name|range
operator|.
name|start
operator|.
name|value
argument_list|)
operator|.
name|setInclusive
argument_list|(
name|range
operator|.
name|start
operator|.
name|inclusive
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|Mark
name|endMark
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|end
operator|!=
literal|null
condition|)
block|{
name|endMark
operator|=
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|Mark
operator|.
name|newBuilder
argument_list|()
operator|.
name|setValue
argument_list|(
name|range
operator|.
name|end
operator|.
name|value
argument_list|)
operator|.
name|setInclusive
argument_list|(
name|range
operator|.
name|end
operator|.
name|inclusive
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|Range
operator|.
name|Builder
name|rangeBuilder
init|=
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|Range
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|rangeBuilder
operator|.
name|setKey
argument_list|(
name|range
operator|.
name|keyName
argument_list|)
expr_stmt|;
if|if
condition|(
name|startMark
operator|!=
literal|null
condition|)
block|{
name|rangeBuilder
operator|.
name|setStart
argument_list|(
name|startMark
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|endMark
operator|!=
literal|null
condition|)
block|{
name|rangeBuilder
operator|.
name|setEnd
argument_list|(
name|endMark
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addRange
argument_list|(
name|rangeBuilder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ops
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Operator
name|op
init|=
name|ops
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|builder
operator|.
name|addOp
argument_list|(
name|HbaseMetastoreProto
operator|.
name|PartitionKeyComparator
operator|.
name|Operator
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|op
operator|.
name|keyName
argument_list|)
operator|.
name|setType
argument_list|(
name|Type
operator|.
name|valueOf
argument_list|(
name|op
operator|.
name|type
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setVal
argument_list|(
name|op
operator|.
name|val
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|byte
index|[]
name|value
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|byte
index|[]
name|bytes
init|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|value
argument_list|,
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get key "
operator|+
operator|new
name|String
argument_list|(
name|bytes
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|BinarySortableSerDe
name|serDe
init|=
operator|new
name|BinarySortableSerDe
argument_list|()
decl_stmt|;
name|List
name|deserializedkeys
init|=
literal|null
decl_stmt|;
try|try
block|{
name|serDe
operator|.
name|initialize
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|,
name|serdeProps
argument_list|)
expr_stmt|;
name|deserializedkeys
operator|=
operator|(
operator|(
name|List
operator|)
name|serDe
operator|.
name|deserialize
argument_list|(
operator|new
name|BytesWritable
argument_list|(
name|bytes
argument_list|)
argument_list|)
operator|)
operator|.
name|subList
argument_list|(
literal|2
argument_list|,
literal|2
operator|+
name|names
operator|.
name|split
argument_list|(
literal|","
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SerDeException
name|e
parameter_list|)
block|{
comment|// don't bother with failed deserialization, continue with next key
return|return
literal|1
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Range
name|range
init|=
name|ranges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NativeRange
name|nativeRange
init|=
name|nativeRanges
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Comparable
name|partVal
init|=
operator|(
name|Comparable
operator|)
name|deserializedkeys
operator|.
name|get
argument_list|(
name|nativeRange
operator|.
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Try to match range "
operator|+
name|partVal
operator|+
literal|", start "
operator|+
name|nativeRange
operator|.
name|start
operator|+
literal|", end "
operator|+
name|nativeRange
operator|.
name|end
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|range
operator|.
name|start
operator|==
literal|null
operator|||
name|range
operator|.
name|start
operator|.
name|inclusive
operator|&&
name|partVal
operator|.
name|compareTo
argument_list|(
name|nativeRange
operator|.
name|start
argument_list|)
operator|>=
literal|0
operator|||
operator|!
name|range
operator|.
name|start
operator|.
name|inclusive
operator|&&
name|partVal
operator|.
name|compareTo
argument_list|(
name|nativeRange
operator|.
name|start
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|range
operator|.
name|end
operator|==
literal|null
operator|||
name|range
operator|.
name|end
operator|.
name|inclusive
operator|&&
name|partVal
operator|.
name|compareTo
argument_list|(
name|nativeRange
operator|.
name|end
argument_list|)
operator|<=
literal|0
operator|||
operator|!
name|range
operator|.
name|end
operator|.
name|inclusive
operator|&&
name|partVal
operator|.
name|compareTo
argument_list|(
name|nativeRange
operator|.
name|end
argument_list|)
operator|<
literal|0
condition|)
block|{
continue|continue;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fail to match range "
operator|+
name|range
operator|.
name|keyName
operator|+
literal|"-"
operator|+
name|partVal
operator|+
literal|"["
operator|+
name|nativeRange
operator|.
name|start
operator|+
literal|","
operator|+
name|nativeRange
operator|.
name|end
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
return|return
literal|1
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ops
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Operator
name|op
init|=
name|ops
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|NativeOperator
name|nativeOp
init|=
name|nativeOps
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|op
operator|.
name|type
condition|)
block|{
case|case
name|LIKE
case|:
if|if
condition|(
operator|!
name|deserializedkeys
operator|.
name|get
argument_list|(
name|nativeOp
operator|.
name|pos
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|matches
argument_list|(
name|op
operator|.
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fail to match operator "
operator|+
name|op
operator|.
name|keyName
operator|+
literal|"("
operator|+
name|deserializedkeys
operator|.
name|get
argument_list|(
name|nativeOp
operator|.
name|pos
argument_list|)
operator|+
literal|") LIKE "
operator|+
name|nativeOp
operator|.
name|val
argument_list|)
expr_stmt|;
block|}
return|return
literal|1
return|;
block|}
break|break;
case|case
name|NOTEQUALS
case|:
if|if
condition|(
name|nativeOp
operator|.
name|val
operator|.
name|equals
argument_list|(
name|deserializedkeys
operator|.
name|get
argument_list|(
name|nativeOp
operator|.
name|pos
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Fail to match operator "
operator|+
name|op
operator|.
name|keyName
operator|+
literal|"("
operator|+
name|deserializedkeys
operator|.
name|get
argument_list|(
name|nativeOp
operator|.
name|pos
argument_list|)
operator|+
literal|")!="
operator|+
name|nativeOp
operator|.
name|val
argument_list|)
expr_stmt|;
block|}
return|return
literal|1
return|;
block|}
break|break;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"All conditions satisfied:"
operator|+
name|deserializedkeys
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
block|}
end_class

end_unit

