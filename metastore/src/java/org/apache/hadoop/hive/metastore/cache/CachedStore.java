begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|FileMetadataHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|ObjectStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartFilterExprUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|PartitionExpressionProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|RawStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|TableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|Warehouse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BinaryColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|CurrentNotificationEventId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DateColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Decimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DecimalColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DoubleColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FileMetadataExprType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidInputException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NotificationEventResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|RolePrincipalGrant
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLForeignKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SQLPrimaryKey
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StringColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|TableMeta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|PrimitiveTypeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|serde2
operator|.
name|typeinfo
operator|.
name|TypeInfoFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|HiveStringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_comment
comment|// TODO filter->expr
end_comment

begin_comment
comment|// TODO functionCache
end_comment

begin_comment
comment|// TODO constraintCache
end_comment

begin_comment
comment|// TODO need sd nested copy?
end_comment

begin_comment
comment|// TODO String intern
end_comment

begin_comment
comment|// TODO restructure HBaseStore
end_comment

begin_comment
comment|// TODO monitor event queue
end_comment

begin_comment
comment|// TODO initial load slow?
end_comment

begin_comment
comment|// TODO size estimation
end_comment

begin_comment
comment|// TODO factor in extrapolation logic (using partitions found) during aggregate stats calculation
end_comment

begin_comment
comment|// TODO factor in NDV estimation (density based estimation) logic when merging NDVs from 2 colStats object
end_comment

begin_comment
comment|// TODO refactor to use same common code with StatObjectConverter (for merging 2 col stats objects)
end_comment

begin_class
specifier|public
class|class
name|CachedStore
implements|implements
name|RawStore
implements|,
name|Configurable
block|{
specifier|private
specifier|static
name|ScheduledExecutorService
name|cacheUpdateMaster
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|AtomicReference
argument_list|<
name|Thread
argument_list|>
name|runningMasterThread
init|=
operator|new
name|AtomicReference
argument_list|<
name|Thread
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|RawStore
name|rawStore
decl_stmt|;
name|Configuration
name|conf
decl_stmt|;
specifier|private
name|PartitionExpressionProxy
name|expressionProxy
init|=
literal|null
decl_stmt|;
specifier|static
name|boolean
name|firstTime
init|=
literal|true
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CachedStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|static
class|class
name|TableWrapper
block|{
name|Table
name|t
decl_stmt|;
name|String
name|location
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
name|byte
index|[]
name|sdHash
decl_stmt|;
name|TableWrapper
parameter_list|(
name|Table
name|t
parameter_list|,
name|byte
index|[]
name|sdHash
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|t
operator|=
name|t
expr_stmt|;
name|this
operator|.
name|sdHash
operator|=
name|sdHash
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|()
block|{
return|return
name|t
return|;
block|}
specifier|public
name|byte
index|[]
name|getSdHash
parameter_list|()
block|{
return|return
name|sdHash
return|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
block|}
specifier|static
class|class
name|PartitionWrapper
block|{
name|Partition
name|p
decl_stmt|;
name|String
name|location
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
name|byte
index|[]
name|sdHash
decl_stmt|;
name|PartitionWrapper
parameter_list|(
name|Partition
name|p
parameter_list|,
name|byte
index|[]
name|sdHash
parameter_list|,
name|String
name|location
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
parameter_list|)
block|{
name|this
operator|.
name|p
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|sdHash
operator|=
name|sdHash
expr_stmt|;
name|this
operator|.
name|location
operator|=
name|location
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|parameters
expr_stmt|;
block|}
specifier|public
name|Partition
name|getPartition
parameter_list|()
block|{
return|return
name|p
return|;
block|}
specifier|public
name|byte
index|[]
name|getSdHash
parameter_list|()
block|{
return|return
name|sdHash
return|;
block|}
specifier|public
name|String
name|getLocation
parameter_list|()
block|{
return|return
name|location
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
block|}
specifier|static
class|class
name|StorageDescriptorWrapper
block|{
name|StorageDescriptor
name|sd
decl_stmt|;
name|int
name|refCount
init|=
literal|0
decl_stmt|;
name|StorageDescriptorWrapper
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|int
name|refCount
parameter_list|)
block|{
name|this
operator|.
name|sd
operator|=
name|sd
expr_stmt|;
name|this
operator|.
name|refCount
operator|=
name|refCount
expr_stmt|;
block|}
specifier|public
name|StorageDescriptor
name|getSd
parameter_list|()
block|{
return|return
name|sd
return|;
block|}
specifier|public
name|int
name|getRefCount
parameter_list|()
block|{
return|return
name|refCount
return|;
block|}
block|}
specifier|public
name|CachedStore
parameter_list|()
block|{   }
annotation|@
name|Override
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|String
name|rawStoreClassName
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_CACHED_RAW_STORE_IMPL
argument_list|,
name|ObjectStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|rawStore
operator|=
operator|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|RawStore
argument_list|>
operator|)
name|MetaStoreUtils
operator|.
name|getClass
argument_list|(
name|rawStoreClassName
argument_list|)
operator|)
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot instantiate "
operator|+
name|rawStoreClassName
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|rawStore
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|Configuration
name|oldConf
init|=
name|this
operator|.
name|conf
decl_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
if|if
condition|(
name|expressionProxy
operator|!=
literal|null
operator|&&
name|conf
operator|!=
name|oldConf
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unexpected setConf when we were already configured"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|expressionProxy
operator|==
literal|null
operator|||
name|conf
operator|!=
name|oldConf
condition|)
block|{
name|expressionProxy
operator|=
name|PartFilterExprUtil
operator|.
name|createExpressionProxy
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|firstTime
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Prewarming CachedStore"
argument_list|)
expr_stmt|;
name|prewarm
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"CachedStore initialized"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|firstTime
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|prewarm
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
name|rawStore
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
block|{
name|Database
name|db
init|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|SharedCache
operator|.
name|addDatabaseToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|db
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
init|=
name|rawStore
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
name|Table
name|table
init|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|SharedCache
operator|.
name|addTableToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|table
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|rawStore
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|partition
range|:
name|partitions
control|)
block|{
name|SharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|partition
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|aggrStatsPerPartition
init|=
name|rawStore
operator|.
name|getAggrColStatsForTablePartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|SharedCache
operator|.
name|addPartitionColStatsToCache
argument_list|(
name|aggrStatsPerPartition
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Start the cache update master-worker threads
name|startCacheUpdateService
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|synchronized
name|void
name|startCacheUpdateService
parameter_list|()
block|{
if|if
condition|(
name|cacheUpdateMaster
operator|==
literal|null
condition|)
block|{
name|cacheUpdateMaster
operator|=
name|Executors
operator|.
name|newScheduledThreadPool
argument_list|(
literal|1
argument_list|,
operator|new
name|ThreadFactory
argument_list|()
block|{
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
name|Thread
name|t
init|=
name|Executors
operator|.
name|defaultThreadFactory
argument_list|()
operator|.
name|newThread
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|t
operator|.
name|setDaemon
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|cacheUpdateMaster
operator|.
name|scheduleAtFixedRate
argument_list|(
operator|new
name|CacheUpdateMasterWork
argument_list|(
name|this
argument_list|)
argument_list|,
literal|0
argument_list|,
name|HiveConf
operator|.
name|getTimeVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_CACHED_RAW_STORE_CACHE_UPDATE_FREQUENCY
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|CacheUpdateMasterWork
implements|implements
name|Runnable
block|{
specifier|private
name|CachedStore
name|cachedStore
decl_stmt|;
specifier|public
name|CacheUpdateMasterWork
parameter_list|(
name|CachedStore
name|cachedStore
parameter_list|)
block|{
name|this
operator|.
name|cachedStore
operator|=
name|cachedStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|runningMasterThread
operator|.
name|set
argument_list|(
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|RawStore
name|rawStore
init|=
name|cachedStore
operator|.
name|getRawStore
argument_list|()
decl_stmt|;
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
init|=
name|rawStore
operator|.
name|getAllDatabases
argument_list|()
decl_stmt|;
comment|// Update the database in cache
if|if
condition|(
operator|!
name|updateDatabases
argument_list|(
name|rawStore
argument_list|,
name|dbNames
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// Update the tables and their partitions in cache
if|if
condition|(
operator|!
name|updateTables
argument_list|(
name|rawStore
argument_list|,
name|dbNames
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Updating CachedStore: error getting database names"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|updateDatabases
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
parameter_list|)
block|{
if|if
condition|(
name|dbNames
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Database
argument_list|>
name|databases
init|=
operator|new
name|ArrayList
argument_list|<
name|Database
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
block|{
comment|// If a preemption of this thread was requested, simply return before proceeding
if|if
condition|(
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Database
name|db
decl_stmt|;
try|try
block|{
name|db
operator|=
name|rawStore
operator|.
name|getDatabase
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|databases
operator|.
name|add
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Updating CachedStore: database - "
operator|+
name|dbName
operator|+
literal|" does not exist."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Update the cached database objects
name|SharedCache
operator|.
name|refreshDatabases
argument_list|(
name|databases
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|updateTables
parameter_list|(
name|RawStore
name|rawStore
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|dbNames
parameter_list|)
block|{
if|if
condition|(
name|dbNames
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<
name|Table
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|dbNames
control|)
block|{
try|try
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
init|=
name|rawStore
operator|.
name|getAllTables
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
comment|// If a preemption of this thread was requested, simply return before proceeding
if|if
condition|(
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|Table
name|table
init|=
name|rawStore
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|)
decl_stmt|;
name|tables
operator|.
name|add
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
comment|// Update the cached database objects
name|SharedCache
operator|.
name|refreshTables
argument_list|(
name|dbName
argument_list|,
name|tables
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
comment|// If a preemption of this thread was requested, simply return before proceeding
if|if
condition|(
name|Thread
operator|.
name|interrupted
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
name|rawStore
operator|.
name|getPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|SharedCache
operator|.
name|refreshPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitions
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
decl||
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Updating CachedStore: unable to read table"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
comment|// Interrupt the cache update background thread
comment|// Fire and forget (the master will respond appropriately when it gets a chance)
comment|// All writes to the cache go through synchronized methods, so fire& forget is fine.
specifier|private
name|void
name|interruptCacheUpdateMaster
parameter_list|()
block|{
if|if
condition|(
name|runningMasterThread
operator|.
name|get
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|runningMasterThread
operator|.
name|get
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|getConf
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
name|rawStore
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|openTransaction
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|openTransaction
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|commitTransaction
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|commitTransaction
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackTransaction
parameter_list|()
block|{
name|rawStore
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
name|SharedCache
operator|.
name|addDatabaseToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|db
operator|.
name|deepCopy
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Database
name|getDatabase
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
name|Database
name|db
init|=
name|SharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|()
throw|;
block|}
return|return
name|SharedCache
operator|.
name|getDatabaseFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropDatabase
parameter_list|(
name|String
name|dbname
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|dropDatabase
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
name|SharedCache
operator|.
name|removeDatabaseFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbname
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|alterDatabase
parameter_list|(
name|String
name|dbName
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|alterDatabase
argument_list|(
name|dbName
argument_list|,
name|db
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
name|SharedCache
operator|.
name|alterDatabaseInCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|dbName
range|:
name|SharedCache
operator|.
name|listCachedDatabases
argument_list|()
control|)
block|{
name|dbName
operator|=
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|dbName
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|results
operator|.
name|add
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|results
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|SharedCache
operator|.
name|listCachedDatabases
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|createType
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|createType
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getType
argument_list|(
name|typeName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropType
parameter_list|(
name|String
name|typeName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|dropType
argument_list|(
name|typeName
argument_list|)
return|;
block|}
specifier|private
name|void
name|validateTableType
parameter_list|(
name|Table
name|tbl
parameter_list|)
block|{
comment|// If the table has property EXTERNAL set, update table type
comment|// accordingly
name|String
name|tableType
init|=
name|tbl
operator|.
name|getTableType
argument_list|()
decl_stmt|;
name|boolean
name|isExternal
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|tbl
operator|.
name|getParameters
argument_list|()
operator|.
name|get
argument_list|(
literal|"EXTERNAL"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
if|if
condition|(
name|isExternal
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|TableType
operator|.
name|EXTERNAL_TABLE
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isExternal
condition|)
block|{
name|tableType
operator|=
name|TableType
operator|.
name|MANAGED_TABLE
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
name|tbl
operator|.
name|setTableType
argument_list|(
name|tableType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|createTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
name|validateTableType
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addTableToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|dropTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
name|SharedCache
operator|.
name|removeTableFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
name|Table
name|tbl
init|=
name|SharedCache
operator|.
name|getTableFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tbl
operator|!=
literal|null
condition|)
block|{
name|tbl
operator|.
name|unsetPrivileges
argument_list|()
expr_stmt|;
name|tbl
operator|.
name|setRewriteEnabled
argument_list|(
name|tbl
operator|.
name|isRewriteEnabled
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|tbl
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartition
parameter_list|(
name|Partition
name|part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|addPartition
argument_list|(
name|part
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
name|SharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|addPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|parts
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|SharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|part
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|PartitionSpecProxy
name|partitionSpec
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|addPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partitionSpec
argument_list|,
name|ifNotExists
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
name|PartitionSpecProxy
operator|.
name|PartitionIterator
name|iterator
init|=
name|partitionSpec
operator|.
name|getPartitionIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Partition
name|part
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|SharedCache
operator|.
name|addPartitionToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|Partition
name|part
init|=
name|SharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|part
operator|.
name|unsetPrivileges
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchObjectException
argument_list|()
throw|;
block|}
return|return
name|part
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|doesPartitionExist
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|SharedCache
operator|.
name|existPartitionFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|part_vals
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
name|SharedCache
operator|.
name|removePartitionFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|part_vals
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|SharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tableName
argument_list|)
argument_list|,
name|max
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|part
operator|.
name|unsetPrivileges
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|parts
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Table
name|newTable
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterTable
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
name|validateTableType
argument_list|(
name|newTable
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|alterTableInCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|newTable
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|SharedCache
operator|.
name|listCachedTables
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|pattern
argument_list|)
condition|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|,
name|TableType
name|tableType
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|SharedCache
operator|.
name|listCachedTables
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|pattern
argument_list|)
operator|&&
name|table
operator|.
name|getTableType
argument_list|()
operator|.
name|equals
argument_list|(
name|tableType
operator|.
name|toString
argument_list|()
argument_list|)
condition|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableMeta
argument_list|>
name|getTableMeta
parameter_list|(
name|String
name|dbNames
parameter_list|,
name|String
name|tableNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|SharedCache
operator|.
name|getTableMeta
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbNames
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tableNames
argument_list|)
argument_list|,
name|tableTypes
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|tables
init|=
operator|new
name|ArrayList
argument_list|<
name|Table
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|tblName
range|:
name|tblNames
control|)
block|{
name|tables
operator|.
name|add
argument_list|(
name|SharedCache
operator|.
name|getTableFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tables
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|dbName
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tblNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Table
name|tbl
range|:
name|SharedCache
operator|.
name|listCachedTables
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
control|)
block|{
name|tblNames
operator|.
name|add
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|tblNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_tables
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownDBException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Table
name|table
range|:
name|SharedCache
operator|.
name|listCachedTables
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|CacheUtils
operator|.
name|matches
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|,
name|filter
argument_list|)
operator|&&
operator|(
name|max_tables
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|max_tables
operator|)
condition|)
block|{
name|tableNames
operator|.
name|add
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|tableNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|t
init|=
name|SharedCache
operator|.
name|getTableFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|SharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|max_parts
argument_list|)
control|)
block|{
if|if
condition|(
name|max_parts
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|max_parts
condition|)
block|{
name|partitionNames
operator|.
name|add
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitionNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNamesByFilter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO Translate filter -> expr
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterPartition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
name|SharedCache
operator|.
name|alterPartitionInCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|partVals
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|partValsList
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partValsList
argument_list|,
name|newParts
argument_list|)
expr_stmt|;
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partValsList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partVals
init|=
name|partValsList
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Partition
name|newPart
init|=
name|newParts
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SharedCache
operator|.
name|alterPartitionInCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|partVals
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addIndex
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|addIndex
argument_list|(
name|index
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Index
name|getIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getIndex
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|indexName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|dropIndex
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|indexName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|getIndexes
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|int
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getIndexes
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listIndexNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|origTableName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|listIndexNames
argument_list|(
name|dbName
argument_list|,
name|origTableName
argument_list|,
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterIndex
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|baseTblName
parameter_list|,
name|String
name|name
parameter_list|,
name|Index
name|newIndex
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|alterIndex
argument_list|(
name|dbname
argument_list|,
name|baseTblName
argument_list|,
name|name
argument_list|,
name|newIndex
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|getPartitionNamesPrunedByExprNoTxn
parameter_list|(
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|result
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|SharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|maxParts
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|result
operator|.
name|add
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|columnNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|PrimitiveTypeInfo
argument_list|>
name|typeInfos
init|=
operator|new
name|ArrayList
argument_list|<
name|PrimitiveTypeInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|table
operator|.
name|getPartitionKeys
argument_list|()
control|)
block|{
name|columnNames
operator|.
name|add
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|typeInfos
operator|.
name|add
argument_list|(
name|TypeInfoFactory
operator|.
name|getPrimitiveTypeInfo
argument_list|(
name|fs
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultPartName
operator|==
literal|null
operator|||
name|defaultPartName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|defaultPartName
operator|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
expr_stmt|;
block|}
return|return
name|expressionProxy
operator|.
name|filterPartitionsByExpr
argument_list|(
name|columnNames
argument_list|,
name|typeInfos
argument_list|,
name|expr
argument_list|,
name|defaultPartName
argument_list|,
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getPartitionsByExpr
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|defaultPartitionName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|)
throws|throws
name|TException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|SharedCache
operator|.
name|getTableFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|hasUnknownPartitions
init|=
name|getPartitionNamesPrunedByExprNoTxn
argument_list|(
name|table
argument_list|,
name|expr
argument_list|,
name|defaultPartitionName
argument_list|,
name|maxParts
argument_list|,
name|partNames
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|Partition
name|part
init|=
name|SharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|)
decl_stmt|;
name|part
operator|.
name|unsetPrivileges
argument_list|()
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
return|return
name|hasUnknownPartitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumPartitionsByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|Table
name|table
init|=
name|SharedCache
operator|.
name|getTableFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
comment|// TODO filter -> expr
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getNumPartitionsByExpr
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|String
name|defaultPartName
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|getConf
argument_list|()
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|DEFAULTPARTITIONNAME
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|table
init|=
name|SharedCache
operator|.
name|getTableFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|getPartitionNamesPrunedByExprNoTxn
argument_list|(
name|table
argument_list|,
name|expr
argument_list|,
name|defaultPartName
argument_list|,
name|Short
operator|.
name|MAX_VALUE
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
return|return
name|partNames
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|partNameToVals
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
index|[]
name|kvp
init|=
name|name
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|kv
range|:
name|kvp
control|)
block|{
name|vals
operator|.
name|add
argument_list|(
name|FileUtils
operator|.
name|unescapePathName
argument_list|(
name|kv
operator|.
name|substring
argument_list|(
name|kv
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|vals
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|Partition
name|part
init|=
name|SharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|!=
literal|null
condition|)
block|{
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|Table
name|markPartitionForEvent
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partVals
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
return|return
name|rawStore
operator|.
name|markPartitionForEvent
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partVals
argument_list|,
name|evtType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partName
parameter_list|,
name|PartitionEventType
name|evtType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
return|return
name|rawStore
operator|.
name|isPartitionMarkedForEvent
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|evtType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addRole
parameter_list|(
name|String
name|rowName
parameter_list|,
name|String
name|ownerName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|addRole
argument_list|(
name|rowName
argument_list|,
name|ownerName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|removeRole
argument_list|(
name|roleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grantRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
return|return
name|rawStore
operator|.
name|grantRole
argument_list|(
name|role
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revokeRole
parameter_list|(
name|Role
name|role
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|revokeRole
argument_list|(
name|role
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getUserPrivilegeSet
parameter_list|(
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getUserPrivilegeSet
argument_list|(
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getDBPrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getDBPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getTablePrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getTablePrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getPartitionPrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partition
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getPartitionPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partition
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|getColumnPrivilegeSet
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getColumnPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalGlobalGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalGlobalGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalDBGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalDBGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listAllTableGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listAllTableGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|String
name|partName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalPartitionGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
name|partName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalTableColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partValues
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalPartitionColumnGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partValues
argument_list|,
name|partName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grantPrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|grantPrivileges
argument_list|(
name|privileges
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revokePrivileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|revokePrivileges
argument_list|(
name|privileges
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Role
name|getRole
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listRoleNames
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|listRoleNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Role
argument_list|>
name|listRoles
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listRoles
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|listRolesWithGrants
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listRolesWithGrants
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|RolePrincipalGrant
argument_list|>
name|listRoleMembers
parameter_list|(
name|String
name|roleName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listRoleMembers
argument_list|(
name|roleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartitionWithAuth
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|Partition
name|p
init|=
name|SharedCache
operator|.
name|getPartitionFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
literal|null
condition|)
block|{
name|Table
name|t
init|=
name|SharedCache
operator|.
name|getTableFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|privs
init|=
name|getPartitionPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPrivileges
argument_list|(
name|privs
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsWithAuth
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
block|{
name|Table
name|t
init|=
name|SharedCache
operator|.
name|getTableFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|SharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|maxParts
argument_list|)
control|)
block|{
if|if
condition|(
name|maxParts
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|maxParts
condition|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|privs
init|=
name|getPartitionPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|part
operator|.
name|setPrivileges
argument_list|(
name|privs
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNamesPs
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|short
name|maxParts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|partNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|Table
name|t
init|=
name|SharedCache
operator|.
name|getTableFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|SharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|maxParts
argument_list|)
control|)
block|{
name|boolean
name|psMatch
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partVals
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|psVal
init|=
name|partVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|partVal
init|=
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|psVal
operator|!=
literal|null
operator|&&
operator|!
name|psVal
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|psVal
operator|.
name|equals
argument_list|(
name|partVal
argument_list|)
condition|)
block|{
name|psMatch
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|psMatch
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|maxParts
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|maxParts
condition|)
block|{
name|partNames
operator|.
name|add
argument_list|(
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
block|}
return|return
name|partNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsPsWithAuth
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|short
name|maxParts
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
init|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
decl_stmt|;
name|Table
name|t
init|=
name|SharedCache
operator|.
name|getTableFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|SharedCache
operator|.
name|listCachedPartitions
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|maxParts
argument_list|)
control|)
block|{
name|boolean
name|psMatch
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|partVals
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|psVal
init|=
name|partVals
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|partVal
init|=
name|part
operator|.
name|getValues
argument_list|()
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|psVal
operator|!=
literal|null
operator|&&
operator|!
name|psVal
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|psVal
operator|.
name|equals
argument_list|(
name|partVal
argument_list|)
condition|)
block|{
name|psMatch
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|psMatch
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|maxParts
operator|==
operator|-
literal|1
operator|||
name|count
operator|<
name|maxParts
condition|)
block|{
name|String
name|partName
init|=
name|Warehouse
operator|.
name|makePartName
argument_list|(
name|t
operator|.
name|getPartitionKeys
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
decl_stmt|;
name|PrincipalPrivilegeSet
name|privs
init|=
name|getPartitionPrivilegeSet
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partName
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
decl_stmt|;
name|part
operator|.
name|setPrivileges
argument_list|(
name|privs
argument_list|)
expr_stmt|;
name|partitions
operator|.
name|add
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|partitions
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateTableColumnStatistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|updateTableColumnStatistics
argument_list|(
name|colStats
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|SharedCache
operator|.
name|updateTableColumnStatistics
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|colStats
operator|.
name|getStatsObj
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updatePartitionColumnStatistics
parameter_list|(
name|ColumnStatistics
name|colStats
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
name|boolean
name|succ
init|=
name|rawStore
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|colStats
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|succ
condition|)
block|{
name|SharedCache
operator|.
name|updatePartitionColumnStatistics
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|colStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|partVals
argument_list|,
name|colStats
operator|.
name|getStatsObj
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|succ
return|;
block|}
annotation|@
name|Override
specifier|public
name|ColumnStatistics
name|getTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getPartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|,
name|colNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deletePartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
return|return
name|rawStore
operator|.
name|deletePartitionColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|partVals
argument_list|,
name|colName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
return|return
name|rawStore
operator|.
name|deleteTableColumnStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|cleanupEvents
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|cleanupEvents
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|,
name|String
name|delegationToken
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|addToken
argument_list|(
name|tokenIdentifier
argument_list|,
name|delegationToken
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|removeToken
argument_list|(
name|tokenIdentifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getToken
argument_list|(
name|tokenIdentifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTokenIdentifiers
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|getAllTokenIdentifiers
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|addMasterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|addMasterKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMasterKey
parameter_list|(
name|Integer
name|seqNo
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
block|{
name|rawStore
operator|.
name|updateMasterKey
argument_list|(
name|seqNo
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeMasterKey
parameter_list|(
name|Integer
name|keySeq
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|removeMasterKey
argument_list|(
name|keySeq
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getMasterKeys
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|getMasterKeys
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|verifySchema
parameter_list|()
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|verifySchema
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMetaStoreSchemaVersion
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getMetaStoreSchemaVersion
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMetaStoreSchemaVersion
parameter_list|(
name|String
name|version
parameter_list|,
name|String
name|comment
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|setMetaStoreSchemaVersion
argument_list|(
name|version
argument_list|,
name|comment
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|rawStore
operator|.
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNames
argument_list|)
expr_stmt|;
name|interruptCacheUpdateMaster
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|vals
init|=
name|partNameToVals
argument_list|(
name|partName
argument_list|)
decl_stmt|;
name|SharedCache
operator|.
name|removePartitionFromCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalDBGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalDBGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalTableGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalPartitionGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalTableColumnGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalTableColumnGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPrincipalPartitionColumnGrantsAll
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPrincipalPartitionColumnGrantsAll
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listGlobalGrantsAll
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|listGlobalGrantsAll
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listDBGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listDBGrantsAll
argument_list|(
name|dbName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPartitionColumnGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPartitionColumnGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listTableGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listPartitionGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listPartitionGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|listTableColumnGrantsAll
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|columnName
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|listTableColumnGrantsAll
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|columnName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createFunction
parameter_list|(
name|Function
name|func
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO fucntionCache
name|rawStore
operator|.
name|createFunction
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|,
name|Function
name|newFunction
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO fucntionCache
name|rawStore
operator|.
name|alterFunction
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
block|{
comment|// TODO fucntionCache
name|rawStore
operator|.
name|dropFunction
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Function
name|getFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO fucntionCache
return|return
name|rawStore
operator|.
name|getFunction
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Function
argument_list|>
name|getAllFunctions
parameter_list|()
throws|throws
name|MetaException
block|{
comment|// TODO fucntionCache
return|return
name|rawStore
operator|.
name|getAllFunctions
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO fucntionCache
return|return
name|rawStore
operator|.
name|getFunctions
argument_list|(
name|dbName
argument_list|,
name|pattern
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AggrStats
name|get_aggr_stats_for
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|colStats
init|=
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|(
name|colNames
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|colName
range|:
name|colNames
control|)
block|{
name|colStats
operator|.
name|add
argument_list|(
name|mergeColStatsForPartitions
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|dbName
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tblName
argument_list|)
argument_list|,
name|partNames
argument_list|,
name|colName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// TODO: revisit the partitions not found case for extrapolation
return|return
operator|new
name|AggrStats
argument_list|(
name|colStats
argument_list|,
name|partNames
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|ColumnStatisticsObj
name|mergeColStatsForPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|MetaException
block|{
name|ColumnStatisticsObj
name|colStats
init|=
literal|null
decl_stmt|;
for|for
control|(
name|String
name|partName
range|:
name|partNames
control|)
block|{
name|String
name|colStatsCacheKey
init|=
name|CacheUtils
operator|.
name|buildKey
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partNameToVals
argument_list|(
name|partName
argument_list|)
argument_list|,
name|colName
argument_list|)
decl_stmt|;
name|ColumnStatisticsObj
name|colStatsForPart
init|=
name|SharedCache
operator|.
name|getCachedPartitionColStats
argument_list|(
name|colStatsCacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|colStats
operator|==
literal|null
condition|)
block|{
name|colStats
operator|=
name|colStatsForPart
expr_stmt|;
block|}
else|else
block|{
name|colStats
operator|=
name|mergeColStatsObj
argument_list|(
name|colStats
argument_list|,
name|colStatsForPart
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|colStats
return|;
block|}
specifier|private
name|ColumnStatisticsObj
name|mergeColStatsObj
parameter_list|(
name|ColumnStatisticsObj
name|colStats1
parameter_list|,
name|ColumnStatisticsObj
name|colStats2
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
operator|(
operator|!
name|colStats1
operator|.
name|getColType
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|colStats2
operator|.
name|getColType
argument_list|()
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|colStats1
operator|.
name|getColName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|colStats2
operator|.
name|getColName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Can't merge column stats for two partitions for different columns."
argument_list|)
throw|;
block|}
name|ColumnStatisticsData
name|csd
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsObj
name|cso
init|=
operator|new
name|ColumnStatisticsObj
argument_list|(
name|colStats1
operator|.
name|getColName
argument_list|()
argument_list|,
name|colStats1
operator|.
name|getColType
argument_list|()
argument_list|,
name|csd
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|csData1
init|=
name|colStats1
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
name|ColumnStatisticsData
name|csData2
init|=
name|colStats2
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
name|String
name|colType
init|=
name|colStats1
operator|.
name|getColType
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|colType
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
condition|)
block|{
name|BooleanColumnStatsData
name|boolStats
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|boolStats
operator|.
name|setNumFalses
argument_list|(
name|csData1
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumFalses
argument_list|()
operator|+
name|csData2
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|boolStats
operator|.
name|setNumTrues
argument_list|(
name|csData1
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumTrues
argument_list|()
operator|+
name|csData2
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|boolStats
operator|.
name|setNumNulls
argument_list|(
name|csData1
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
operator|+
name|csData2
operator|.
name|getBooleanStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|csd
operator|.
name|setBooleanStats
argument_list|(
name|boolStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equals
argument_list|(
literal|"string"
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
literal|"varchar"
argument_list|)
operator|||
name|colType
operator|.
name|startsWith
argument_list|(
literal|"char"
argument_list|)
condition|)
block|{
name|StringColumnStatsData
name|stringStats
init|=
operator|new
name|StringColumnStatsData
argument_list|()
decl_stmt|;
name|stringStats
operator|.
name|setNumNulls
argument_list|(
name|csData1
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
operator|+
name|csData2
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setAvgColLen
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|csData1
operator|.
name|getStringStats
argument_list|()
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
name|csData2
operator|.
name|getStringStats
argument_list|()
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setMaxColLen
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|csData1
operator|.
name|getStringStats
argument_list|()
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
name|csData2
operator|.
name|getStringStats
argument_list|()
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|stringStats
operator|.
name|setNumDVs
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|csData1
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|csData2
operator|.
name|getStringStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|csd
operator|.
name|setStringStats
argument_list|(
name|stringStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equals
argument_list|(
literal|"binary"
argument_list|)
condition|)
block|{
name|BinaryColumnStatsData
name|binaryStats
init|=
operator|new
name|BinaryColumnStatsData
argument_list|()
decl_stmt|;
name|binaryStats
operator|.
name|setNumNulls
argument_list|(
name|csData1
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
operator|+
name|csData2
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|binaryStats
operator|.
name|setAvgColLen
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|csData1
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getAvgColLen
argument_list|()
argument_list|,
name|csData2
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|binaryStats
operator|.
name|setMaxColLen
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|csData1
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getMaxColLen
argument_list|()
argument_list|,
name|csData2
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|csd
operator|.
name|setBinaryStats
argument_list|(
name|binaryStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equals
argument_list|(
literal|"bigint"
argument_list|)
operator|||
name|colType
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
operator|||
name|colType
operator|.
name|equals
argument_list|(
literal|"smallint"
argument_list|)
operator|||
name|colType
operator|.
name|equals
argument_list|(
literal|"tinyint"
argument_list|)
operator|||
name|colType
operator|.
name|equals
argument_list|(
literal|"timestamp"
argument_list|)
condition|)
block|{
name|LongColumnStatsData
name|longStats
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|longStats
operator|.
name|setNumNulls
argument_list|(
name|csData1
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
operator|+
name|csData2
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setHighValue
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|csData1
operator|.
name|getLongStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|csData2
operator|.
name|getLongStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setLowValue
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|csData1
operator|.
name|getLongStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|csData2
operator|.
name|getLongStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|longStats
operator|.
name|setNumDVs
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|csData1
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|csData2
operator|.
name|getLongStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|csd
operator|.
name|setLongStats
argument_list|(
name|longStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equals
argument_list|(
literal|"date"
argument_list|)
condition|)
block|{
name|DateColumnStatsData
name|dateStats
init|=
operator|new
name|DateColumnStatsData
argument_list|()
decl_stmt|;
name|dateStats
operator|.
name|setNumNulls
argument_list|(
name|csData1
operator|.
name|getDateStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
operator|+
name|csData2
operator|.
name|getDateStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|dateStats
operator|.
name|setHighValue
argument_list|(
operator|new
name|Date
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|csData1
operator|.
name|getDateStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
operator|.
name|getDaysSinceEpoch
argument_list|()
argument_list|,
name|csData2
operator|.
name|getDateStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
operator|.
name|getDaysSinceEpoch
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dateStats
operator|.
name|setHighValue
argument_list|(
operator|new
name|Date
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|csData1
operator|.
name|getDateStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
operator|.
name|getDaysSinceEpoch
argument_list|()
argument_list|,
name|csData2
operator|.
name|getDateStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
operator|.
name|getDaysSinceEpoch
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dateStats
operator|.
name|setNumDVs
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|csData1
operator|.
name|getDateStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|csData2
operator|.
name|getDateStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|csd
operator|.
name|setDateStats
argument_list|(
name|dateStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
operator|||
name|colType
operator|.
name|equals
argument_list|(
literal|"float"
argument_list|)
condition|)
block|{
name|DoubleColumnStatsData
name|doubleStats
init|=
operator|new
name|DoubleColumnStatsData
argument_list|()
decl_stmt|;
name|doubleStats
operator|.
name|setNumNulls
argument_list|(
name|csData1
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
operator|+
name|csData2
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|doubleStats
operator|.
name|setHighValue
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|csData1
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|,
name|csData2
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doubleStats
operator|.
name|setLowValue
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|csData1
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|,
name|csData2
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|doubleStats
operator|.
name|setNumDVs
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|csData1
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|csData2
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|csd
operator|.
name|setDoubleStats
argument_list|(
name|doubleStats
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|colType
operator|.
name|startsWith
argument_list|(
literal|"decimal"
argument_list|)
condition|)
block|{
name|DecimalColumnStatsData
name|decimalStats
init|=
operator|new
name|DecimalColumnStatsData
argument_list|()
decl_stmt|;
name|decimalStats
operator|.
name|setNumNulls
argument_list|(
name|csData1
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
operator|+
name|csData2
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|Decimal
name|high
init|=
operator|(
name|csData1
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|csData2
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
operator|>
literal|0
operator|)
condition|?
name|csData1
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
else|:
name|csData2
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
decl_stmt|;
name|decimalStats
operator|.
name|setHighValue
argument_list|(
name|high
argument_list|)
expr_stmt|;
name|Decimal
name|low
init|=
operator|(
name|csData1
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
operator|.
name|compareTo
argument_list|(
name|csData2
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
operator|<
literal|0
operator|)
condition|?
name|csData1
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
else|:
name|csData2
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
decl_stmt|;
name|decimalStats
operator|.
name|setLowValue
argument_list|(
name|low
argument_list|)
expr_stmt|;
name|decimalStats
operator|.
name|setNumDVs
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|csData1
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|,
name|csData2
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getNumDVs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|csd
operator|.
name|setDecimalStats
argument_list|(
name|decimalStats
argument_list|)
expr_stmt|;
block|}
return|return
name|cso
return|;
block|}
annotation|@
name|Override
specifier|public
name|NotificationEventResponse
name|getNextNotification
parameter_list|(
name|NotificationEventRequest
name|rqst
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getNextNotification
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addNotificationEvent
parameter_list|(
name|NotificationEvent
name|event
parameter_list|)
block|{
name|rawStore
operator|.
name|addNotificationEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanNotificationEvents
parameter_list|(
name|int
name|olderThan
parameter_list|)
block|{
name|rawStore
operator|.
name|cleanNotificationEvents
argument_list|(
name|olderThan
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CurrentNotificationEventId
name|getCurrentNotificationEventId
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|getCurrentNotificationEventId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flushCache
parameter_list|()
block|{
name|rawStore
operator|.
name|flushCache
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
index|[]
name|getFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getFileMetadata
argument_list|(
name|fileIds
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|metadata
parameter_list|,
name|FileMetadataExprType
name|type
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|putFileMetadata
argument_list|(
name|fileIds
argument_list|,
name|metadata
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFileMetadataSupported
parameter_list|()
block|{
return|return
name|rawStore
operator|.
name|isFileMetadataSupported
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getFileMetadataByExpr
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|FileMetadataExprType
name|type
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|ByteBuffer
index|[]
name|metadatas
parameter_list|,
name|ByteBuffer
index|[]
name|exprResults
parameter_list|,
name|boolean
index|[]
name|eliminated
parameter_list|)
throws|throws
name|MetaException
block|{
name|rawStore
operator|.
name|getFileMetadataByExpr
argument_list|(
name|fileIds
argument_list|,
name|type
argument_list|,
name|expr
argument_list|,
name|metadatas
argument_list|,
name|exprResults
argument_list|,
name|eliminated
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FileMetadataHandler
name|getFileMetadataHandler
parameter_list|(
name|FileMetadataExprType
name|type
parameter_list|)
block|{
return|return
name|rawStore
operator|.
name|getFileMetadataHandler
argument_list|(
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getTableCount
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|SharedCache
operator|.
name|getCachedTableCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getPartitionCount
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|SharedCache
operator|.
name|getCachedPartitionCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDatabaseCount
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|SharedCache
operator|.
name|getCachedDatabaseCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeys
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|getPrimaryKeys
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeys
parameter_list|(
name|String
name|parent_db_name
parameter_list|,
name|String
name|parent_tbl_name
parameter_list|,
name|String
name|foreign_db_name
parameter_list|,
name|String
name|foreign_tbl_name
parameter_list|)
throws|throws
name|MetaException
block|{
comment|// TODO constraintCache
return|return
name|rawStore
operator|.
name|getForeignKeys
argument_list|(
name|parent_db_name
argument_list|,
name|parent_tbl_name
argument_list|,
name|foreign_db_name
argument_list|,
name|foreign_tbl_name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTableWithConstraints
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
name|rawStore
operator|.
name|createTableWithConstraints
argument_list|(
name|tbl
argument_list|,
name|primaryKeys
argument_list|,
name|foreignKeys
argument_list|)
expr_stmt|;
name|SharedCache
operator|.
name|addTableToCache
argument_list|(
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|HiveStringUtils
operator|.
name|normalizeIdentifier
argument_list|(
name|tbl
operator|.
name|getTableName
argument_list|()
argument_list|)
argument_list|,
name|tbl
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropConstraint
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|constraintName
parameter_list|)
throws|throws
name|NoSuchObjectException
block|{
comment|// TODO constraintCache
name|rawStore
operator|.
name|dropConstraint
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|constraintName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addPrimaryKeys
parameter_list|(
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|pks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
name|rawStore
operator|.
name|addPrimaryKeys
argument_list|(
name|pks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addForeignKeys
parameter_list|(
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|fks
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
block|{
comment|// TODO constraintCache
name|rawStore
operator|.
name|addForeignKeys
argument_list|(
name|fks
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|ColumnStatisticsObj
argument_list|>
name|getAggrColStatsForTablePartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
block|{
return|return
name|rawStore
operator|.
name|getAggrColStatsForTablePartitions
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|public
name|RawStore
name|getRawStore
parameter_list|()
block|{
return|return
name|rawStore
return|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|void
name|setRawStore
parameter_list|(
name|RawStore
name|rawStore
parameter_list|)
block|{
name|this
operator|.
name|rawStore
operator|=
name|rawStore
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMetastoreDbUuid
parameter_list|()
throws|throws
name|MetaException
block|{
return|return
name|rawStore
operator|.
name|getMetastoreDbUuid
argument_list|()
return|;
block|}
block|}
end_class

end_unit

