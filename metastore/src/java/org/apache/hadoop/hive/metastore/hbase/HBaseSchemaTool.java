begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A tool to dump contents from the HBase store in a human readable form  */
end_comment

begin_class
specifier|public
class|class
name|HBaseSchemaTool
block|{
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseReadWrite
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"You're looking at it"
argument_list|)
operator|.
name|create
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"install"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Install the schema onto an HBase cluster."
argument_list|)
operator|.
name|create
argument_list|(
literal|'i'
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"key"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Key to scan with.  This should be an exact key (not a regular expression"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'k'
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"list-tables"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"List tables in HBase metastore"
argument_list|)
operator|.
name|create
argument_list|(
literal|'l'
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"regex-key"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Regular expression to scan keys with."
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'r'
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"table"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"HBase metastore table to scan"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'t'
argument_list|)
argument_list|)
expr_stmt|;
name|CommandLine
name|cli
init|=
literal|null
decl_stmt|;
try|try
block|{
name|cli
operator|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Parse Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|usage
argument_list|(
name|options
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|'h'
argument_list|)
condition|)
block|{
name|usage
argument_list|(
name|options
argument_list|)
expr_stmt|;
return|return;
block|}
name|Configuration
name|conf
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|'i'
argument_list|)
condition|)
block|{
operator|new
name|HBaseSchemaTool
argument_list|()
operator|.
name|install
argument_list|(
name|conf
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|key
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|'k'
argument_list|)
condition|)
name|key
operator|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|'k'
argument_list|)
expr_stmt|;
name|String
name|regex
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|'r'
argument_list|)
condition|)
name|regex
operator|=
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|'r'
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|!=
literal|null
operator|&&
name|regex
operator|!=
literal|null
condition|)
block|{
name|usage
argument_list|(
name|options
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|key
operator|==
literal|null
operator|&&
name|regex
operator|==
literal|null
condition|)
name|regex
operator|=
literal|".*"
expr_stmt|;
comment|// I do this in the object rather than in the static main so that it's easier to test.
operator|new
name|HBaseSchemaTool
argument_list|()
operator|.
name|go
argument_list|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|'l'
argument_list|)
argument_list|,
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|'t'
argument_list|)
argument_list|,
name|key
argument_list|,
name|regex
argument_list|,
name|conf
argument_list|,
name|System
operator|.
name|out
argument_list|,
name|System
operator|.
name|err
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|usage
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|String
name|header
init|=
literal|"This tool dumps contents of your hbase metastore.  You need to specify\n"
operator|+
literal|"the table to dump.  You can optionally specify a regular expression on the key for\n"
operator|+
literal|"the table.  Keep in mind that the key is often a compound.  For partitions regular\n"
operator|+
literal|"expressions are not used because non-string values are\nstored in binary.  Instead for "
operator|+
literal|"partition you can specify as much of the exact prefix as you want.  So you can give "
operator|+
literal|"dbname.tablename or dbname.tablename.pval1..."
decl_stmt|;
name|String
name|footer
init|=
literal|"If neither key or regex is provided a regex of .* will be assumed.  You\n"
operator|+
literal|"cannot set both key and regex."
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"hbaseschematool"
argument_list|,
name|header
argument_list|,
name|options
argument_list|,
name|footer
argument_list|)
expr_stmt|;
return|return;
block|}
annotation|@
name|VisibleForTesting
name|void
name|go
parameter_list|(
name|boolean
name|listTables
parameter_list|,
name|String
name|table
parameter_list|,
name|String
name|key
parameter_list|,
name|String
name|regex
parameter_list|,
name|Configuration
name|conf
parameter_list|,
name|PrintStream
name|out
parameter_list|,
name|PrintStream
name|err
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|lines
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|listTables
condition|)
block|{
name|lines
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|HBaseReadWrite
operator|.
name|tableNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// If they've used '.' as a key separator we need to replace it with the separator used by
comment|// HBaseUtils
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
name|key
operator|=
name|key
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
name|HBaseUtils
operator|.
name|KEY_SEPARATOR
argument_list|)
expr_stmt|;
try|try
block|{
name|HBaseReadWrite
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HBaseReadWrite
name|hrw
init|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|equalsIgnoreCase
argument_list|(
name|HBaseReadWrite
operator|.
name|DB_TABLE
argument_list|)
condition|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
name|lines
operator|.
name|add
argument_list|(
name|hrw
operator|.
name|printDatabase
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|lines
operator|.
name|addAll
argument_list|(
name|hrw
operator|.
name|printDatabases
argument_list|(
name|regex
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|table
operator|.
name|equalsIgnoreCase
argument_list|(
name|HBaseReadWrite
operator|.
name|FUNC_TABLE
argument_list|)
condition|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
name|lines
operator|.
name|add
argument_list|(
name|hrw
operator|.
name|printFunction
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|lines
operator|.
name|addAll
argument_list|(
name|hrw
operator|.
name|printFunctions
argument_list|(
name|regex
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|table
operator|.
name|equalsIgnoreCase
argument_list|(
name|HBaseReadWrite
operator|.
name|GLOBAL_PRIVS_TABLE
argument_list|)
condition|)
block|{
comment|// Ignore whatever they passed, there's always only either one or zero global privileges
name|lines
operator|.
name|add
argument_list|(
name|hrw
operator|.
name|printGlobalPrivs
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|table
operator|.
name|equalsIgnoreCase
argument_list|(
name|HBaseReadWrite
operator|.
name|PART_TABLE
argument_list|)
condition|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
name|lines
operator|.
name|add
argument_list|(
name|hrw
operator|.
name|printPartition
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|lines
operator|.
name|addAll
argument_list|(
name|hrw
operator|.
name|printPartitions
argument_list|(
name|regex
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|table
operator|.
name|equalsIgnoreCase
argument_list|(
name|HBaseReadWrite
operator|.
name|USER_TO_ROLE_TABLE
argument_list|)
condition|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
name|lines
operator|.
name|add
argument_list|(
name|hrw
operator|.
name|printRolesForUser
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|lines
operator|.
name|addAll
argument_list|(
name|hrw
operator|.
name|printRolesForUsers
argument_list|(
name|regex
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|table
operator|.
name|equalsIgnoreCase
argument_list|(
name|HBaseReadWrite
operator|.
name|ROLE_TABLE
argument_list|)
condition|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
name|lines
operator|.
name|add
argument_list|(
name|hrw
operator|.
name|printRole
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|lines
operator|.
name|addAll
argument_list|(
name|hrw
operator|.
name|printRoles
argument_list|(
name|regex
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|table
operator|.
name|equalsIgnoreCase
argument_list|(
name|HBaseReadWrite
operator|.
name|TABLE_TABLE
argument_list|)
condition|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
name|lines
operator|.
name|add
argument_list|(
name|hrw
operator|.
name|printTable
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|lines
operator|.
name|addAll
argument_list|(
name|hrw
operator|.
name|printTables
argument_list|(
name|regex
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|table
operator|.
name|equalsIgnoreCase
argument_list|(
name|HBaseReadWrite
operator|.
name|SD_TABLE
argument_list|)
condition|)
block|{
if|if
condition|(
name|key
operator|!=
literal|null
condition|)
name|lines
operator|.
name|add
argument_list|(
name|hrw
operator|.
name|printStorageDescriptor
argument_list|(
name|Base64
operator|.
name|decodeBase64
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|lines
operator|.
name|addAll
argument_list|(
name|hrw
operator|.
name|printStorageDescriptors
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|table
operator|.
name|equalsIgnoreCase
argument_list|(
name|HBaseReadWrite
operator|.
name|SECURITY_TABLE
argument_list|)
condition|)
block|{
comment|// We always print all of security, we don't worry about finding particular entries.
name|lines
operator|.
name|addAll
argument_list|(
name|hrw
operator|.
name|printSecurity
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|table
operator|.
name|equalsIgnoreCase
argument_list|(
name|HBaseReadWrite
operator|.
name|SEQUENCES_TABLE
argument_list|)
condition|)
block|{
comment|// We always print all of sequences, we don't worry about finding particular entries.
name|lines
operator|.
name|addAll
argument_list|(
name|hrw
operator|.
name|printSequences
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|err
operator|.
name|println
argument_list|(
literal|"Unknown table: "
operator|+
name|table
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|err
operator|.
name|println
argument_list|(
literal|"Caught exception "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|+
literal|" with message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
for|for
control|(
name|String
name|line
range|:
name|lines
control|)
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
name|void
name|install
parameter_list|(
name|Configuration
name|conf
parameter_list|,
name|PrintStream
name|err
parameter_list|)
block|{
try|try
block|{
comment|// We need to set the conf because createTablesIfNotExist will get a thread local version
comment|// which requires that the configuration object be set.
name|HBaseReadWrite
operator|.
name|setConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|HBaseReadWrite
operator|.
name|createTablesIfNotExist
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|err
operator|.
name|println
argument_list|(
literal|"Caught exception "
operator|+
name|e
operator|.
name|getClass
argument_list|()
operator|+
literal|" with message: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
end_class

end_unit

