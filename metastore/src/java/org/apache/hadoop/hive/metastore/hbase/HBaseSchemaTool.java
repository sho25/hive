begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|CommandLine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|GnuParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|HelpFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|OptionBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TSimpleJSONProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TMemoryBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A tool to dump contents from the HBase store in a human readable form  */
end_comment

begin_class
specifier|public
class|class
name|HBaseSchemaTool
block|{
specifier|private
specifier|static
name|String
index|[]
name|commands
init|=
block|{
literal|"db"
block|,
literal|"part"
block|,
literal|"parts"
block|,
literal|"role"
block|,
literal|"table"
block|}
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|Options
name|options
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"column"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Comma separated list of column names"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"db"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Database name"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'d'
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"help"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"You're looking at it"
argument_list|)
operator|.
name|create
argument_list|(
literal|'h'
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"role"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Role name"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'r'
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"partvals"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Comma separated list of partition values, in order of partition columns"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'p'
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"stats"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Get statistics rather than catalog object"
argument_list|)
operator|.
name|create
argument_list|(
literal|'s'
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|addOption
argument_list|(
name|OptionBuilder
operator|.
name|withLongOpt
argument_list|(
literal|"table"
argument_list|)
operator|.
name|withDescription
argument_list|(
literal|"Table name"
argument_list|)
operator|.
name|hasArg
argument_list|()
operator|.
name|create
argument_list|(
literal|'t'
argument_list|)
argument_list|)
expr_stmt|;
name|CommandLine
name|cli
init|=
operator|new
name|GnuParser
argument_list|()
operator|.
name|parse
argument_list|(
name|options
argument_list|,
name|args
argument_list|)
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|'h'
argument_list|)
condition|)
block|{
name|HelpFormatter
name|formatter
init|=
operator|new
name|HelpFormatter
argument_list|()
decl_stmt|;
name|formatter
operator|.
name|printHelp
argument_list|(
literal|"hbaseschematool"
argument_list|,
name|options
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
index|[]
name|cmds
init|=
name|cli
operator|.
name|getArgs
argument_list|()
decl_stmt|;
if|if
condition|(
name|cmds
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|"Must include a cmd, valid cmds are: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|commands
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|print
argument_list|(
name|commands
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|String
name|cmd
init|=
name|cmds
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|parts
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|'p'
argument_list|)
condition|)
block|{
name|parts
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|'p'
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|cols
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|cli
operator|.
name|hasOption
argument_list|(
literal|'c'
argument_list|)
condition|)
block|{
name|cols
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|'c'
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|HBaseSchemaTool
name|tool
init|=
operator|new
name|HBaseSchemaTool
argument_list|(
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|'d'
argument_list|)
argument_list|,
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|'t'
argument_list|)
argument_list|,
name|parts
argument_list|,
name|cli
operator|.
name|getOptionValue
argument_list|(
literal|'r'
argument_list|)
argument_list|,
name|cols
argument_list|,
name|cli
operator|.
name|hasOption
argument_list|(
literal|'s'
argument_list|)
argument_list|)
decl_stmt|;
name|Method
name|method
init|=
name|tool
operator|.
name|getClass
argument_list|()
operator|.
name|getMethod
argument_list|(
name|cmd
argument_list|)
decl_stmt|;
name|method
operator|.
name|invoke
argument_list|(
name|tool
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HBaseReadWrite
name|hrw
decl_stmt|;
specifier|private
name|String
name|dbName
decl_stmt|;
specifier|private
name|String
name|tableName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|partVals
decl_stmt|;
specifier|private
name|String
name|roleName
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|colNames
decl_stmt|;
specifier|private
name|boolean
name|hasStats
decl_stmt|;
specifier|private
name|HBaseSchemaTool
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tn
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|pv
parameter_list|,
name|String
name|rn
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|cn
parameter_list|,
name|boolean
name|s
parameter_list|)
block|{
name|dbName
operator|=
name|dbname
expr_stmt|;
name|tableName
operator|=
name|tn
expr_stmt|;
name|partVals
operator|=
name|pv
expr_stmt|;
name|roleName
operator|=
name|rn
expr_stmt|;
name|colNames
operator|=
name|cn
expr_stmt|;
name|hasStats
operator|=
name|s
expr_stmt|;
name|hrw
operator|=
name|HBaseReadWrite
operator|.
name|getInstance
argument_list|(
operator|new
name|Configuration
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|db
parameter_list|()
throws|throws
name|IOException
throws|,
name|TException
block|{
name|Database
name|db
init|=
name|hrw
operator|.
name|getDb
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
if|if
condition|(
name|db
operator|==
literal|null
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No such database: "
operator|+
name|db
argument_list|)
expr_stmt|;
else|else
name|dump
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|part
parameter_list|()
throws|throws
name|IOException
throws|,
name|TException
block|{
if|if
condition|(
name|hasStats
condition|)
block|{
name|Table
name|table
init|=
name|hrw
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No such table: "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|partName
init|=
name|HBaseStore
operator|.
name|partName
argument_list|(
name|table
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ColumnStatistics
argument_list|>
name|stats
init|=
name|hrw
operator|.
name|getPartitionStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partName
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|partVals
argument_list|)
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No stats for "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|"."
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|partVals
argument_list|,
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|ColumnStatistics
name|stat
range|:
name|stats
control|)
name|dump
argument_list|(
name|stat
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Partition
name|part
init|=
name|hrw
operator|.
name|getPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partVals
argument_list|)
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No such partition: "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
operator|+
literal|"."
operator|+
name|StringUtils
operator|.
name|join
argument_list|(
name|partVals
argument_list|,
literal|':'
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dump
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|parts
parameter_list|()
throws|throws
name|IOException
throws|,
name|TException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|hrw
operator|.
name|scanPartitionsInTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No such table: "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Partition
name|p
range|:
name|parts
control|)
name|dump
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|role
parameter_list|()
throws|throws
name|IOException
throws|,
name|TException
block|{
name|Role
name|role
init|=
name|hrw
operator|.
name|getRole
argument_list|(
name|roleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|==
literal|null
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No such role: "
operator|+
name|roleName
argument_list|)
expr_stmt|;
else|else
name|dump
argument_list|(
name|role
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|table
parameter_list|()
throws|throws
name|IOException
throws|,
name|TException
block|{
if|if
condition|(
name|hasStats
condition|)
block|{
name|ColumnStatistics
name|stats
init|=
name|hrw
operator|.
name|getTableStatistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colNames
argument_list|)
decl_stmt|;
if|if
condition|(
name|stats
operator|==
literal|null
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No stats for "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
expr_stmt|;
else|else
name|dump
argument_list|(
name|stats
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Table
name|table
init|=
name|hrw
operator|.
name|getTable
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|table
operator|==
literal|null
condition|)
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"No such table: "
operator|+
name|dbName
operator|+
literal|"."
operator|+
name|tableName
argument_list|)
expr_stmt|;
else|else
name|dump
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|dump
parameter_list|(
name|TBase
name|thriftObj
parameter_list|)
throws|throws
name|TException
block|{
name|TMemoryBuffer
name|buf
init|=
operator|new
name|TMemoryBuffer
argument_list|(
literal|1000
argument_list|)
decl_stmt|;
name|TProtocol
name|protocol
init|=
operator|new
name|TSimpleJSONProtocol
argument_list|(
name|buf
argument_list|)
decl_stmt|;
name|thriftObj
operator|.
name|write
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|String
argument_list|(
name|buf
operator|.
name|getArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

