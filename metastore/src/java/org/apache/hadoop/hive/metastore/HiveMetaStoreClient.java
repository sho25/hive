begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|isIndexTable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ObjectPair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|ValidTxnList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|auth
operator|.
name|HiveAuthUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|Public
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Unstable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConfUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|partition
operator|.
name|spec
operator|.
name|PartitionSpecProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|txn
operator|.
name|TxnUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|HadoopThriftAuthBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TApplicationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TCompactProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TFramedTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|annotations
operator|.
name|VisibleForTesting
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_comment
comment|/**  * Hive Metastore Client.  * The public implementation of IMetaStoreClient. Methods not inherited from IMetaStoreClient  * are not public and can change. Hence this is marked as unstable.  * For users who require retry mechanism when the connection between metastore and client is  * broken, RetryingMetaStoreClient class should be used.  */
end_comment

begin_class
annotation|@
name|Public
annotation|@
name|Unstable
specifier|public
class|class
name|HiveMetaStoreClient
implements|implements
name|IMetaStoreClient
block|{
comment|/**    * Capabilities of the current client. If this client talks to a MetaStore server in a manner    * implying the usage of some expanded features that require client-side support that this client    * doesn't have (e.g. a getting a table of a new type), it will get back failures when the    * capability checking is enabled (the default).    */
specifier|public
specifier|final
specifier|static
name|ClientCapabilities
name|VERSION
init|=
literal|null
decl_stmt|;
comment|// No capabilities.
specifier|public
specifier|final
specifier|static
name|ClientCapabilities
name|TEST_VERSION
init|=
operator|new
name|ClientCapabilities
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ClientCapability
operator|.
name|TEST_CAPABILITY
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test capability for tests.
name|ThriftHiveMetastore
operator|.
name|Iface
name|client
init|=
literal|null
decl_stmt|;
specifier|private
name|TTransport
name|transport
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|isConnected
init|=
literal|false
decl_stmt|;
specifier|private
name|URI
name|metastoreUris
index|[]
decl_stmt|;
specifier|private
specifier|final
name|HiveMetaHookLoader
name|hookLoader
decl_stmt|;
specifier|protected
specifier|final
name|HiveConf
name|conf
decl_stmt|;
comment|// Keep a copy of HiveConf so if Session conf changes, we may need to get a new HMS client.
specifier|protected
name|boolean
name|fastpath
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|tokenStrForm
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|localMetaStore
decl_stmt|;
specifier|private
specifier|final
name|MetaStoreFilterHook
name|filterHook
decl_stmt|;
specifier|private
specifier|final
name|int
name|fileMetadataBatchSize
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|currentMetaVars
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|AtomicInteger
name|connCount
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// for thrift connects
specifier|private
name|int
name|retries
init|=
literal|5
decl_stmt|;
specifier|private
name|long
name|retryDelaySeconds
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|ClientCapabilities
name|version
decl_stmt|;
specifier|static
specifier|final
specifier|protected
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"hive.metastore"
argument_list|)
decl_stmt|;
specifier|public
name|HiveMetaStoreClient
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|MetaException
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveMetaStoreClient
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|HiveMetaHookLoader
name|hookLoader
parameter_list|,
name|Boolean
name|allowEmbedded
parameter_list|)
throws|throws
name|MetaException
block|{
name|this
operator|.
name|hookLoader
operator|=
name|hookLoader
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|HiveMetaStoreClient
operator|.
name|class
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|version
operator|=
name|HiveConf
operator|.
name|getBoolVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVE_IN_TEST
argument_list|)
condition|?
name|TEST_VERSION
else|:
name|VERSION
expr_stmt|;
name|filterHook
operator|=
name|loadFilterHooks
argument_list|()
expr_stmt|;
name|fileMetadataBatchSize
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_BATCH_RETRIEVE_OBJECTS_MAX
argument_list|)
expr_stmt|;
name|String
name|msUri
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|)
decl_stmt|;
name|localMetaStore
operator|=
name|HiveConfUtil
operator|.
name|isEmbeddedMetaStore
argument_list|(
name|msUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|localMetaStore
condition|)
block|{
if|if
condition|(
operator|!
name|allowEmbedded
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Embedded metastore is not allowed here. Please configure "
operator|+
name|ConfVars
operator|.
name|METASTOREURIS
operator|.
name|varname
operator|+
literal|"; it is currently set to ["
operator|+
name|msUri
operator|+
literal|"]"
argument_list|)
throw|;
block|}
comment|// instantiate the metastore server handler directly instead of connecting
comment|// through the network
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_FASTPATH
argument_list|)
condition|)
block|{
name|client
operator|=
operator|new
name|HiveMetaStore
operator|.
name|HMSHandler
argument_list|(
literal|"hive client"
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fastpath
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|client
operator|=
name|HiveMetaStore
operator|.
name|newRetryingHMSHandler
argument_list|(
literal|"hive client"
argument_list|,
name|this
operator|.
name|conf
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|isConnected
operator|=
literal|true
expr_stmt|;
name|snapshotActiveConf
argument_list|()
expr_stmt|;
return|return;
block|}
else|else
block|{
if|if
condition|(
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_FASTPATH
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"You can't set hive.metastore.fastpath to true when you're "
operator|+
literal|"talking to the thrift metastore service.  You must run the metastore locally."
argument_list|)
throw|;
block|}
block|}
comment|// get the number retries
name|retries
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTCONNECTIONRETRIES
argument_list|)
expr_stmt|;
name|retryDelaySeconds
operator|=
name|conf
operator|.
name|getTimeVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_CLIENT_CONNECT_RETRY_DELAY
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
comment|// user wants file store based configuration
if|if
condition|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|metastoreUrisString
index|[]
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|metastoreUris
operator|=
operator|new
name|URI
index|[
name|metastoreUrisString
operator|.
name|length
index|]
expr_stmt|;
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|metastoreUrisString
control|)
block|{
name|URI
name|tmpUri
init|=
operator|new
name|URI
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpUri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URI: "
operator|+
name|s
operator|+
literal|" does not have a scheme"
argument_list|)
throw|;
block|}
name|metastoreUris
index|[
name|i
operator|++
index|]
operator|=
name|tmpUri
expr_stmt|;
block|}
comment|// make metastore URIS random
name|List
name|uriList
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|metastoreUris
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|shuffle
argument_list|(
name|uriList
argument_list|)
expr_stmt|;
name|metastoreUris
operator|=
operator|(
name|URI
index|[]
operator|)
name|uriList
operator|.
name|toArray
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"NOT getting uris from conf"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"MetaStoreURIs not found in conf file"
argument_list|)
throw|;
block|}
comment|//If HADOOP_PROXY_USER is set in env or property,
comment|//then need to create metastore client that proxies as that user.
name|String
name|HADOOP_PROXY_USER
init|=
literal|"HADOOP_PROXY_USER"
decl_stmt|;
name|String
name|proxyUser
init|=
name|System
operator|.
name|getenv
argument_list|(
name|HADOOP_PROXY_USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyUser
operator|==
literal|null
condition|)
block|{
name|proxyUser
operator|=
name|System
operator|.
name|getProperty
argument_list|(
name|HADOOP_PROXY_USER
argument_list|)
expr_stmt|;
block|}
comment|//if HADOOP_PROXY_USER is set, create DelegationToken using real user
if|if
condition|(
name|proxyUser
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|HADOOP_PROXY_USER
operator|+
literal|" is set. Using delegation "
operator|+
literal|"token for HiveMetaStore connection."
argument_list|)
expr_stmt|;
try|try
block|{
name|UserGroupInformation
operator|.
name|getLoginUser
argument_list|()
operator|.
name|getRealUser
argument_list|()
operator|.
name|doAs
argument_list|(
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|run
parameter_list|()
throws|throws
name|Exception
block|{
name|open
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|delegationTokenPropString
init|=
literal|"DelegationTokenForHiveMetaStoreServer"
decl_stmt|;
name|String
name|delegationTokenStr
init|=
name|getDelegationToken
argument_list|(
name|proxyUser
argument_list|,
name|proxyUser
argument_list|)
decl_stmt|;
name|Utils
operator|.
name|setTokenStr
argument_list|(
name|UserGroupInformation
operator|.
name|getCurrentUser
argument_list|()
argument_list|,
name|delegationTokenStr
argument_list|,
name|delegationTokenPropString
argument_list|)
expr_stmt|;
name|this
operator|.
name|conf
operator|.
name|setVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_TOKEN_SIGNATURE
argument_list|,
name|delegationTokenPropString
argument_list|)
expr_stmt|;
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error while setting delegation token for "
operator|+
name|proxyUser
argument_list|,
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|MetaException
condition|)
block|{
throw|throw
operator|(
name|MetaException
operator|)
name|e
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
comment|// finally open the store
name|open
argument_list|()
expr_stmt|;
block|}
specifier|private
name|MetaStoreFilterHook
name|loadFilterHooks
parameter_list|()
throws|throws
name|IllegalStateException
block|{
name|Class
argument_list|<
name|?
extends|extends
name|MetaStoreFilterHook
argument_list|>
name|authProviderClass
init|=
name|conf
operator|.
name|getClass
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_FILTER_HOOK
operator|.
name|varname
argument_list|,
name|DefaultMetaStoreFilterHookImpl
operator|.
name|class
argument_list|,
name|MetaStoreFilterHook
operator|.
name|class
argument_list|)
decl_stmt|;
name|String
name|msg
init|=
literal|"Unable to create instance of "
operator|+
name|authProviderClass
operator|.
name|getName
argument_list|()
operator|+
literal|": "
decl_stmt|;
try|try
block|{
name|Constructor
argument_list|<
name|?
extends|extends
name|MetaStoreFilterHook
argument_list|>
name|constructor
init|=
name|authProviderClass
operator|.
name|getConstructor
argument_list|(
name|HiveConf
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|constructor
operator|.
name|newInstance
argument_list|(
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SecurityException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Swaps the first element of the metastoreUris array with a random element from the    * remainder of the array.    */
specifier|private
name|void
name|promoteRandomMetaStoreURI
parameter_list|()
block|{
if|if
condition|(
name|metastoreUris
operator|.
name|length
operator|<=
literal|1
condition|)
block|{
return|return;
block|}
name|Random
name|rng
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|rng
operator|.
name|nextInt
argument_list|(
name|metastoreUris
operator|.
name|length
operator|-
literal|1
argument_list|)
operator|+
literal|1
decl_stmt|;
name|URI
name|tmp
init|=
name|metastoreUris
index|[
literal|0
index|]
decl_stmt|;
name|metastoreUris
index|[
literal|0
index|]
operator|=
name|metastoreUris
index|[
name|index
index|]
expr_stmt|;
name|metastoreUris
index|[
name|index
index|]
operator|=
name|tmp
expr_stmt|;
block|}
annotation|@
name|VisibleForTesting
specifier|public
name|TTransport
name|getTTransport
parameter_list|()
block|{
return|return
name|transport
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isLocalMetaStore
parameter_list|()
block|{
return|return
name|localMetaStore
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCompatibleWith
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
block|{
comment|// Make a copy of currentMetaVars, there is a race condition that
comment|// currentMetaVars might be changed during the execution of the method
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|currentMetaVarsCopy
init|=
name|currentMetaVars
decl_stmt|;
if|if
condition|(
name|currentMetaVarsCopy
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
comment|// recreate
block|}
name|boolean
name|compatible
init|=
literal|true
decl_stmt|;
for|for
control|(
name|ConfVars
name|oneVar
range|:
name|HiveConf
operator|.
name|metaVars
control|)
block|{
comment|// Since metaVars are all of different types, use string for comparison
name|String
name|oldVar
init|=
name|currentMetaVarsCopy
operator|.
name|get
argument_list|(
name|oneVar
operator|.
name|varname
argument_list|)
decl_stmt|;
name|String
name|newVar
init|=
name|conf
operator|.
name|get
argument_list|(
name|oneVar
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldVar
operator|==
literal|null
operator|||
operator|(
name|oneVar
operator|.
name|isCaseSensitive
argument_list|()
condition|?
operator|!
name|oldVar
operator|.
name|equals
argument_list|(
name|newVar
argument_list|)
else|:
operator|!
name|oldVar
operator|.
name|equalsIgnoreCase
argument_list|(
name|newVar
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Mestastore configuration "
operator|+
name|oneVar
operator|.
name|varname
operator|+
literal|" changed from "
operator|+
name|oldVar
operator|+
literal|" to "
operator|+
name|newVar
argument_list|)
expr_stmt|;
name|compatible
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
name|compatible
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHiveAddedJars
parameter_list|(
name|String
name|addedJars
parameter_list|)
block|{
name|HiveConf
operator|.
name|setVar
argument_list|(
name|conf
argument_list|,
name|ConfVars
operator|.
name|HIVEADDEDJARS
argument_list|,
name|addedJars
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|reconnect
parameter_list|()
throws|throws
name|MetaException
block|{
if|if
condition|(
name|localMetaStore
condition|)
block|{
comment|// For direct DB connections we don't yet support reestablishing connections.
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"For direct MetaStore DB connections, we don't support retries"
operator|+
literal|" at the client level."
argument_list|)
throw|;
block|}
else|else
block|{
name|close
argument_list|()
expr_stmt|;
comment|// Swap the first element of the metastoreUris[] with a random element from the rest
comment|// of the array. Rationale being that this method will generally be called when the default
comment|// connection has died and the default connection is likely to be the first array element.
name|promoteRandomMetaStoreURI
argument_list|()
expr_stmt|;
name|open
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**    * @param dbname    * @param tbl_name    * @param new_tbl    * @throws InvalidOperationException    * @throws MetaException    * @throws TException    * @see    *   org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#alter_table(    *   java.lang.String, java.lang.String,    *   org.apache.hadoop.hive.metastore.api.Table)    */
annotation|@
name|Override
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|alter_table_with_environmentContext
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|new_tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_table_with_environmentContext
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|alter_table_with_environment_context
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|new_tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param dbname    * @param name    * @param part_vals    * @param newPart    * @throws InvalidOperationException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#rename_partition(    *      java.lang.String, java.lang.String, java.util.List, org.apache.hadoop.hive.metastore.api.Partition)    */
annotation|@
name|Override
specifier|public
name|void
name|renamePartition
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|rename_partition
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|part_vals
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|open
parameter_list|()
throws|throws
name|MetaException
block|{
name|isConnected
operator|=
literal|false
expr_stmt|;
name|TTransportException
name|tte
init|=
literal|null
decl_stmt|;
name|boolean
name|useSSL
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_METASTORE_USE_SSL
argument_list|)
decl_stmt|;
name|boolean
name|useSasl
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_USE_THRIFT_SASL
argument_list|)
decl_stmt|;
name|boolean
name|useFramedTransport
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_USE_THRIFT_FRAMED_TRANSPORT
argument_list|)
decl_stmt|;
name|boolean
name|useCompactProtocol
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_USE_THRIFT_COMPACT_PROTOCOL
argument_list|)
decl_stmt|;
name|int
name|clientSocketTimeout
init|=
operator|(
name|int
operator|)
name|conf
operator|.
name|getTimeVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_CLIENT_SOCKET_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|attempt
init|=
literal|0
init|;
operator|!
name|isConnected
operator|&&
name|attempt
operator|<
name|retries
condition|;
operator|++
name|attempt
control|)
block|{
for|for
control|(
name|URI
name|store
range|:
name|metastoreUris
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to connect to metastore with URI "
operator|+
name|store
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|useSSL
condition|)
block|{
try|try
block|{
name|String
name|trustStorePath
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVE_METASTORE_SSL_TRUSTSTORE_PATH
argument_list|)
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|trustStorePath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|ConfVars
operator|.
name|HIVE_METASTORE_SSL_TRUSTSTORE_PATH
operator|.
name|varname
operator|+
literal|" Not configured for SSL connection"
argument_list|)
throw|;
block|}
name|String
name|trustStorePassword
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
operator|.
name|getPassword
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|HIVE_METASTORE_SSL_TRUSTSTORE_PASSWORD
operator|.
name|varname
argument_list|)
decl_stmt|;
comment|// Create an SSL socket and connect
name|transport
operator|=
name|HiveAuthUtils
operator|.
name|getSSLSocket
argument_list|(
name|store
operator|.
name|getHost
argument_list|()
argument_list|,
name|store
operator|.
name|getPort
argument_list|()
argument_list|,
name|clientSocketTimeout
argument_list|,
name|trustStorePath
argument_list|,
name|trustStorePassword
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Opened an SSL connection to metastore, current connections: "
operator|+
name|connCount
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TTransportException
name|e
parameter_list|)
block|{
name|tte
operator|=
name|e
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|transport
operator|=
operator|new
name|TSocket
argument_list|(
name|store
operator|.
name|getHost
argument_list|()
argument_list|,
name|store
operator|.
name|getPort
argument_list|()
argument_list|,
name|clientSocketTimeout
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useSasl
condition|)
block|{
comment|// Wrap thrift connection with SASL for secure connection.
try|try
block|{
name|HadoopThriftAuthBridge
operator|.
name|Client
name|authBridge
init|=
name|ShimLoader
operator|.
name|getHadoopThriftAuthBridge
argument_list|()
operator|.
name|createClient
argument_list|()
decl_stmt|;
comment|// check if we should use delegation tokens to authenticate
comment|// the call below gets hold of the tokens if they are set up by hadoop
comment|// this should happen on the map/reduce tasks if the client added the
comment|// tokens into hadoop's credential store in the front end during job
comment|// submission.
name|String
name|tokenSig
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_TOKEN_SIGNATURE
argument_list|)
decl_stmt|;
comment|// tokenSig could be null
name|tokenStrForm
operator|=
name|Utils
operator|.
name|getTokenStrForm
argument_list|(
name|tokenSig
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenStrForm
operator|!=
literal|null
condition|)
block|{
comment|// authenticate using delegation tokens via the "DIGEST" mechanism
name|transport
operator|=
name|authBridge
operator|.
name|createClientTransport
argument_list|(
literal|null
argument_list|,
name|store
operator|.
name|getHost
argument_list|()
argument_list|,
literal|"DIGEST"
argument_list|,
name|tokenStrForm
argument_list|,
name|transport
argument_list|,
name|MetaStoreUtils
operator|.
name|getMetaStoreSaslProperties
argument_list|(
name|conf
argument_list|,
name|useSSL
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|principalConfig
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_KERBEROS_PRINCIPAL
argument_list|)
decl_stmt|;
name|transport
operator|=
name|authBridge
operator|.
name|createClientTransport
argument_list|(
name|principalConfig
argument_list|,
name|store
operator|.
name|getHost
argument_list|()
argument_list|,
literal|"KERBEROS"
argument_list|,
literal|null
argument_list|,
name|transport
argument_list|,
name|MetaStoreUtils
operator|.
name|getMetaStoreSaslProperties
argument_list|(
name|conf
argument_list|,
name|useSSL
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't create client transport"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|ioe
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|useFramedTransport
condition|)
block|{
name|transport
operator|=
operator|new
name|TFramedTransport
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|TProtocol
name|protocol
decl_stmt|;
if|if
condition|(
name|useCompactProtocol
condition|)
block|{
name|protocol
operator|=
operator|new
name|TCompactProtocol
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|protocol
operator|=
operator|new
name|TBinaryProtocol
argument_list|(
name|transport
argument_list|)
expr_stmt|;
block|}
name|client
operator|=
operator|new
name|ThriftHiveMetastore
operator|.
name|Client
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|transport
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|transport
operator|.
name|open
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Opened a connection to metastore, current connections: "
operator|+
name|connCount
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|isConnected
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TTransportException
name|e
parameter_list|)
block|{
name|tte
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to connect to the MetaStore Server..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Don't print full exception trace if DEBUG is not on.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to connect to the MetaStore Server..."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isConnected
operator|&&
operator|!
name|useSasl
operator|&&
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_EXECUTE_SET_UGI
argument_list|)
condition|)
block|{
comment|// Call set_ugi, only in unsecure mode.
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|Utils
operator|.
name|getUGI
argument_list|()
decl_stmt|;
name|client
operator|.
name|set_ugi
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to do login. set_ugi() is not successful, "
operator|+
literal|"Continuing without it."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to find ugi of client set_ugi() is not successful, "
operator|+
literal|"Continuing without it."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"set_ugi() not successful, Likely cause: new client talking to old server. "
operator|+
literal|"Continuing without it."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to connect to metastore with URI "
operator|+
name|store
operator|+
literal|" in attempt "
operator|+
name|attempt
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isConnected
condition|)
block|{
break|break;
block|}
block|}
comment|// Wait before launching the next round of connection retries.
if|if
condition|(
operator|!
name|isConnected
operator|&&
name|retryDelaySeconds
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting "
operator|+
name|retryDelaySeconds
operator|+
literal|" seconds before next connection attempt."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|retryDelaySeconds
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{}
block|}
block|}
if|if
condition|(
operator|!
name|isConnected
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Could not connect to meta store using any of the URIs provided."
operator|+
literal|" Most recent failure: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|tte
argument_list|)
argument_list|)
throw|;
block|}
name|snapshotActiveConf
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Connected to metastore."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|snapshotActiveConf
parameter_list|()
block|{
name|currentMetaVars
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|HiveConf
operator|.
name|metaVars
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|ConfVars
name|oneVar
range|:
name|HiveConf
operator|.
name|metaVars
control|)
block|{
name|currentMetaVars
operator|.
name|put
argument_list|(
name|oneVar
operator|.
name|varname
argument_list|,
name|conf
operator|.
name|get
argument_list|(
name|oneVar
operator|.
name|varname
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getTokenStrForm
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|tokenStrForm
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|isConnected
operator|=
literal|false
expr_stmt|;
name|currentMetaVars
operator|=
literal|null
expr_stmt|;
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|client
condition|)
block|{
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Unable to shutdown metastore client. Will try closing transport directly."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Transport would have got closed via client.shutdown(), so we dont need this, but
comment|// just in case, we make this call.
if|if
condition|(
operator|(
name|transport
operator|!=
literal|null
operator|)
operator|&&
name|transport
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Closed a connection to metastore, current connections: "
operator|+
name|connCount
operator|.
name|decrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMetaConf
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|TException
block|{
name|client
operator|.
name|setMetaConf
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMetaConf
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|getMetaConf
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**    * @param new_part    * @return the added partition    * @throws InvalidObjectException    * @throws AlreadyExistsException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#add_partition(org.apache.hadoop.hive.metastore.api.Partition)    */
annotation|@
name|Override
specifier|public
name|Partition
name|add_partition
parameter_list|(
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|add_partition
argument_list|(
name|new_part
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Partition
name|add_partition
parameter_list|(
name|Partition
name|new_part
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|Partition
name|p
init|=
name|client
operator|.
name|add_partition_with_environment_context
argument_list|(
name|new_part
argument_list|,
name|envContext
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|p
else|:
name|deepCopy
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|/**    * @param new_parts    * @throws InvalidObjectException    * @throws AlreadyExistsException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#add_partitions(List)    */
annotation|@
name|Override
specifier|public
name|int
name|add_partitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|new_parts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|add_partitions
argument_list|(
name|new_parts
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|add_partitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
parameter_list|,
name|boolean
name|ifNotExists
parameter_list|,
name|boolean
name|needResults
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|parts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|needResults
condition|?
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
else|:
literal|null
return|;
block|}
name|Partition
name|part
init|=
name|parts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AddPartitionsRequest
name|req
init|=
operator|new
name|AddPartitionsRequest
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|parts
argument_list|,
name|ifNotExists
argument_list|)
decl_stmt|;
name|req
operator|.
name|setNeedResult
argument_list|(
name|needResults
argument_list|)
expr_stmt|;
name|AddPartitionsResult
name|result
init|=
name|client
operator|.
name|add_partitions_req
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|needResults
condition|?
name|filterHook
operator|.
name|filterPartitions
argument_list|(
name|result
operator|.
name|getPartitions
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|add_partitions_pspec
parameter_list|(
name|PartitionSpecProxy
name|partitionSpec
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|add_partitions_pspec
argument_list|(
name|partitionSpec
operator|.
name|toPartitionSpec
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @param table_name    * @param db_name    * @param part_vals    * @return the appended partition    * @throws InvalidObjectException    * @throws AlreadyExistsException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#append_partition(java.lang.String,    *      java.lang.String, java.util.List)    */
annotation|@
name|Override
specifier|public
name|Partition
name|appendPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|appendPartition
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|,
name|part_vals
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Partition
name|appendPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|Partition
name|p
init|=
name|client
operator|.
name|append_partition_with_environment_context
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|,
name|part_vals
argument_list|,
name|envContext
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|p
else|:
name|deepCopy
argument_list|(
name|p
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|appendPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|appendPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Partition
name|appendPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|Partition
name|p
init|=
name|client
operator|.
name|append_partition_by_name_with_environment_context
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|envContext
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|p
else|:
name|deepCopy
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|/**    * Exchange the partition between two tables    * @param partitionSpecs partitions specs of the parent partition to be exchanged    * @param destDb the db of the destination table    * @param destinationTableName the destination table name    @ @return new partition after exchanging    */
annotation|@
name|Override
specifier|public
name|Partition
name|exchange_partition
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
parameter_list|,
name|String
name|sourceDb
parameter_list|,
name|String
name|sourceTable
parameter_list|,
name|String
name|destDb
parameter_list|,
name|String
name|destinationTableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|exchange_partition
argument_list|(
name|partitionSpecs
argument_list|,
name|sourceDb
argument_list|,
name|sourceTable
argument_list|,
name|destDb
argument_list|,
name|destinationTableName
argument_list|)
return|;
block|}
comment|/**    * Exchange the partitions between two tables    * @param partitionSpecs partitions specs of the parent partition to be exchanged    * @param destDb the db of the destination table    * @param destinationTableName the destination table name    @ @return new partitions after exchanging    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|exchange_partitions
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionSpecs
parameter_list|,
name|String
name|sourceDb
parameter_list|,
name|String
name|sourceTable
parameter_list|,
name|String
name|destDb
parameter_list|,
name|String
name|destinationTableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|exchange_partitions
argument_list|(
name|partitionSpecs
argument_list|,
name|sourceDb
argument_list|,
name|sourceTable
argument_list|,
name|destDb
argument_list|,
name|destinationTableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validatePartitionNameCharacters
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|TException
throws|,
name|MetaException
block|{
name|client
operator|.
name|partition_name_has_valid_characters
argument_list|(
name|partVals
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**    * Create a new Database    * @param db    * @throws AlreadyExistsException    * @throws InvalidObjectException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#create_database(Database)    */
annotation|@
name|Override
specifier|public
name|void
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|create_database
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param tbl    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#create_table(org.apache.hadoop.hive.metastore.api.Table)    */
annotation|@
name|Override
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|createTable
argument_list|(
name|tbl
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|HiveMetaHook
name|hook
init|=
name|getHook
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|hook
operator|!=
literal|null
condition|)
block|{
name|hook
operator|.
name|preCreateTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Subclasses can override this step (for example, for temporary tables)
name|create_table_with_environment_context
argument_list|(
name|tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|hook
operator|!=
literal|null
condition|)
block|{
name|hook
operator|.
name|commitCreateTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
operator|(
name|hook
operator|!=
literal|null
operator|)
condition|)
block|{
try|try
block|{
name|hook
operator|.
name|rollbackCreateTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Create rollback failed with"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|createTableWithConstraints
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeys
parameter_list|,
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeys
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|HiveMetaHook
name|hook
init|=
name|getHook
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|hook
operator|!=
literal|null
condition|)
block|{
name|hook
operator|.
name|preCreateTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Subclasses can override this step (for example, for temporary tables)
name|client
operator|.
name|create_table_with_constraints
argument_list|(
name|tbl
argument_list|,
name|primaryKeys
argument_list|,
name|foreignKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|hook
operator|!=
literal|null
condition|)
block|{
name|hook
operator|.
name|commitCreateTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
operator|(
name|hook
operator|!=
literal|null
operator|)
condition|)
block|{
name|hook
operator|.
name|rollbackCreateTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropConstraint
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|constraintName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|drop_constraint
argument_list|(
operator|new
name|DropConstraintRequest
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|constraintName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addPrimaryKey
parameter_list|(
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|primaryKeyCols
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|add_primary_key
argument_list|(
operator|new
name|AddPrimaryKeyRequest
argument_list|(
name|primaryKeyCols
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addForeignKey
parameter_list|(
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|foreignKeyCols
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|add_foreign_key
argument_list|(
operator|new
name|AddForeignKeyRequest
argument_list|(
name|foreignKeyCols
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param type    * @return true or false    * @throws AlreadyExistsException    * @throws InvalidObjectException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#create_type(org.apache.hadoop.hive.metastore.api.Type)    */
specifier|public
name|boolean
name|createType
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|create_type
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * @param name    * @throws NoSuchObjectException    * @throws InvalidOperationException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#drop_database(java.lang.String, boolean, boolean)    */
annotation|@
name|Override
specifier|public
name|void
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|dropDatabase
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownDb
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|dropDatabase
argument_list|(
name|name
argument_list|,
name|deleteData
argument_list|,
name|ignoreUnknownDb
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownDb
parameter_list|,
name|boolean
name|cascade
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
try|try
block|{
name|getDatabase
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreUnknownDb
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return;
block|}
if|if
condition|(
name|cascade
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|tableList
init|=
name|getAllTables
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|table
range|:
name|tableList
control|)
block|{
try|try
block|{
comment|// Subclasses can override this step (for example, for temporary tables)
name|dropTable
argument_list|(
name|name
argument_list|,
name|table
argument_list|,
name|deleteData
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
comment|// Ignore Index tables, those will be dropped with parent tables
block|}
block|}
block|}
name|client
operator|.
name|drop_database
argument_list|(
name|name
argument_list|,
name|deleteData
argument_list|,
name|cascade
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param tbl_name    * @param db_name    * @param part_vals    * @return true or false    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#drop_partition(java.lang.String,    *      java.lang.String, java.util.List, boolean)    */
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|dropPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|EnvironmentContext
name|env_context
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|dropPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
literal|true
argument_list|,
name|env_context
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|dropPartition
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|deleteData
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|EnvironmentContext
name|getEnvironmentContextWithIfPurgeSet
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|warehouseOptions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|warehouseOptions
operator|.
name|put
argument_list|(
literal|"ifPurge"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
return|return
operator|new
name|EnvironmentContext
argument_list|(
name|warehouseOptions
argument_list|)
return|;
block|}
comment|/*   public boolean dropPartition(String dbName, String tableName, String partName, boolean deleteData, boolean ifPurge)       throws NoSuchObjectException, MetaException, TException {      return dropPartition(dbName, tableName, partName, deleteData,                          ifPurge? getEnvironmentContextWithIfPurgeSet() : null);   }   */
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|drop_partition_by_name_with_environment_context
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|)
return|;
block|}
comment|/**    * @param db_name    * @param tbl_name    * @param part_vals    * @param deleteData    *          delete the underlying data or just delete the table in metadata    * @return true or false    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#drop_partition(java.lang.String,    *      java.lang.String, java.util.List, boolean)    */
annotation|@
name|Override
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|dropPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|deleteData
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|PartitionDropOptions
name|options
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|dropPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|options
operator|.
name|deleteData
argument_list|,
name|options
operator|.
name|purgeData
condition|?
name|getEnvironmentContextWithIfPurgeSet
argument_list|()
else|:
literal|null
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|drop_partition_with_environment_context
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partExprs
parameter_list|,
name|PartitionDropOptions
name|options
parameter_list|)
throws|throws
name|TException
block|{
name|RequestPartsSpec
name|rps
init|=
operator|new
name|RequestPartsSpec
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|DropPartitionsExpr
argument_list|>
name|exprs
init|=
operator|new
name|ArrayList
argument_list|<
name|DropPartitionsExpr
argument_list|>
argument_list|(
name|partExprs
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
name|partExpr
range|:
name|partExprs
control|)
block|{
name|DropPartitionsExpr
name|dpe
init|=
operator|new
name|DropPartitionsExpr
argument_list|()
decl_stmt|;
name|dpe
operator|.
name|setExpr
argument_list|(
name|partExpr
operator|.
name|getSecond
argument_list|()
argument_list|)
expr_stmt|;
name|dpe
operator|.
name|setPartArchiveLevel
argument_list|(
name|partExpr
operator|.
name|getFirst
argument_list|()
argument_list|)
expr_stmt|;
name|exprs
operator|.
name|add
argument_list|(
name|dpe
argument_list|)
expr_stmt|;
block|}
name|rps
operator|.
name|setExprs
argument_list|(
name|exprs
argument_list|)
expr_stmt|;
name|DropPartitionsRequest
name|req
init|=
operator|new
name|DropPartitionsRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|rps
argument_list|)
decl_stmt|;
name|req
operator|.
name|setDeleteData
argument_list|(
name|options
operator|.
name|deleteData
argument_list|)
expr_stmt|;
name|req
operator|.
name|setNeedResult
argument_list|(
name|options
operator|.
name|returnResults
argument_list|)
expr_stmt|;
name|req
operator|.
name|setIfExists
argument_list|(
name|options
operator|.
name|ifExists
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|purgeData
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Dropped partitions will be purged!"
argument_list|)
expr_stmt|;
name|req
operator|.
name|setEnvironmentContext
argument_list|(
name|getEnvironmentContextWithIfPurgeSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|client
operator|.
name|drop_partitions_req
argument_list|(
name|req
argument_list|)
operator|.
name|getPartitions
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partExprs
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ifExists
parameter_list|,
name|boolean
name|needResult
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partExprs
argument_list|,
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
operator|.
name|deleteData
argument_list|(
name|deleteData
argument_list|)
operator|.
name|ifExists
argument_list|(
name|ifExists
argument_list|)
operator|.
name|returnResults
argument_list|(
name|needResult
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|dropPartitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|ObjectPair
argument_list|<
name|Integer
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|>
name|partExprs
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ifExists
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
comment|// By default, we need the results from dropPartitions();
return|return
name|dropPartitions
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|partExprs
argument_list|,
name|PartitionDropOptions
operator|.
name|instance
argument_list|()
operator|.
name|deleteData
argument_list|(
name|deleteData
argument_list|)
operator|.
name|ifExists
argument_list|(
name|ifExists
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * {@inheritDoc}    * @see #dropTable(String, String, boolean, boolean, EnvironmentContext)    */
annotation|@
name|Override
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownTab
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
throws|,
name|UnsupportedOperationException
block|{
name|dropTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|,
name|ignoreUnknownTab
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drop the table and choose whether to save the data in the trash.    * @param ifPurge completely purge the table (skipping trash) while removing    *                data from warehouse    * @see #dropTable(String, String, boolean, boolean, EnvironmentContext)    */
annotation|@
name|Override
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownTab
parameter_list|,
name|boolean
name|ifPurge
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
throws|,
name|UnsupportedOperationException
block|{
comment|//build new environmentContext with ifPurge;
name|EnvironmentContext
name|envContext
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|ifPurge
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|warehouseOptions
init|=
literal|null
decl_stmt|;
name|warehouseOptions
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|warehouseOptions
operator|.
name|put
argument_list|(
literal|"ifPurge"
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|envContext
operator|=
operator|new
name|EnvironmentContext
argument_list|(
name|warehouseOptions
argument_list|)
expr_stmt|;
block|}
name|dropTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|,
name|ignoreUnknownTab
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
name|dropTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
name|deleteData
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * @see #dropTable(String, String, boolean, boolean, EnvironmentContext)    */
annotation|@
name|Override
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|dropTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**    * Drop the table and choose whether to: delete the underlying table data;    * throw if the table doesn't exist; save the data in the trash.    *    * @param dbname    * @param name    * @param deleteData    *          delete the underlying data or just delete the table in metadata    * @param ignoreUnknownTab    *          don't throw if the requested table doesn't exist    * @param envContext    *          for communicating with thrift    * @throws MetaException    *           could not drop table properly    * @throws NoSuchObjectException    *           the table wasn't found    * @throws TException    *           a thrift communication error occurred    * @throws UnsupportedOperationException    *           dropping an index table is not allowed    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#drop_table(java.lang.String,    *      java.lang.String, boolean)    */
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownTab
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
throws|,
name|UnsupportedOperationException
block|{
name|Table
name|tbl
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|getTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreUnknownTab
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return;
block|}
if|if
condition|(
name|isIndexTable
argument_list|(
name|tbl
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Cannot drop index tables"
argument_list|)
throw|;
block|}
name|HiveMetaHook
name|hook
init|=
name|getHook
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|hook
operator|!=
literal|null
condition|)
block|{
name|hook
operator|.
name|preDropTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|drop_table_with_environment_context
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
if|if
condition|(
name|hook
operator|!=
literal|null
condition|)
block|{
name|hook
operator|.
name|commitDropTable
argument_list|(
name|tbl
argument_list|,
name|deleteData
operator|||
operator|(
name|envContext
operator|!=
literal|null
operator|&&
literal|"TRUE"
operator|.
name|equals
argument_list|(
name|envContext
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"ifPurge"
argument_list|)
argument_list|)
operator|)
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreUnknownTab
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
operator|(
name|hook
operator|!=
literal|null
operator|)
condition|)
block|{
name|hook
operator|.
name|rollbackDropTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @param type    * @return true if the type is dropped    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#drop_type(java.lang.String)    */
specifier|public
name|boolean
name|dropType
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|drop_type
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * @param name    * @return map of types    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_type_all(java.lang.String)    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|getTypeAll
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|fromClient
init|=
name|client
operator|.
name|get_type_all
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromClient
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|fromClient
operator|.
name|keySet
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|deepCopy
argument_list|(
name|fromClient
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|databasePattern
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|filterHook
operator|.
name|filterDatabases
argument_list|(
name|client
operator|.
name|get_databases
argument_list|(
name|databasePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|()
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|filterHook
operator|.
name|filterDatabases
argument_list|(
name|client
operator|.
name|get_all_databases
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * @param tbl_name    * @param db_name    * @param max_parts    * @return list of partitions    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|get_partitions
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|parts
else|:
name|deepCopyPartitions
argument_list|(
name|filterHook
operator|.
name|filterPartitions
argument_list|(
name|parts
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PartitionSpecProxy
name|listPartitionSpecs
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|int
name|maxParts
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|PartitionSpecProxy
operator|.
name|Factory
operator|.
name|get
argument_list|(
name|filterHook
operator|.
name|filterPartitionSpecs
argument_list|(
name|client
operator|.
name|get_partitions_pspec
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|maxParts
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|get_partitions_ps
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|parts
else|:
name|deepCopyPartitions
argument_list|(
name|filterHook
operator|.
name|filterPartitions
argument_list|(
name|parts
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsWithAuthInfo
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|String
name|user_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|get_partitions_with_auth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|,
name|user_name
argument_list|,
name|group_names
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|parts
else|:
name|deepCopyPartitions
argument_list|(
name|filterHook
operator|.
name|filterPartitions
argument_list|(
name|parts
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsWithAuthInfo
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|String
name|user_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|get_partitions_ps_with_auth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
name|user_name
argument_list|,
name|group_names
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|parts
else|:
name|deepCopyPartitions
argument_list|(
name|filterHook
operator|.
name|filterPartitions
argument_list|(
name|parts
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get list of partitions matching specified filter    * @param db_name the database name    * @param tbl_name the table name    * @param filter the filter string,    *    for example "part1 = \"p1_abc\" and part2<= "\p2_test\"". Filtering can    *    be done only on string partition keys.    * @param max_parts the maximum number of partitions to return,    *    all partitions are returned if -1 is passed    * @return list of partitions    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsByFilter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|get_partitions_by_filter
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|filter
argument_list|,
name|max_parts
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|parts
else|:
name|deepCopyPartitions
argument_list|(
name|filterHook
operator|.
name|filterPartitions
argument_list|(
name|parts
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PartitionSpecProxy
name|listPartitionSpecsByFilter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|int
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
return|return
name|PartitionSpecProxy
operator|.
name|Factory
operator|.
name|get
argument_list|(
name|filterHook
operator|.
name|filterPartitionSpecs
argument_list|(
name|client
operator|.
name|get_part_specs_by_filter
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|filter
argument_list|,
name|max_parts
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|listPartitionsByExpr
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|byte
index|[]
name|expr
parameter_list|,
name|String
name|default_partition_name
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|result
parameter_list|)
throws|throws
name|TException
block|{
assert|assert
name|result
operator|!=
literal|null
assert|;
name|PartitionsByExprRequest
name|req
init|=
operator|new
name|PartitionsByExprRequest
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|expr
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|default_partition_name
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|setDefaultPartitionName
argument_list|(
name|default_partition_name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|max_parts
operator|>=
literal|0
condition|)
block|{
name|req
operator|.
name|setMaxParts
argument_list|(
name|max_parts
argument_list|)
expr_stmt|;
block|}
name|PartitionsByExprResult
name|r
init|=
literal|null
decl_stmt|;
try|try
block|{
name|r
operator|=
name|client
operator|.
name|get_partitions_by_expr
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TApplicationException
name|te
parameter_list|)
block|{
comment|// TODO: backward compat for Hive<= 0.12. Can be removed later.
if|if
condition|(
name|te
operator|.
name|getType
argument_list|()
operator|!=
name|TApplicationException
operator|.
name|UNKNOWN_METHOD
operator|&&
name|te
operator|.
name|getType
argument_list|()
operator|!=
name|TApplicationException
operator|.
name|WRONG_METHOD_NAME
condition|)
block|{
throw|throw
name|te
throw|;
block|}
throw|throw
operator|new
name|IncompatibleMetastoreException
argument_list|(
literal|"Metastore doesn't support listPartitionsByExpr: "
operator|+
name|te
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|fastpath
condition|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|r
operator|.
name|getPartitions
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|r
operator|.
name|setPartitions
argument_list|(
name|filterHook
operator|.
name|filterPartitions
argument_list|(
name|r
operator|.
name|getPartitions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// TODO: in these methods, do we really need to deepcopy?
name|deepCopyPartitions
argument_list|(
name|r
operator|.
name|getPartitions
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
operator|!
name|r
operator|.
name|isSetHasUnknownPartitions
argument_list|()
operator|||
name|r
operator|.
name|isHasUnknownPartitions
argument_list|()
return|;
comment|// Assume the worst.
block|}
comment|/**    * @param name    * @return the database    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_database(java.lang.String)    */
annotation|@
name|Override
specifier|public
name|Database
name|getDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|Database
name|d
init|=
name|client
operator|.
name|get_database
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|d
else|:
name|deepCopy
argument_list|(
name|filterHook
operator|.
name|filterDatabase
argument_list|(
name|d
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param tbl_name    * @param db_name    * @param part_vals    * @return the partition    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_partition(java.lang.String,    *      java.lang.String, java.util.List)    */
annotation|@
name|Override
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|Partition
name|p
init|=
name|client
operator|.
name|get_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|p
else|:
name|deepCopy
argument_list|(
name|filterHook
operator|.
name|filterPartition
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_names
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|client
operator|.
name|get_partitions_by_names
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_names
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|parts
else|:
name|deepCopyPartitions
argument_list|(
name|filterHook
operator|.
name|filterPartitions
argument_list|(
name|parts
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartitionWithAuthInfo
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|String
name|user_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|Partition
name|p
init|=
name|client
operator|.
name|get_partition_with_auth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|user_name
argument_list|,
name|group_names
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|p
else|:
name|deepCopy
argument_list|(
name|filterHook
operator|.
name|filterPartition
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param name    * @param dbname    * @return the table    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    * @throws NoSuchObjectException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_table(java.lang.String,    *      java.lang.String)    */
annotation|@
name|Override
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
name|GetTableRequest
name|req
init|=
operator|new
name|GetTableRequest
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|req
operator|.
name|setCapabilities
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|Table
name|t
init|=
name|client
operator|.
name|get_table_req
argument_list|(
name|req
argument_list|)
operator|.
name|getTable
argument_list|()
decl_stmt|;
return|return
name|fastpath
condition|?
name|t
else|:
name|deepCopy
argument_list|(
name|filterHook
operator|.
name|filterTable
argument_list|(
name|t
argument_list|)
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
name|Table
name|t
init|=
name|getTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|t
else|:
name|filterHook
operator|.
name|filterTable
argument_list|(
name|t
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
name|GetTablesRequest
name|req
init|=
operator|new
name|GetTablesRequest
argument_list|(
name|dbName
argument_list|)
decl_stmt|;
name|req
operator|.
name|setTblNames
argument_list|(
name|tableNames
argument_list|)
expr_stmt|;
name|req
operator|.
name|setCapabilities
argument_list|(
name|version
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Table
argument_list|>
name|tabs
init|=
name|client
operator|.
name|get_table_objects_by_name_req
argument_list|(
name|req
argument_list|)
operator|.
name|getTables
argument_list|()
decl_stmt|;
return|return
name|fastpath
condition|?
name|tabs
else|:
name|deepCopyTables
argument_list|(
name|filterHook
operator|.
name|filterTables
argument_list|(
name|tabs
argument_list|)
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxTables
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
block|{
return|return
name|filterHook
operator|.
name|filterTableNames
argument_list|(
name|dbName
argument_list|,
name|client
operator|.
name|get_table_names_by_filter
argument_list|(
name|dbName
argument_list|,
name|filter
argument_list|,
name|maxTables
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param name    * @return the type    * @throws MetaException    * @throws TException    * @throws NoSuchObjectException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_type(java.lang.String)    */
specifier|public
name|Type
name|getType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopy
argument_list|(
name|client
operator|.
name|get_type
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tablePattern
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|filterHook
operator|.
name|filterTableNames
argument_list|(
name|dbname
argument_list|,
name|client
operator|.
name|get_tables
argument_list|(
name|dbname
argument_list|,
name|tablePattern
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tablePattern
parameter_list|,
name|TableType
name|tableType
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|filterHook
operator|.
name|filterTableNames
argument_list|(
name|dbname
argument_list|,
name|client
operator|.
name|get_tables_by_type
argument_list|(
name|dbname
argument_list|,
name|tablePattern
argument_list|,
name|tableType
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|TableMeta
argument_list|>
name|getTableMeta
parameter_list|(
name|String
name|dbPatterns
parameter_list|,
name|String
name|tablePatterns
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableTypes
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|filterNames
argument_list|(
name|client
operator|.
name|get_table_meta
argument_list|(
name|dbPatterns
argument_list|,
name|tablePatterns
argument_list|,
name|tableTypes
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|TableMeta
argument_list|>
name|filterNames
parameter_list|(
name|List
argument_list|<
name|TableMeta
argument_list|>
name|metas
parameter_list|)
throws|throws
name|MetaException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|TableMeta
argument_list|>
name|sources
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|dbTables
init|=
operator|new
name|LinkedHashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|TableMeta
name|meta
range|:
name|metas
control|)
block|{
name|sources
operator|.
name|put
argument_list|(
name|meta
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|meta
operator|.
name|getTableName
argument_list|()
argument_list|,
name|meta
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|tables
init|=
name|dbTables
operator|.
name|get
argument_list|(
name|meta
operator|.
name|getDbName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tables
operator|==
literal|null
condition|)
block|{
name|dbTables
operator|.
name|put
argument_list|(
name|meta
operator|.
name|getDbName
argument_list|()
argument_list|,
name|tables
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tables
operator|.
name|add
argument_list|(
name|meta
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|TableMeta
argument_list|>
name|filtered
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|entry
range|:
name|dbTables
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|String
name|table
range|:
name|filterHook
operator|.
name|filterTableNames
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
control|)
block|{
name|filtered
operator|.
name|add
argument_list|(
name|sources
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|"."
operator|+
name|table
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filtered
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|dbname
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|filterHook
operator|.
name|filterTableNames
argument_list|(
name|dbname
argument_list|,
name|client
operator|.
name|get_all_tables
argument_list|(
name|dbname
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|tableExists
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
block|{
try|try
block|{
name|GetTableRequest
name|req
init|=
operator|new
name|GetTableRequest
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
name|req
operator|.
name|setCapabilities
argument_list|(
name|version
argument_list|)
expr_stmt|;
return|return
name|filterHook
operator|.
name|filterTable
argument_list|(
name|client
operator|.
name|get_table_req
argument_list|(
name|req
argument_list|)
operator|.
name|getTable
argument_list|()
argument_list|)
operator|!=
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|boolean
name|tableExists
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
block|{
return|return
name|tableExists
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|filterHook
operator|.
name|filterPartitionNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|client
operator|.
name|get_partition_names
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
return|return
name|filterHook
operator|.
name|filterPartitionNames
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|client
operator|.
name|get_partition_names_ps
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get number of partitions matching specified filter    * @param db_name the database name    * @param tbl_name the table name    * @param filter the filter string,    *    for example "part1 = \"p1_abc\" and part2<= "\p2_test\"". Filtering can    *    be done only on string partition keys.    * @return number of partitions    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    */
annotation|@
name|Override
specifier|public
name|int
name|getNumPartitionsByFilter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_num_partitions_by_filter
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|filter
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_partition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Partition
name|newPart
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|alter_partition_with_environment_context
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newPart
argument_list|,
name|environmentContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alter_partitions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|newParts
parameter_list|,
name|EnvironmentContext
name|environmentContext
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|alter_partitions_with_environment_context
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newParts
argument_list|,
name|environmentContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterDatabase
parameter_list|(
name|String
name|dbName
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|client
operator|.
name|alter_database
argument_list|(
name|dbName
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param db    * @param tableName    * @throws UnknownTableException    * @throws UnknownDBException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_fields(java.lang.String,    *      java.lang.String)    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFields
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
name|client
operator|.
name|get_fields
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|fields
else|:
name|deepCopyFieldSchemas
argument_list|(
name|fields
argument_list|)
return|;
block|}
comment|/**    * create an index    * @param index the index object    * @param indexTable which stores the index data    * @throws InvalidObjectException    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    * @throws AlreadyExistsException    */
annotation|@
name|Override
specifier|public
name|void
name|createIndex
parameter_list|(
name|Index
name|index
parameter_list|,
name|Table
name|indexTable
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|client
operator|.
name|add_index
argument_list|(
name|index
argument_list|,
name|indexTable
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param dbname    * @param base_tbl_name    * @param idx_name    * @param new_idx    * @throws InvalidOperationException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#alter_index(java.lang.String,    *      java.lang.String, java.lang.String, org.apache.hadoop.hive.metastore.api.Index)    */
annotation|@
name|Override
specifier|public
name|void
name|alter_index
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|base_tbl_name
parameter_list|,
name|String
name|idx_name
parameter_list|,
name|Index
name|new_idx
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|alter_index
argument_list|(
name|dbname
argument_list|,
name|base_tbl_name
argument_list|,
name|idx_name
argument_list|,
name|new_idx
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param dbName    * @param tblName    * @param indexName    * @return the index    * @throws MetaException    * @throws UnknownTableException    * @throws NoSuchObjectException    * @throws TException    */
annotation|@
name|Override
specifier|public
name|Index
name|getIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
return|return
name|deepCopy
argument_list|(
name|filterHook
operator|.
name|filterIndex
argument_list|(
name|client
operator|.
name|get_index_by_name
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|indexName
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * list indexes of the give base table    * @param dbName    * @param tblName    * @param max    * @return the list of indexes    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listIndexNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|filterHook
operator|.
name|filterIndexNames
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|client
operator|.
name|get_index_names
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * list all the index names of the give base table.    *    * @param dbName    * @param tblName    * @param max    * @return list of indexes    * @throws MetaException    * @throws TException    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|listIndexes
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|filterHook
operator|.
name|filterIndexes
argument_list|(
name|client
operator|.
name|get_indexes
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLPrimaryKey
argument_list|>
name|getPrimaryKeys
parameter_list|(
name|PrimaryKeysRequest
name|req
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_primary_keys
argument_list|(
name|req
argument_list|)
operator|.
name|getPrimaryKeys
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|SQLForeignKey
argument_list|>
name|getForeignKeys
parameter_list|(
name|ForeignKeysRequest
name|req
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_foreign_keys
argument_list|(
name|req
argument_list|)
operator|.
name|getForeignKeys
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
annotation|@
name|Deprecated
comment|//use setPartitionColumnStatistics instead
specifier|public
name|boolean
name|updateTableColumnStatistics
parameter_list|(
name|ColumnStatistics
name|statsObj
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
block|{
return|return
name|client
operator|.
name|update_table_column_statistics
argument_list|(
name|statsObj
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
annotation|@
name|Deprecated
comment|//use setPartitionColumnStatistics instead
specifier|public
name|boolean
name|updatePartitionColumnStatistics
parameter_list|(
name|ColumnStatistics
name|statsObj
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
block|{
return|return
name|client
operator|.
name|update_partition_column_statistics
argument_list|(
name|statsObj
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|boolean
name|setPartitionColumnStatistics
parameter_list|(
name|SetPartitionsStatsRequest
name|request
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
block|{
return|return
name|client
operator|.
name|set_aggr_stats_for
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flushCache
parameter_list|()
block|{
try|try
block|{
name|client
operator|.
name|flushCache
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
comment|// Not much we can do about it honestly
name|LOG
operator|.
name|warn
argument_list|(
literal|"Got error flushing the cache"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
name|getTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
throws|,
name|InvalidObjectException
block|{
return|return
name|client
operator|.
name|get_table_statistics_req
argument_list|(
operator|new
name|TableStatsRequest
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colNames
argument_list|)
argument_list|)
operator|.
name|getTableStats
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|>
name|getPartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_partitions_statistics_req
argument_list|(
operator|new
name|PartitionsStatsRequest
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colNames
argument_list|,
name|partNames
argument_list|)
argument_list|)
operator|.
name|getPartStats
argument_list|()
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|boolean
name|deletePartitionColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
block|{
return|return
name|client
operator|.
name|delete_partition_column_statistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|colName
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Override
specifier|public
name|boolean
name|deleteTableColumnStatistics
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|colName
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
throws|,
name|InvalidInputException
block|{
return|return
name|client
operator|.
name|delete_table_column_statistics
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|colName
argument_list|)
return|;
block|}
comment|/**    * @param db    * @param tableName    * @throws UnknownTableException    * @throws UnknownDBException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_schema(java.lang.String,    *      java.lang.String)    */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getSchema
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
name|EnvironmentContext
name|envCxt
init|=
literal|null
decl_stmt|;
name|String
name|addedJars
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|ConfVars
operator|.
name|HIVEADDEDJARS
argument_list|)
decl_stmt|;
if|if
condition|(
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
operator|.
name|isNotBlank
argument_list|(
name|addedJars
argument_list|)
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"hive.added.jars.path"
argument_list|,
name|addedJars
argument_list|)
expr_stmt|;
name|envCxt
operator|=
operator|new
name|EnvironmentContext
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
init|=
name|client
operator|.
name|get_schema_with_environment_context
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|,
name|envCxt
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|fields
else|:
name|deepCopyFieldSchemas
argument_list|(
name|fields
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getConfigValue
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|TException
throws|,
name|ConfigValSecurityException
block|{
return|return
name|client
operator|.
name|get_config_value
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
block|{
name|Partition
name|p
init|=
name|client
operator|.
name|get_partition_by_name
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|p
else|:
name|deepCopy
argument_list|(
name|filterHook
operator|.
name|filterPartition
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Partition
name|appendPartitionByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|appendPartitionByName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Partition
name|appendPartitionByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|Partition
name|p
init|=
name|client
operator|.
name|append_partition_by_name_with_environment_context
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|envContext
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|p
else|:
name|deepCopy
argument_list|(
name|p
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dropPartitionByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|dropPartitionByName
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|deleteData
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dropPartitionByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|drop_partition_by_name_with_environment_context
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|)
return|;
block|}
specifier|private
name|HiveMetaHook
name|getHook
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|hookLoader
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|hookLoader
operator|.
name|getHook
argument_list|(
name|tbl
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|partitionNameToVals
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|partition_name_to_vals
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionNameToSpec
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|partition_name_to_spec
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * @param partition    * @return    */
specifier|private
name|Partition
name|deepCopy
parameter_list|(
name|Partition
name|partition
parameter_list|)
block|{
name|Partition
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|partition
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|Partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|Database
name|deepCopy
parameter_list|(
name|Database
name|database
parameter_list|)
block|{
name|Database
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|database
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|Database
argument_list|(
name|database
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|protected
name|Table
name|deepCopy
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|Table
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|Table
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|Index
name|deepCopy
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
name|Index
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|Index
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|Type
name|deepCopy
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|Type
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|Type
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|FieldSchema
name|deepCopy
parameter_list|(
name|FieldSchema
name|schema
parameter_list|)
block|{
name|FieldSchema
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|FieldSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|Function
name|deepCopy
parameter_list|(
name|Function
name|func
parameter_list|)
block|{
name|Function
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|func
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|Function
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|protected
name|PrincipalPrivilegeSet
name|deepCopy
parameter_list|(
name|PrincipalPrivilegeSet
name|pps
parameter_list|)
block|{
name|PrincipalPrivilegeSet
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pps
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|PrincipalPrivilegeSet
argument_list|(
name|pps
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|deepCopyPartitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
block|{
return|return
name|deepCopyPartitions
argument_list|(
name|partitions
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|deepCopyPartitions
parameter_list|(
name|Collection
argument_list|<
name|Partition
argument_list|>
name|src
parameter_list|,
name|List
argument_list|<
name|Partition
argument_list|>
name|dest
parameter_list|)
block|{
if|if
condition|(
name|src
operator|==
literal|null
condition|)
block|{
return|return
name|dest
return|;
block|}
if|if
condition|(
name|dest
operator|==
literal|null
condition|)
block|{
name|dest
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|(
name|src
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Partition
name|part
range|:
name|src
control|)
block|{
name|dest
operator|.
name|add
argument_list|(
name|deepCopy
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|dest
return|;
block|}
specifier|private
name|List
argument_list|<
name|Table
argument_list|>
name|deepCopyTables
parameter_list|(
name|List
argument_list|<
name|Table
argument_list|>
name|tables
parameter_list|)
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tables
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|ArrayList
argument_list|<
name|Table
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Table
name|tab
range|:
name|tables
control|)
block|{
name|copy
operator|.
name|add
argument_list|(
name|deepCopy
argument_list|(
name|tab
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|copy
return|;
block|}
specifier|protected
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|deepCopyFieldSchemas
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schemas
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schemas
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|FieldSchema
name|schema
range|:
name|schemas
control|)
block|{
name|copy
operator|.
name|add
argument_list|(
name|deepCopy
argument_list|(
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|copy
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|drop_index_by_name
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grant_role
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|GrantRevokeRoleRequest
name|req
init|=
operator|new
name|GrantRevokeRoleRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setRequestType
argument_list|(
name|GrantRevokeType
operator|.
name|GRANT
argument_list|)
expr_stmt|;
name|req
operator|.
name|setRoleName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|req
operator|.
name|setPrincipalName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|req
operator|.
name|setPrincipalType
argument_list|(
name|principalType
argument_list|)
expr_stmt|;
name|req
operator|.
name|setGrantor
argument_list|(
name|grantor
argument_list|)
expr_stmt|;
name|req
operator|.
name|setGrantorType
argument_list|(
name|grantorType
argument_list|)
expr_stmt|;
name|req
operator|.
name|setGrantOption
argument_list|(
name|grantOption
argument_list|)
expr_stmt|;
name|GrantRevokeRoleResponse
name|res
init|=
name|client
operator|.
name|grant_revoke_role
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"GrantRevokeResponse missing success field"
argument_list|)
throw|;
block|}
return|return
name|res
operator|.
name|isSuccess
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|create_role
parameter_list|(
name|Role
name|role
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|create_role
argument_list|(
name|role
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_role
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|drop_role
argument_list|(
name|roleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Role
argument_list|>
name|list_roles
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|list_roles
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listRoleNames
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_role_names
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|GetPrincipalsInRoleResponse
name|get_principals_in_role
parameter_list|(
name|GetPrincipalsInRoleRequest
name|req
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_principals_in_role
argument_list|(
name|req
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|GetRoleGrantsForPrincipalResponse
name|get_role_grants_for_principal
parameter_list|(
name|GetRoleGrantsForPrincipalRequest
name|getRolePrincReq
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_role_grants_for_principal
argument_list|(
name|getRolePrincReq
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grant_privileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|GrantRevokePrivilegeRequest
name|req
init|=
operator|new
name|GrantRevokePrivilegeRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setRequestType
argument_list|(
name|GrantRevokeType
operator|.
name|GRANT
argument_list|)
expr_stmt|;
name|req
operator|.
name|setPrivileges
argument_list|(
name|privileges
argument_list|)
expr_stmt|;
name|GrantRevokePrivilegeResponse
name|res
init|=
name|client
operator|.
name|grant_revoke_privileges
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"GrantRevokePrivilegeResponse missing success field"
argument_list|)
throw|;
block|}
return|return
name|res
operator|.
name|isSuccess
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revoke_role
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|GrantRevokeRoleRequest
name|req
init|=
operator|new
name|GrantRevokeRoleRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setRequestType
argument_list|(
name|GrantRevokeType
operator|.
name|REVOKE
argument_list|)
expr_stmt|;
name|req
operator|.
name|setRoleName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|req
operator|.
name|setPrincipalName
argument_list|(
name|userName
argument_list|)
expr_stmt|;
name|req
operator|.
name|setPrincipalType
argument_list|(
name|principalType
argument_list|)
expr_stmt|;
name|req
operator|.
name|setGrantOption
argument_list|(
name|grantOption
argument_list|)
expr_stmt|;
name|GrantRevokeRoleResponse
name|res
init|=
name|client
operator|.
name|grant_revoke_role
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"GrantRevokeResponse missing success field"
argument_list|)
throw|;
block|}
return|return
name|res
operator|.
name|isSuccess
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revoke_privileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|GrantRevokePrivilegeRequest
name|req
init|=
operator|new
name|GrantRevokePrivilegeRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setRequestType
argument_list|(
name|GrantRevokeType
operator|.
name|REVOKE
argument_list|)
expr_stmt|;
name|req
operator|.
name|setPrivileges
argument_list|(
name|privileges
argument_list|)
expr_stmt|;
name|req
operator|.
name|setRevokeGrantOption
argument_list|(
name|grantOption
argument_list|)
expr_stmt|;
name|GrantRevokePrivilegeResponse
name|res
init|=
name|client
operator|.
name|grant_revoke_privileges
argument_list|(
name|req
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|res
operator|.
name|isSetSuccess
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"GrantRevokePrivilegeResponse missing success field"
argument_list|)
throw|;
block|}
return|return
name|res
operator|.
name|isSuccess
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|get_privilege_set
parameter_list|(
name|HiveObjectRef
name|hiveObject
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_privilege_set
argument_list|(
name|hiveObject
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_privileges
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|HiveObjectRef
name|hiveObject
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|list_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDelegationToken
parameter_list|(
name|String
name|renewerKerberosPrincipalName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|IOException
block|{
comment|//a convenience method that makes the intended owner for the delegation
comment|//token request the current user
name|String
name|owner
init|=
name|conf
operator|.
name|getUser
argument_list|()
decl_stmt|;
return|return
name|getDelegationToken
argument_list|(
name|owner
argument_list|,
name|renewerKerberosPrincipalName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDelegationToken
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|renewerKerberosPrincipalName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
comment|// This is expected to be a no-op, so we will return null when we use local metastore.
if|if
condition|(
name|localMetaStore
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|client
operator|.
name|get_delegation_token
argument_list|(
name|owner
argument_list|,
name|renewerKerberosPrincipalName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|localMetaStore
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|client
operator|.
name|renew_delegation_token
argument_list|(
name|tokenStrForm
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|localMetaStore
condition|)
block|{
return|return;
block|}
name|client
operator|.
name|cancel_delegation_token
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|addToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|,
name|String
name|delegationToken
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|add_token
argument_list|(
name|tokenIdentifier
argument_list|,
name|delegationToken
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|remove_token
argument_list|(
name|tokenIdentifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getToken
parameter_list|(
name|String
name|tokenIdentifier
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|get_token
argument_list|(
name|tokenIdentifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTokenIdentifiers
parameter_list|()
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|get_all_token_identifiers
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|addMasterKey
parameter_list|(
name|String
name|key
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|add_master_key
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|updateMasterKey
parameter_list|(
name|Integer
name|seqNo
parameter_list|,
name|String
name|key
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|update_master_key
argument_list|(
name|seqNo
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|removeMasterKey
parameter_list|(
name|Integer
name|keySeq
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|remove_master_key
argument_list|(
name|keySeq
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getMasterKeys
parameter_list|()
throws|throws
name|TException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|keyList
init|=
name|client
operator|.
name|get_master_keys
argument_list|()
decl_stmt|;
return|return
name|keyList
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|keyList
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ValidTxnList
name|getValidTxns
parameter_list|()
throws|throws
name|TException
block|{
return|return
name|TxnUtils
operator|.
name|createValidReadTxnList
argument_list|(
name|client
operator|.
name|get_open_txns
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ValidTxnList
name|getValidTxns
parameter_list|(
name|long
name|currentTxn
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|TxnUtils
operator|.
name|createValidReadTxnList
argument_list|(
name|client
operator|.
name|get_open_txns
argument_list|()
argument_list|,
name|currentTxn
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|openTxn
parameter_list|(
name|String
name|user
parameter_list|)
throws|throws
name|TException
block|{
name|OpenTxnsResponse
name|txns
init|=
name|openTxns
argument_list|(
name|user
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|txns
operator|.
name|getTxn_ids
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|OpenTxnsResponse
name|openTxns
parameter_list|(
name|String
name|user
parameter_list|,
name|int
name|numTxns
parameter_list|)
throws|throws
name|TException
block|{
name|String
name|hostname
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hostname
operator|=
name|InetAddress
operator|.
name|getLocalHost
argument_list|()
operator|.
name|getHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnknownHostException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to resolve my host name "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|client
operator|.
name|open_txns
argument_list|(
operator|new
name|OpenTxnRequest
argument_list|(
name|numTxns
argument_list|,
name|user
argument_list|,
name|hostname
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|rollbackTxn
parameter_list|(
name|long
name|txnid
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TException
block|{
name|client
operator|.
name|abort_txn
argument_list|(
operator|new
name|AbortTxnRequest
argument_list|(
name|txnid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|commitTxn
parameter_list|(
name|long
name|txnid
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
block|{
name|client
operator|.
name|commit_txn
argument_list|(
operator|new
name|CommitTxnRequest
argument_list|(
name|txnid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|GetOpenTxnsInfoResponse
name|showTxns
parameter_list|()
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|get_open_txns_info
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|abortTxns
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|txnids
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TException
block|{
name|client
operator|.
name|abort_txns
argument_list|(
operator|new
name|AbortTxnsRequest
argument_list|(
name|txnids
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|LockResponse
name|lock
parameter_list|(
name|LockRequest
name|request
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|lock
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|LockResponse
name|checkLock
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|NoSuchLockException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|check_lock
argument_list|(
operator|new
name|CheckLockRequest
argument_list|(
name|lockid
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlock
parameter_list|(
name|long
name|lockid
parameter_list|)
throws|throws
name|NoSuchLockException
throws|,
name|TxnOpenException
throws|,
name|TException
block|{
name|client
operator|.
name|unlock
argument_list|(
operator|new
name|UnlockRequest
argument_list|(
name|lockid
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|ShowLocksResponse
name|showLocks
parameter_list|()
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|show_locks
argument_list|(
operator|new
name|ShowLocksRequest
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ShowLocksResponse
name|showLocks
parameter_list|(
name|ShowLocksRequest
name|request
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|show_locks
argument_list|(
name|request
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|heartbeat
parameter_list|(
name|long
name|txnid
parameter_list|,
name|long
name|lockid
parameter_list|)
throws|throws
name|NoSuchLockException
throws|,
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
block|{
name|HeartbeatRequest
name|hb
init|=
operator|new
name|HeartbeatRequest
argument_list|()
decl_stmt|;
name|hb
operator|.
name|setLockid
argument_list|(
name|lockid
argument_list|)
expr_stmt|;
name|hb
operator|.
name|setTxnid
argument_list|(
name|txnid
argument_list|)
expr_stmt|;
name|client
operator|.
name|heartbeat
argument_list|(
name|hb
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|HeartbeatTxnRangeResponse
name|heartbeatTxnRange
parameter_list|(
name|long
name|min
parameter_list|,
name|long
name|max
parameter_list|)
throws|throws
name|NoSuchTxnException
throws|,
name|TxnAbortedException
throws|,
name|TException
block|{
name|HeartbeatTxnRangeRequest
name|rqst
init|=
operator|new
name|HeartbeatTxnRangeRequest
argument_list|(
name|min
argument_list|,
name|max
argument_list|)
decl_stmt|;
return|return
name|client
operator|.
name|heartbeat_txn_range
argument_list|(
name|rqst
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|void
name|compact
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|CompactionType
name|type
parameter_list|)
throws|throws
name|TException
block|{
name|CompactionRequest
name|cr
init|=
operator|new
name|CompactionRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbname
operator|==
literal|null
condition|)
name|cr
operator|.
name|setDbname
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
else|else
name|cr
operator|.
name|setDbname
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setTablename
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitionName
operator|!=
literal|null
condition|)
name|cr
operator|.
name|setPartitionname
argument_list|(
name|partitionName
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|client
operator|.
name|compact
argument_list|(
name|cr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|compact
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|CompactionType
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblproperties
parameter_list|)
throws|throws
name|TException
block|{
name|compact2
argument_list|(
name|dbname
argument_list|,
name|tableName
argument_list|,
name|partitionName
argument_list|,
name|type
argument_list|,
name|tblproperties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|CompactionResponse
name|compact2
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partitionName
parameter_list|,
name|CompactionType
name|type
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|tblproperties
parameter_list|)
throws|throws
name|TException
block|{
name|CompactionRequest
name|cr
init|=
operator|new
name|CompactionRequest
argument_list|()
decl_stmt|;
if|if
condition|(
name|dbname
operator|==
literal|null
condition|)
name|cr
operator|.
name|setDbname
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|)
expr_stmt|;
else|else
name|cr
operator|.
name|setDbname
argument_list|(
name|dbname
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setTablename
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|partitionName
operator|!=
literal|null
condition|)
name|cr
operator|.
name|setPartitionname
argument_list|(
name|partitionName
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|cr
operator|.
name|setProperties
argument_list|(
name|tblproperties
argument_list|)
expr_stmt|;
return|return
name|client
operator|.
name|compact2
argument_list|(
name|cr
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ShowCompactResponse
name|showCompactions
parameter_list|()
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|show_compact
argument_list|(
operator|new
name|ShowCompactRequest
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Deprecated
annotation|@
name|Override
specifier|public
name|void
name|addDynamicPartitions
parameter_list|(
name|long
name|txnId
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|TException
block|{
name|client
operator|.
name|add_dynamic_partitions
argument_list|(
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnId
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addDynamicPartitions
parameter_list|(
name|long
name|txnId
parameter_list|,
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|,
name|DataOperationType
name|operationType
parameter_list|)
throws|throws
name|TException
block|{
name|AddDynamicPartitions
name|adp
init|=
operator|new
name|AddDynamicPartitions
argument_list|(
name|txnId
argument_list|,
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partNames
argument_list|)
decl_stmt|;
name|adp
operator|.
name|setOperationType
argument_list|(
name|operationType
argument_list|)
expr_stmt|;
name|client
operator|.
name|add_dynamic_partitions
argument_list|(
name|adp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|insertTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|boolean
name|overwrite
parameter_list|)
throws|throws
name|MetaException
block|{
name|boolean
name|failed
init|=
literal|true
decl_stmt|;
name|HiveMetaHook
name|hook
init|=
name|getHook
argument_list|(
name|table
argument_list|)
decl_stmt|;
if|if
condition|(
name|hook
operator|==
literal|null
operator|||
operator|!
operator|(
name|hook
operator|instanceof
name|DefaultHiveMetaHook
operator|)
condition|)
block|{
return|return;
block|}
name|DefaultHiveMetaHook
name|hiveMetaHook
init|=
operator|(
name|DefaultHiveMetaHook
operator|)
name|hook
decl_stmt|;
try|try
block|{
name|hiveMetaHook
operator|.
name|commitInsertTable
argument_list|(
name|table
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
name|failed
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|failed
condition|)
block|{
name|hiveMetaHook
operator|.
name|rollbackInsertTable
argument_list|(
name|table
argument_list|,
name|overwrite
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCatalog"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|NotificationEventResponse
name|getNextNotification
parameter_list|(
name|long
name|lastEventId
parameter_list|,
name|int
name|maxEvents
parameter_list|,
name|NotificationFilter
name|filter
parameter_list|)
throws|throws
name|TException
block|{
name|NotificationEventRequest
name|rqst
init|=
operator|new
name|NotificationEventRequest
argument_list|(
name|lastEventId
argument_list|)
decl_stmt|;
name|rqst
operator|.
name|setMaxEvents
argument_list|(
name|maxEvents
argument_list|)
expr_stmt|;
name|NotificationEventResponse
name|rsp
init|=
name|client
operator|.
name|get_next_notification
argument_list|(
name|rqst
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got back "
operator|+
name|rsp
operator|.
name|getEventsSize
argument_list|()
operator|+
literal|" events"
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
return|return
name|rsp
return|;
block|}
else|else
block|{
name|NotificationEventResponse
name|filtered
init|=
operator|new
name|NotificationEventResponse
argument_list|()
decl_stmt|;
if|if
condition|(
name|rsp
operator|!=
literal|null
operator|&&
name|rsp
operator|.
name|getEvents
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|NotificationEvent
name|e
range|:
name|rsp
operator|.
name|getEvents
argument_list|()
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|accept
argument_list|(
name|e
argument_list|)
condition|)
name|filtered
operator|.
name|addToEvents
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|filtered
return|;
block|}
block|}
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"HCatalog"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|CurrentNotificationEventId
name|getCurrentNotificationEventId
parameter_list|()
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|get_current_notificationEventId
argument_list|()
return|;
block|}
annotation|@
name|InterfaceAudience
operator|.
name|LimitedPrivate
argument_list|(
block|{
literal|"Apache Hive, HCatalog"
block|}
argument_list|)
annotation|@
name|Override
specifier|public
name|FireEventResponse
name|fireListenerEvent
parameter_list|(
name|FireEventRequest
name|rqst
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|fire_listener_event
argument_list|(
name|rqst
argument_list|)
return|;
block|}
comment|/**    * Creates a synchronized wrapper for any {@link IMetaStoreClient}.    * This may be used by multi-threaded applications until we have    * fixed all reentrancy bugs.    *    * @param client unsynchronized client    *    * @return synchronized client    */
specifier|public
specifier|static
name|IMetaStoreClient
name|newSynchronizedClient
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|)
block|{
return|return
operator|(
name|IMetaStoreClient
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|HiveMetaStoreClient
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|IMetaStoreClient
operator|.
name|class
block|}
argument_list|,
operator|new
name|SynchronizedHandler
argument_list|(
name|client
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|SynchronizedHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|final
name|IMetaStoreClient
name|client
decl_stmt|;
name|SynchronizedHandler
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|client
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getTargetException
argument_list|()
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|markPartitionForEvent
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|,
name|PartitionEventType
name|eventType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
throws|,
name|UnknownDBException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
assert|assert
name|db_name
operator|!=
literal|null
assert|;
assert|assert
name|tbl_name
operator|!=
literal|null
assert|;
assert|assert
name|partKVs
operator|!=
literal|null
assert|;
name|client
operator|.
name|markPartitionForEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partKVs
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|,
name|PartitionEventType
name|eventType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
assert|assert
name|db_name
operator|!=
literal|null
assert|;
assert|assert
name|tbl_name
operator|!=
literal|null
assert|;
assert|assert
name|partKVs
operator|!=
literal|null
assert|;
return|return
name|client
operator|.
name|isPartitionMarkedForEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partKVs
argument_list|,
name|eventType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|createFunction
parameter_list|(
name|Function
name|func
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|create_function
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|alterFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|,
name|Function
name|newFunction
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|alter_function
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|,
name|newFunction
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dropFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidObjectException
throws|,
name|InvalidInputException
throws|,
name|TException
block|{
name|client
operator|.
name|drop_function
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Function
name|getFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|funcName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|Function
name|f
init|=
name|client
operator|.
name|get_function
argument_list|(
name|dbName
argument_list|,
name|funcName
argument_list|)
decl_stmt|;
return|return
name|fastpath
condition|?
name|f
else|:
name|deepCopy
argument_list|(
name|f
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getFunctions
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|pattern
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_functions
argument_list|(
name|dbName
argument_list|,
name|pattern
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|GetAllFunctionsResponse
name|getAllFunctions
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_all_functions
argument_list|()
return|;
block|}
specifier|protected
name|void
name|create_table_with_environment_context
parameter_list|(
name|Table
name|tbl
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|client
operator|.
name|create_table_with_environment_context
argument_list|(
name|tbl
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|drop_table_with_environment_context
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|EnvironmentContext
name|envContext
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
throws|,
name|UnsupportedOperationException
block|{
name|client
operator|.
name|drop_table_with_environment_context
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|,
name|envContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|AggrStats
name|getAggrColStatsFor
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|colNames
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partNames
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|colNames
operator|.
name|isEmpty
argument_list|()
operator|||
name|partNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Columns is empty or partNames is empty : Short-circuiting stats eval on client side."
argument_list|)
expr_stmt|;
return|return
operator|new
name|AggrStats
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|ColumnStatisticsObj
argument_list|>
argument_list|()
argument_list|,
literal|0
argument_list|)
return|;
comment|// Nothing to aggregate
block|}
name|PartitionsStatsRequest
name|req
init|=
operator|new
name|PartitionsStatsRequest
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|colNames
argument_list|,
name|partNames
argument_list|)
decl_stmt|;
return|return
name|client
operator|.
name|get_aggr_stats_for
argument_list|(
name|req
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|>
name|getFileMetadata
parameter_list|(
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|TException
block|{
return|return
operator|new
name|MetastoreMapIterable
argument_list|<
name|Long
argument_list|,
name|ByteBuffer
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|listIndex
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|Long
argument_list|,
name|ByteBuffer
argument_list|>
name|fetchNextBatch
parameter_list|()
throws|throws
name|TException
block|{
if|if
condition|(
name|listIndex
operator|==
name|fileIds
operator|.
name|size
argument_list|()
condition|)
return|return
literal|null
return|;
name|int
name|endIndex
init|=
name|Math
operator|.
name|min
argument_list|(
name|listIndex
operator|+
name|fileMetadataBatchSize
argument_list|,
name|fileIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|subList
init|=
name|fileIds
operator|.
name|subList
argument_list|(
name|listIndex
argument_list|,
name|endIndex
argument_list|)
decl_stmt|;
name|GetFileMetadataResult
name|resp
init|=
name|sendGetFileMetadataReq
argument_list|(
name|subList
argument_list|)
decl_stmt|;
comment|// TODO: we could remember if it's unsupported and stop sending calls; although, it might
comment|//       be a bad idea for HS2+standalone metastore that could be updated with support.
comment|//       Maybe we should just remember this for some time.
if|if
condition|(
operator|!
name|resp
operator|.
name|isIsSupported
argument_list|()
condition|)
return|return
literal|null
return|;
name|listIndex
operator|=
name|endIndex
expr_stmt|;
return|return
name|resp
operator|.
name|getMetadata
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|GetFileMetadataResult
name|sendGetFileMetadataReq
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|TException
block|{
return|return
name|client
operator|.
name|get_file_metadata
argument_list|(
operator|new
name|GetFileMetadataRequest
argument_list|(
name|fileIds
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|Long
argument_list|,
name|MetadataPpdResult
argument_list|>
argument_list|>
name|getFileMetadataBySarg
parameter_list|(
specifier|final
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
specifier|final
name|ByteBuffer
name|sarg
parameter_list|,
specifier|final
name|boolean
name|doGetFooters
parameter_list|)
throws|throws
name|TException
block|{
return|return
operator|new
name|MetastoreMapIterable
argument_list|<
name|Long
argument_list|,
name|MetadataPpdResult
argument_list|>
argument_list|()
block|{
specifier|private
name|int
name|listIndex
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Map
argument_list|<
name|Long
argument_list|,
name|MetadataPpdResult
argument_list|>
name|fetchNextBatch
parameter_list|()
throws|throws
name|TException
block|{
if|if
condition|(
name|listIndex
operator|==
name|fileIds
operator|.
name|size
argument_list|()
condition|)
return|return
literal|null
return|;
name|int
name|endIndex
init|=
name|Math
operator|.
name|min
argument_list|(
name|listIndex
operator|+
name|fileMetadataBatchSize
argument_list|,
name|fileIds
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|subList
init|=
name|fileIds
operator|.
name|subList
argument_list|(
name|listIndex
argument_list|,
name|endIndex
argument_list|)
decl_stmt|;
name|GetFileMetadataByExprResult
name|resp
init|=
name|sendGetFileMetadataBySargReq
argument_list|(
name|sarg
argument_list|,
name|subList
argument_list|,
name|doGetFooters
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|resp
operator|.
name|isIsSupported
argument_list|()
condition|)
return|return
literal|null
return|;
name|listIndex
operator|=
name|endIndex
expr_stmt|;
return|return
name|resp
operator|.
name|getMetadata
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|GetFileMetadataByExprResult
name|sendGetFileMetadataBySargReq
parameter_list|(
name|ByteBuffer
name|sarg
parameter_list|,
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|boolean
name|doGetFooters
parameter_list|)
throws|throws
name|TException
block|{
name|GetFileMetadataByExprRequest
name|req
init|=
operator|new
name|GetFileMetadataByExprRequest
argument_list|(
name|fileIds
argument_list|,
name|sarg
argument_list|)
decl_stmt|;
name|req
operator|.
name|setDoGetFooters
argument_list|(
name|doGetFooters
argument_list|)
expr_stmt|;
comment|// No need to get footers
return|return
name|client
operator|.
name|get_file_metadata_by_expr
argument_list|(
name|req
argument_list|)
return|;
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|MetastoreMapIterable
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
implements|implements
name|Iterable
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
implements|,
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
block|{
specifier|private
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|currentIter
decl_stmt|;
specifier|protected
specifier|abstract
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|fetchNextBatch
parameter_list|()
throws|throws
name|TException
function_decl|;
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|ensureCurrentBatch
argument_list|()
expr_stmt|;
return|return
name|currentIter
operator|!=
literal|null
return|;
block|}
specifier|private
name|void
name|ensureCurrentBatch
parameter_list|()
block|{
if|if
condition|(
name|currentIter
operator|!=
literal|null
operator|&&
name|currentIter
operator|.
name|hasNext
argument_list|()
condition|)
return|return;
name|currentIter
operator|=
literal|null
expr_stmt|;
name|Map
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|currentBatch
decl_stmt|;
do|do
block|{
try|try
block|{
name|currentBatch
operator|=
name|fetchNextBatch
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|ex
argument_list|)
throw|;
block|}
if|if
condition|(
name|currentBatch
operator|==
literal|null
condition|)
return|return;
comment|// No more data.
block|}
do|while
condition|(
name|currentBatch
operator|.
name|isEmpty
argument_list|()
condition|)
do|;
name|currentIter
operator|=
name|currentBatch
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Entry
argument_list|<
name|K
argument_list|,
name|V
argument_list|>
name|next
parameter_list|()
block|{
name|ensureCurrentBatch
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentIter
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
return|return
name|currentIter
operator|.
name|next
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|)
throws|throws
name|TException
block|{
name|ClearFileMetadataRequest
name|req
init|=
operator|new
name|ClearFileMetadataRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setFileIds
argument_list|(
name|fileIds
argument_list|)
expr_stmt|;
name|client
operator|.
name|clear_file_metadata
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putFileMetadata
parameter_list|(
name|List
argument_list|<
name|Long
argument_list|>
name|fileIds
parameter_list|,
name|List
argument_list|<
name|ByteBuffer
argument_list|>
name|metadata
parameter_list|)
throws|throws
name|TException
block|{
name|PutFileMetadataRequest
name|req
init|=
operator|new
name|PutFileMetadataRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setFileIds
argument_list|(
name|fileIds
argument_list|)
expr_stmt|;
name|req
operator|.
name|setMetadata
argument_list|(
name|metadata
argument_list|)
expr_stmt|;
name|client
operator|.
name|put_file_metadata
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSameConfObj
parameter_list|(
name|HiveConf
name|c
parameter_list|)
block|{
return|return
name|conf
operator|==
name|c
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|cacheFileMetadata
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|boolean
name|allParts
parameter_list|)
throws|throws
name|TException
block|{
name|CacheFileMetadataRequest
name|req
init|=
operator|new
name|CacheFileMetadataRequest
argument_list|()
decl_stmt|;
name|req
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|req
operator|.
name|setTblName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
if|if
condition|(
name|partName
operator|!=
literal|null
condition|)
block|{
name|req
operator|.
name|setPartName
argument_list|(
name|partName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|req
operator|.
name|setIsAllParts
argument_list|(
name|allParts
argument_list|)
expr_stmt|;
block|}
name|CacheFileMetadataResult
name|result
init|=
name|client
operator|.
name|cache_file_metadata
argument_list|(
name|req
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|isIsSupported
argument_list|()
return|;
block|}
block|}
end_class

end_unit

