begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
operator|.
name|DEFAULT_DATABASE_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Proxy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
operator|.
name|ConfVars
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AlreadyExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ConfigValSecurityException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectPrivilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|HiveObjectRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionEventType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeBag
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ThriftHiveMetastore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownPartitionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|HadoopShims
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|shims
operator|.
name|ShimLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|thrift
operator|.
name|HadoopThriftAuthBridge
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|security
operator|.
name|UserGroupInformation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|TException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|protocol
operator|.
name|TBinaryProtocol
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TSocket
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|thrift
operator|.
name|transport
operator|.
name|TTransportException
import|;
end_import

begin_comment
comment|/**  * Hive Metastore Client.  */
end_comment

begin_class
specifier|public
class|class
name|HiveMetaStoreClient
implements|implements
name|IMetaStoreClient
block|{
name|ThriftHiveMetastore
operator|.
name|Iface
name|client
init|=
literal|null
decl_stmt|;
specifier|private
name|TTransport
name|transport
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|isConnected
init|=
literal|false
decl_stmt|;
specifier|private
name|URI
name|metastoreUris
index|[]
decl_stmt|;
specifier|private
specifier|final
name|HiveMetaHookLoader
name|hookLoader
decl_stmt|;
specifier|private
specifier|final
name|HiveConf
name|conf
decl_stmt|;
specifier|private
name|String
name|tokenStrForm
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|localMetaStore
decl_stmt|;
comment|// for thrift connects
specifier|private
name|int
name|retries
init|=
literal|5
decl_stmt|;
specifier|private
name|int
name|retryDelaySeconds
init|=
literal|0
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
literal|"hive.metastore"
argument_list|)
decl_stmt|;
specifier|public
name|HiveMetaStoreClient
parameter_list|(
name|HiveConf
name|conf
parameter_list|)
throws|throws
name|MetaException
block|{
name|this
argument_list|(
name|conf
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|HiveMetaStoreClient
parameter_list|(
name|HiveConf
name|conf
parameter_list|,
name|HiveMetaHookLoader
name|hookLoader
parameter_list|)
throws|throws
name|MetaException
block|{
name|this
operator|.
name|hookLoader
operator|=
name|hookLoader
expr_stmt|;
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
block|{
name|conf
operator|=
operator|new
name|HiveConf
argument_list|(
name|HiveMetaStoreClient
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|conf
operator|=
name|conf
expr_stmt|;
name|localMetaStore
operator|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_MODE
argument_list|)
expr_stmt|;
if|if
condition|(
name|localMetaStore
condition|)
block|{
comment|// instantiate the metastore server handler directly instead of connecting
comment|// through the network
name|client
operator|=
operator|new
name|HiveMetaStore
operator|.
name|HMSHandler
argument_list|(
literal|"hive client"
argument_list|,
name|conf
argument_list|)
expr_stmt|;
name|isConnected
operator|=
literal|true
expr_stmt|;
return|return;
block|}
comment|// get the number retries
name|retries
operator|=
name|HiveConf
operator|.
name|getIntVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORETHRIFTRETRIES
argument_list|)
expr_stmt|;
name|retryDelaySeconds
operator|=
name|conf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_CLIENT_CONNECT_RETRY_DELAY
argument_list|)
expr_stmt|;
comment|// user wants file store based configuration
if|if
condition|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|String
name|metastoreUrisString
index|[]
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREURIS
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|metastoreUris
operator|=
operator|new
name|URI
index|[
name|metastoreUrisString
operator|.
name|length
index|]
expr_stmt|;
try|try
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|metastoreUrisString
control|)
block|{
name|URI
name|tmpUri
init|=
operator|new
name|URI
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpUri
operator|.
name|getScheme
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"URI: "
operator|+
name|s
operator|+
literal|" does not have a scheme"
argument_list|)
throw|;
block|}
name|metastoreUris
index|[
name|i
operator|++
index|]
operator|=
name|tmpUri
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|(
name|e
operator|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREDIRECTORY
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|metastoreUris
operator|=
operator|new
name|URI
index|[
literal|1
index|]
expr_stmt|;
try|try
block|{
name|metastoreUris
index|[
literal|0
index|]
operator|=
operator|new
name|URI
argument_list|(
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREDIRECTORY
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"NOT getting uris from conf"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"MetaStoreURIs not found in conf file"
argument_list|)
throw|;
block|}
comment|// finally open the store
name|open
argument_list|()
expr_stmt|;
block|}
comment|/**    * @param dbname    * @param tbl_name    * @param new_tbl    * @throws InvalidOperationException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#alter_table(java.lang.String,    *      java.lang.String, org.apache.hadoop.hive.metastore.api.Table)    */
specifier|public
name|void
name|alter_table
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Table
name|new_tbl
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|alter_table
argument_list|(
name|dbname
argument_list|,
name|tbl_name
argument_list|,
name|new_tbl
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param dbname    * @param name    * @param part_vals    * @param newPart    * @throws InvalidOperationException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#rename_partition(    *      java.lang.String, java.lang.String, java.util.List, org.apache.hadoop.hive.metastore.api.Partition)    */
specifier|public
name|void
name|renamePartition
parameter_list|(
specifier|final
name|String
name|dbname
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
specifier|final
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|rename_partition
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|part_vals
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|open
parameter_list|()
throws|throws
name|MetaException
block|{
for|for
control|(
name|URI
name|store
range|:
name|metastoreUris
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Trying to connect to metastore with URI "
operator|+
name|store
argument_list|)
expr_stmt|;
try|try
block|{
name|openStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to connect to metastore with URI "
operator|+
name|store
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isConnected
condition|)
block|{
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isConnected
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Could not connect to meta store using any of the URIs provided"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Connected to metastore."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|openStore
parameter_list|(
name|URI
name|store
parameter_list|)
throws|throws
name|MetaException
block|{
name|isConnected
operator|=
literal|false
expr_stmt|;
name|TTransportException
name|tte
init|=
literal|null
decl_stmt|;
name|HadoopShims
name|shim
init|=
name|ShimLoader
operator|.
name|getHadoopShims
argument_list|()
decl_stmt|;
name|boolean
name|useSasl
init|=
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_USE_THRIFT_SASL
argument_list|)
decl_stmt|;
name|transport
operator|=
operator|new
name|TSocket
argument_list|(
name|store
operator|.
name|getHost
argument_list|()
argument_list|,
name|store
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|TSocket
operator|)
name|transport
operator|)
operator|.
name|setTimeout
argument_list|(
literal|1000
operator|*
name|conf
operator|.
name|getIntVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_CLIENT_SOCKET_TIMEOUT
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useSasl
condition|)
block|{
comment|// Wrap thrift connection with SASL for secure connection.
try|try
block|{
name|HadoopThriftAuthBridge
operator|.
name|Client
name|authBridge
init|=
name|ShimLoader
operator|.
name|getHadoopThriftAuthBridge
argument_list|()
operator|.
name|createClient
argument_list|()
decl_stmt|;
comment|// check if we should use delegation tokens to authenticate
comment|// the call below gets hold of the tokens if they are set up by hadoop
comment|// this should happen on the map/reduce tasks if the client added the
comment|// tokens into hadoop's credential store in the front end during job
comment|// submission.
name|String
name|tokenSig
init|=
name|conf
operator|.
name|get
argument_list|(
literal|"hive.metastore.token.signature"
argument_list|)
decl_stmt|;
comment|// tokenSig could be null
name|tokenStrForm
operator|=
name|shim
operator|.
name|getTokenStrForm
argument_list|(
name|tokenSig
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenStrForm
operator|!=
literal|null
condition|)
block|{
comment|// authenticate using delegation tokens via the "DIGEST" mechanism
name|transport
operator|=
name|authBridge
operator|.
name|createClientTransport
argument_list|(
literal|null
argument_list|,
name|store
operator|.
name|getHost
argument_list|()
argument_list|,
literal|"DIGEST"
argument_list|,
name|tokenStrForm
argument_list|,
name|transport
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|principalConfig
init|=
name|conf
operator|.
name|getVar
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_KERBEROS_PRINCIPAL
argument_list|)
decl_stmt|;
name|transport
operator|=
name|authBridge
operator|.
name|createClientTransport
argument_list|(
name|principalConfig
argument_list|,
name|store
operator|.
name|getHost
argument_list|()
argument_list|,
literal|"KERBEROS"
argument_list|,
literal|null
argument_list|,
name|transport
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Couldn't create client transport"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
name|ioe
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|client
operator|=
operator|new
name|ThriftHiveMetastore
operator|.
name|Client
argument_list|(
operator|new
name|TBinaryProtocol
argument_list|(
name|transport
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|attempt
init|=
literal|0
init|;
operator|!
name|isConnected
operator|&&
name|attempt
operator|<
name|retries
condition|;
operator|++
name|attempt
control|)
block|{
if|if
condition|(
name|attempt
operator|>
literal|0
operator|&&
name|retryDelaySeconds
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Waiting "
operator|+
name|retryDelaySeconds
operator|+
literal|" seconds before next connection attempt."
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|retryDelaySeconds
operator|*
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{}
block|}
try|try
block|{
name|transport
operator|.
name|open
argument_list|()
expr_stmt|;
name|isConnected
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TTransportException
name|e
parameter_list|)
block|{
name|tte
operator|=
name|e
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to connect to the MetaStore Server..."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Don't print full exception trace if DEBUG is not on.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to connect to the MetaStore Server..."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|isConnected
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Could not connect to the MetaStore server! Caused by: "
operator|+
name|StringUtils
operator|.
name|stringifyException
argument_list|(
name|tte
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|useSasl
operator|&&
name|conf
operator|.
name|getBoolVar
argument_list|(
name|ConfVars
operator|.
name|METASTORE_EXECUTE_SET_UGI
argument_list|)
condition|)
block|{
comment|// Call set_ugi, only in unsecure mode.
try|try
block|{
name|UserGroupInformation
name|ugi
init|=
name|shim
operator|.
name|getUGIForConf
argument_list|(
name|conf
argument_list|)
decl_stmt|;
name|client
operator|.
name|set_ugi
argument_list|(
name|ugi
operator|.
name|getUserName
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|ugi
operator|.
name|getGroupNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LoginException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to do login. set_ugi() is not successful, Continuing without it."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to find ugi of client set_ugi() is not successful, "
operator|+
literal|"Continuing without it."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"set_ugi() not successful, Likely cause: new client talking to old server. "
operator|+
literal|"Continuing without it."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|getTokenStrForm
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|tokenStrForm
return|;
block|}
specifier|public
name|void
name|close
parameter_list|()
block|{
name|isConnected
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|(
name|transport
operator|!=
literal|null
operator|)
operator|&&
name|transport
operator|.
name|isOpen
argument_list|()
condition|)
block|{
name|transport
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
literal|null
operator|!=
name|client
condition|)
block|{
name|client
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|TException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to shutdown local metastore client"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**    * @param new_part    * @return the added partition    * @throws InvalidObjectException    * @throws AlreadyExistsException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#add_partition(org.apache.hadoop.hive.metastore.api.Partition)    */
specifier|public
name|Partition
name|add_partition
parameter_list|(
name|Partition
name|new_part
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopy
argument_list|(
name|client
operator|.
name|add_partition
argument_list|(
name|new_part
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param new_parts    * @throws InvalidObjectException    * @throws AlreadyExistsException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#add_partitions(List<org.apache.hadoop.hive.metastore.api.Partition>)    */
specifier|public
name|int
name|add_partitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|new_parts
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|add_partitions
argument_list|(
name|new_parts
argument_list|)
return|;
block|}
comment|/**    * @param table_name    * @param db_name    * @param part_vals    * @return the appended partition    * @throws InvalidObjectException    * @throws AlreadyExistsException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#append_partition(java.lang.String,    *      java.lang.String, java.util.List)    */
specifier|public
name|Partition
name|appendPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|table_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopy
argument_list|(
name|client
operator|.
name|append_partition
argument_list|(
name|db_name
argument_list|,
name|table_name
argument_list|,
name|part_vals
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Partition
name|appendPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopy
argument_list|(
name|client
operator|.
name|append_partition_by_name
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Create a new Database    * @param db    * @return true or false    * @throws AlreadyExistsException    * @throws InvalidObjectException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#create_database(java.lang.String,    *      java.lang.String)    */
specifier|public
name|void
name|createDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|create_database
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param tbl    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#create_table(org.apache.hadoop.hive.metastore.api.Table)    */
specifier|public
name|void
name|createTable
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|HiveMetaHook
name|hook
init|=
name|getHook
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|hook
operator|!=
literal|null
condition|)
block|{
name|hook
operator|.
name|preCreateTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|client
operator|.
name|create_table
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
if|if
condition|(
name|hook
operator|!=
literal|null
condition|)
block|{
name|hook
operator|.
name|commitCreateTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|success
operator|=
literal|true
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
operator|(
name|hook
operator|!=
literal|null
operator|)
condition|)
block|{
name|hook
operator|.
name|rollbackCreateTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @param type    * @return true or false    * @throws AlreadyExistsException    * @throws InvalidObjectException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#create_type(org.apache.hadoop.hive.metastore.api.Type)    */
specifier|public
name|boolean
name|createType
parameter_list|(
name|Type
name|type
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|create_type
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * @param name    * @return true or false    * @throws NoSuchObjectException    * @throws InvalidOperationException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#drop_database(java.lang.String)    */
specifier|public
name|void
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|dropDatabase
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownDb
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|dropDatabase
argument_list|(
name|name
argument_list|,
name|deleteData
argument_list|,
name|ignoreUnknownDb
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dropDatabase
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUnknownDb
parameter_list|,
name|boolean
name|cascade
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
try|try
block|{
name|getDatabase
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreUnknownDb
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return;
block|}
name|client
operator|.
name|drop_database
argument_list|(
name|name
argument_list|,
name|deleteData
argument_list|,
name|cascade
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param tbl_name    * @param db_name    * @param part_vals    * @return true or false    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#drop_partition(java.lang.String,    *      java.lang.String, java.util.List, boolean)    */
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|dropPartition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|drop_partition_by_name
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|deleteData
argument_list|)
return|;
block|}
comment|/**    * @param db_name    * @param tbl_name    * @param part_vals    * @param deleteData    *          delete the underlying data or just delete the table in metadata    * @return true or false    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#drop_partition(java.lang.String,    *      java.lang.String, java.util.List, boolean)    */
specifier|public
name|boolean
name|dropPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|drop_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|deleteData
argument_list|)
return|;
block|}
comment|/**    * @param name    * @param dbname    * @throws NoSuchObjectException    * @throws ExistingDependentsException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#drop_table(java.lang.String,    *      java.lang.String, boolean)    */
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|dropTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Deprecated
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
name|dropTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|,
name|deleteData
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param dbname    * @param name    * @param deleteData    *          delete the underlying data or just delete the table in metadata    * @throws NoSuchObjectException    * @throws ExistingDependentsException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#drop_table(java.lang.String,    *      java.lang.String, boolean)    */
specifier|public
name|void
name|dropTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|,
name|boolean
name|ignoreUknownTab
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
name|Table
name|tbl
decl_stmt|;
try|try
block|{
name|tbl
operator|=
name|getTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreUknownTab
condition|)
block|{
throw|throw
name|e
throw|;
block|}
return|return;
block|}
name|HiveMetaHook
name|hook
init|=
name|getHook
argument_list|(
name|tbl
argument_list|)
decl_stmt|;
if|if
condition|(
name|hook
operator|!=
literal|null
condition|)
block|{
name|hook
operator|.
name|preDropTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
name|boolean
name|success
init|=
literal|false
decl_stmt|;
try|try
block|{
name|client
operator|.
name|drop_table
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
if|if
condition|(
name|hook
operator|!=
literal|null
condition|)
block|{
name|hook
operator|.
name|commitDropTable
argument_list|(
name|tbl
argument_list|,
name|deleteData
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ignoreUknownTab
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
operator|&&
operator|(
name|hook
operator|!=
literal|null
operator|)
condition|)
block|{
name|hook
operator|.
name|rollbackDropTable
argument_list|(
name|tbl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**    * @param type    * @return true if the type is dropped    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#drop_type(java.lang.String)    */
specifier|public
name|boolean
name|dropType
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|drop_type
argument_list|(
name|type
argument_list|)
return|;
block|}
comment|/**    * @param name    * @return map of types    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_type_all(java.lang.String)    */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|getTypeAll
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|result
init|=
literal|null
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
name|fromClient
init|=
name|client
operator|.
name|get_type_all
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|fromClient
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|Type
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|key
range|:
name|fromClient
operator|.
name|keySet
argument_list|()
control|)
block|{
name|result
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|deepCopy
argument_list|(
name|fromClient
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getDatabases
parameter_list|(
name|String
name|databasePattern
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|client
operator|.
name|get_databases
argument_list|(
name|databasePattern
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllDatabases
parameter_list|()
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|client
operator|.
name|get_all_databases
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**    * @param tbl_name    * @param db_name    * @param max_parts    * @return list of partitions    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    */
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopyPartitions
argument_list|(
name|client
operator|.
name|get_partitions
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitions
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopyPartitions
argument_list|(
name|client
operator|.
name|get_partitions_ps
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsWithAuthInfo
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|String
name|user_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopyPartitions
argument_list|(
name|client
operator|.
name|get_partitions_with_auth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|max_parts
argument_list|,
name|user_name
argument_list|,
name|group_names
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsWithAuthInfo
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|,
name|String
name|user_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopyPartitions
argument_list|(
name|client
operator|.
name|get_partitions_ps_with_auth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|,
name|user_name
argument_list|,
name|group_names
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * Get list of partitions matching specified filter    * @param db_name the database name    * @param tbl_name the table name    * @param filter the filter string,    *    for example "part1 = \"p1_abc\" and part2<= "\p2_test\"". Filtering can    *    be done only on string partition keys.    * @param max_parts the maximum number of partitions to return,    *    all partitions are returned if -1 is passed    * @return list of partitions    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    */
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|listPartitionsByFilter
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
return|return
name|deepCopyPartitions
argument_list|(
name|client
operator|.
name|get_partitions_by_filter
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|filter
argument_list|,
name|max_parts
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param name    * @return the database    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_database(java.lang.String)    */
specifier|public
name|Database
name|getDatabase
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopy
argument_list|(
name|client
operator|.
name|get_database
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param tbl_name    * @param db_name    * @param part_vals    * @return the partition    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_partition(java.lang.String,    *      java.lang.String, java.util.List)    */
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopy
argument_list|(
name|client
operator|.
name|get_partition
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|getPartitionsByNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_names
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopyPartitions
argument_list|(
name|client
operator|.
name|get_partitions_by_names
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_names
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Partition
name|getPartitionWithAuthInfo
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|String
name|user_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|group_names
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
return|return
name|deepCopy
argument_list|(
name|client
operator|.
name|get_partition_with_auth
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|user_name
argument_list|,
name|group_names
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * @param name    * @param dbname    * @return the table    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    * @throws NoSuchObjectException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_table(java.lang.String,    *      java.lang.String)    */
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
return|return
name|deepCopy
argument_list|(
name|client
operator|.
name|get_table
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Deprecated
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
return|return
name|getTable
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|getTableObjectsByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
throws|,
name|TException
block|{
return|return
name|deepCopyTables
argument_list|(
name|client
operator|.
name|get_table_objects_by_name
argument_list|(
name|dbName
argument_list|,
name|tableNames
argument_list|)
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listTableNamesByFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|filter
parameter_list|,
name|short
name|maxTables
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|InvalidOperationException
throws|,
name|UnknownDBException
block|{
return|return
name|client
operator|.
name|get_table_names_by_filter
argument_list|(
name|dbName
argument_list|,
name|filter
argument_list|,
name|maxTables
argument_list|)
return|;
block|}
comment|/**    * @param name    * @return the type    * @throws MetaException    * @throws TException    * @throws NoSuchObjectException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_type(java.lang.String)    */
specifier|public
name|Type
name|getType
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopy
argument_list|(
name|client
operator|.
name|get_type
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|tablePattern
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|client
operator|.
name|get_tables
argument_list|(
name|dbname
argument_list|,
name|tablePattern
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/** {@inheritDoc} */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllTables
parameter_list|(
name|String
name|dbname
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
return|return
name|client
operator|.
name|get_all_tables
argument_list|(
name|dbname
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|MetaStoreUtils
operator|.
name|logAndThrowMetaException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|tableExists
parameter_list|(
name|String
name|databaseName
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
block|{
try|try
block|{
name|client
operator|.
name|get_table
argument_list|(
name|databaseName
argument_list|,
name|tableName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/** {@inheritDoc} */
annotation|@
name|Deprecated
specifier|public
name|boolean
name|tableExists
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownDBException
block|{
return|return
name|tableExists
argument_list|(
name|DEFAULT_DATABASE_NAME
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_partition_names
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listPartitionNames
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|part_vals
parameter_list|,
name|short
name|max_parts
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
block|{
return|return
name|client
operator|.
name|get_partition_names_ps
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|part_vals
argument_list|,
name|max_parts
argument_list|)
return|;
block|}
specifier|public
name|void
name|alter_partition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|Partition
name|newPart
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|alter_partition
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|newPart
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|alterDatabase
parameter_list|(
name|String
name|dbName
parameter_list|,
name|Database
name|db
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|client
operator|.
name|alter_database
argument_list|(
name|dbName
argument_list|,
name|db
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param db    * @param tableName    * @throws UnknownTableException    * @throws UnknownDBException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_fields(java.lang.String,    *      java.lang.String)    */
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getFields
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
return|return
name|deepCopyFieldSchemas
argument_list|(
name|client
operator|.
name|get_fields
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * create an index    * @param index the index object    * @param index table which stores the index data    * @throws InvalidObjectException    * @throws MetaException    * @throws NoSuchObjectException    * @throws TException    * @throws AlreadyExistsException    */
specifier|public
name|void
name|createIndex
parameter_list|(
name|Index
name|index
parameter_list|,
name|Table
name|indexTable
parameter_list|)
throws|throws
name|AlreadyExistsException
throws|,
name|InvalidObjectException
throws|,
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
name|client
operator|.
name|add_index
argument_list|(
name|index
argument_list|,
name|indexTable
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param dbname    * @param base_tbl_name    * @param idx_name    * @param new_idx    * @throws InvalidOperationException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#alter_index(java.lang.String,    *      java.lang.String, java.lang.String, org.apache.hadoop.hive.metastore.api.Index)    */
specifier|public
name|void
name|alter_index
parameter_list|(
name|String
name|dbname
parameter_list|,
name|String
name|base_tbl_name
parameter_list|,
name|String
name|idx_name
parameter_list|,
name|Index
name|new_idx
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
throws|,
name|TException
block|{
name|client
operator|.
name|alter_index
argument_list|(
name|dbname
argument_list|,
name|base_tbl_name
argument_list|,
name|idx_name
argument_list|,
name|new_idx
argument_list|)
expr_stmt|;
block|}
comment|/**    * @param dbName    * @param tblName    * @param indexName    * @return    * @throws MetaException    * @throws UnknownTableException    * @throws NoSuchObjectException    * @throws TException    */
specifier|public
name|Index
name|getIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|indexName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
throws|,
name|TException
block|{
return|return
name|deepCopy
argument_list|(
name|client
operator|.
name|get_index_by_name
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|indexName
argument_list|)
argument_list|)
return|;
block|}
comment|/**    * list indexes of the give base table    * @param db_name    * @param tbl_name    * @param max    * @return    * @throws NoSuchObjectException    * @throws MetaException    * @throws TException    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listIndexNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_index_names
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**    * list all the index names of the give base table.    *    * @param db_name    * @param tbl_name    * @param max    * @return    * @throws MetaException    * @throws TException    */
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|listIndexes
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|short
name|max
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_indexes
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|max
argument_list|)
return|;
block|}
comment|/**    * @param db    * @param tableName    * @throws UnknownTableException    * @throws UnknownDBException    * @throws MetaException    * @throws TException    * @see org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface#get_schema(java.lang.String,    *      java.lang.String)    */
specifier|public
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|getSchema
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
block|{
return|return
name|deepCopyFieldSchemas
argument_list|(
name|client
operator|.
name|get_schema
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|String
name|getConfigValue
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|defaultValue
parameter_list|)
throws|throws
name|TException
throws|,
name|ConfigValSecurityException
block|{
return|return
name|client
operator|.
name|get_config_value
argument_list|(
name|name
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
specifier|public
name|Partition
name|getPartition
parameter_list|(
name|String
name|db
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|UnknownTableException
throws|,
name|NoSuchObjectException
block|{
return|return
name|deepCopy
argument_list|(
name|client
operator|.
name|get_partition_by_name
argument_list|(
name|db
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Partition
name|appendPartitionByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|)
throws|throws
name|InvalidObjectException
throws|,
name|AlreadyExistsException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|deepCopy
argument_list|(
name|client
operator|.
name|append_partition_by_name
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|dropPartitionByName
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|String
name|partName
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|drop_partition_by_name
argument_list|(
name|dbName
argument_list|,
name|tableName
argument_list|,
name|partName
argument_list|,
name|deleteData
argument_list|)
return|;
block|}
specifier|private
name|HiveMetaHook
name|getHook
parameter_list|(
name|Table
name|tbl
parameter_list|)
throws|throws
name|MetaException
block|{
if|if
condition|(
name|hookLoader
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|hookLoader
operator|.
name|getHook
argument_list|(
name|tbl
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|partitionNameToVals
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|partition_name_to_vals
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partitionNameToSpec
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|partition_name_to_spec
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/**    * @param partition    * @return    */
specifier|private
name|Partition
name|deepCopy
parameter_list|(
name|Partition
name|partition
parameter_list|)
block|{
name|Partition
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|partition
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|Partition
argument_list|(
name|partition
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|Database
name|deepCopy
parameter_list|(
name|Database
name|database
parameter_list|)
block|{
name|Database
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|database
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|Database
argument_list|(
name|database
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|Table
name|deepCopy
parameter_list|(
name|Table
name|table
parameter_list|)
block|{
name|Table
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|table
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|Table
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|Index
name|deepCopy
parameter_list|(
name|Index
name|index
parameter_list|)
block|{
name|Index
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|Index
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|Type
name|deepCopy
parameter_list|(
name|Type
name|type
parameter_list|)
block|{
name|Type
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|Type
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|FieldSchema
name|deepCopy
parameter_list|(
name|FieldSchema
name|schema
parameter_list|)
block|{
name|FieldSchema
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|FieldSchema
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|List
argument_list|<
name|Partition
argument_list|>
name|deepCopyPartitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitions
parameter_list|)
block|{
name|List
argument_list|<
name|Partition
argument_list|>
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|partitions
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|ArrayList
argument_list|<
name|Partition
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|partitions
control|)
block|{
name|copy
operator|.
name|add
argument_list|(
name|deepCopy
argument_list|(
name|part
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|List
argument_list|<
name|Table
argument_list|>
name|deepCopyTables
parameter_list|(
name|List
argument_list|<
name|Table
argument_list|>
name|tables
parameter_list|)
block|{
name|List
argument_list|<
name|Table
argument_list|>
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|tables
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|ArrayList
argument_list|<
name|Table
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|Table
name|tab
range|:
name|tables
control|)
block|{
name|copy
operator|.
name|add
argument_list|(
name|deepCopy
argument_list|(
name|tab
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|copy
return|;
block|}
specifier|private
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|deepCopyFieldSchemas
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schemas
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|copy
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schemas
operator|!=
literal|null
condition|)
block|{
name|copy
operator|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
expr_stmt|;
for|for
control|(
name|FieldSchema
name|schema
range|:
name|schemas
control|)
block|{
name|copy
operator|.
name|add
argument_list|(
name|deepCopy
argument_list|(
name|schema
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|copy
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|dropIndex
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|deleteData
parameter_list|)
throws|throws
name|NoSuchObjectException
throws|,
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|drop_index_by_name
argument_list|(
name|dbName
argument_list|,
name|tblName
argument_list|,
name|name
argument_list|,
name|deleteData
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grant_role
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|String
name|grantor
parameter_list|,
name|PrincipalType
name|grantorType
parameter_list|,
name|boolean
name|grantOption
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|grant_role
argument_list|(
name|roleName
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|,
name|grantor
argument_list|,
name|grantorType
argument_list|,
name|grantOption
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|create_role
parameter_list|(
name|Role
name|role
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|create_role
argument_list|(
name|role
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|drop_role
parameter_list|(
name|String
name|roleName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|drop_role
argument_list|(
name|roleName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Role
argument_list|>
name|list_roles
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|list_roles
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|listRoleNames
parameter_list|()
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_role_names
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|grant_privileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|grant_privileges
argument_list|(
name|privileges
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revoke_role
parameter_list|(
name|String
name|roleName
parameter_list|,
name|String
name|userName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|revoke_role
argument_list|(
name|roleName
argument_list|,
name|userName
argument_list|,
name|principalType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|revoke_privileges
parameter_list|(
name|PrivilegeBag
name|privileges
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|revoke_privileges
argument_list|(
name|privileges
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|PrincipalPrivilegeSet
name|get_privilege_set
parameter_list|(
name|HiveObjectRef
name|hiveObject
parameter_list|,
name|String
name|userName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|get_privilege_set
argument_list|(
name|hiveObject
argument_list|,
name|userName
argument_list|,
name|groupNames
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|HiveObjectPrivilege
argument_list|>
name|list_privileges
parameter_list|(
name|String
name|principalName
parameter_list|,
name|PrincipalType
name|principalType
parameter_list|,
name|HiveObjectRef
name|hiveObject
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
return|return
name|client
operator|.
name|list_privileges
argument_list|(
name|principalName
argument_list|,
name|principalType
argument_list|,
name|hiveObject
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDelegationToken
parameter_list|(
name|String
name|renewerKerberosPrincipalName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|IOException
block|{
comment|//a convenience method that makes the intended owner for the delegation
comment|//token request the current user
name|String
name|owner
init|=
name|conf
operator|.
name|getUser
argument_list|()
decl_stmt|;
return|return
name|getDelegationToken
argument_list|(
name|owner
argument_list|,
name|renewerKerberosPrincipalName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDelegationToken
parameter_list|(
name|String
name|owner
parameter_list|,
name|String
name|renewerKerberosPrincipalName
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|localMetaStore
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"getDelegationToken() can be "
operator|+
literal|"called only in thrift (non local) mode"
argument_list|)
throw|;
block|}
return|return
name|client
operator|.
name|get_delegation_token
argument_list|(
name|owner
argument_list|,
name|renewerKerberosPrincipalName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|renewDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|localMetaStore
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"renewDelegationToken() can be "
operator|+
literal|"called only in thrift (non local) mode"
argument_list|)
throw|;
block|}
return|return
name|client
operator|.
name|renew_delegation_token
argument_list|(
name|tokenStrForm
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cancelDelegationToken
parameter_list|(
name|String
name|tokenStrForm
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
block|{
if|if
condition|(
name|localMetaStore
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"renewDelegationToken() can be "
operator|+
literal|"called only in thrift (non local) mode"
argument_list|)
throw|;
block|}
name|client
operator|.
name|cancel_delegation_token
argument_list|(
name|tokenStrForm
argument_list|)
expr_stmt|;
block|}
comment|/**    * Creates a synchronized wrapper for any {@link IMetaStoreClient}.    * This may be used by multi-threaded applications until we have    * fixed all reentrancy bugs.    *    * @param client unsynchronized client    *    * @return synchronized client    */
specifier|public
specifier|static
name|IMetaStoreClient
name|newSynchronizedClient
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|)
block|{
return|return
operator|(
name|IMetaStoreClient
operator|)
name|Proxy
operator|.
name|newProxyInstance
argument_list|(
name|HiveMetaStoreClient
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|,
operator|new
name|Class
index|[]
block|{
name|IMetaStoreClient
operator|.
name|class
block|}
argument_list|,
operator|new
name|SynchronizedHandler
argument_list|(
name|client
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|SynchronizedHandler
implements|implements
name|InvocationHandler
block|{
specifier|private
specifier|final
name|IMetaStoreClient
name|client
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
name|lock
init|=
name|SynchronizedHandler
operator|.
name|class
decl_stmt|;
name|SynchronizedHandler
parameter_list|(
name|IMetaStoreClient
name|client
parameter_list|)
block|{
name|this
operator|.
name|client
operator|=
name|client
expr_stmt|;
block|}
specifier|public
name|Object
name|invoke
parameter_list|(
name|Object
name|proxy
parameter_list|,
name|Method
name|method
parameter_list|,
name|Object
index|[]
name|args
parameter_list|)
throws|throws
name|Throwable
block|{
try|try
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
return|return
name|method
operator|.
name|invoke
argument_list|(
name|client
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|getTargetException
argument_list|()
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|markPartitionForEvent
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|,
name|PartitionEventType
name|eventType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|TException
throws|,
name|NoSuchObjectException
throws|,
name|UnknownDBException
throws|,
name|UnknownTableException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
assert|assert
name|db_name
operator|!=
literal|null
assert|;
assert|assert
name|tbl_name
operator|!=
literal|null
assert|;
assert|assert
name|partKVs
operator|!=
literal|null
assert|;
name|client
operator|.
name|markPartitionForEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partKVs
argument_list|,
name|eventType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPartitionMarkedForEvent
parameter_list|(
name|String
name|db_name
parameter_list|,
name|String
name|tbl_name
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|partKVs
parameter_list|,
name|PartitionEventType
name|eventType
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|UnknownTableException
throws|,
name|UnknownDBException
throws|,
name|TException
throws|,
name|InvalidPartitionException
throws|,
name|UnknownPartitionException
block|{
assert|assert
name|db_name
operator|!=
literal|null
assert|;
assert|assert
name|tbl_name
operator|!=
literal|null
assert|;
assert|assert
name|partKVs
operator|!=
literal|null
assert|;
return|return
name|client
operator|.
name|isPartitionMarkedForEvent
argument_list|(
name|db_name
argument_list|,
name|tbl_name
argument_list|,
name|partKVs
argument_list|,
name|eventType
argument_list|)
return|;
block|}
block|}
end_class

end_unit

