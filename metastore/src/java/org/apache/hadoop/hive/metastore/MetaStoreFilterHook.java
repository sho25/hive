begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceAudience
operator|.
name|LimitedPrivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|common
operator|.
name|classification
operator|.
name|InterfaceStability
operator|.
name|Evolving
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Index
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PartitionSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_comment
comment|/**  * Metadata filter hook for metastore client. This will be useful for authorization  * plugins on hiveserver2 to filter metadata results, especially in case of  * non-impersonation mode where the metastore doesn't know the end user's identity.  */
end_comment

begin_interface
annotation|@
name|LimitedPrivate
argument_list|(
name|value
operator|=
block|{
literal|"Apache Sentry (Incubating)"
block|}
argument_list|)
annotation|@
name|Evolving
specifier|public
interface|interface
name|MetaStoreFilterHook
block|{
comment|/**    * Filter given list of databases    * @param dbList    * @return List of filtered Db names    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|filterDatabases
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|dbList
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * filter to given database object if applicable    * @param dataBase    * @return the same database if it's not filtered out    * @throws NoSuchObjectException    */
specifier|public
name|Database
name|filterDatabase
parameter_list|(
name|Database
name|dataBase
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Filter given list of tables    * @param dbName    * @param tableList    * @returnList of filtered table names    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|filterTableNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|tableList
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * filter to given table object if applicable    * @param table    * @return the same table if it's not filtered out    * @throws NoSuchObjectException    */
specifier|public
name|Table
name|filterTable
parameter_list|(
name|Table
name|table
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Filter given list of tables    * @param dbName    * @param tableList    * @returnList of filtered table names    */
specifier|public
name|List
argument_list|<
name|Table
argument_list|>
name|filterTables
parameter_list|(
name|List
argument_list|<
name|Table
argument_list|>
name|tableList
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Filter given list of partitions    * @param partitionList    * @return    */
specifier|public
name|List
argument_list|<
name|Partition
argument_list|>
name|filterPartitions
parameter_list|(
name|List
argument_list|<
name|Partition
argument_list|>
name|partitionList
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Filter given list of partition specs    * @param partitionSpecList    * @return    */
specifier|public
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|filterPartitionSpecs
parameter_list|(
name|List
argument_list|<
name|PartitionSpec
argument_list|>
name|partitionSpecList
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * filter to given partition object if applicable    * @param partition    * @return the same partition object if it's not filtered out    * @throws NoSuchObjectException    */
specifier|public
name|Partition
name|filterPartition
parameter_list|(
name|Partition
name|partition
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Filter given list of partition names    * @param dbName    * @param tblName    * @param partitionNames    * @return    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|filterPartitionNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partitionNames
parameter_list|)
throws|throws
name|MetaException
function_decl|;
specifier|public
name|Index
name|filterIndex
parameter_list|(
name|Index
name|index
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
function_decl|;
comment|/**    * Filter given list of index names    * @param dbName    * @param tblName    * @param indexList    * @return    */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|filterIndexNames
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tblName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|indexList
parameter_list|)
throws|throws
name|MetaException
function_decl|;
comment|/**    * Filter given list of index objects    * @param indexeList    * @return    */
specifier|public
name|List
argument_list|<
name|Index
argument_list|>
name|filterIndexes
parameter_list|(
name|List
argument_list|<
name|Index
argument_list|>
name|indexeList
parameter_list|)
throws|throws
name|MetaException
function_decl|;
block|}
end_interface

end_unit

