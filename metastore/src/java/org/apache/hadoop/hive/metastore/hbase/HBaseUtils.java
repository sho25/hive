begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BinaryColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Decimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DecimalColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DoubleColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StringColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|io
operator|.
name|Writable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutput
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Utility functions  */
end_comment

begin_class
class|class
name|HBaseUtils
block|{
specifier|final
specifier|static
name|Charset
name|ENCODING
init|=
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
specifier|final
specifier|static
name|char
name|KEY_SEPARATOR
init|=
literal|':'
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Build a key for an object in hbase    * @param components    * @return    */
specifier|static
name|byte
index|[]
name|buildKey
parameter_list|(
name|String
modifier|...
name|components
parameter_list|)
block|{
return|return
name|buildKey
argument_list|(
literal|false
argument_list|,
name|components
argument_list|)
return|;
block|}
specifier|static
name|byte
index|[]
name|buildKeyWithTrailingSeparator
parameter_list|(
name|String
modifier|...
name|components
parameter_list|)
block|{
return|return
name|buildKey
argument_list|(
literal|true
argument_list|,
name|components
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|buildKey
parameter_list|(
name|boolean
name|trailingSeparator
parameter_list|,
name|String
modifier|...
name|components
parameter_list|)
block|{
name|String
name|protoKey
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|components
argument_list|,
name|KEY_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|trailingSeparator
condition|)
name|protoKey
operator|+=
name|KEY_SEPARATOR
expr_stmt|;
return|return
name|protoKey
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
return|;
block|}
specifier|static
name|byte
index|[]
name|serialize
parameter_list|(
name|Writable
name|writable
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|writable
operator|.
name|write
argument_list|(
name|dos
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|static
parameter_list|<
name|T
extends|extends
name|Writable
parameter_list|>
name|void
name|deserialize
parameter_list|(
name|T
name|instance
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
name|instance
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|writeStr
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|String
name|str
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|str
operator|==
literal|null
operator|||
name|str
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|str
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|str
operator|.
name|getBytes
argument_list|()
argument_list|,
literal|0
argument_list|,
name|str
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|String
name|readStr
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|String
argument_list|()
return|;
block|}
else|else
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
specifier|static
name|void
name|writeByteArray
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
operator|||
name|b
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|byte
index|[]
name|readByteArray
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|len
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|byte
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|in
operator|.
name|readFully
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
block|}
specifier|static
name|void
name|writeDecimal
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|Decimal
name|val
parameter_list|)
throws|throws
name|IOException
block|{
name|HBaseUtils
operator|.
name|writeByteArray
argument_list|(
name|out
argument_list|,
name|val
operator|.
name|getUnscaled
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeShort
argument_list|(
name|val
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Decimal
name|readDecimal
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|Decimal
name|d
init|=
operator|new
name|Decimal
argument_list|()
decl_stmt|;
name|d
operator|.
name|setUnscaled
argument_list|(
name|HBaseUtils
operator|.
name|readByteArray
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|.
name|setScale
argument_list|(
name|in
operator|.
name|readShort
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|d
return|;
block|}
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|readStrStrMap
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|,
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
block|}
specifier|static
name|void
name|writeStrStrMap
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|map
operator|==
literal|null
operator|||
name|map
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|writeStr
argument_list|(
name|out
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|writeStr
argument_list|(
name|out
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|readStrListStrMap
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|m
operator|.
name|put
argument_list|(
name|readStrList
argument_list|(
name|in
argument_list|)
argument_list|,
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|m
return|;
block|}
block|}
specifier|static
name|void
name|writeStrListStrMap
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|map
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|map
operator|==
literal|null
operator|||
name|map
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|writeStrList
argument_list|(
name|out
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|writeStr
argument_list|(
name|out
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|void
name|writeStrList
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|list
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|val
range|:
name|list
control|)
block|{
name|writeStr
argument_list|(
name|out
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|readStrList
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
specifier|static
name|void
name|writeWritableList
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|List
argument_list|<
name|?
extends|extends
name|Writable
argument_list|>
name|list
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Writable
name|val
range|:
name|list
control|)
block|{
name|val
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
parameter_list|<
name|T
extends|extends
name|Writable
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|readWritableList
parameter_list|(
name|DataInput
name|in
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|()
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|T
argument_list|>
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|T
name|instance
init|=
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|instance
operator|.
name|readFields
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|list
operator|.
name|add
argument_list|(
name|instance
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|list
return|;
block|}
block|}
specifier|static
name|void
name|writeStrListList
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|list
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|list
operator|==
literal|null
operator|||
name|list
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|vals
range|:
name|list
control|)
block|{
name|writeStrList
argument_list|(
name|out
argument_list|,
name|vals
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|readStrListList
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|readStrList
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
block|}
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|readFieldSchemaList
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|()
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|schemas
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|,
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|,
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|schemas
return|;
block|}
block|}
specifier|static
name|void
name|writeFieldSchemaList
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|fields
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|fields
operator|==
literal|null
operator|||
name|fields
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|fields
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|FieldSchema
name|field
range|:
name|fields
control|)
block|{
name|writeStr
argument_list|(
name|out
argument_list|,
name|field
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writeStr
argument_list|(
name|out
argument_list|,
name|field
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|writeStr
argument_list|(
name|out
argument_list|,
name|field
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|List
argument_list|<
name|Order
argument_list|>
name|readOrderList
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
return|;
block|}
else|else
block|{
name|List
argument_list|<
name|Order
argument_list|>
name|orderList
init|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|orderList
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|,
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|orderList
return|;
block|}
block|}
specifier|static
name|void
name|writeOrderList
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|List
argument_list|<
name|Order
argument_list|>
name|orderList
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|orderList
operator|==
literal|null
operator|||
name|orderList
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|orderList
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Order
name|order
range|:
name|orderList
control|)
block|{
name|writeStr
argument_list|(
name|out
argument_list|,
name|order
operator|.
name|getCol
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|order
operator|.
name|getOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|static
name|PrincipalPrivilegeSet
name|readPrivileges
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|PrincipalPrivilegeSet
name|pps
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
name|pps
operator|.
name|setUserPrivileges
argument_list|(
name|readPrivilege
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|pps
operator|.
name|setGroupPrivileges
argument_list|(
name|readPrivilege
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|pps
operator|.
name|setRolePrivileges
argument_list|(
name|readPrivilege
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pps
return|;
block|}
else|else
block|{
return|return
operator|new
name|PrincipalPrivilegeSet
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|readPrivilege
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|sz
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|sz
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
else|else
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|priv
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|(
name|sz
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|String
name|key
init|=
name|readStr
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|int
name|numGrants
init|=
name|in
operator|.
name|readInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|numGrants
operator|==
literal|0
condition|)
block|{
name|priv
operator|.
name|put
argument_list|(
name|key
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|numGrants
condition|;
name|j
operator|++
control|)
block|{
name|PrivilegeGrantInfo
name|pgi
init|=
operator|new
name|PrivilegeGrantInfo
argument_list|()
decl_stmt|;
name|pgi
operator|.
name|setPrivilege
argument_list|(
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|pgi
operator|.
name|setCreateTime
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|pgi
operator|.
name|setGrantor
argument_list|(
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|pgi
operator|.
name|setGrantorType
argument_list|(
name|PrincipalType
operator|.
name|findByValue
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pgi
operator|.
name|setGrantOption
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|priv
return|;
block|}
block|}
specifier|static
name|void
name|writePrivileges
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|PrincipalPrivilegeSet
name|privs
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|privs
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writePrivilege
argument_list|(
name|out
argument_list|,
name|privs
operator|.
name|getUserPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|writePrivilege
argument_list|(
name|out
argument_list|,
name|privs
operator|.
name|getGroupPrivileges
argument_list|()
argument_list|)
expr_stmt|;
name|writePrivilege
argument_list|(
name|out
argument_list|,
name|privs
operator|.
name|getRolePrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|writePrivilege
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|priv
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|priv
operator|==
literal|null
operator|||
name|priv
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|priv
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|e
range|:
name|priv
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|writeStr
argument_list|(
name|out
argument_list|,
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|grants
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|grants
operator|==
literal|null
operator|||
name|grants
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|out
operator|.
name|writeInt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeInt
argument_list|(
name|grants
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|grant
range|:
name|grants
control|)
block|{
name|writeStr
argument_list|(
name|out
argument_list|,
name|grant
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|grant
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|writeStr
argument_list|(
name|out
argument_list|,
name|grant
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|grant
operator|.
name|getGrantorType
argument_list|()
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeBoolean
argument_list|(
name|grant
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|static
name|void
name|writePrincipalType
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|PrincipalType
name|pt
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|pt
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|out
operator|.
name|writeInt
argument_list|(
name|pt
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|PrincipalType
name|readPrincipalType
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|(
name|in
operator|.
name|readBoolean
argument_list|()
operator|)
condition|?
name|PrincipalType
operator|.
name|findByValue
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
else|:
literal|null
return|;
block|}
specifier|static
name|void
name|writeSkewedInfo
parameter_list|(
name|DataOutput
name|out
parameter_list|,
name|SkewedInfo
name|skew
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|skew
operator|==
literal|null
condition|)
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|.
name|writeBoolean
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writeStrList
argument_list|(
name|out
argument_list|,
name|skew
operator|.
name|getSkewedColNames
argument_list|()
argument_list|)
expr_stmt|;
name|writeStrListList
argument_list|(
name|out
argument_list|,
name|skew
operator|.
name|getSkewedColValues
argument_list|()
argument_list|)
expr_stmt|;
name|writeStrListStrMap
argument_list|(
name|out
argument_list|,
name|skew
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
name|SkewedInfo
name|readSkewedInfo
parameter_list|(
name|DataInput
name|in
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|in
operator|.
name|readBoolean
argument_list|()
condition|)
block|{
name|SkewedInfo
name|skew
init|=
operator|new
name|SkewedInfo
argument_list|()
decl_stmt|;
name|skew
operator|.
name|setSkewedColNames
argument_list|(
name|readStrList
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|skew
operator|.
name|setSkewedColValues
argument_list|(
name|readStrListList
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|skew
operator|.
name|setSkewedColValueLocationMaps
argument_list|(
name|readStrListStrMap
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|skew
return|;
block|}
else|else
block|{
return|return
operator|new
name|SkewedInfo
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|,
operator|new
name|ArrayList
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
argument_list|,
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|static
name|byte
index|[]
name|serializeStorageDescriptor
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|writeFieldSchemaList
argument_list|(
name|dos
argument_list|,
name|sd
operator|.
name|getCols
argument_list|()
argument_list|)
expr_stmt|;
name|writeStr
argument_list|(
name|dos
argument_list|,
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|writeStr
argument_list|(
name|dos
argument_list|,
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeBoolean
argument_list|(
name|sd
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeInt
argument_list|(
name|sd
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
name|writeStr
argument_list|(
name|dos
argument_list|,
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|writeStr
argument_list|(
name|dos
argument_list|,
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|writeStrStrMap
argument_list|(
name|dos
argument_list|,
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|writeStrList
argument_list|(
name|dos
argument_list|,
name|sd
operator|.
name|getBucketCols
argument_list|()
argument_list|)
expr_stmt|;
name|writeOrderList
argument_list|(
name|dos
argument_list|,
name|sd
operator|.
name|getSortCols
argument_list|()
argument_list|)
expr_stmt|;
name|writeSkewedInfo
argument_list|(
name|dos
argument_list|,
name|sd
operator|.
name|getSkewedInfo
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeBoolean
argument_list|(
name|sd
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|static
name|void
name|deserializeStorageDescriptor
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|readFieldSchemaList
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setInputFormat
argument_list|(
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCompressed
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
name|in
operator|.
name|readInt
argument_list|()
argument_list|)
expr_stmt|;
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|(
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|,
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|,
name|readStrStrMap
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
name|serde
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setBucketCols
argument_list|(
name|readStrList
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSortCols
argument_list|(
name|readOrderList
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSkewedInfo
argument_list|(
name|readSkewedInfo
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|in
operator|.
name|readBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
name|byte
index|[]
name|serializeStatsForOneColumn
parameter_list|(
name|ColumnStatistics
name|stats
parameter_list|,
name|ColumnStatisticsObj
name|obj
parameter_list|)
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|DataOutputStream
name|dos
init|=
operator|new
name|DataOutputStream
argument_list|(
name|baos
argument_list|)
decl_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
name|HBaseUtils
operator|.
name|writeStr
argument_list|(
name|dos
argument_list|,
name|obj
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|colData
init|=
name|obj
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
name|HBaseUtils
operator|.
name|writeStr
argument_list|(
name|dos
argument_list|,
name|colData
operator|.
name|getSetField
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|colData
operator|.
name|getSetField
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN_STATS
case|:
name|BooleanColumnStatsData
name|boolData
init|=
name|colData
operator|.
name|getBooleanStats
argument_list|()
decl_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|boolData
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|boolData
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|boolData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG_STATS
case|:
name|LongColumnStatsData
name|longData
init|=
name|colData
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|longData
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|longData
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|longData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|longData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE_STATS
case|:
name|DoubleColumnStatsData
name|doubleData
init|=
name|colData
operator|.
name|getDoubleStats
argument_list|()
decl_stmt|;
name|dos
operator|.
name|writeDouble
argument_list|(
name|doubleData
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeDouble
argument_list|(
name|doubleData
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|doubleData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|doubleData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING_STATS
case|:
name|StringColumnStatsData
name|stringData
init|=
name|colData
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|stringData
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeDouble
argument_list|(
name|stringData
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|stringData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|stringData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY_STATS
case|:
name|BinaryColumnStatsData
name|binaryData
init|=
name|colData
operator|.
name|getBinaryStats
argument_list|()
decl_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|binaryData
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeDouble
argument_list|(
name|binaryData
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|binaryData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL_STATS
case|:
name|DecimalColumnStatsData
name|decimalData
init|=
name|colData
operator|.
name|getDecimalStats
argument_list|()
decl_stmt|;
name|writeDecimal
argument_list|(
name|dos
argument_list|,
name|decimalData
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
name|writeDecimal
argument_list|(
name|dos
argument_list|,
name|decimalData
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|decimalData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|dos
operator|.
name|writeLong
argument_list|(
name|decimalData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Woh, bad.  Unknown stats type!"
argument_list|)
throw|;
block|}
return|return
name|baos
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|static
name|ColumnStatisticsObj
name|deserializeStatsForOneColumn
parameter_list|(
name|ColumnStatistics
name|stats
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|DataInput
name|in
init|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
argument_list|)
decl_stmt|;
name|ColumnStatisticsObj
name|obj
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|long
name|lastAnalyzed
init|=
name|in
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|setLastAnalyzed
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|lastAnalyzed
argument_list|,
name|stats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|.
name|setColType
argument_list|(
name|HBaseUtils
operator|.
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
operator|.
name|_Fields
name|type
init|=
name|ColumnStatisticsData
operator|.
name|_Fields
operator|.
name|valueOf
argument_list|(
name|HBaseUtils
operator|.
name|readStr
argument_list|(
name|in
argument_list|)
argument_list|)
decl_stmt|;
name|ColumnStatisticsData
name|colData
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|BOOLEAN_STATS
case|:
name|BooleanColumnStatsData
name|boolData
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|boolData
operator|.
name|setNumTrues
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|boolData
operator|.
name|setNumFalses
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|boolData
operator|.
name|setNumNulls
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|.
name|setBooleanStats
argument_list|(
name|boolData
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG_STATS
case|:
name|LongColumnStatsData
name|longData
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
name|longData
operator|.
name|setLowValue
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setHighValue
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setNumNulls
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setNumDVs
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|.
name|setLongStats
argument_list|(
name|longData
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE_STATS
case|:
name|DoubleColumnStatsData
name|doubleData
init|=
operator|new
name|DoubleColumnStatsData
argument_list|()
decl_stmt|;
name|doubleData
operator|.
name|setLowValue
argument_list|(
name|in
operator|.
name|readDouble
argument_list|()
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setHighValue
argument_list|(
name|in
operator|.
name|readDouble
argument_list|()
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setNumNulls
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setNumDVs
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|.
name|setDoubleStats
argument_list|(
name|doubleData
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING_STATS
case|:
name|StringColumnStatsData
name|stringData
init|=
operator|new
name|StringColumnStatsData
argument_list|()
decl_stmt|;
name|stringData
operator|.
name|setMaxColLen
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|stringData
operator|.
name|setAvgColLen
argument_list|(
name|in
operator|.
name|readDouble
argument_list|()
argument_list|)
expr_stmt|;
name|stringData
operator|.
name|setNumNulls
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|stringData
operator|.
name|setNumDVs
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|.
name|setStringStats
argument_list|(
name|stringData
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY_STATS
case|:
name|BinaryColumnStatsData
name|binaryData
init|=
operator|new
name|BinaryColumnStatsData
argument_list|()
decl_stmt|;
name|binaryData
operator|.
name|setMaxColLen
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|binaryData
operator|.
name|setAvgColLen
argument_list|(
name|in
operator|.
name|readDouble
argument_list|()
argument_list|)
expr_stmt|;
name|binaryData
operator|.
name|setNumNulls
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|.
name|setBinaryStats
argument_list|(
name|binaryData
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL_STATS
case|:
name|DecimalColumnStatsData
name|decimalData
init|=
operator|new
name|DecimalColumnStatsData
argument_list|()
decl_stmt|;
name|decimalData
operator|.
name|setHighValue
argument_list|(
name|readDecimal
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|decimalData
operator|.
name|setLowValue
argument_list|(
name|readDecimal
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
name|decimalData
operator|.
name|setNumNulls
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|decimalData
operator|.
name|setNumDVs
argument_list|(
name|in
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|.
name|setDecimalStats
argument_list|(
name|decimalData
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Woh, bad.  Unknown stats type!"
argument_list|)
throw|;
block|}
name|obj
operator|.
name|setStatsData
argument_list|(
name|colData
argument_list|)
expr_stmt|;
return|return
name|obj
return|;
block|}
block|}
end_class

end_unit

