begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|ByteString
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|AggrStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BinaryColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|BooleanColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ColumnStatisticsObj
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Decimal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DecimalColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|DoubleColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FieldSchema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|FunctionType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|LongColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Order
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalPrivilegeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrincipalType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|PrivilegeGrantInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|ResourceUri
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Role
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SerDeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|SkewedInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StorageDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|StringColumnStatsData
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|BloomFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_comment
comment|/**  * Utility functions  */
end_comment

begin_class
class|class
name|HBaseUtils
block|{
specifier|final
specifier|static
name|Charset
name|ENCODING
init|=
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
specifier|final
specifier|static
name|char
name|KEY_SEPARATOR
init|=
literal|'\u0001'
decl_stmt|;
specifier|final
specifier|static
name|String
name|KEY_SEPARATOR_STR
init|=
operator|new
name|String
argument_list|(
operator|new
name|char
index|[]
block|{
name|KEY_SEPARATOR
block|}
argument_list|)
decl_stmt|;
specifier|static
specifier|final
specifier|private
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HBaseUtils
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|/**    * Build a key for an object in hbase    * @param components    * @return    */
specifier|static
name|byte
index|[]
name|buildKey
parameter_list|(
name|String
modifier|...
name|components
parameter_list|)
block|{
return|return
name|buildKey
argument_list|(
literal|false
argument_list|,
name|components
argument_list|)
return|;
block|}
specifier|static
name|byte
index|[]
name|buildKeyWithTrailingSeparator
parameter_list|(
name|String
modifier|...
name|components
parameter_list|)
block|{
return|return
name|buildKey
argument_list|(
literal|true
argument_list|,
name|components
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|byte
index|[]
name|buildKey
parameter_list|(
name|boolean
name|trailingSeparator
parameter_list|,
name|String
modifier|...
name|components
parameter_list|)
block|{
name|String
name|protoKey
init|=
name|StringUtils
operator|.
name|join
argument_list|(
name|components
argument_list|,
name|KEY_SEPARATOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|trailingSeparator
condition|)
name|protoKey
operator|+=
name|KEY_SEPARATOR
expr_stmt|;
return|return
name|protoKey
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
return|;
block|}
specifier|static
name|String
index|[]
name|parseKey
parameter_list|(
name|byte
index|[]
name|serialized
parameter_list|)
block|{
name|String
name|munged
init|=
operator|new
name|String
argument_list|(
name|serialized
argument_list|,
name|ENCODING
argument_list|)
decl_stmt|;
return|return
name|munged
operator|.
name|split
argument_list|(
name|KEY_SEPARATOR_STR
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HbaseMetastoreProto
operator|.
name|Parameters
name|buildParameters
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|)
block|{
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|ParameterEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|HbaseMetastoreProto
operator|.
name|ParameterEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|HbaseMetastoreProto
operator|.
name|ParameterEntry
operator|.
name|newBuilder
argument_list|()
operator|.
name|setKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|setValue
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|HbaseMetastoreProto
operator|.
name|Parameters
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllParameter
argument_list|(
name|entries
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|buildParameters
parameter_list|(
name|HbaseMetastoreProto
operator|.
name|Parameters
name|protoParams
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|ParameterEntry
name|pe
range|:
name|protoParams
operator|.
name|getParameterList
argument_list|()
control|)
block|{
name|params
operator|.
name|put
argument_list|(
name|pe
operator|.
name|getKey
argument_list|()
argument_list|,
name|pe
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|params
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|PrincipalPrivilegeSetEntry
argument_list|>
name|buildPrincipalPrivilegeSetEntry
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|entries
parameter_list|)
block|{
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|PrincipalPrivilegeSetEntry
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|HbaseMetastoreProto
operator|.
name|PrincipalPrivilegeSetEntry
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|entry
range|:
name|entries
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|results
operator|.
name|add
argument_list|(
name|HbaseMetastoreProto
operator|.
name|PrincipalPrivilegeSetEntry
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPrincipalName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|addAllPrivileges
argument_list|(
name|buildPrivilegeGrantInfo
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|PrivilegeGrantInfo
argument_list|>
name|buildPrivilegeGrantInfo
parameter_list|(
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|privileges
parameter_list|)
block|{
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|PrivilegeGrantInfo
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|HbaseMetastoreProto
operator|.
name|PrivilegeGrantInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PrivilegeGrantInfo
name|privilege
range|:
name|privileges
control|)
block|{
name|HbaseMetastoreProto
operator|.
name|PrivilegeGrantInfo
operator|.
name|Builder
name|builder
init|=
name|HbaseMetastoreProto
operator|.
name|PrivilegeGrantInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilege
operator|.
name|getPrivilege
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setPrivilege
argument_list|(
name|privilege
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCreateTime
argument_list|(
name|privilege
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|privilege
operator|.
name|getGrantor
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setGrantor
argument_list|(
name|privilege
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|privilege
operator|.
name|getGrantorType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setGrantorType
argument_list|(
name|convertPrincipalTypes
argument_list|(
name|privilege
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setGrantOption
argument_list|(
name|privilege
operator|.
name|isGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
comment|/**    * Convert Thrift.PrincipalType to HbaseMetastoreProto.principalType    * @param type    * @return    */
specifier|static
name|HbaseMetastoreProto
operator|.
name|PrincipalType
name|convertPrincipalTypes
parameter_list|(
name|PrincipalType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|USER
case|:
return|return
name|HbaseMetastoreProto
operator|.
name|PrincipalType
operator|.
name|USER
return|;
case|case
name|ROLE
case|:
return|return
name|HbaseMetastoreProto
operator|.
name|PrincipalType
operator|.
name|ROLE
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown principal type "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**    * Convert principalType from HbaseMetastoreProto to Thrift.PrincipalType    * @param type    * @return    */
specifier|static
name|PrincipalType
name|convertPrincipalTypes
parameter_list|(
name|HbaseMetastoreProto
operator|.
name|PrincipalType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|USER
case|:
return|return
name|PrincipalType
operator|.
name|USER
return|;
case|case
name|ROLE
case|:
return|return
name|PrincipalType
operator|.
name|ROLE
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown principal type "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|convertPrincipalPrivilegeSetEntries
parameter_list|(
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|PrincipalPrivilegeSetEntry
argument_list|>
name|entries
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|PrincipalPrivilegeSetEntry
name|entry
range|:
name|entries
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getPrincipalName
argument_list|()
argument_list|,
name|convertPrivilegeGrantInfos
argument_list|(
name|entry
operator|.
name|getPrivilegesList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|convertPrivilegeGrantInfos
parameter_list|(
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|PrivilegeGrantInfo
argument_list|>
name|privileges
parameter_list|)
block|{
name|List
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
name|results
init|=
operator|new
name|ArrayList
argument_list|<
name|PrivilegeGrantInfo
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|PrivilegeGrantInfo
name|proto
range|:
name|privileges
control|)
block|{
name|PrivilegeGrantInfo
name|pgi
init|=
operator|new
name|PrivilegeGrantInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasPrivilege
argument_list|()
condition|)
name|pgi
operator|.
name|setPrivilege
argument_list|(
name|proto
operator|.
name|getPrivilege
argument_list|()
argument_list|)
expr_stmt|;
name|pgi
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|proto
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasGrantor
argument_list|()
condition|)
name|pgi
operator|.
name|setGrantor
argument_list|(
name|proto
operator|.
name|getGrantor
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasGrantorType
argument_list|()
condition|)
block|{
name|pgi
operator|.
name|setGrantorType
argument_list|(
name|convertPrincipalTypes
argument_list|(
name|proto
operator|.
name|getGrantorType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasGrantOption
argument_list|()
condition|)
name|pgi
operator|.
name|setGrantOption
argument_list|(
name|proto
operator|.
name|getGrantOption
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|add
argument_list|(
name|pgi
argument_list|)
expr_stmt|;
block|}
return|return
name|results
return|;
block|}
specifier|private
specifier|static
name|HbaseMetastoreProto
operator|.
name|PrincipalPrivilegeSet
name|buildPrincipalPrivilegeSet
parameter_list|(
name|PrincipalPrivilegeSet
name|pps
parameter_list|)
block|{
name|HbaseMetastoreProto
operator|.
name|PrincipalPrivilegeSet
operator|.
name|Builder
name|builder
init|=
name|HbaseMetastoreProto
operator|.
name|PrincipalPrivilegeSet
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|pps
operator|.
name|getUserPrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllUsers
argument_list|(
name|buildPrincipalPrivilegeSetEntry
argument_list|(
name|pps
operator|.
name|getUserPrivileges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pps
operator|.
name|getRolePrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllRoles
argument_list|(
name|buildPrincipalPrivilegeSetEntry
argument_list|(
name|pps
operator|.
name|getRolePrivileges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|PrincipalPrivilegeSet
name|buildPrincipalPrivilegeSet
parameter_list|(
name|HbaseMetastoreProto
operator|.
name|PrincipalPrivilegeSet
name|proto
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|PrincipalPrivilegeSet
name|pps
init|=
operator|new
name|PrincipalPrivilegeSet
argument_list|()
decl_stmt|;
name|pps
operator|.
name|setUserPrivileges
argument_list|(
name|convertPrincipalPrivilegeSetEntries
argument_list|(
name|proto
operator|.
name|getUsersList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pps
operator|.
name|setRolePrivileges
argument_list|(
name|convertPrincipalPrivilegeSetEntries
argument_list|(
name|proto
operator|.
name|getRolesList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|pps
return|;
block|}
comment|/**    * Serialize a PrincipalPrivilegeSet    * @param pps    * @return    */
specifier|static
name|byte
index|[]
name|serializePrincipalPrivilegeSet
parameter_list|(
name|PrincipalPrivilegeSet
name|pps
parameter_list|)
block|{
return|return
name|buildPrincipalPrivilegeSet
argument_list|(
name|pps
argument_list|)
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * Deserialize a PrincipalPrivilegeSet    * @param serialized    * @return    * @throws InvalidProtocolBufferException    */
specifier|static
name|PrincipalPrivilegeSet
name|deserializePrincipalPrivilegeSet
parameter_list|(
name|byte
index|[]
name|serialized
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|HbaseMetastoreProto
operator|.
name|PrincipalPrivilegeSet
name|proto
init|=
name|HbaseMetastoreProto
operator|.
name|PrincipalPrivilegeSet
operator|.
name|parseFrom
argument_list|(
name|serialized
argument_list|)
decl_stmt|;
return|return
name|buildPrincipalPrivilegeSet
argument_list|(
name|proto
argument_list|)
return|;
block|}
comment|/**    * Serialize a role    * @param role    * @return two byte arrays, first contains the key, the second the serialized value.    */
specifier|static
name|byte
index|[]
index|[]
name|serializeRole
parameter_list|(
name|Role
name|role
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|buildKey
argument_list|(
name|role
operator|.
name|getRoleName
argument_list|()
argument_list|)
expr_stmt|;
name|HbaseMetastoreProto
operator|.
name|Role
operator|.
name|Builder
name|builder
init|=
name|HbaseMetastoreProto
operator|.
name|Role
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setCreateTime
argument_list|(
name|role
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|role
operator|.
name|getOwnerName
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setOwnerName
argument_list|(
name|role
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Deserialize a role.  This method should be used when the rolename is already known as it    * doesn't have to re-deserialize it.    * @param roleName name of the role    * @param value value fetched from hbase    * @return A role    * @throws InvalidProtocolBufferException    */
specifier|static
name|Role
name|deserializeRole
parameter_list|(
name|String
name|roleName
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|Role
name|role
init|=
operator|new
name|Role
argument_list|()
decl_stmt|;
name|role
operator|.
name|setRoleName
argument_list|(
name|roleName
argument_list|)
expr_stmt|;
name|HbaseMetastoreProto
operator|.
name|Role
name|protoRole
init|=
name|HbaseMetastoreProto
operator|.
name|Role
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|role
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|protoRole
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|protoRole
operator|.
name|hasOwnerName
argument_list|()
condition|)
name|role
operator|.
name|setOwnerName
argument_list|(
name|protoRole
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|role
return|;
block|}
comment|/**    * Deserialize a role.  This method should be used when the rolename is not already known (eg    * when doing a scan).    * @param key key from hbase    * @param value value from hbase    * @return a role    * @throws InvalidProtocolBufferException    */
specifier|static
name|Role
name|deserializeRole
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|String
name|roleName
init|=
operator|new
name|String
argument_list|(
name|key
argument_list|,
name|ENCODING
argument_list|)
decl_stmt|;
return|return
name|deserializeRole
argument_list|(
name|roleName
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Serialize a list of role names    * @param roles    * @return    */
specifier|static
name|byte
index|[]
name|serializeRoleList
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|roles
parameter_list|)
block|{
return|return
name|HbaseMetastoreProto
operator|.
name|RoleList
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllRole
argument_list|(
name|roles
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|deserializeRoleList
parameter_list|(
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|HbaseMetastoreProto
operator|.
name|RoleList
name|proto
init|=
name|HbaseMetastoreProto
operator|.
name|RoleList
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|proto
operator|.
name|getRoleList
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Serialize a database    * @param db    * @return two byte arrays, first contains the key, the second the serialized value.    */
specifier|static
name|byte
index|[]
index|[]
name|serializeDatabase
parameter_list|(
name|Database
name|db
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|buildKey
argument_list|(
name|db
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|HbaseMetastoreProto
operator|.
name|Database
operator|.
name|Builder
name|builder
init|=
name|HbaseMetastoreProto
operator|.
name|Database
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|db
operator|.
name|getDescription
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setDescription
argument_list|(
name|db
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|getLocationUri
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setUri
argument_list|(
name|db
operator|.
name|getLocationUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setParameters
argument_list|(
name|buildParameters
argument_list|(
name|db
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|getPrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPrivileges
argument_list|(
name|buildPrincipalPrivilegeSet
argument_list|(
name|db
operator|.
name|getPrivileges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|db
operator|.
name|getOwnerName
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setOwnerName
argument_list|(
name|db
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|db
operator|.
name|getOwnerType
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setOwnerType
argument_list|(
name|convertPrincipalTypes
argument_list|(
name|db
operator|.
name|getOwnerType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Deserialize a database.  This method should be used when the db anme is already known as it    * doesn't have to re-deserialize it.    * @param dbName name of the role    * @param value value fetched from hbase    * @return A database    * @throws InvalidProtocolBufferException    */
specifier|static
name|Database
name|deserializeDatabase
parameter_list|(
name|String
name|dbName
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|Database
name|db
init|=
operator|new
name|Database
argument_list|()
decl_stmt|;
name|db
operator|.
name|setName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|HbaseMetastoreProto
operator|.
name|Database
name|protoDb
init|=
name|HbaseMetastoreProto
operator|.
name|Database
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|protoDb
operator|.
name|hasDescription
argument_list|()
condition|)
name|db
operator|.
name|setDescription
argument_list|(
name|protoDb
operator|.
name|getDescription
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|protoDb
operator|.
name|hasUri
argument_list|()
condition|)
name|db
operator|.
name|setLocationUri
argument_list|(
name|protoDb
operator|.
name|getUri
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|protoDb
operator|.
name|hasParameters
argument_list|()
condition|)
name|db
operator|.
name|setParameters
argument_list|(
name|buildParameters
argument_list|(
name|protoDb
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|protoDb
operator|.
name|hasPrivileges
argument_list|()
condition|)
block|{
name|db
operator|.
name|setPrivileges
argument_list|(
name|buildPrincipalPrivilegeSet
argument_list|(
name|protoDb
operator|.
name|getPrivileges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|protoDb
operator|.
name|hasOwnerName
argument_list|()
condition|)
name|db
operator|.
name|setOwnerName
argument_list|(
name|protoDb
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|protoDb
operator|.
name|hasOwnerType
argument_list|()
condition|)
name|db
operator|.
name|setOwnerType
argument_list|(
name|convertPrincipalTypes
argument_list|(
name|protoDb
operator|.
name|getOwnerType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|db
return|;
block|}
comment|/**    * Deserialize a database.  This method should be used when the db name is not already known (eg    * when doing a scan).    * @param key key from hbase    * @param value value from hbase    * @return a role    * @throws InvalidProtocolBufferException    */
specifier|static
name|Database
name|deserializeDatabase
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|String
name|dbName
init|=
operator|new
name|String
argument_list|(
name|key
argument_list|,
name|ENCODING
argument_list|)
decl_stmt|;
return|return
name|deserializeDatabase
argument_list|(
name|dbName
argument_list|,
name|value
argument_list|)
return|;
block|}
comment|/**    * Serialize a function    * @param func function to serialize    * @return two byte arrays, first contains the key, the second the value.    */
specifier|static
name|byte
index|[]
index|[]
name|serializeFunction
parameter_list|(
name|Function
name|func
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|buildKey
argument_list|(
name|func
operator|.
name|getDbName
argument_list|()
argument_list|,
name|func
operator|.
name|getFunctionName
argument_list|()
argument_list|)
expr_stmt|;
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|Builder
name|builder
init|=
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|func
operator|.
name|getClassName
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setClassName
argument_list|(
name|func
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|func
operator|.
name|getOwnerName
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setOwnerName
argument_list|(
name|func
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|func
operator|.
name|getOwnerType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOwnerType
argument_list|(
name|convertPrincipalTypes
argument_list|(
name|func
operator|.
name|getOwnerType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setCreateTime
argument_list|(
name|func
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|func
operator|.
name|getFunctionType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setFunctionType
argument_list|(
name|convertFunctionTypes
argument_list|(
name|func
operator|.
name|getFunctionType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|func
operator|.
name|getResourceUris
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|ResourceUri
name|uri
range|:
name|func
operator|.
name|getResourceUris
argument_list|()
control|)
block|{
name|builder
operator|.
name|addResourceUris
argument_list|(
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|ResourceUri
operator|.
name|newBuilder
argument_list|()
operator|.
name|setResourceType
argument_list|(
name|convertResourceTypes
argument_list|(
name|uri
operator|.
name|getResourceType
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setUri
argument_list|(
name|uri
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|result
index|[
literal|1
index|]
operator|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Deserialize a function.  This method should be used when the function and db name are    * already known.    * @param dbName name of the database the function is in    * @param functionName name of the function    * @param value serialized value of the function    * @return function as an object    * @throws InvalidProtocolBufferException    */
specifier|static
name|Function
name|deserializeFunction
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|functionName
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|Function
name|func
init|=
operator|new
name|Function
argument_list|()
decl_stmt|;
name|func
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|func
operator|.
name|setFunctionName
argument_list|(
name|functionName
argument_list|)
expr_stmt|;
name|HbaseMetastoreProto
operator|.
name|Function
name|protoFunc
init|=
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|parseFrom
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|protoFunc
operator|.
name|hasClassName
argument_list|()
condition|)
name|func
operator|.
name|setClassName
argument_list|(
name|protoFunc
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|protoFunc
operator|.
name|hasOwnerName
argument_list|()
condition|)
name|func
operator|.
name|setOwnerName
argument_list|(
name|protoFunc
operator|.
name|getOwnerName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|protoFunc
operator|.
name|hasOwnerType
argument_list|()
condition|)
block|{
name|func
operator|.
name|setOwnerType
argument_list|(
name|convertPrincipalTypes
argument_list|(
name|protoFunc
operator|.
name|getOwnerType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|func
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|protoFunc
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|protoFunc
operator|.
name|hasFunctionType
argument_list|()
condition|)
block|{
name|func
operator|.
name|setFunctionType
argument_list|(
name|convertFunctionTypes
argument_list|(
name|protoFunc
operator|.
name|getFunctionType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|ResourceUri
name|protoUri
range|:
name|protoFunc
operator|.
name|getResourceUrisList
argument_list|()
control|)
block|{
name|func
operator|.
name|addToResourceUris
argument_list|(
operator|new
name|ResourceUri
argument_list|(
name|convertResourceTypes
argument_list|(
name|protoUri
operator|.
name|getResourceType
argument_list|()
argument_list|)
argument_list|,
name|protoUri
operator|.
name|getUri
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|func
return|;
block|}
comment|/**    * Deserialize a function.  This method should be used when the dbname and function name are    * not already known, such as in a scan.    * @param key key from hbase    * @param value value from hbase    * @return function object    * @throws InvalidProtocolBufferException    */
specifier|static
name|Function
name|deserializeFunction
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|value
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|String
index|[]
name|keys
init|=
name|deserializeKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|deserializeFunction
argument_list|(
name|keys
index|[
literal|0
index|]
argument_list|,
name|keys
index|[
literal|1
index|]
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|FunctionType
name|convertFunctionTypes
parameter_list|(
name|FunctionType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|JAVA
case|:
return|return
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|FunctionType
operator|.
name|JAVA
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown function type "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|FunctionType
name|convertFunctionTypes
parameter_list|(
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|FunctionType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|JAVA
case|:
return|return
name|FunctionType
operator|.
name|JAVA
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown function type "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|ResourceUri
operator|.
name|ResourceType
name|convertResourceTypes
parameter_list|(
name|ResourceType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|JAR
case|:
return|return
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|ResourceUri
operator|.
name|ResourceType
operator|.
name|JAR
return|;
case|case
name|FILE
case|:
return|return
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|ResourceUri
operator|.
name|ResourceType
operator|.
name|FILE
return|;
case|case
name|ARCHIVE
case|:
return|return
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|ResourceUri
operator|.
name|ResourceType
operator|.
name|ARCHIVE
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown resource type "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|ResourceType
name|convertResourceTypes
parameter_list|(
name|HbaseMetastoreProto
operator|.
name|Function
operator|.
name|ResourceUri
operator|.
name|ResourceType
name|type
parameter_list|)
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|JAR
case|:
return|return
name|ResourceType
operator|.
name|JAR
return|;
case|case
name|FILE
case|:
return|return
name|ResourceType
operator|.
name|FILE
return|;
case|case
name|ARCHIVE
case|:
return|return
name|ResourceType
operator|.
name|ARCHIVE
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown resource type "
operator|+
name|type
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|convertFieldSchemaListFromProto
parameter_list|(
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|FieldSchema
argument_list|>
name|protoList
parameter_list|)
block|{
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schemas
init|=
operator|new
name|ArrayList
argument_list|<
name|FieldSchema
argument_list|>
argument_list|(
name|protoList
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|FieldSchema
name|proto
range|:
name|protoList
control|)
block|{
name|schemas
operator|.
name|add
argument_list|(
operator|new
name|FieldSchema
argument_list|(
name|proto
operator|.
name|getName
argument_list|()
argument_list|,
name|proto
operator|.
name|getType
argument_list|()
argument_list|,
name|proto
operator|.
name|hasComment
argument_list|()
condition|?
name|proto
operator|.
name|getComment
argument_list|()
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|schemas
return|;
block|}
specifier|private
specifier|static
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|FieldSchema
argument_list|>
name|convertFieldSchemaListToProto
parameter_list|(
name|List
argument_list|<
name|FieldSchema
argument_list|>
name|schemas
parameter_list|)
block|{
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|FieldSchema
argument_list|>
name|protoList
init|=
operator|new
name|ArrayList
argument_list|<
name|HbaseMetastoreProto
operator|.
name|FieldSchema
argument_list|>
argument_list|(
name|schemas
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|schemas
control|)
block|{
name|HbaseMetastoreProto
operator|.
name|FieldSchema
operator|.
name|Builder
name|builder
init|=
name|HbaseMetastoreProto
operator|.
name|FieldSchema
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setName
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|setType
argument_list|(
name|fs
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setComment
argument_list|(
name|fs
operator|.
name|getComment
argument_list|()
argument_list|)
expr_stmt|;
name|protoList
operator|.
name|add
argument_list|(
name|builder
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|protoList
return|;
block|}
comment|/**    * Serialize a storage descriptor.    * @param sd storage descriptor to serialize    * @return serialized storage descriptor.    */
specifier|static
name|byte
index|[]
name|serializeStorageDescriptor
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|)
block|{
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|Builder
name|builder
init|=
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|addAllCols
argument_list|(
name|convertFieldSchemaListToProto
argument_list|(
name|sd
operator|.
name|getCols
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sd
operator|.
name|getInputFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setInputFormat
argument_list|(
name|sd
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sd
operator|.
name|getOutputFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setOutputFormat
argument_list|(
name|sd
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setIsCompressed
argument_list|(
name|sd
operator|.
name|isCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNumBuckets
argument_list|(
name|sd
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|SerDeInfo
operator|.
name|Builder
name|serdeBuilder
init|=
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|SerDeInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|SerDeInfo
name|serde
init|=
name|sd
operator|.
name|getSerdeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|serde
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|serdeBuilder
operator|.
name|setName
argument_list|(
name|serde
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serde
operator|.
name|getSerializationLib
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|serdeBuilder
operator|.
name|setSerializationLib
argument_list|(
name|serde
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serde
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|serdeBuilder
operator|.
name|setParameters
argument_list|(
name|buildParameters
argument_list|(
name|serde
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setSerdeInfo
argument_list|(
name|serdeBuilder
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sd
operator|.
name|getBucketCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllBucketCols
argument_list|(
name|sd
operator|.
name|getBucketCols
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sd
operator|.
name|getSortCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|Order
argument_list|>
name|orders
init|=
name|sd
operator|.
name|getSortCols
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|Order
argument_list|>
name|protoList
init|=
operator|new
name|ArrayList
argument_list|<
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|Order
argument_list|>
argument_list|(
name|orders
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Order
name|order
range|:
name|orders
control|)
block|{
name|protoList
operator|.
name|add
argument_list|(
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|Order
operator|.
name|newBuilder
argument_list|()
operator|.
name|setColumnName
argument_list|(
name|order
operator|.
name|getCol
argument_list|()
argument_list|)
operator|.
name|setOrder
argument_list|(
name|order
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|addAllSortCols
argument_list|(
name|protoList
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|SkewedInfo
operator|.
name|Builder
name|skewBuilder
init|=
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|SkewedInfo
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|SkewedInfo
name|skewed
init|=
name|sd
operator|.
name|getSkewedInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|skewed
operator|.
name|getSkewedColNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|skewBuilder
operator|.
name|addAllSkewedColNames
argument_list|(
name|skewed
operator|.
name|getSkewedColNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skewed
operator|.
name|getSkewedColValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|innerList
range|:
name|skewed
operator|.
name|getSkewedColValues
argument_list|()
control|)
block|{
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|SkewedInfo
operator|.
name|SkewedColValueList
operator|.
name|Builder
name|listBuilder
init|=
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|SkewedInfo
operator|.
name|SkewedColValueList
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|listBuilder
operator|.
name|addAllSkewedColValue
argument_list|(
name|innerList
argument_list|)
expr_stmt|;
name|skewBuilder
operator|.
name|addSkewedColValues
argument_list|(
name|listBuilder
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|skewed
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|e
range|:
name|skewed
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|SkewedInfo
operator|.
name|SkewedColValueLocationMap
operator|.
name|Builder
name|mapBuilder
init|=
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|SkewedInfo
operator|.
name|SkewedColValueLocationMap
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|mapBuilder
operator|.
name|addAllKey
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|mapBuilder
operator|.
name|setValue
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|skewBuilder
operator|.
name|addSkewedColValueLocationMaps
argument_list|(
name|mapBuilder
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|setSkewedInfo
argument_list|(
name|skewBuilder
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|sd
operator|.
name|isStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
comment|/**    * Produce a hash for the storage descriptor    * @param sd storage descriptor to hash    * @param md message descriptor to use to generate the hash    * @return the hash as a byte array    */
specifier|static
name|byte
index|[]
name|hashStorageDescriptor
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|MessageDigest
name|md
parameter_list|)
block|{
comment|// Note all maps and lists have to be absolutely sorted.  Otherwise we'll produce different
comment|// results for hashes based on the OS or JVM being used.
name|md
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|FieldSchema
name|fs
range|:
name|sd
operator|.
name|getCols
argument_list|()
control|)
block|{
name|md
operator|.
name|update
argument_list|(
name|fs
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|.
name|update
argument_list|(
name|fs
operator|.
name|getType
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|fs
operator|.
name|getComment
argument_list|()
operator|!=
literal|null
condition|)
name|md
operator|.
name|update
argument_list|(
name|fs
operator|.
name|getComment
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sd
operator|.
name|getInputFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|update
argument_list|(
name|sd
operator|.
name|getInputFormat
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sd
operator|.
name|getOutputFormat
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|update
argument_list|(
name|sd
operator|.
name|getOutputFormat
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|md
operator|.
name|update
argument_list|(
name|sd
operator|.
name|isCompressed
argument_list|()
condition|?
literal|"true"
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
else|:
literal|"false"
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|.
name|update
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|sd
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sd
operator|.
name|getSerdeInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SerDeInfo
name|serde
init|=
name|sd
operator|.
name|getSerdeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|serde
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|update
argument_list|(
name|serde
operator|.
name|getName
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serde
operator|.
name|getSerializationLib
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|md
operator|.
name|update
argument_list|(
name|serde
operator|.
name|getSerializationLib
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|serde
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|serde
operator|.
name|getParameters
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|param
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|md
operator|.
name|update
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|.
name|update
argument_list|(
name|param
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|sd
operator|.
name|getBucketCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|bucketCols
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|sd
operator|.
name|getBucketCols
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|bucket
range|:
name|bucketCols
control|)
name|md
operator|.
name|update
argument_list|(
name|bucket
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sd
operator|.
name|getSortCols
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SortedSet
argument_list|<
name|Order
argument_list|>
name|orders
init|=
operator|new
name|TreeSet
argument_list|<
name|Order
argument_list|>
argument_list|(
name|sd
operator|.
name|getSortCols
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Order
name|order
range|:
name|orders
control|)
block|{
name|md
operator|.
name|update
argument_list|(
name|order
operator|.
name|getCol
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|.
name|update
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|order
operator|.
name|getOrder
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sd
operator|.
name|getSkewedInfo
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SkewedInfo
name|skewed
init|=
name|sd
operator|.
name|getSkewedInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|skewed
operator|.
name|getSkewedColNames
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|colnames
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|skewed
operator|.
name|getSkewedColNames
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|colname
range|:
name|colnames
control|)
name|md
operator|.
name|update
argument_list|(
name|colname
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skewed
operator|.
name|getSkewedColValues
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|sortedOuterList
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|String
argument_list|>
name|innerList
range|:
name|skewed
operator|.
name|getSkewedColValues
argument_list|()
control|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|sortedInnerList
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|innerList
argument_list|)
decl_stmt|;
name|sortedOuterList
operator|.
name|add
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|sortedInnerList
argument_list|,
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|colval
range|:
name|sortedOuterList
control|)
name|md
operator|.
name|update
argument_list|(
name|colval
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skewed
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|SortedMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|sortedMap
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|smap
range|:
name|skewed
operator|.
name|getSkewedColValueLocationMaps
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|SortedSet
argument_list|<
name|String
argument_list|>
name|sortedKey
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|smap
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|sortedMap
operator|.
name|put
argument_list|(
name|StringUtils
operator|.
name|join
argument_list|(
name|sortedKey
argument_list|,
literal|"."
argument_list|)
argument_list|,
name|smap
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|sortedMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|md
operator|.
name|update
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
name|md
operator|.
name|update
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|md
operator|.
name|digest
argument_list|()
return|;
block|}
specifier|static
name|StorageDescriptor
name|deserializeStorageDescriptor
parameter_list|(
name|byte
index|[]
name|serialized
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
name|proto
init|=
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|parseFrom
argument_list|(
name|serialized
argument_list|)
decl_stmt|;
name|StorageDescriptor
name|sd
init|=
operator|new
name|StorageDescriptor
argument_list|()
decl_stmt|;
name|sd
operator|.
name|setCols
argument_list|(
name|convertFieldSchemaListFromProto
argument_list|(
name|proto
operator|.
name|getColsList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasInputFormat
argument_list|()
condition|)
name|sd
operator|.
name|setInputFormat
argument_list|(
name|proto
operator|.
name|getInputFormat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasOutputFormat
argument_list|()
condition|)
name|sd
operator|.
name|setOutputFormat
argument_list|(
name|proto
operator|.
name|getOutputFormat
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setCompressed
argument_list|(
name|proto
operator|.
name|getIsCompressed
argument_list|()
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setNumBuckets
argument_list|(
name|proto
operator|.
name|getNumBuckets
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasSerdeInfo
argument_list|()
condition|)
block|{
name|SerDeInfo
name|serde
init|=
operator|new
name|SerDeInfo
argument_list|()
decl_stmt|;
name|serde
operator|.
name|setName
argument_list|(
name|proto
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|serde
operator|.
name|setSerializationLib
argument_list|(
name|proto
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getSerializationLib
argument_list|()
argument_list|)
expr_stmt|;
name|serde
operator|.
name|setParameters
argument_list|(
name|buildParameters
argument_list|(
name|proto
operator|.
name|getSerdeInfo
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSerdeInfo
argument_list|(
name|serde
argument_list|)
expr_stmt|;
block|}
name|sd
operator|.
name|setBucketCols
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|proto
operator|.
name|getBucketColsList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|Order
argument_list|>
name|sortCols
init|=
operator|new
name|ArrayList
argument_list|<
name|Order
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|Order
name|protoOrder
range|:
name|proto
operator|.
name|getSortColsList
argument_list|()
control|)
block|{
name|sortCols
operator|.
name|add
argument_list|(
operator|new
name|Order
argument_list|(
name|protoOrder
operator|.
name|getColumnName
argument_list|()
argument_list|,
name|protoOrder
operator|.
name|getOrder
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|sd
operator|.
name|setSortCols
argument_list|(
name|sortCols
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasSkewedInfo
argument_list|()
condition|)
block|{
name|SkewedInfo
name|skewed
init|=
operator|new
name|SkewedInfo
argument_list|()
decl_stmt|;
name|skewed
operator|.
name|setSkewedColNames
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|proto
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColNamesList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|SkewedInfo
operator|.
name|SkewedColValueList
name|innerList
range|:
name|proto
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValuesList
argument_list|()
control|)
block|{
name|skewed
operator|.
name|addToSkewedColValues
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|innerList
operator|.
name|getSkewedColValueList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|Map
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
name|colMaps
init|=
operator|new
name|HashMap
argument_list|<
name|List
argument_list|<
name|String
argument_list|>
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|StorageDescriptor
operator|.
name|SkewedInfo
operator|.
name|SkewedColValueLocationMap
name|map
range|:
name|proto
operator|.
name|getSkewedInfo
argument_list|()
operator|.
name|getSkewedColValueLocationMapsList
argument_list|()
control|)
block|{
name|colMaps
operator|.
name|put
argument_list|(
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|map
operator|.
name|getKeyList
argument_list|()
argument_list|)
argument_list|,
name|map
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|skewed
operator|.
name|setSkewedColValueLocationMaps
argument_list|(
name|colMaps
argument_list|)
expr_stmt|;
name|sd
operator|.
name|setSkewedInfo
argument_list|(
name|skewed
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasStoredAsSubDirectories
argument_list|()
condition|)
block|{
name|sd
operator|.
name|setStoredAsSubDirectories
argument_list|(
name|proto
operator|.
name|getStoredAsSubDirectories
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|sd
return|;
block|}
comment|/**    * Serialize a partition    * @param part partition object    * @param sdHash hash that is being used as a key for the enclosed storage descriptor    * @return First element is the key, second is the serialized partition    */
specifier|static
name|byte
index|[]
index|[]
name|serializePartition
parameter_list|(
name|Partition
name|part
parameter_list|,
name|byte
index|[]
name|sdHash
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|buildPartitionKey
argument_list|(
name|part
operator|.
name|getDbName
argument_list|()
argument_list|,
name|part
operator|.
name|getTableName
argument_list|()
argument_list|,
name|part
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
name|HbaseMetastoreProto
operator|.
name|Partition
operator|.
name|Builder
name|builder
init|=
name|HbaseMetastoreProto
operator|.
name|Partition
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setCreateTime
argument_list|(
name|part
operator|.
name|getCreateTime
argument_list|()
argument_list|)
operator|.
name|setLastAccessTime
argument_list|(
name|part
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setLocation
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setSdParameters
argument_list|(
name|buildParameters
argument_list|(
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setSdHash
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|sdHash
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|part
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setParameters
argument_list|(
name|buildParameters
argument_list|(
name|part
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|static
name|byte
index|[]
name|buildPartitionKey
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
block|{
name|Deque
argument_list|<
name|String
argument_list|>
name|keyParts
init|=
operator|new
name|ArrayDeque
argument_list|<
name|String
argument_list|>
argument_list|(
name|partVals
argument_list|)
decl_stmt|;
name|keyParts
operator|.
name|addFirst
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|keyParts
operator|.
name|addFirst
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
return|return
name|buildKey
argument_list|(
name|keyParts
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|keyParts
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
specifier|static
class|class
name|StorageDescriptorParts
block|{
name|byte
index|[]
name|sdHash
decl_stmt|;
name|String
name|location
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
decl_stmt|;
name|Partition
name|containingPartition
decl_stmt|;
name|Table
name|containingTable
decl_stmt|;
block|}
specifier|static
name|void
name|assembleStorageDescriptor
parameter_list|(
name|StorageDescriptor
name|sd
parameter_list|,
name|StorageDescriptorParts
name|parts
parameter_list|)
block|{
name|SharedStorageDescriptor
name|ssd
init|=
operator|new
name|SharedStorageDescriptor
argument_list|()
decl_stmt|;
name|ssd
operator|.
name|setLocation
argument_list|(
name|parts
operator|.
name|location
argument_list|)
expr_stmt|;
name|ssd
operator|.
name|setParameters
argument_list|(
name|parts
operator|.
name|parameters
argument_list|)
expr_stmt|;
name|ssd
operator|.
name|setShared
argument_list|(
name|sd
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|containingPartition
operator|!=
literal|null
condition|)
block|{
name|parts
operator|.
name|containingPartition
operator|.
name|setSd
argument_list|(
name|ssd
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parts
operator|.
name|containingTable
operator|!=
literal|null
condition|)
block|{
name|parts
operator|.
name|containingTable
operator|.
name|setSd
argument_list|(
name|ssd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Need either a partition or a table"
argument_list|)
throw|;
block|}
block|}
comment|/**    * Deserialize a partition.  This version should be used when the partition key is not already    * known (eg a scan).    * @param key the key fetched from HBase    * @param serialized the value fetched from HBase    * @return A struct that contains the partition plus parts of the storage descriptor    */
specifier|static
name|StorageDescriptorParts
name|deserializePartition
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|serialized
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|String
index|[]
name|keys
init|=
name|deserializeKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|deserializePartition
argument_list|(
name|keys
index|[
literal|0
index|]
argument_list|,
name|keys
index|[
literal|1
index|]
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|keys
argument_list|,
literal|2
argument_list|,
name|keys
operator|.
name|length
argument_list|)
argument_list|)
argument_list|,
name|serialized
argument_list|)
return|;
block|}
comment|/**    * Deserialize a partition.  This version should be used when the partition key is    * known (eg a get).    * @param dbName database name    * @param tableName table name    * @param partVals partition values    * @param serialized the value fetched from HBase    * @return A struct that contains the partition plus parts of the storage descriptor    */
specifier|static
name|StorageDescriptorParts
name|deserializePartition
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|,
name|byte
index|[]
name|serialized
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|HbaseMetastoreProto
operator|.
name|Partition
name|proto
init|=
name|HbaseMetastoreProto
operator|.
name|Partition
operator|.
name|parseFrom
argument_list|(
name|serialized
argument_list|)
decl_stmt|;
name|Partition
name|part
init|=
operator|new
name|Partition
argument_list|()
decl_stmt|;
name|StorageDescriptorParts
name|sdParts
init|=
operator|new
name|StorageDescriptorParts
argument_list|()
decl_stmt|;
name|sdParts
operator|.
name|containingPartition
operator|=
name|part
expr_stmt|;
name|part
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|part
operator|.
name|setValues
argument_list|(
name|partVals
argument_list|)
expr_stmt|;
name|part
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|proto
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|part
operator|.
name|setLastAccessTime
argument_list|(
operator|(
name|int
operator|)
name|proto
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasLocation
argument_list|()
condition|)
name|sdParts
operator|.
name|location
operator|=
name|proto
operator|.
name|getLocation
argument_list|()
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasSdParameters
argument_list|()
condition|)
name|sdParts
operator|.
name|parameters
operator|=
name|buildParameters
argument_list|(
name|proto
operator|.
name|getSdParameters
argument_list|()
argument_list|)
expr_stmt|;
name|sdParts
operator|.
name|sdHash
operator|=
name|proto
operator|.
name|getSdHash
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasParameters
argument_list|()
condition|)
name|part
operator|.
name|setParameters
argument_list|(
name|buildParameters
argument_list|(
name|proto
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sdParts
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|deserializeKey
parameter_list|(
name|byte
index|[]
name|key
parameter_list|)
block|{
name|String
name|k
init|=
operator|new
name|String
argument_list|(
name|key
argument_list|,
name|ENCODING
argument_list|)
decl_stmt|;
return|return
name|k
operator|.
name|split
argument_list|(
name|KEY_SEPARATOR_STR
argument_list|)
return|;
block|}
comment|/**    * Serialize a table    * @param table table object    * @param sdHash hash that is being used as a key for the enclosed storage descriptor    * @return First element is the key, second is the serialized table    */
specifier|static
name|byte
index|[]
index|[]
name|serializeTable
parameter_list|(
name|Table
name|table
parameter_list|,
name|byte
index|[]
name|sdHash
parameter_list|)
block|{
name|byte
index|[]
index|[]
name|result
init|=
operator|new
name|byte
index|[
literal|2
index|]
index|[]
decl_stmt|;
name|result
index|[
literal|0
index|]
operator|=
name|buildKey
argument_list|(
name|table
operator|.
name|getDbName
argument_list|()
argument_list|,
name|table
operator|.
name|getTableName
argument_list|()
argument_list|)
expr_stmt|;
name|HbaseMetastoreProto
operator|.
name|Table
operator|.
name|Builder
name|builder
init|=
name|HbaseMetastoreProto
operator|.
name|Table
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|table
operator|.
name|getOwner
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setOwner
argument_list|(
name|table
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setCreateTime
argument_list|(
name|table
operator|.
name|getCreateTime
argument_list|()
argument_list|)
operator|.
name|setLastAccessTime
argument_list|(
name|table
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
operator|.
name|setRetention
argument_list|(
name|table
operator|.
name|getRetention
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setLocation
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setSdParameters
argument_list|(
name|buildParameters
argument_list|(
name|table
operator|.
name|getSd
argument_list|()
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setSdHash
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|sdHash
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAllPartitionKeys
argument_list|(
name|convertFieldSchemaListToProto
argument_list|(
name|table
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|.
name|getParameters
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setParameters
argument_list|(
name|buildParameters
argument_list|(
name|table
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|.
name|getViewOriginalText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setViewOriginalText
argument_list|(
name|table
operator|.
name|getViewOriginalText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|.
name|getViewExpandedText
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setViewExpandedText
argument_list|(
name|table
operator|.
name|getViewExpandedText
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|table
operator|.
name|getTableType
argument_list|()
operator|!=
literal|null
condition|)
name|builder
operator|.
name|setTableType
argument_list|(
name|table
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|table
operator|.
name|getPrivileges
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setPrivileges
argument_list|(
name|buildPrincipalPrivilegeSet
argument_list|(
name|table
operator|.
name|getPrivileges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setIsTemporary
argument_list|(
name|table
operator|.
name|isTemporary
argument_list|()
argument_list|)
expr_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|builder
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**    * Deserialize a table.  This version should be used when the table key is not already    * known (eg a scan).    * @param key the key fetched from HBase    * @param serialized the value fetched from HBase    * @return A struct that contains the table plus parts of the storage descriptor    */
specifier|static
name|StorageDescriptorParts
name|deserializeTable
parameter_list|(
name|byte
index|[]
name|key
parameter_list|,
name|byte
index|[]
name|serialized
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|String
index|[]
name|keys
init|=
name|deserializeKey
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|deserializeTable
argument_list|(
name|keys
index|[
literal|0
index|]
argument_list|,
name|keys
index|[
literal|1
index|]
argument_list|,
name|serialized
argument_list|)
return|;
block|}
comment|/**    * Deserialize a table.  This version should be used when the table key is    * known (eg a get).    * @param dbName database name    * @param tableName table name    * @param serialized the value fetched from HBase    * @return A struct that contains the partition plus parts of the storage descriptor    */
specifier|static
name|StorageDescriptorParts
name|deserializeTable
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|byte
index|[]
name|serialized
parameter_list|)
throws|throws
name|InvalidProtocolBufferException
block|{
name|HbaseMetastoreProto
operator|.
name|Table
name|proto
init|=
name|HbaseMetastoreProto
operator|.
name|Table
operator|.
name|parseFrom
argument_list|(
name|serialized
argument_list|)
decl_stmt|;
name|Table
name|table
init|=
operator|new
name|Table
argument_list|()
decl_stmt|;
name|StorageDescriptorParts
name|sdParts
init|=
operator|new
name|StorageDescriptorParts
argument_list|()
decl_stmt|;
name|sdParts
operator|.
name|containingTable
operator|=
name|table
expr_stmt|;
name|table
operator|.
name|setDbName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|table
operator|.
name|setTableName
argument_list|(
name|tableName
argument_list|)
expr_stmt|;
name|table
operator|.
name|setOwner
argument_list|(
name|proto
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setCreateTime
argument_list|(
operator|(
name|int
operator|)
name|proto
operator|.
name|getCreateTime
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setLastAccessTime
argument_list|(
operator|(
name|int
operator|)
name|proto
operator|.
name|getLastAccessTime
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setRetention
argument_list|(
operator|(
name|int
operator|)
name|proto
operator|.
name|getRetention
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasLocation
argument_list|()
condition|)
name|sdParts
operator|.
name|location
operator|=
name|proto
operator|.
name|getLocation
argument_list|()
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasSdParameters
argument_list|()
condition|)
name|sdParts
operator|.
name|parameters
operator|=
name|buildParameters
argument_list|(
name|proto
operator|.
name|getSdParameters
argument_list|()
argument_list|)
expr_stmt|;
name|sdParts
operator|.
name|sdHash
operator|=
name|proto
operator|.
name|getSdHash
argument_list|()
operator|.
name|toByteArray
argument_list|()
expr_stmt|;
name|table
operator|.
name|setPartitionKeys
argument_list|(
name|convertFieldSchemaListFromProto
argument_list|(
name|proto
operator|.
name|getPartitionKeysList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|.
name|setParameters
argument_list|(
name|buildParameters
argument_list|(
name|proto
operator|.
name|getParameters
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasViewOriginalText
argument_list|()
condition|)
name|table
operator|.
name|setViewOriginalText
argument_list|(
name|proto
operator|.
name|getViewOriginalText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasViewExpandedText
argument_list|()
condition|)
name|table
operator|.
name|setViewExpandedText
argument_list|(
name|proto
operator|.
name|getViewExpandedText
argument_list|()
argument_list|)
expr_stmt|;
name|table
operator|.
name|setTableType
argument_list|(
name|proto
operator|.
name|getTableType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasPrivileges
argument_list|()
condition|)
block|{
name|table
operator|.
name|setPrivileges
argument_list|(
name|buildPrincipalPrivilegeSet
argument_list|(
name|proto
operator|.
name|getPrivileges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|hasIsTemporary
argument_list|()
condition|)
name|table
operator|.
name|setTemporary
argument_list|(
name|proto
operator|.
name|getIsTemporary
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|sdParts
return|;
block|}
specifier|static
name|byte
index|[]
name|serializeBloomFilter
parameter_list|(
name|String
name|dbName
parameter_list|,
name|String
name|tableName
parameter_list|,
name|BloomFilter
name|bloom
parameter_list|)
block|{
name|long
index|[]
name|bitSet
init|=
name|bloom
operator|.
name|getBitSet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Long
argument_list|>
name|bits
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|bitSet
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bitSet
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|bits
operator|.
name|add
argument_list|(
name|bitSet
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|HbaseMetastoreProto
operator|.
name|AggrStatsBloomFilter
operator|.
name|BloomFilter
name|protoBloom
init|=
name|HbaseMetastoreProto
operator|.
name|AggrStatsBloomFilter
operator|.
name|BloomFilter
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNumBits
argument_list|(
name|bloom
operator|.
name|getBitSize
argument_list|()
argument_list|)
operator|.
name|setNumFuncs
argument_list|(
name|bloom
operator|.
name|getNumHashFunctions
argument_list|()
argument_list|)
operator|.
name|addAllBits
argument_list|(
name|bits
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|HbaseMetastoreProto
operator|.
name|AggrStatsBloomFilter
name|proto
init|=
name|HbaseMetastoreProto
operator|.
name|AggrStatsBloomFilter
operator|.
name|newBuilder
argument_list|()
operator|.
name|setDbName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|dbName
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setTableName
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|tableName
operator|.
name|getBytes
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
argument_list|)
operator|.
name|setBloomFilter
argument_list|(
name|protoBloom
argument_list|)
operator|.
name|setAggregatedAt
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
return|return
name|proto
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|HbaseMetastoreProto
operator|.
name|ColumnStats
name|protoBufStatsForOneColumn
parameter_list|(
name|ColumnStatistics
name|partitionColumnStats
parameter_list|,
name|ColumnStatisticsObj
name|colStats
parameter_list|)
throws|throws
name|IOException
block|{
name|HbaseMetastoreProto
operator|.
name|ColumnStats
operator|.
name|Builder
name|builder
init|=
name|HbaseMetastoreProto
operator|.
name|ColumnStats
operator|.
name|newBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|partitionColumnStats
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setLastAnalyzed
argument_list|(
name|partitionColumnStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
expr_stmt|;
block|}
assert|assert
name|colStats
operator|.
name|getColType
argument_list|()
operator|!=
literal|null
assert|;
name|builder
operator|.
name|setColumnType
argument_list|(
name|colStats
operator|.
name|getColType
argument_list|()
argument_list|)
expr_stmt|;
assert|assert
name|colStats
operator|.
name|getColName
argument_list|()
operator|!=
literal|null
assert|;
name|builder
operator|.
name|setColumnName
argument_list|(
name|colStats
operator|.
name|getColName
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|colData
init|=
name|colStats
operator|.
name|getStatsData
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|colData
operator|.
name|getSetField
argument_list|()
condition|)
block|{
case|case
name|BOOLEAN_STATS
case|:
name|BooleanColumnStatsData
name|boolData
init|=
name|colData
operator|.
name|getBooleanStats
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNumNulls
argument_list|(
name|boolData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBoolStats
argument_list|(
name|HbaseMetastoreProto
operator|.
name|ColumnStats
operator|.
name|BooleanStats
operator|.
name|newBuilder
argument_list|()
operator|.
name|setNumTrues
argument_list|(
name|boolData
operator|.
name|getNumTrues
argument_list|()
argument_list|)
operator|.
name|setNumFalses
argument_list|(
name|boolData
operator|.
name|getNumFalses
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|LONG_STATS
case|:
name|LongColumnStatsData
name|longData
init|=
name|colData
operator|.
name|getLongStats
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNumNulls
argument_list|(
name|longData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNumDistinctValues
argument_list|(
name|longData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setLongStats
argument_list|(
name|HbaseMetastoreProto
operator|.
name|ColumnStats
operator|.
name|LongStats
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLowValue
argument_list|(
name|longData
operator|.
name|getLowValue
argument_list|()
argument_list|)
operator|.
name|setHighValue
argument_list|(
name|longData
operator|.
name|getHighValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DOUBLE_STATS
case|:
name|DoubleColumnStatsData
name|doubleData
init|=
name|colData
operator|.
name|getDoubleStats
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNumNulls
argument_list|(
name|doubleData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNumDistinctValues
argument_list|(
name|doubleData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDoubleStats
argument_list|(
name|HbaseMetastoreProto
operator|.
name|ColumnStats
operator|.
name|DoubleStats
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLowValue
argument_list|(
name|doubleData
operator|.
name|getLowValue
argument_list|()
argument_list|)
operator|.
name|setHighValue
argument_list|(
name|doubleData
operator|.
name|getHighValue
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|STRING_STATS
case|:
name|StringColumnStatsData
name|stringData
init|=
name|colData
operator|.
name|getStringStats
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNumNulls
argument_list|(
name|stringData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNumDistinctValues
argument_list|(
name|stringData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setStringStats
argument_list|(
name|HbaseMetastoreProto
operator|.
name|ColumnStats
operator|.
name|StringStats
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMaxColLength
argument_list|(
name|stringData
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
operator|.
name|setAvgColLength
argument_list|(
name|stringData
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|BINARY_STATS
case|:
name|BinaryColumnStatsData
name|binaryData
init|=
name|colData
operator|.
name|getBinaryStats
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNumNulls
argument_list|(
name|binaryData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setBinaryStats
argument_list|(
name|HbaseMetastoreProto
operator|.
name|ColumnStats
operator|.
name|StringStats
operator|.
name|newBuilder
argument_list|()
operator|.
name|setMaxColLength
argument_list|(
name|binaryData
operator|.
name|getMaxColLen
argument_list|()
argument_list|)
operator|.
name|setAvgColLength
argument_list|(
name|binaryData
operator|.
name|getAvgColLen
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|DECIMAL_STATS
case|:
name|DecimalColumnStatsData
name|decimalData
init|=
name|colData
operator|.
name|getDecimalStats
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setNumNulls
argument_list|(
name|decimalData
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setNumDistinctValues
argument_list|(
name|decimalData
operator|.
name|getNumDVs
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setDecimalStats
argument_list|(
name|HbaseMetastoreProto
operator|.
name|ColumnStats
operator|.
name|DecimalStats
operator|.
name|newBuilder
argument_list|()
operator|.
name|setLowValue
argument_list|(
name|HbaseMetastoreProto
operator|.
name|ColumnStats
operator|.
name|DecimalStats
operator|.
name|Decimal
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUnscaled
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|decimalData
operator|.
name|getLowValue
argument_list|()
operator|.
name|getUnscaled
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setScale
argument_list|(
name|decimalData
operator|.
name|getLowValue
argument_list|()
operator|.
name|getScale
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
operator|.
name|setHighValue
argument_list|(
name|HbaseMetastoreProto
operator|.
name|ColumnStats
operator|.
name|DecimalStats
operator|.
name|Decimal
operator|.
name|newBuilder
argument_list|()
operator|.
name|setUnscaled
argument_list|(
name|ByteString
operator|.
name|copyFrom
argument_list|(
name|decimalData
operator|.
name|getHighValue
argument_list|()
operator|.
name|getUnscaled
argument_list|()
argument_list|)
argument_list|)
operator|.
name|setScale
argument_list|(
name|decimalData
operator|.
name|getHighValue
argument_list|()
operator|.
name|getScale
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Woh, bad.  Unknown stats type!"
argument_list|)
throw|;
block|}
return|return
name|builder
operator|.
name|build
argument_list|()
return|;
block|}
specifier|static
name|byte
index|[]
name|serializeStatsForOneColumn
parameter_list|(
name|ColumnStatistics
name|partitionColumnStats
parameter_list|,
name|ColumnStatisticsObj
name|colStats
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|protoBufStatsForOneColumn
argument_list|(
name|partitionColumnStats
argument_list|,
name|colStats
argument_list|)
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|static
name|ColumnStatisticsObj
name|deserializeStatsForOneColumn
parameter_list|(
name|ColumnStatistics
name|partitionColumnStats
parameter_list|,
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|HbaseMetastoreProto
operator|.
name|ColumnStats
name|proto
init|=
name|HbaseMetastoreProto
operator|.
name|ColumnStats
operator|.
name|parseFrom
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
return|return
name|statsForOneColumnFromProtoBuf
argument_list|(
name|partitionColumnStats
argument_list|,
name|proto
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|ColumnStatisticsObj
name|statsForOneColumnFromProtoBuf
parameter_list|(
name|ColumnStatistics
name|partitionColumnStats
parameter_list|,
name|HbaseMetastoreProto
operator|.
name|ColumnStats
name|proto
parameter_list|)
throws|throws
name|IOException
block|{
name|ColumnStatisticsObj
name|colStats
init|=
operator|new
name|ColumnStatisticsObj
argument_list|()
decl_stmt|;
name|long
name|lastAnalyzed
init|=
name|proto
operator|.
name|getLastAnalyzed
argument_list|()
decl_stmt|;
if|if
condition|(
name|partitionColumnStats
operator|!=
literal|null
condition|)
block|{
name|partitionColumnStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|setLastAnalyzed
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|lastAnalyzed
argument_list|,
name|partitionColumnStats
operator|.
name|getStatsDesc
argument_list|()
operator|.
name|getLastAnalyzed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|colStats
operator|.
name|setColType
argument_list|(
name|proto
operator|.
name|getColumnType
argument_list|()
argument_list|)
expr_stmt|;
name|colStats
operator|.
name|setColName
argument_list|(
name|proto
operator|.
name|getColumnName
argument_list|()
argument_list|)
expr_stmt|;
name|ColumnStatisticsData
name|colData
init|=
operator|new
name|ColumnStatisticsData
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|hasBoolStats
argument_list|()
condition|)
block|{
name|BooleanColumnStatsData
name|boolData
init|=
operator|new
name|BooleanColumnStatsData
argument_list|()
decl_stmt|;
name|boolData
operator|.
name|setNumTrues
argument_list|(
name|proto
operator|.
name|getBoolStats
argument_list|()
operator|.
name|getNumTrues
argument_list|()
argument_list|)
expr_stmt|;
name|boolData
operator|.
name|setNumFalses
argument_list|(
name|proto
operator|.
name|getBoolStats
argument_list|()
operator|.
name|getNumFalses
argument_list|()
argument_list|)
expr_stmt|;
name|boolData
operator|.
name|setNumNulls
argument_list|(
name|proto
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|.
name|setBooleanStats
argument_list|(
name|boolData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|hasLongStats
argument_list|()
condition|)
block|{
name|LongColumnStatsData
name|longData
init|=
operator|new
name|LongColumnStatsData
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getLongStats
argument_list|()
operator|.
name|hasLowValue
argument_list|()
condition|)
block|{
name|longData
operator|.
name|setLowValue
argument_list|(
name|proto
operator|.
name|getLongStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getLongStats
argument_list|()
operator|.
name|hasHighValue
argument_list|()
condition|)
block|{
name|longData
operator|.
name|setHighValue
argument_list|(
name|proto
operator|.
name|getLongStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|longData
operator|.
name|setNumNulls
argument_list|(
name|proto
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|longData
operator|.
name|setNumDVs
argument_list|(
name|proto
operator|.
name|getNumDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|.
name|setLongStats
argument_list|(
name|longData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|hasDoubleStats
argument_list|()
condition|)
block|{
name|DoubleColumnStatsData
name|doubleData
init|=
operator|new
name|DoubleColumnStatsData
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|hasLowValue
argument_list|()
condition|)
block|{
name|doubleData
operator|.
name|setLowValue
argument_list|(
name|proto
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|hasHighValue
argument_list|()
condition|)
block|{
name|doubleData
operator|.
name|setHighValue
argument_list|(
name|proto
operator|.
name|getDoubleStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|doubleData
operator|.
name|setNumNulls
argument_list|(
name|proto
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|doubleData
operator|.
name|setNumDVs
argument_list|(
name|proto
operator|.
name|getNumDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|.
name|setDoubleStats
argument_list|(
name|doubleData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|hasStringStats
argument_list|()
condition|)
block|{
name|StringColumnStatsData
name|stringData
init|=
operator|new
name|StringColumnStatsData
argument_list|()
decl_stmt|;
name|stringData
operator|.
name|setMaxColLen
argument_list|(
name|proto
operator|.
name|getStringStats
argument_list|()
operator|.
name|getMaxColLength
argument_list|()
argument_list|)
expr_stmt|;
name|stringData
operator|.
name|setAvgColLen
argument_list|(
name|proto
operator|.
name|getStringStats
argument_list|()
operator|.
name|getAvgColLength
argument_list|()
argument_list|)
expr_stmt|;
name|stringData
operator|.
name|setNumNulls
argument_list|(
name|proto
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|stringData
operator|.
name|setNumDVs
argument_list|(
name|proto
operator|.
name|getNumDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|.
name|setStringStats
argument_list|(
name|stringData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|hasBinaryStats
argument_list|()
condition|)
block|{
name|BinaryColumnStatsData
name|binaryData
init|=
operator|new
name|BinaryColumnStatsData
argument_list|()
decl_stmt|;
name|binaryData
operator|.
name|setMaxColLen
argument_list|(
name|proto
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getMaxColLength
argument_list|()
argument_list|)
expr_stmt|;
name|binaryData
operator|.
name|setAvgColLen
argument_list|(
name|proto
operator|.
name|getBinaryStats
argument_list|()
operator|.
name|getAvgColLength
argument_list|()
argument_list|)
expr_stmt|;
name|binaryData
operator|.
name|setNumNulls
argument_list|(
name|proto
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|.
name|setBinaryStats
argument_list|(
name|binaryData
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|proto
operator|.
name|hasDecimalStats
argument_list|()
condition|)
block|{
name|DecimalColumnStatsData
name|decimalData
init|=
operator|new
name|DecimalColumnStatsData
argument_list|()
decl_stmt|;
if|if
condition|(
name|proto
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|hasHighValue
argument_list|()
condition|)
block|{
name|Decimal
name|hiVal
init|=
operator|new
name|Decimal
argument_list|()
decl_stmt|;
name|hiVal
operator|.
name|setUnscaled
argument_list|(
name|proto
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
operator|.
name|getUnscaled
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|hiVal
operator|.
name|setScale
argument_list|(
operator|(
name|short
operator|)
name|proto
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getHighValue
argument_list|()
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
name|decimalData
operator|.
name|setHighValue
argument_list|(
name|hiVal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|proto
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|hasLowValue
argument_list|()
condition|)
block|{
name|Decimal
name|loVal
init|=
operator|new
name|Decimal
argument_list|()
decl_stmt|;
name|loVal
operator|.
name|setUnscaled
argument_list|(
name|proto
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
operator|.
name|getUnscaled
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|loVal
operator|.
name|setScale
argument_list|(
operator|(
name|short
operator|)
name|proto
operator|.
name|getDecimalStats
argument_list|()
operator|.
name|getLowValue
argument_list|()
operator|.
name|getScale
argument_list|()
argument_list|)
expr_stmt|;
name|decimalData
operator|.
name|setLowValue
argument_list|(
name|loVal
argument_list|)
expr_stmt|;
block|}
name|decimalData
operator|.
name|setNumNulls
argument_list|(
name|proto
operator|.
name|getNumNulls
argument_list|()
argument_list|)
expr_stmt|;
name|decimalData
operator|.
name|setNumDVs
argument_list|(
name|proto
operator|.
name|getNumDistinctValues
argument_list|()
argument_list|)
expr_stmt|;
name|colData
operator|.
name|setDecimalStats
argument_list|(
name|decimalData
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Woh, bad.  Unknown stats type!"
argument_list|)
throw|;
block|}
name|colStats
operator|.
name|setStatsData
argument_list|(
name|colData
argument_list|)
expr_stmt|;
return|return
name|colStats
return|;
block|}
specifier|static
name|byte
index|[]
name|serializeAggrStats
parameter_list|(
name|AggrStats
name|aggrStats
parameter_list|)
throws|throws
name|IOException
block|{
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|ColumnStats
argument_list|>
name|protoColStats
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|aggrStats
operator|.
name|getColStatsSize
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ColumnStatisticsObj
name|cso
range|:
name|aggrStats
operator|.
name|getColStats
argument_list|()
control|)
block|{
name|protoColStats
operator|.
name|add
argument_list|(
name|protoBufStatsForOneColumn
argument_list|(
literal|null
argument_list|,
name|cso
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|HbaseMetastoreProto
operator|.
name|AggrStats
operator|.
name|newBuilder
argument_list|()
operator|.
name|setPartsFound
argument_list|(
name|aggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
operator|.
name|addAllColStats
argument_list|(
name|protoColStats
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
specifier|static
name|AggrStats
name|deserializeAggrStats
parameter_list|(
name|byte
index|[]
name|serialized
parameter_list|)
throws|throws
name|IOException
block|{
name|HbaseMetastoreProto
operator|.
name|AggrStats
name|protoAggrStats
init|=
name|HbaseMetastoreProto
operator|.
name|AggrStats
operator|.
name|parseFrom
argument_list|(
name|serialized
argument_list|)
decl_stmt|;
name|AggrStats
name|aggrStats
init|=
operator|new
name|AggrStats
argument_list|()
decl_stmt|;
name|aggrStats
operator|.
name|setPartsFound
argument_list|(
name|protoAggrStats
operator|.
name|getPartsFound
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|ColumnStats
name|protoCS
range|:
name|protoAggrStats
operator|.
name|getColStatsList
argument_list|()
control|)
block|{
name|aggrStats
operator|.
name|addToColStats
argument_list|(
name|statsForOneColumnFromProtoBuf
argument_list|(
literal|null
argument_list|,
name|protoCS
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|aggrStats
return|;
block|}
comment|/**    * @param keyStart byte array representing the start prefix    * @return byte array corresponding to the next possible prefix    */
specifier|static
name|byte
index|[]
name|getEndPrefix
parameter_list|(
name|byte
index|[]
name|keyStart
parameter_list|)
block|{
if|if
condition|(
name|keyStart
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Since this is a prefix and not full key, the usual hbase technique of
comment|// appending 0 byte does not work. Instead of that, increment the last byte.
name|byte
index|[]
name|keyEnd
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|keyStart
argument_list|,
name|keyStart
operator|.
name|length
argument_list|)
decl_stmt|;
name|keyEnd
index|[
name|keyEnd
operator|.
name|length
operator|-
literal|1
index|]
operator|++
expr_stmt|;
return|return
name|keyEnd
return|;
block|}
block|}
end_class

end_unit

