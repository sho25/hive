begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_comment
comment|// hadoop stuff
end_comment

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|MetaStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|UnknownTableException
import|;
end_import

begin_class
specifier|public
class|class
name|DB
block|{
specifier|protected
name|Path
name|whRoot_
decl_stmt|;
specifier|private
name|String
name|dbName_
decl_stmt|;
specifier|private
name|Configuration
name|conf_
decl_stmt|;
specifier|private
name|Path
name|whPath_
decl_stmt|;
name|FileStore
name|store_
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|MetaStore
operator|.
name|LogKey
argument_list|)
decl_stmt|;
specifier|public
name|Path
name|getPath
parameter_list|()
block|{
return|return
name|whPath_
return|;
block|}
static|static
block|{
comment|//        whRoot_ = new Path(FileSystem.getDefaultUri(new Configuration())); - not till 0.17
block|}
specifier|public
name|DB
parameter_list|(
name|String
name|dbName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|UnknownDBException
throws|,
name|MetaException
block|{
name|String
name|whRootString
init|=
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
decl_stmt|;
if|if
condition|(
name|whRootString
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
operator|.
name|varname
operator|+
literal|" is not set in the config"
argument_list|)
throw|;
block|}
name|whRoot_
operator|=
operator|new
name|Path
argument_list|(
name|whRootString
argument_list|)
expr_stmt|;
name|conf_
operator|=
name|conf
expr_stmt|;
name|dbName_
operator|=
name|dbName
expr_stmt|;
name|whPath_
operator|=
name|dbName
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
condition|?
name|whRoot_
else|:
operator|new
name|Path
argument_list|(
name|whRoot_
argument_list|,
name|dbName
operator|+
literal|".db"
argument_list|)
expr_stmt|;
name|store_
operator|=
operator|new
name|FileStore
argument_list|(
name|conf
argument_list|)
expr_stmt|;
comment|// a little bit of error checking...
try|try
block|{
name|FileSystem
name|fs
init|=
name|whPath_
operator|.
name|getFileSystem
argument_list|(
name|conf
argument_list|)
decl_stmt|;
if|if
condition|(
name|fs
operator|.
name|exists
argument_list|(
name|whPath_
argument_list|)
operator|==
literal|false
operator|||
name|store_
operator|.
name|dbExists
argument_list|(
name|dbName
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|UnknownDBException
argument_list|(
literal|"name="
operator|+
name|dbName
operator|+
literal|",whPath="
operator|+
name|whPath_
operator|+
literal|" "
operator|+
name|fs
operator|.
name|exists
argument_list|(
name|whPath_
argument_list|)
operator|+
literal|","
operator|+
name|store_
operator|.
name|dbExists
argument_list|(
name|dbName
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Path
name|getDefaultTablePath
parameter_list|(
name|String
name|tableName
parameter_list|)
block|{
return|return
name|getDefaultTablePath
argument_list|(
name|tableName
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
return|;
block|}
specifier|static
specifier|public
name|Path
name|getDefaultTablePath
parameter_list|(
name|String
name|tableName
parameter_list|,
name|Configuration
name|conf
parameter_list|)
block|{
try|try
block|{
return|return
operator|new
name|DB
argument_list|(
name|MetaStore
operator|.
name|DefaultDB
argument_list|,
name|conf
argument_list|)
operator|.
name|getDefaultTablePath
argument_list|(
name|tableName
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnknownDBException
name|e
parameter_list|)
block|{
comment|// impossible
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MetaException
name|e
parameter_list|)
block|{
comment|// impossible
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|dbName_
return|;
block|}
specifier|public
name|Path
name|getDefaultTablePath
parameter_list|(
name|String
name|tableName
parameter_list|,
name|String
name|partition
parameter_list|)
block|{
name|Path
name|ret
init|=
operator|new
name|Path
argument_list|(
name|whPath_
argument_list|,
name|tableName
argument_list|)
decl_stmt|;
if|if
condition|(
name|partition
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
operator|new
name|Path
argument_list|(
name|ret
argument_list|,
name|partition
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/**    * getTables    *    * Looks at metastore directories    *    * @param tablePattern    * @return the list of tables    * @exception MetaException    *    */
specifier|public
name|ArrayList
argument_list|<
name|String
argument_list|>
name|getTables
parameter_list|(
name|String
name|tablePattern
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|store_
operator|.
name|getTablesByPattern
argument_list|(
name|this
argument_list|,
name|tablePattern
argument_list|)
return|;
block|}
specifier|public
name|Table
name|getTable
parameter_list|(
name|String
name|tableName
parameter_list|,
name|boolean
name|o_rdonly
parameter_list|)
throws|throws
name|MetaException
throws|,
name|UnknownTableException
block|{
if|if
condition|(
name|store_
operator|.
name|tableExists
argument_list|(
name|this
operator|.
name|dbName_
argument_list|,
name|tableName
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|UnknownTableException
argument_list|(
name|tableName
operator|+
literal|" doesn't exist in database "
operator|+
name|dbName_
argument_list|)
throw|;
block|}
return|return
operator|new
name|Table
argument_list|(
name|this
argument_list|,
name|tableName
argument_list|,
name|conf_
argument_list|,
name|o_rdonly
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|tableExists
parameter_list|(
name|String
name|tableName
parameter_list|)
throws|throws
name|MetaException
block|{
return|return
name|store_
operator|.
name|tableExists
argument_list|(
name|dbName_
argument_list|,
name|tableName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|DB
name|createDB
parameter_list|(
name|String
name|name
parameter_list|,
name|Configuration
name|conf
parameter_list|)
throws|throws
name|MetaException
block|{
try|try
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"default"
argument_list|)
operator|||
name|MetaStoreUtils
operator|.
name|validateName
argument_list|(
name|name
argument_list|)
operator|==
literal|false
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"invalid db name: "
operator|+
name|name
operator|+
literal|" - allowed characters are \\w and _ and default is reserved"
argument_list|)
throw|;
block|}
operator|new
name|FileStore
argument_list|(
name|conf
argument_list|)
operator|.
name|createDatabase
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Path
name|whRoot
init|=
operator|new
name|Path
argument_list|(
name|HiveConf
operator|.
name|getVar
argument_list|(
name|conf
argument_list|,
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTOREWAREHOUSE
argument_list|)
argument_list|,
name|name
operator|+
literal|".db"
argument_list|)
decl_stmt|;
name|FileSystem
name|fs
init|=
name|FileSystem
operator|.
name|get
argument_list|(
name|whRoot
operator|.
name|toUri
argument_list|()
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|fs
operator|.
name|mkdirs
argument_list|(
name|whRoot
argument_list|)
expr_stmt|;
return|return
operator|new
name|DB
argument_list|(
name|name
argument_list|,
name|conf
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

begin_empty_stmt
empty_stmt|;
end_empty_stmt

end_unit

