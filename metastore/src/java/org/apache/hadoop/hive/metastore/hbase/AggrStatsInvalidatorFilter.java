begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|hbase
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|protobuf
operator|.
name|InvalidProtocolBufferException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|Cell
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|CellUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|exceptions
operator|.
name|DeserializationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hbase
operator|.
name|filter
operator|.
name|FilterBase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hive
operator|.
name|common
operator|.
name|util
operator|.
name|BloomFilter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Filter for scanning aggregates stats table  */
end_comment

begin_class
specifier|public
class|class
name|AggrStatsInvalidatorFilter
extends|extends
name|FilterBase
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AggrStatsInvalidatorFilter
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|HbaseMetastoreProto
operator|.
name|AggrStatsInvalidatorFilter
operator|.
name|Entry
argument_list|>
name|entries
decl_stmt|;
specifier|private
specifier|final
name|long
name|runEvery
decl_stmt|;
specifier|private
specifier|final
name|long
name|maxCacheEntryLife
decl_stmt|;
comment|// This class is not serializable, so I realize transient doesn't mean anything.  It's just to
comment|// comunicate that we don't serialize this and ship it across to the filter on the other end.
comment|// We use the time the filter is actually instantiated in HBase.
specifier|private
specifier|transient
name|long
name|now
decl_stmt|;
specifier|public
specifier|static
name|Filter
name|parseFrom
parameter_list|(
name|byte
index|[]
name|serialized
parameter_list|)
throws|throws
name|DeserializationException
block|{
try|try
block|{
return|return
operator|new
name|AggrStatsInvalidatorFilter
argument_list|(
name|HbaseMetastoreProto
operator|.
name|AggrStatsInvalidatorFilter
operator|.
name|parseFrom
argument_list|(
name|serialized
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InvalidProtocolBufferException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DeserializationException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * @param proto Protocol buffer representation of this filter.    */
name|AggrStatsInvalidatorFilter
parameter_list|(
name|HbaseMetastoreProto
operator|.
name|AggrStatsInvalidatorFilter
name|proto
parameter_list|)
block|{
name|this
operator|.
name|entries
operator|=
name|proto
operator|.
name|getToInvalidateList
argument_list|()
expr_stmt|;
name|this
operator|.
name|runEvery
operator|=
name|proto
operator|.
name|getRunEvery
argument_list|()
expr_stmt|;
name|this
operator|.
name|maxCacheEntryLife
operator|=
name|proto
operator|.
name|getMaxCacheEntryLife
argument_list|()
expr_stmt|;
name|now
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|HbaseMetastoreProto
operator|.
name|AggrStatsInvalidatorFilter
operator|.
name|newBuilder
argument_list|()
operator|.
name|addAllToInvalidate
argument_list|(
name|entries
argument_list|)
operator|.
name|setRunEvery
argument_list|(
name|runEvery
argument_list|)
operator|.
name|setMaxCacheEntryLife
argument_list|(
name|maxCacheEntryLife
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|toByteArray
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|filterAllRemaining
parameter_list|()
throws|throws
name|IOException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|ReturnCode
name|filterKeyValue
parameter_list|(
name|Cell
name|cell
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Is this the partition we want?
if|if
condition|(
name|Arrays
operator|.
name|equals
argument_list|(
name|CellUtil
operator|.
name|cloneQualifier
argument_list|(
name|cell
argument_list|)
argument_list|,
name|HBaseReadWrite
operator|.
name|AGGR_STATS_BLOOM_COL
argument_list|)
condition|)
block|{
name|HbaseMetastoreProto
operator|.
name|AggrStatsBloomFilter
name|fromCol
init|=
name|HbaseMetastoreProto
operator|.
name|AggrStatsBloomFilter
operator|.
name|parseFrom
argument_list|(
name|CellUtil
operator|.
name|cloneValue
argument_list|(
name|cell
argument_list|)
argument_list|)
decl_stmt|;
name|BloomFilter
name|bloom
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|maxCacheEntryLife
operator|>
name|fromCol
operator|.
name|getAggregatedAt
argument_list|()
condition|)
block|{
comment|// It's too old, kill it regardless of whether we were asked to or not.
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
elseif|else
if|if
condition|(
name|now
operator|-
name|runEvery
operator|*
literal|2
operator|<=
name|fromCol
operator|.
name|getAggregatedAt
argument_list|()
condition|)
block|{
comment|// It's too new.  We might be stomping on something that was just created.  Skip it.
return|return
name|ReturnCode
operator|.
name|NEXT_ROW
return|;
block|}
else|else
block|{
comment|// Look through each of our entries and see if any of them match.
for|for
control|(
name|HbaseMetastoreProto
operator|.
name|AggrStatsInvalidatorFilter
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
comment|// First check if we match on db and table match
if|if
condition|(
name|entry
operator|.
name|getDbName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromCol
operator|.
name|getDbName
argument_list|()
argument_list|)
operator|&&
name|entry
operator|.
name|getTableName
argument_list|()
operator|.
name|equals
argument_list|(
name|fromCol
operator|.
name|getTableName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|bloom
operator|==
literal|null
condition|)
block|{
comment|// Now, reconstitute the bloom filter and probe it with each of our partition names
name|bloom
operator|=
operator|new
name|BloomFilter
argument_list|(
name|fromCol
operator|.
name|getBloomFilter
argument_list|()
operator|.
name|getBitsList
argument_list|()
argument_list|,
name|fromCol
operator|.
name|getBloomFilter
argument_list|()
operator|.
name|getNumBits
argument_list|()
argument_list|,
name|fromCol
operator|.
name|getBloomFilter
argument_list|()
operator|.
name|getNumFuncs
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|bloom
operator|.
name|test
argument_list|(
name|entry
operator|.
name|getPartName
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|)
condition|)
block|{
comment|// This is most likely a match, so mark it and quit looking.
return|return
name|ReturnCode
operator|.
name|INCLUDE
return|;
block|}
block|}
block|}
block|}
return|return
name|ReturnCode
operator|.
name|NEXT_ROW
return|;
block|}
else|else
block|{
return|return
name|ReturnCode
operator|.
name|NEXT_COL
return|;
block|}
block|}
block|}
end_class

end_unit

