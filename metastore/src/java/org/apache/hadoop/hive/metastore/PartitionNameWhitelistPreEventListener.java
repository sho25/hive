begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|conf
operator|.
name|HiveConf
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreAddPartitionEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|events
operator|.
name|PreEventContext
import|;
end_import

begin_class
specifier|public
class|class
name|PartitionNameWhitelistPreEventListener
extends|extends
name|MetaStorePreEventListener
block|{
comment|// When enabled, this hook causes an exception to be thrown
comment|// if partition fields contain characters which are not
comment|// matched by the whitelist
specifier|private
specifier|static
name|String
name|regex
decl_stmt|;
specifier|private
specifier|static
name|Pattern
name|pattern
decl_stmt|;
specifier|public
name|PartitionNameWhitelistPreEventListener
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|super
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|regex
operator|=
name|config
operator|.
name|get
argument_list|(
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PARTITION_NAME_WHITELIST_PATTERN
operator|.
name|varname
argument_list|)
expr_stmt|;
name|pattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|regex
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|PreEventContext
name|event
parameter_list|)
throws|throws
name|MetaException
throws|,
name|NoSuchObjectException
throws|,
name|InvalidOperationException
block|{
switch|switch
condition|(
name|event
operator|.
name|getEventType
argument_list|()
condition|)
block|{
case|case
name|ADD_PARTITION
case|:
name|checkWhitelist
argument_list|(
operator|(
operator|(
name|PreAddPartitionEvent
operator|)
name|event
operator|)
operator|.
name|getPartition
argument_list|()
operator|.
name|getValues
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
specifier|private
specifier|static
name|void
name|checkWhitelist
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|partVals
parameter_list|)
throws|throws
name|MetaException
block|{
for|for
control|(
name|String
name|partVal
range|:
name|partVals
control|)
block|{
if|if
condition|(
operator|!
name|pattern
operator|.
name|matcher
argument_list|(
name|partVal
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Partition value '"
operator|+
name|partVal
operator|+
literal|"' contains a character "
operator|+
literal|"not matched by whitelist pattern '"
operator|+
name|regex
operator|+
literal|"'.  "
operator|+
literal|"(configure with "
operator|+
name|HiveConf
operator|.
name|ConfVars
operator|.
name|METASTORE_PARTITION_NAME_WHITELIST_PATTERN
operator|.
name|varname
operator|+
literal|")"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

