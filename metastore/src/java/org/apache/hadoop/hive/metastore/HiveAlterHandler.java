begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|conf
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|fs
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidObjectException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|InvalidOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|MetaException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Partition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|Table
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|hadoop
operator|.
name|hive
operator|.
name|metastore
operator|.
name|api
operator|.
name|NoSuchObjectException
import|;
end_import

begin_comment
comment|/**  * Hive specific implementation of alter  */
end_comment

begin_class
specifier|public
class|class
name|HiveAlterHandler
implements|implements
name|AlterHandler
block|{
specifier|private
name|Configuration
name|hiveConf
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|HiveAlterHandler
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
name|Configuration
name|getConf
parameter_list|()
block|{
return|return
name|hiveConf
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"nls"
argument_list|)
specifier|public
name|void
name|setConf
parameter_list|(
name|Configuration
name|conf
parameter_list|)
block|{
name|hiveConf
operator|=
name|conf
expr_stmt|;
block|}
specifier|public
name|void
name|alterTable
parameter_list|(
name|RawStore
name|msdb
parameter_list|,
name|Warehouse
name|wh
parameter_list|,
name|String
name|dbname
parameter_list|,
name|String
name|name
parameter_list|,
name|Table
name|newt
parameter_list|)
throws|throws
name|InvalidOperationException
throws|,
name|MetaException
block|{
if|if
condition|(
name|newt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"New table is invalid: "
operator|+
name|newt
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|MetaStoreUtils
operator|.
name|validateName
argument_list|(
name|newt
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|||
operator|!
name|MetaStoreUtils
operator|.
name|validateColNames
argument_list|(
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|getCols
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
name|newt
operator|.
name|getTableName
argument_list|()
operator|+
literal|" is not a valid object name"
argument_list|)
throw|;
block|}
name|Path
name|srcPath
init|=
literal|null
decl_stmt|;
name|FileSystem
name|srcFs
init|=
literal|null
decl_stmt|;
name|Path
name|destPath
init|=
literal|null
decl_stmt|;
name|FileSystem
name|destFs
init|=
literal|null
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|String
name|oldTblLoc
init|=
literal|null
decl_stmt|;
name|String
name|newTblLoc
init|=
literal|null
decl_stmt|;
name|boolean
name|moveData
init|=
literal|false
decl_stmt|;
name|boolean
name|rename
init|=
literal|false
decl_stmt|;
name|Table
name|oldt
init|=
literal|null
decl_stmt|;
try|try
block|{
name|msdb
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|name
operator|=
name|name
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
name|dbname
operator|=
name|dbname
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
comment|// check if table with the new name already exists
if|if
condition|(
operator|!
name|newt
operator|.
name|getTableName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|name
argument_list|)
operator|||
operator|!
name|newt
operator|.
name|getDbName
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
name|dbname
argument_list|)
condition|)
block|{
if|if
condition|(
name|msdb
operator|.
name|getTable
argument_list|(
name|newt
operator|.
name|getDbName
argument_list|()
argument_list|,
name|newt
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"new table "
operator|+
name|newt
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|newt
operator|.
name|getTableName
argument_list|()
operator|+
literal|" already exists"
argument_list|)
throw|;
block|}
name|rename
operator|=
literal|true
expr_stmt|;
block|}
comment|// get old table
name|oldt
operator|=
name|msdb
operator|.
name|getTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldt
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"table "
operator|+
name|newt
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|newt
operator|.
name|getTableName
argument_list|()
operator|+
literal|" doesn't exist"
argument_list|)
throw|;
block|}
comment|// check that partition keys have not changed
if|if
condition|(
name|oldt
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|!=
name|newt
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|size
argument_list|()
operator|||
operator|!
name|oldt
operator|.
name|getPartitionKeys
argument_list|()
operator|.
name|containsAll
argument_list|(
name|newt
operator|.
name|getPartitionKeys
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"partition keys can not be changed."
argument_list|)
throw|;
block|}
comment|// if this alter is a rename, the table is not a virtual view, the user
comment|// didn't change the default location (or new location is empty), and
comment|// table is not an external table, that means useris asking metastore to
comment|// move data to the new location corresponding to the new name
if|if
condition|(
name|rename
operator|&&
operator|!
name|oldt
operator|.
name|getTableType
argument_list|()
operator|.
name|equals
argument_list|(
name|TableType
operator|.
name|VIRTUAL_VIEW
operator|.
name|toString
argument_list|()
argument_list|)
operator|&&
operator|(
name|oldt
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
operator|.
name|compareTo
argument_list|(
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|==
literal|0
operator|||
name|StringUtils
operator|.
name|isEmpty
argument_list|(
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
argument_list|)
operator|)
operator|&&
operator|!
name|MetaStoreUtils
operator|.
name|isExternalTable
argument_list|(
name|oldt
argument_list|)
condition|)
block|{
comment|// that means user is asking metastore to move data to new location
comment|// corresponding to the new name
comment|// get new location
name|newTblLoc
operator|=
name|wh
operator|.
name|getTablePath
argument_list|(
name|msdb
operator|.
name|getDatabase
argument_list|(
name|newt
operator|.
name|getDbName
argument_list|()
argument_list|)
argument_list|,
name|newt
operator|.
name|getTableName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|newt
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|newTblLoc
argument_list|)
expr_stmt|;
name|oldTblLoc
operator|=
name|oldt
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
expr_stmt|;
name|moveData
operator|=
literal|true
expr_stmt|;
comment|// check that destination does not exist otherwise we will be
comment|// overwriting data
name|srcPath
operator|=
operator|new
name|Path
argument_list|(
name|oldTblLoc
argument_list|)
expr_stmt|;
name|srcFs
operator|=
name|wh
operator|.
name|getFs
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|destPath
operator|=
operator|new
name|Path
argument_list|(
name|newTblLoc
argument_list|)
expr_stmt|;
name|destFs
operator|=
name|wh
operator|.
name|getFs
argument_list|(
name|destPath
argument_list|)
expr_stmt|;
comment|// check that src and dest are on the same file system
if|if
condition|(
name|srcFs
operator|!=
name|destFs
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"table new location "
operator|+
name|destPath
operator|+
literal|" is on a different file system than the old location "
operator|+
name|srcPath
operator|+
literal|". This operation is not supported"
argument_list|)
throw|;
block|}
try|try
block|{
name|srcFs
operator|.
name|exists
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
comment|// check that src exists and also checks
comment|// permissions necessary
if|if
condition|(
name|destFs
operator|.
name|exists
argument_list|(
name|destPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"New location for this table "
operator|+
name|newt
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|newt
operator|.
name|getTableName
argument_list|()
operator|+
literal|" already exists : "
operator|+
name|destPath
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|Warehouse
operator|.
name|closeFs
argument_list|(
name|srcFs
argument_list|)
expr_stmt|;
name|Warehouse
operator|.
name|closeFs
argument_list|(
name|destFs
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Unable to access new location "
operator|+
name|destPath
operator|+
literal|" for table "
operator|+
name|newt
operator|.
name|getDbName
argument_list|()
operator|+
literal|"."
operator|+
name|newt
operator|.
name|getTableName
argument_list|()
argument_list|)
throw|;
block|}
comment|// also the location field in partition
name|List
argument_list|<
name|Partition
argument_list|>
name|parts
init|=
name|msdb
operator|.
name|getPartitions
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|Partition
name|part
range|:
name|parts
control|)
block|{
name|String
name|oldPartLoc
init|=
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|Path
name|oldPartLocPath
init|=
operator|new
name|Path
argument_list|(
name|oldPartLoc
argument_list|)
decl_stmt|;
name|String
name|oldTblLocPath
init|=
operator|new
name|Path
argument_list|(
name|oldTblLoc
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|newTblLocPath
init|=
operator|new
name|Path
argument_list|(
name|newTblLoc
argument_list|)
operator|.
name|toUri
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|oldPartLoc
operator|.
name|contains
argument_list|(
name|oldTblLocPath
argument_list|)
condition|)
block|{
name|Path
name|newPartLocPath
init|=
literal|null
decl_stmt|;
name|URI
name|oldUri
init|=
name|oldPartLocPath
operator|.
name|toUri
argument_list|()
decl_stmt|;
name|String
name|newPath
init|=
name|oldUri
operator|.
name|getPath
argument_list|()
operator|.
name|replace
argument_list|(
name|oldTblLocPath
argument_list|,
name|newTblLocPath
argument_list|)
decl_stmt|;
name|newPartLocPath
operator|=
operator|new
name|Path
argument_list|(
name|oldUri
operator|.
name|getScheme
argument_list|()
argument_list|,
name|oldUri
operator|.
name|getAuthority
argument_list|()
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
name|part
operator|.
name|getSd
argument_list|()
operator|.
name|setLocation
argument_list|(
name|newPartLocPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|msdb
operator|.
name|alterPartition
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|part
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// now finally call alter table
name|msdb
operator|.
name|alterTable
argument_list|(
name|dbname
argument_list|,
name|name
argument_list|,
name|newt
argument_list|)
expr_stmt|;
comment|// commit the changes
name|success
operator|=
name|msdb
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Unable to change partition or table."
operator|+
literal|" Check metastore logs for detailed stack."
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NoSuchObjectException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Unable to change partition or table. Database "
operator|+
name|dbname
operator|+
literal|" does not exist"
operator|+
literal|" Check metastore logs for detailed stack."
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|msdb
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|MetaException
argument_list|(
literal|"Committing the alter table transaction was not successful."
argument_list|)
throw|;
block|}
if|if
condition|(
name|success
operator|&&
name|moveData
condition|)
block|{
comment|// change the file name in hdfs
comment|// check that src exists otherwise there is no need to copy the data
try|try
block|{
if|if
condition|(
name|srcFs
operator|.
name|exists
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
comment|// rename the src to destination
name|srcFs
operator|.
name|rename
argument_list|(
name|srcPath
argument_list|,
name|destPath
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|boolean
name|revertMetaDataTransaction
init|=
literal|false
decl_stmt|;
try|try
block|{
name|msdb
operator|.
name|openTransaction
argument_list|()
expr_stmt|;
name|msdb
operator|.
name|alterTable
argument_list|(
name|dbname
argument_list|,
name|newt
operator|.
name|getTableName
argument_list|()
argument_list|,
name|oldt
argument_list|)
expr_stmt|;
name|revertMetaDataTransaction
operator|=
name|msdb
operator|.
name|commitTransaction
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Reverting metadata opeation failed During HDFS operation failed"
argument_list|,
name|e1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|revertMetaDataTransaction
condition|)
block|{
name|msdb
operator|.
name|rollbackTransaction
argument_list|()
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|InvalidOperationException
argument_list|(
literal|"Unable to access old location "
operator|+
name|srcPath
operator|+
literal|" for table "
operator|+
name|dbname
operator|+
literal|"."
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

